{
  "hints": [],
  "groups": [
    {
      "sourceType": "org.axonframework.boot.AMQPProperties",
      "name": "axon.amqp",
      "type": "org.axonframework.boot.AMQPProperties"
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties",
      "name": "axon.distributed",
      "type": "org.axonframework.boot.DistributedCommandBusProperties"
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties",
      "name": "axon.distributed.jgroups",
      "sourceMethod": "getJgroups()",
      "type": "org.axonframework.boot.DistributedCommandBusProperties$JGroupsProperties"
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties$JGroupsProperties",
      "name": "axon.distributed.jgroups.gossip",
      "sourceMethod": "getGossip()",
      "type": "org.axonframework.boot.DistributedCommandBusProperties$JGroupsProperties$Gossip"
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties",
      "name": "axon.distributed.spring-cloud",
      "sourceMethod": "getSpringCloud()",
      "type": "org.axonframework.boot.DistributedCommandBusProperties$SpringCloudProperties"
    },
    {
      "sourceType": "org.axonframework.boot.EventProcessorProperties",
      "name": "axon.eventhandling",
      "type": "org.axonframework.boot.EventProcessorProperties"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties",
      "name": "axon.kafka",
      "type": "org.axonframework.boot.autoconfig.KafkaProperties"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties",
      "name": "axon.kafka.consumer",
      "sourceMethod": "getConsumer()",
      "type": "org.axonframework.boot.autoconfig.KafkaProperties$Consumer"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties",
      "name": "axon.kafka.fetcher",
      "sourceMethod": "getFetcher()",
      "type": "org.axonframework.boot.autoconfig.KafkaProperties$Fetcher"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties",
      "name": "axon.kafka.producer",
      "sourceMethod": "getProducer()",
      "type": "org.axonframework.boot.autoconfig.KafkaProperties$Producer"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties",
      "name": "axon.kafka.ssl",
      "sourceMethod": "getSsl()",
      "type": "org.axonframework.boot.autoconfig.KafkaProperties$Ssl"
    },
    {
      "sourceType": "org.axonframework.boot.MetricsProperties",
      "name": "axon.metrics",
      "type": "org.axonframework.boot.MetricsProperties"
    },
    {
      "sourceType": "org.axonframework.boot.MetricsProperties",
      "name": "axon.metrics.auto-configuration",
      "sourceMethod": "getAutoConfiguration()",
      "type": "org.axonframework.boot.MetricsProperties$AutoConfiguration"
    },
    {
      "sourceType": "org.axonframework.boot.SerializerProperties",
      "name": "axon.serializer",
      "type": "org.axonframework.boot.SerializerProperties"
    }
  ],
  "properties": [
    {
      "sourceType": "org.axonframework.boot.AMQPProperties",
      "defaultValue": true,
      "name": "axon.amqp.durable-messages",
      "description": "Whether the messages should be sent with the 'durable' flag. Defaults to true.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.axonframework.boot.AMQPProperties",
      "name": "axon.amqp.exchange",
      "description": "Name of the exchange to forward Event messages to.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.AMQPProperties",
      "name": "axon.amqp.transaction-mode",
      "description": "Defines how transactions around publishing should be managed (none (default), transactional or publisher-ack).",
      "type": "org.axonframework.boot.AMQPProperties$TransactionMode"
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties",
      "defaultValue": false,
      "name": "axon.distributed.enabled",
      "description": "Enables Distributed Command Bus configuration for this application.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties$JGroupsProperties",
      "defaultValue": "GLOBAL",
      "name": "axon.distributed.jgroups.bind-addr",
      "description": "The address of the network interface to bind JGroups to. Defaults to a global IP address of this node.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties$JGroupsProperties",
      "defaultValue": "7800",
      "name": "axon.distributed.jgroups.bind-port",
      "description": "Sets the initial port to bind the JGroups connection to. If this port is taken, JGroups will find the\n next available port.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties$JGroupsProperties",
      "defaultValue": "Axon",
      "name": "axon.distributed.jgroups.cluster-name",
      "description": "The name of the JGroups cluster to connect to. Defaults to \"Axon\".",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties$JGroupsProperties",
      "defaultValue": "default_tcp_gossip.xml",
      "name": "axon.distributed.jgroups.configuration-file",
      "description": "The JGroups configuration file to use. Defaults to a TCP Gossip based configuration.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties$JGroupsProperties",
      "defaultValue": false,
      "deprecated": true,
      "name": "axon.distributed.jgroups.enabled",
      "description": "Enables JGroups configuration for this application.\n\n @deprecated JGroups specific 'enabled' property is deprecated in favor of the\n DistributedCommandBusProperties' 'enabled' property.",
      "type": "java.lang.Boolean",
      "deprecation": {}
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties$JGroupsProperties$Gossip",
      "defaultValue": false,
      "name": "axon.distributed.jgroups.gossip.auto-start",
      "description": "Whether to automatically attempt to start a Gossip Routers. The host and port of the Gossip server\n are taken from the first define host in 'hosts'.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties$JGroupsProperties$Gossip",
      "defaultValue": "localhost[12001]",
      "name": "axon.distributed.jgroups.gossip.hosts",
      "description": "Defines the hosts of the Gossip Routers to connect to, in the form of host[port],...\n <p>\n If autoStart is set to {@code true}, the first host and port are used as bind address and bind port\n of the Gossip server to start.\n <p>\n Defaults to localhost[12001].",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties$JGroupsProperties",
      "defaultValue": 100,
      "deprecated": true,
      "name": "axon.distributed.jgroups.load-factor",
      "description": "Sets the loadFactor for this node to join with. The loadFactor sets the relative load this node will\n receive compared to other nodes in the cluster. Defaults to 100.\n\n @deprecated JGroups specific 'loadFactor' property is deprecated in favor of the\n DistributedCommandBusProperties' 'loadFactor' property.",
      "type": "java.lang.Integer",
      "deprecation": {}
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties",
      "defaultValue": 100,
      "name": "axon.distributed.load-factor",
      "description": "Sets the loadFactor for this node to join with. The loadFactor sets the relative load this node will\n receive compared to other nodes in the cluster. Defaults to 100.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties$SpringCloudProperties",
      "defaultValue": true,
      "name": "axon.distributed.spring-cloud.fallback-to-http-get",
      "description": "Enable a HTTP GET fallback strategy for retrieving the message routing information from other nodes in a\n distributed Axon set up. Defaults to \"true\".",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.axonframework.boot.DistributedCommandBusProperties$SpringCloudProperties",
      "defaultValue": "\/message-routing-information",
      "name": "axon.distributed.spring-cloud.fallback-url",
      "description": "The URL used to perform HTTP GET requests on for retrieving another nodes message routing information in a\n distributed Axon set up. Defaults to \"\/message-routing-information\".",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.EventProcessorProperties",
      "name": "axon.eventhandling.processors",
      "description": "The configuration of each of the processors. The key is the name of the processor, the value represents the\n settings to use for the processor with that name.",
      "type": "java.util.Map<java.lang.String,org.axonframework.boot.EventProcessorProperties.ProcessorSettings>"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties",
      "name": "axon.kafka.bootstrap-servers",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties",
      "name": "axon.kafka.client-id",
      "description": "Id to pass to the server when making requests; used for server-side logging.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Consumer",
      "name": "axon.kafka.consumer.auto-commit-interval",
      "description": "Frequency in milliseconds that the consumer offsets are auto-committed to Kafka\n if 'enable.auto.commit' true.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Consumer",
      "name": "axon.kafka.consumer.auto-offset-reset",
      "description": "What to do when there is no initial offset in Kafka or if the current offset\n does not exist any more on the server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Consumer",
      "name": "axon.kafka.consumer.bootstrap-servers",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Consumer",
      "name": "axon.kafka.consumer.client-id",
      "description": "Id to pass to the server when making requests; used for server-side logging.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Consumer",
      "name": "axon.kafka.consumer.enable-auto-commit",
      "description": "If true the consumer's offset will be periodically committed in the background.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Consumer",
      "name": "axon.kafka.consumer.fetch-max-wait",
      "description": "Maximum amount of time in milliseconds the server will block before answering\n the fetch request if there isn't sufficient data to immediately satisfy the\n requirement given by \"fetch.min.bytes\".",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Consumer",
      "name": "axon.kafka.consumer.fetch-min-size",
      "description": "Minimum amount of data the server should return for a fetch request in bytes.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Consumer",
      "name": "axon.kafka.consumer.group-id",
      "description": "Unique string that identifies the consumer group this consumer belongs to.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Consumer",
      "name": "axon.kafka.consumer.heartbeat-interval",
      "description": "Expected time in milliseconds between heartbeats to the consumer coordinator.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Consumer",
      "name": "axon.kafka.consumer.key-deserializer",
      "description": "Deserializer class for keys.",
      "type": "java.lang.Class<?>"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Consumer",
      "name": "axon.kafka.consumer.max-poll-records",
      "description": "Maximum number of records returned in a single call to poll().",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Consumer",
      "name": "axon.kafka.consumer.value-deserializer",
      "description": "Deserializer class for values.",
      "type": "java.lang.Class<?>"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties",
      "name": "axon.kafka.default-topic",
      "description": "Default topic to which messages will be sent.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Fetcher",
      "defaultValue": 10000,
      "name": "axon.kafka.fetcher.buffer-size",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Fetcher",
      "defaultValue": 3000,
      "name": "axon.kafka.fetcher.poll-timeout",
      "description": "The time, in milliseconds, spent waiting in poll if data is not available in the buffer.\n If 0, returns immediately with any records that are available currently in the buffer, else returns empty.\n Must not be negative.\n\n @see KafkaConsumer#poll(long)",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Producer",
      "name": "axon.kafka.producer.acks",
      "description": "Number of acknowledgments the producer requires the leader to have received\n before considering a request complete.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Producer",
      "name": "axon.kafka.producer.batch-size",
      "description": "Number of records to batch before sending.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Producer",
      "name": "axon.kafka.producer.bootstrap-servers",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Producer",
      "name": "axon.kafka.producer.buffer-memory",
      "description": "Total bytes of memory the producer can use to buffer records waiting to be sent\n to the server.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Producer",
      "name": "axon.kafka.producer.client-id",
      "description": "Id to pass to the server when making requests; used for server-side logging.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Producer",
      "name": "axon.kafka.producer.compression-type",
      "description": "Compression type for all data generated by the producer.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Producer",
      "name": "axon.kafka.producer.key-serializer",
      "description": "Serializer class for keys.",
      "type": "java.lang.Class<?>"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Producer",
      "name": "axon.kafka.producer.retries",
      "description": "When greater than zero, enables retrying of failed sends.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Producer",
      "name": "axon.kafka.producer.transaction-id-prefix",
      "description": "When non empty, enables transaction support for producer.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Producer",
      "name": "axon.kafka.producer.value-serializer",
      "description": "Serializer class for values.",
      "type": "java.lang.Class<?>"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties",
      "name": "axon.kafka.properties",
      "description": "Additional properties used to configure the client.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Ssl",
      "name": "axon.kafka.ssl.key-password",
      "description": "Password of the private key in the key store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Ssl",
      "name": "axon.kafka.ssl.keystore-location",
      "description": "Location of the key store file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Ssl",
      "name": "axon.kafka.ssl.keystore-password",
      "description": "Store password for the key store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Ssl",
      "name": "axon.kafka.ssl.truststore-location",
      "description": "Location of the trust store file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.axonframework.boot.autoconfig.KafkaProperties$Ssl",
      "name": "axon.kafka.ssl.truststore-password",
      "description": "Store password for the trust store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.axonframework.boot.MetricsProperties$AutoConfiguration",
      "defaultValue": true,
      "name": "axon.metrics.auto-configuration.enabled",
      "description": "Enables Metrics auto configuration for this application",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.axonframework.boot.SerializerProperties",
      "name": "axon.serializer.events",
      "description": "The type of serializer to use to serialize the payload and meta data of Event Messages. Defaults to the Message\n Serializer, or otherwise the General Serializer.",
      "type": "org.axonframework.boot.SerializerProperties$SerializerType"
    },
    {
      "sourceType": "org.axonframework.boot.SerializerProperties",
      "name": "axon.serializer.general",
      "description": "The type of serializer to use to serialize any type of object, for which no more specific serializer is\n configured. Defaults to an XStream based serializer.",
      "type": "org.axonframework.boot.SerializerProperties$SerializerType"
    },
    {
      "sourceType": "org.axonframework.boot.SerializerProperties",
      "name": "axon.serializer.messages",
      "description": "The type of serializer to use to serialize the payload and meta data of any type of Message as well as their\n responses. Defaults to the General Serializer.",
      "type": "org.axonframework.boot.SerializerProperties$SerializerType"
    }
  ]
}