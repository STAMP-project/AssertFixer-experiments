<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="org.zalando.riptide.RequestUriTest" time="0.536" tests="864" errors="0" skipped="336" failures="0">
  <properties>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="sun.cpu.isalist" value=""/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/root/workspace/zalando/riptide/385013973/riptide-core/target/test-classes:/root/workspace/zalando/riptide/385013973/riptide-core/target/classes:/root/./workspace/zalando/riptide/385013973/.m2/org/springframework/spring-web/4.3.14.RELEASE/spring-web-4.3.14.RELEASE.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/springframework/spring-aop/4.3.15.RELEASE/spring-aop-4.3.15.RELEASE.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/springframework/spring-beans/4.3.15.RELEASE/spring-beans-4.3.15.RELEASE.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/springframework/spring-core/4.3.15.RELEASE/spring-core-4.3.15.RELEASE.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/springframework/spring-context/4.3.15.RELEASE/spring-context-4.3.15.RELEASE.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/springframework/spring-expression/4.3.15.RELEASE/spring-expression-4.3.15.RELEASE.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/springframework/spring-test/4.3.14.RELEASE/spring-test-4.3.14.RELEASE.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/github/rest-driver/rest-client-driver/2.0.0/rest-client-driver-2.0.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/github/rest-driver/rest-driver-shared/2.0.0/rest-driver-shared-2.0.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/jayway/jsonpath/json-path/2.2.0/json-path-2.2.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/net/minidev/json-smart/2.2.1/json-smart-2.2.1.jar:/root/./workspace/zalando/riptide/385013973/.m2/net/minidev/accessors-smart/1.1/accessors-smart-1.1.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/ow2/asm/asm/5.0.3/asm-5.0.3.jar:/root/./workspace/zalando/riptide/385013973/.m2/xmlunit/xmlunit/1.4/xmlunit-1.4.jar:/root/./workspace/zalando/riptide/385013973/.m2/commons-codec/commons-codec/1.10/commons-codec-1.10.jar:/root/./workspace/zalando/riptide/385013973/.m2/commons-io/commons-io/2.4/commons-io-2.4.jar:/root/./workspace/zalando/riptide/385013973/.m2/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/eclipse/jetty/jetty-server/9.4.9.v20180320/jetty-server-9.4.9.v20180320.jar:/root/./workspace/zalando/riptide/385013973/.m2/javax/servlet/javax.servlet-api/3.1.0/javax.servlet-api-3.1.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/eclipse/jetty/jetty-http/9.4.9.v20180320/jetty-http-9.4.9.v20180320.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/eclipse/jetty/jetty-util/9.4.9.v20180320/jetty-util-9.4.9.v20180320.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/eclipse/jetty/jetty-io/9.4.9.v20180320/jetty-io-9.4.9.v20180320.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/zalando/faux-pas/0.7.0/faux-pas-0.7.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/google/gag/gag/1.0.1/gag-1.0.1.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/google/guava/guava/25.1-jre/guava-25.1-jre.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/checkerframework/checker-qual/2.0.0/checker-qual-2.0.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/projectlombok/lombok/1.16.22/lombok-1.16.22.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/slf4j/jcl-over-slf4j/1.7.25/jcl-over-slf4j-1.7.25.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/slf4j/slf4j-simple/1.7.25/slf4j-simple-1.7.25.jar:/root/./workspace/zalando/riptide/385013973/.m2/junit/junit/4.12/junit-4.12.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/hamcrest/hamcrest-junit/2.0.0.0/hamcrest-junit-2.0.0.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/hamcrest/java-hamcrest/2.0.0.0/java-hamcrest-2.0.0.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/hobsoft/hamcrest/hamcrest-compose/0.4.0/hamcrest-compose-0.4.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/mockito/mockito-core/2.18.3/mockito-core-2.18.3.jar:/root/./workspace/zalando/riptide/385013973/.m2/net/bytebuddy/byte-buddy/1.8.5/byte-buddy-1.8.5.jar:/root/./workspace/zalando/riptide/385013973/.m2/net/bytebuddy/byte-buddy-agent/1.8.5/byte-buddy-agent-1.8.5.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/fasterxml/jackson/core/jackson-databind/2.9.5/jackson-databind-2.9.5.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/fasterxml/jackson/core/jackson-annotations/2.9.5/jackson-annotations-2.9.5.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/fasterxml/jackson/core/jackson-core/2.9.5/jackson-core-2.9.5.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.9.5/jackson-module-parameter-names-2.9.5.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.9.5/jackson-datatype-jdk8-2.9.5.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/zalando/jackson-datatype-problem/0.20.3/jackson-datatype-problem-0.20.3.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/zalando/problem/0.20.3/problem-0.20.3.jar:"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="skip.bower" value="true"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="rest.driver.version" value="2.0.0"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="user.timezone" value="Europe/Paris"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="os.name" value="Linux"/>
    <property name="rat.skip" value="true"/>
    <property name="gpg.skip" value="true"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64"/>
    <property name="skip.gulp" value="true"/>
    <property name="sun.java.command" value="/root/workspace/zalando/riptide/385013973/riptide-core/target/surefire/surefirebooter1317159906806870468.jar /root/workspace/zalando/riptide/385013973/riptide-core/target/surefire 2018-05-29T06-42-06_886-jvmRun1 surefire4898375550810812706tmp surefire_06890666991434643324tmp"/>
    <property name="dependency-check.skip" value="true"/>
    <property name="surefire.test.class.path" value="/root/workspace/zalando/riptide/385013973/riptide-core/target/test-classes:/root/workspace/zalando/riptide/385013973/riptide-core/target/classes:/root/./workspace/zalando/riptide/385013973/.m2/org/springframework/spring-web/4.3.14.RELEASE/spring-web-4.3.14.RELEASE.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/springframework/spring-aop/4.3.15.RELEASE/spring-aop-4.3.15.RELEASE.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/springframework/spring-beans/4.3.15.RELEASE/spring-beans-4.3.15.RELEASE.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/springframework/spring-core/4.3.15.RELEASE/spring-core-4.3.15.RELEASE.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/springframework/spring-context/4.3.15.RELEASE/spring-context-4.3.15.RELEASE.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/springframework/spring-expression/4.3.15.RELEASE/spring-expression-4.3.15.RELEASE.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/springframework/spring-test/4.3.14.RELEASE/spring-test-4.3.14.RELEASE.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/github/rest-driver/rest-client-driver/2.0.0/rest-client-driver-2.0.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/github/rest-driver/rest-driver-shared/2.0.0/rest-driver-shared-2.0.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/jayway/jsonpath/json-path/2.2.0/json-path-2.2.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/net/minidev/json-smart/2.2.1/json-smart-2.2.1.jar:/root/./workspace/zalando/riptide/385013973/.m2/net/minidev/accessors-smart/1.1/accessors-smart-1.1.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/ow2/asm/asm/5.0.3/asm-5.0.3.jar:/root/./workspace/zalando/riptide/385013973/.m2/xmlunit/xmlunit/1.4/xmlunit-1.4.jar:/root/./workspace/zalando/riptide/385013973/.m2/commons-codec/commons-codec/1.10/commons-codec-1.10.jar:/root/./workspace/zalando/riptide/385013973/.m2/commons-io/commons-io/2.4/commons-io-2.4.jar:/root/./workspace/zalando/riptide/385013973/.m2/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/eclipse/jetty/jetty-server/9.4.9.v20180320/jetty-server-9.4.9.v20180320.jar:/root/./workspace/zalando/riptide/385013973/.m2/javax/servlet/javax.servlet-api/3.1.0/javax.servlet-api-3.1.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/eclipse/jetty/jetty-http/9.4.9.v20180320/jetty-http-9.4.9.v20180320.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/eclipse/jetty/jetty-util/9.4.9.v20180320/jetty-util-9.4.9.v20180320.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/eclipse/jetty/jetty-io/9.4.9.v20180320/jetty-io-9.4.9.v20180320.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/zalando/faux-pas/0.7.0/faux-pas-0.7.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/google/gag/gag/1.0.1/gag-1.0.1.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/google/guava/guava/25.1-jre/guava-25.1-jre.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/checkerframework/checker-qual/2.0.0/checker-qual-2.0.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/projectlombok/lombok/1.16.22/lombok-1.16.22.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/slf4j/jcl-over-slf4j/1.7.25/jcl-over-slf4j-1.7.25.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/slf4j/slf4j-simple/1.7.25/slf4j-simple-1.7.25.jar:/root/./workspace/zalando/riptide/385013973/.m2/junit/junit/4.12/junit-4.12.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/hamcrest/hamcrest-junit/2.0.0.0/hamcrest-junit-2.0.0.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/hamcrest/java-hamcrest/2.0.0.0/java-hamcrest-2.0.0.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/hobsoft/hamcrest/hamcrest-compose/0.4.0/hamcrest-compose-0.4.0.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/mockito/mockito-core/2.18.3/mockito-core-2.18.3.jar:/root/./workspace/zalando/riptide/385013973/.m2/net/bytebuddy/byte-buddy/1.8.5/byte-buddy-1.8.5.jar:/root/./workspace/zalando/riptide/385013973/.m2/net/bytebuddy/byte-buddy-agent/1.8.5/byte-buddy-agent-1.8.5.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/fasterxml/jackson/core/jackson-databind/2.9.5/jackson-databind-2.9.5.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/fasterxml/jackson/core/jackson-annotations/2.9.5/jackson-annotations-2.9.5.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/fasterxml/jackson/core/jackson-core/2.9.5/jackson-core-2.9.5.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/fasterxml/jackson/module/jackson-module-parameter-names/2.9.5/jackson-module-parameter-names-2.9.5.jar:/root/./workspace/zalando/riptide/385013973/.m2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.9.5/jackson-datatype-jdk8-2.9.5.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/zalando/jackson-datatype-problem/0.20.3/jackson-datatype-problem-0.20.3.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/zalando/problem/0.20.3/problem-0.20.3.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/root"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.home" value="/usr/lib/jvm/java-8-openjdk-amd64/jre"/>
    <property name="basedir" value="/root/workspace/zalando/riptide/385013973/riptide-core"/>
    <property name="file.separator" value="/"/>
    <property name="checkstyle.skip" value="true"/>
    <property name="line.separator" value="&#10;"/>
    <property name="skip.npm" value="true"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="skipITs" value="true"/>
    <property name="surefire.real.class.path" value="/root/workspace/zalando/riptide/385013973/riptide-core/target/surefire/surefirebooter1317159906806870468.jar:/root/./workspace/zalando/riptide/385013973/.m2/org/jacoco/org.jacoco.agent/0.8.1/org.jacoco.agent-0.8.1-runtime.jar"/>
    <property name="cobertura.skip" value="true"/>
    <property name="sun.boot.class.path" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="1.8.0_121-8u121-b13-1~bpo8+1-b13"/>
    <property name="user.name" value="root"/>
    <property name="findbugs.skip" value="true"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="3.10.0-862.3.2.el7.x86_64"/>
    <property name="java.endorsed.dirs" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="localRepository" value="/root/./workspace/zalando/riptide/385013973/.m2"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="jetty.git.hash" value="1f8159b1e4a42d3f79997021ea1609f2fbac6de5"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="java.version" value="1.8.0_121"/>
    <property name="user.dir" value="/root/workspace/zalando/riptide/385013973/riptide-core"/>
    <property name="os.arch" value="amd64"/>
    <property name="license.skip" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="25.121-b13"/>
    <property name="java.ext.dirs" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="maven.repo.local" value="/root/./workspace/zalando/riptide/385013973/.m2"/>
    <property name="enforcer.skip" value="true"/>
    <property name="java.class.version" value="52.0"/>
  </properties>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.015"/>
  <testcase name="shouldResolveUri[GET {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUri[HEAD {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[POST {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUri[DELETE {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[TRACE {https://example.com, RFC, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[GET {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[HEAD {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[POST {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUri[PUT {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUri[PATCH {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[DELETE {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[TRACE {https://example.com/, RFC, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com, RFC, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com/, RFC, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUri[PATCH {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com/, RFC, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com, RFC, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.007"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.007"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUri[PATCH {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.002"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com/api, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUri[POST {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.01"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUri[TRACE {https://example.com/api, RFC, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.013"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.009"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUri[PUT {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.009"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.009"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.011"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com/api/, RFC, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.008"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.013"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.013"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.013"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.015"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.01"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUri[PATCH {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.007"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.007"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[GET {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.009"/>
  <testcase name="shouldIgnoreEmptyUri[GET {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[HEAD {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com/api/, RFC, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.007"/>
  <testcase name="shouldResolveUriTemplate[POST {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.007"/>
  <testcase name="shouldIgnoreEmptyUri[POST {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUriTemplate[PUT {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[PATCH {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[PATCH {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[DELETE {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.007"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[TRACE {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {null, RFC, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[GET {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[GET {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[HEAD {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[POST {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[POST {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[PUT {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[PATCH {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[DELETE {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[TRACE {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {/foo, RFC, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[GET {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[GET {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[HEAD {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[HEAD {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[POST {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[POST {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldResolveUri[POST {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[PUT {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[PUT {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUri[PUT {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[PATCH {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[PATCH {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUri[PATCH {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[DELETE {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[DELETE {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUri[DELETE {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[OPTIONS {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUri[OPTIONS {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[TRACE {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[TRACE {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUri[HEAD {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {null, RFC, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[GET {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[GET {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldResolveUri[GET {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldResolveUriTemplate[HEAD {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[POST {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[POST {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[PUT {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldResolveUriTemplate[PATCH {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldResolveUriTemplate[DELETE {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[TRACE {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {null, RFC, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[GET {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[HEAD {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.002"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[POST {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldResolveUriTemplate[PUT {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[POST {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[PUT {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUri[POST {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[PATCH {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldResolveUri[PATCH {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[DELETE {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[TRACE {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.009"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {null, RFC, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUri[HEAD {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUri[POST {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUri[PUT {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUri[PATCH {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUri[DELETE {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUri[GET {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[HEAD {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[TRACE {https://example.com, APPEND, null, https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[POST {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[PUT {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[PATCH {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUri[DELETE {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[TRACE {https://example.com/, APPEND, null, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUri[GET {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.018"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.018"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.017"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.008"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.008"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com, APPEND, , https://example.com}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[GET {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.007"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.008"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUri[DELETE {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.011"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com/, APPEND, , https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.01"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUri[POST {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.008"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.009"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.009"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com/, APPEND, /, https://example.com/}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.org/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com, APPEND, https://example.org/foo, https://example.org/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com, APPEND, /foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com, APPEND, foo/bar, https://example.com/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com/api, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[PATCH {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.008"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com/api, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[HEAD {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUri[DELETE {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com/api/, APPEND, /foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[GET {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldIgnoreEmptyUri[GET {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[HEAD {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[POST {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[POST {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PUT {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PATCH {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUriTemplate[DELETE {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldResolveUri[DELETE {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.003"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[OPTIONS {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[TRACE {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo/bar&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {https://example.com/api/, APPEND, foo/bar, https://example.com/api/foo/bar}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[GET {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[GET {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[HEAD {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[POST {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldIgnoreEmptyUri[POST {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PUT {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[PATCH {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[DELETE {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.005"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.006"/>
  <testcase name="shouldResolveUriTemplate[TRACE {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;https://example.com/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {null, APPEND, https://example.com/foo, https://example.com/foo}]" classname="org.zalando.riptide.RequestUriTest" time="0.004"/>
  <testcase name="shouldResolveUriTemplate[GET {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[GET {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[POST {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[POST {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[HEAD {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[PUT {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[PATCH {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[DELETE {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldResolveUriTemplate[TRACE {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {/foo, APPEND, /, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[GET {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[GET {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUri[GET {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[HEAD {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[HEAD {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldResolveUri[HEAD {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[POST {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[POST {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldResolveUriTemplate[PUT {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[PUT {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUri[PUT {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[PATCH {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[PATCH {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUri[PATCH {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[DELETE {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[DELETE {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUri[DELETE {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[OPTIONS {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUri[OPTIONS {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[TRACE {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldResolveUriTemplate[TRACE {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldResolveUriTemplate[GET {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUri[TRACE {null, APPEND, null, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: null, expected: is not null"/>
  </testcase>
  <testcase name="shouldIgnoreEmptyUri[GET {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[HEAD {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[POST {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[POST {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[PUT {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[PATCH {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[DELETE {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[TRACE {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;/foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {null, APPEND, /foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[GET {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[GET {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[GET {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[HEAD {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[HEAD {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[HEAD {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[POST {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[POST {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[POST {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[PUT {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
  <testcase name="shouldIgnoreEmptyUri[PUT {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PUT {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[PATCH {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[PATCH {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[PATCH {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[DELETE {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[DELETE {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[DELETE {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[OPTIONS {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[OPTIONS {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[OPTIONS {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldResolveUriTemplate[TRACE {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0"/>
  <testcase name="shouldIgnoreEmptyUri[TRACE {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0">
    <skipped message="got: &quot;foo&quot;, expected: is null"/>
  </testcase>
  <testcase name="shouldResolveUri[TRACE {null, APPEND, foo, Exception}]" classname="org.zalando.riptide.RequestUriTest" time="0.001"/>
</testsuite>