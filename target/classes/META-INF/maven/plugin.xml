<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.5 -->

<plugin>
  <name>License Maven Plugin</name>
  <description>Maven plugin to download and collect license files from project dependencies.</description>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>license-maven-plugin</artifactId>
  <version>1.17-SNAPSHOT</version>
  <goalPrefix>license</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <mojos>
    <mojo>
      <goal>add-third-party</goal>
      <description>Goal to generate the third-party license file.
&lt;p&gt;
This file contains a list of the dependencies and their licenses.  Each dependency and its
license is displayed on a single line in the format
&lt;pre&gt;
  (&amp;lt;license-name&amp;gt;) &amp;lt;project-name&amp;gt; &amp;lt;groupId&amp;gt;:&amp;lt;artifactId&amp;gt;:&amp;lt;version&amp;gt; - &amp;lt;project-url&amp;gt;
&lt;/pre&gt;
The directory containing the license database file is added to the classpath as an additional resource.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-resources</phase>
      <implementation>org.codehaus.mojo.license.AddThirdPartyMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>acceptPomPackaging</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To execute or not this mojo if project packaging is pom.
&lt;p&gt;
&lt;strong&gt;Note:&lt;/strong&gt; The default value is {@code false}.</description>
        </parameter>
        <parameter>
          <name>bundleThirdPartyPath</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The path of the bundled third party file to produce when
{@link #generateBundle} is on.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; This option is not available for {@code pom} module types.</description>
        </parameter>
        <parameter>
          <name>dependencies</name>
          <type>java.util.Set</type>
          <required>true</required>
          <editable>false</editable>
          <description>The set of dependencies for the current project, used to locate license databases.</description>
        </parameter>
        <parameter>
          <name>deployMissingFile</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach the &apos;missing&apos; file as an additional artifact so that it is deployed in the deploy phase.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files.

&lt;b&gt;Note:&lt;/b&gt; If nothing is filled here, we will use the system
property {@code file.encoding}.</description>
        </parameter>
        <parameter>
          <name>excludeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Exclude transitive dependencies from excluded Artifacts</description>
        </parameter>
        <parameter>
          <name>excludedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some ArtifactsIds
This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some GroupIds
This is a regular expression that is applied to groupIds (not an ant pattern).</description>
        </parameter>
        <parameter>
          <name>excludedLicenses</name>
          <type>org.codehaus.mojo.license.AbstractAddThirdPartyMojo$ExcludedLicenses</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify some licenses to exclude.
&lt;p&gt;
If a such license is found then build will fail when property {@link #failOnBlacklist} is &lt;tt&gt;true&lt;/tt&gt;.
&lt;p&gt;
Since version {@code 1.4}, there are three ways to fill this parameter :
&lt;ul&gt;
&lt;li&gt;A simple string (separated by {@code |}), the way to use by property configuration:

&lt;pre&gt;
&amp;lt;excludedLicenses&amp;gt;licenseA|licenseB&amp;lt;/excludedLicenses&amp;gt;
&lt;/pre&gt;

or

&lt;pre&gt;
-Dlicense.excludedLicenses=licenseA|licenseB
&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;A list of string (can only be used in plugin configuration, not via property configuration)

&lt;pre&gt;
&amp;lt;excludedLicenses&amp;gt;
  &amp;lt;excludedLicense&amp;gt;licenseA&amp;lt;/excludedLicense&amp;gt;
  &amp;lt;excludedLicense&amp;gt;licenseB&amp;lt;/excludedLicense&amp;gt;
&amp;lt;/excludedLicenses&amp;gt;
&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;Since version {@code 1.15}&lt;br&gt;
a URL that contains a set of license names at the target source (only a single URL is accepted as
parameter)

&lt;pre&gt;
   &amp;lt;includedLicenses&amp;gt;http://my.license.host.com/my-blacklist&amp;lt;/includedLicenses&amp;gt;
&lt;/pre&gt;

the license-list on the given URL is expected to be list with a line-break after every entry e.g.:
&lt;ul style=&quot;list-style-type:none;&quot;&gt;
&lt;li&gt;The Apache Software License, Version 2.0&lt;/li&gt;
&lt;li&gt;Apache License, Version 2.0&lt;/li&gt;
&lt;li&gt;Bouncy Castle Licence&lt;/li&gt;
&lt;li&gt;MIT License&lt;/li&gt;
&lt;/ul&gt;
empty lines will be ignored.&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>excludedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some scopes.</description>
        </parameter>
        <parameter>
          <name>excludedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some types.</description>
        </parameter>
        <parameter>
          <name>failIfWarning</name>
          <type>boolean</type>
          <since>1.0</since>
          <deprecated>since 1.14, use now {@link #failOnMissing} or {@link #failOnBlacklist}.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if at least one dependency was detected without a license.</description>
        </parameter>
        <parameter>
          <name>failOnBlacklist</name>
          <type>boolean</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if at least one dependency was blacklisted.</description>
        </parameter>
        <parameter>
          <name>failOnMissing</name>
          <type>boolean</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if at least one dependency was detected without a license.</description>
        </parameter>
        <parameter>
          <name>fileTemplate</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Template used to build the third-party file.
&lt;p&gt;
(This template uses freemarker).
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; This property can either point to a file or a resource on
the classpath. In case it points to a file and this plugin is used within
a sub-module as part of a multi-module build, you need to make this path
resolvable, e.g. by prepending {@code basedir}.</description>
        </parameter>
        <parameter>
          <name>force</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To force generation of the third-party file even if everything is up to date.</description>
        </parameter>
        <parameter>
          <name>generateBundle</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to copy a bundled version of the third-party file. This is useful
to avoid for a final application collision name of third party file.
&lt;p&gt;
The file will be copied at the {@link #bundleThirdPartyPath} location.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include transitive dependencies when checking for missing licenses and downloading license files.
If this is &lt;tt&gt;false&lt;/tt&gt;, then only direct dependencies are examined.</description>
        </parameter>
        <parameter>
          <name>includedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some ArtifactsIds
This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some GroupIds
This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedLicenses</name>
          <type>org.codehaus.mojo.license.AbstractAddThirdPartyMojo$IncludedLicenses</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify some licenses to include.
&lt;p&gt;
If this parameter is filled and a license is not in this {@code whitelist} then build will fail when
property {@link #failOnBlacklist} is &lt;tt&gt;true&lt;/tt&gt;.
&lt;p&gt;
Since version {@code 1.4}, there are three ways to fill this parameter :
&lt;ul&gt;
&lt;li&gt;A simple string (separated by {@code |}), the way to use by property configuration:

&lt;pre&gt;
&amp;lt;includedLicenses&amp;gt;licenseA|licenseB&amp;lt;/includedLicenses&amp;gt;
&lt;/pre&gt;

or

&lt;pre&gt;
-Dlicense.includedLicenses=licenseA|licenseB
&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;A list of string (can only be used in plugin configuration, not via property configuration)

&lt;pre&gt;
&amp;lt;includedLicenses&amp;gt;
  &amp;lt;includedLicense&amp;gt;licenseA&amp;lt;/includedLicense&amp;gt;
  &amp;lt;includedLicenses&amp;gt;licenseB&amp;lt;/includedLicense&amp;gt;
&amp;lt;/includedLicenses&amp;gt;
&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;Since version {@code 1.15}&lt;br&gt;
a URL that contains a set of license names at the target source (only a single URL is accepted as
parameter)

&lt;pre&gt;
   &amp;lt;includedLicenses&amp;gt;http://my.license.host.com/my-whitelist&amp;lt;/includedLicenses&amp;gt;
&lt;/pre&gt;

the license-list on the given URL is expected to be list with a line-break after every entry e.g.:
&lt;ul style=&quot;list-style-type:none;&quot;&gt;
&lt;li&gt;The Apache Software License, Version 2.0&lt;/li&gt;
&lt;li&gt;Apache License, Version 2.0&lt;/li&gt;
&lt;li&gt;Bouncy Castle Licence&lt;/li&gt;
&lt;li&gt;MIT License&lt;/li&gt;
&lt;/ul&gt;
empty lines will be ignored.&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>includedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some scopes, if let empty then all scopes will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some types, if let empty then all types will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>licenseMerges</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To merge licenses in final file.
&lt;p&gt;
Each entry represents a merge (first license is main license to keep), licenses are separated by {@code |}.
&lt;p&gt;
Example :
&lt;p&gt;
&lt;pre&gt;
&amp;lt;licenseMerges&amp;gt;
&amp;lt;licenseMerge&amp;gt;The Apache Software License|Version 2.0,Apache License, Version 2.0&amp;lt;/licenseMerge&amp;gt;
&amp;lt;/licenseMerges&amp;gt;
&amp;lt;/pre&amp;gt;

&lt;b&gt;Note:&lt;/b&gt; This option will be overridden by {@link #licenseMergesUrl} if it is used by command line.</description>
        </parameter>
        <parameter>
          <name>licenseMergesFile</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <deprecated>prefer use now {@link #licenseMergesUrl}</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>The file with the merge licenses in order to be used by command line.
&lt;b&gt;Note:&lt;/b&gt; This option overrides {@link #licenseMerges}.</description>
        </parameter>
        <parameter>
          <name>licenseMergesUrl</name>
          <type>java.lang.String</type>
          <since>1.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Location of file with the merge licenses in order to be used by command line.
&lt;b&gt;Note:&lt;/b&gt; This option overrides {@link #licenseMerges}.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <since>1.0.0</since>
          <required>true</required>
          <editable>false</editable>
          <description>Local Repository.</description>
        </parameter>
        <parameter>
          <name>missingFile</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file to write with a license information template for dependencies with unknown license.</description>
        </parameter>
        <parameter>
          <name>missingFileUrl</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>The Url that holds the missing license dependency entries. This is an extension to {@link #missingFile}.
If set then the entries that will be found at this URL will be added additionally to the entries of the
missing file.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;NOTE:&lt;/b&gt;&lt;br&gt;
the response of the URL endpoint must return content that matches the THIRD-PARTY.properties file!</description>
        </parameter>
        <parameter>
          <name>missingLicensesFileArtifact</name>
          <type>java.lang.String</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>To resolve third party licenses from an artifact.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Directory where to generate files.</description>
        </parameter>
        <parameter>
          <name>overrideFile</name>
          <type>java.io.File</type>
          <since>1.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file to write with a license information template for dependencies to override.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>The reacted project.</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>1.0.0</since>
          <required>true</required>
          <editable>false</editable>
          <description>Remote repositories used for the project.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>Current maven session. (used to launch certain mojo once by build).</description>
        </parameter>
        <parameter>
          <name>skipAddThirdParty</name>
          <type>boolean</type>
          <since>1.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>To skip execution of this mojo.</description>
        </parameter>
        <parameter>
          <name>sortArtifactByName</name>
          <type>boolean</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to sort artifact by name in the generated third-party file.
&lt;p&gt;
If not then artifacts are sorted by &lt;pre&gt;groupId:artifactId:version&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>thirdPartyFilename</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>File where to write the third-party file.</description>
        </parameter>
        <parameter>
          <name>useMissingFile</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to use the missing licenses file to consolidate the THID-PARTY file.</description>
        </parameter>
        <parameter>
          <name>useRepositoryMissingFiles</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Load files supplying information for missing third party licenses from repositories.
The plugin looks for Maven artifacts with coordinates of the form G:A:V:properties:third-party, where
the group, artifact, and version are those for dependencies of your project,
while the type is &apos;properties&apos; and the classifier is &apos;third-party&apos;.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode.

&lt;b&gt;Note:&lt;/b&gt; Verbose mode is always on if you starts a debug maven instance
(says via {@code -X}).</description>
        </parameter>
      </parameters>
      <configuration>
        <acceptPomPackaging implementation="boolean" default-value="false">${license.acceptPomPackaging}</acceptPomPackaging>
        <bundleThirdPartyPath implementation="java.lang.String" default-value="META-INF/${project.artifactId}-THIRD-PARTY.txt">${license.bundleThirdPartyPath}</bundleThirdPartyPath>
        <dependencies implementation="java.util.Set">${project.artifacts}</dependencies>
        <deployMissingFile implementation="boolean" default-value="true">${license.deployMissingFile}</deployMissingFile>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <excludeTransitiveDependencies implementation="boolean" default-value="false">${license.excludeTransitiveDependencies}</excludeTransitiveDependencies>
        <excludedArtifacts implementation="java.lang.String">${license.excludedArtifacts}</excludedArtifacts>
        <excludedGroups implementation="java.lang.String">${license.excludedGroups}</excludedGroups>
        <excludedLicenses implementation="org.codehaus.mojo.license.AbstractAddThirdPartyMojo$ExcludedLicenses">${license.excludedLicenses}</excludedLicenses>
        <excludedScopes implementation="java.lang.String" default-value="system">${license.excludedScopes}</excludedScopes>
        <excludedTypes implementation="java.lang.String">${license.excludedTypes}</excludedTypes>
        <failIfWarning implementation="boolean" default-value="false">${license.failIfWarning}</failIfWarning>
        <failOnBlacklist implementation="boolean" default-value="false">${license.failOnBlacklist}</failOnBlacklist>
        <failOnMissing implementation="boolean" default-value="false">${license.failOnMissing}</failOnMissing>
        <fileTemplate implementation="java.lang.String" default-value="/org/codehaus/mojo/license/third-party-file.ftl">${license.fileTemplate}</fileTemplate>
        <force implementation="boolean" default-value="false">${license.force}</force>
        <generateBundle implementation="boolean" default-value="false">${license.generateBundle}</generateBundle>
        <includeTransitiveDependencies implementation="boolean" default-value="true">${license.includeTransitiveDependencies}</includeTransitiveDependencies>
        <includedArtifacts implementation="java.lang.String">${license.includedArtifacts}</includedArtifacts>
        <includedGroups implementation="java.lang.String">${license.includedGroups}</includedGroups>
        <includedLicenses implementation="org.codehaus.mojo.license.AbstractAddThirdPartyMojo$IncludedLicenses">${license.includedLicenses}</includedLicenses>
        <includedScopes implementation="java.lang.String">${license.includedScopes}</includedScopes>
        <includedTypes implementation="java.lang.String">${license.includedTypes}</includedTypes>
        <licenseMergesFile implementation="java.lang.String">${license.licenseMergesFile}</licenseMergesFile>
        <licenseMergesUrl implementation="java.lang.String">${license.licenseMergesUrl}</licenseMergesUrl>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <missingFile implementation="java.io.File" default-value="src/license/THIRD-PARTY.properties">${license.missingFile}</missingFile>
        <missingFileUrl implementation="java.lang.String">${license.missingFileUrl}</missingFileUrl>
        <missingLicensesFileArtifact implementation="java.lang.String">${license.missingLicensesFileArtifact}</missingLicensesFileArtifact>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/license">${license.outputDirectory}</outputDirectory>
        <overrideFile implementation="java.io.File" default-value="src/license/override-THIRD-PARTY.properties">${license.overrideFile}</overrideFile>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <remoteRepositories implementation="java.util.List">${project.remoteArtifactRepositories}</remoteRepositories>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skipAddThirdParty implementation="boolean" default-value="false">${license.skipAddThirdParty}</skipAddThirdParty>
        <sortArtifactByName implementation="boolean" default-value="false">${license.sortArtifactByName}</sortArtifactByName>
        <thirdPartyFilename implementation="java.lang.String" default-value="THIRD-PARTY.txt">${license.thirdPartyFilename}</thirdPartyFilename>
        <useMissingFile implementation="boolean" default-value="false">${license.useMissingFile}</useMissingFile>
        <useRepositoryMissingFiles implementation="boolean" default-value="true">${license.useRepositoryMissingFiles}</useRepositoryMissingFiles>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.mojo.license.api.DependenciesTool</role>
          <field-name>dependenciesTool</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.mojo.license.api.ThirdPartyTool</role>
          <field-name>thirdPartyTool</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>aggregate-add-third-party</goal>
      <description>This goal forks executions of the add-third-party goal for all the leaf projects
of the tree of modules below the point where it is executed. Note that this
plugin sets a specific name, &apos;add-third-party&apos;, for the forked executions in the
individual projects. From command level, then
even though the execution of this goal is named &apos;default-cli&apos;, the forked executions
have the name &apos;add-third-party&apos;. Thus, to use the &lt;tt&gt;pluginManagement&lt;/tt&gt; element of
the POM to set options, you have to name the execution &apos;add-third-party&apos;,
not &apos;default-cli&apos;.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-resources</phase>
      <implementation>org.codehaus.mojo.license.AggregatorAddThirdPartyMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>acceptPomPackaging</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To execute or not this mojo if project packaging is pom.
&lt;p&gt;
&lt;strong&gt;Note:&lt;/strong&gt; The default value is {@code false}.</description>
        </parameter>
        <parameter>
          <name>aggregateMissingLicensesFile</name>
          <type>java.io.File</type>
          <since>1.11</since>
          <deprecated>since 1.14, please use now {@link #missingFile}.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>To resolve third party licenses from a file.</description>
        </parameter>
        <parameter>
          <name>aggregateMissingLicensesFileArtifact</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <deprecated>since 1.14, please use now {@link #missingLicensesFileArtifact}</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>To resolve third party licenses from an artifact.</description>
        </parameter>
        <parameter>
          <name>bundleThirdPartyPath</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The path of the bundled third party file to produce when
{@link #generateBundle} is on.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; This option is not available for {@code pom} module types.</description>
        </parameter>
        <parameter>
          <name>dependencies</name>
          <type>java.util.Set</type>
          <required>true</required>
          <editable>false</editable>
          <description>The set of dependencies for the current project, used to locate license databases.</description>
        </parameter>
        <parameter>
          <name>deployMissingFile</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach the &apos;missing&apos; file as an additional artifact so that it is deployed in the deploy phase.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files.

&lt;b&gt;Note:&lt;/b&gt; If nothing is filled here, we will use the system
property {@code file.encoding}.</description>
        </parameter>
        <parameter>
          <name>excludeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Exclude transitive dependencies from excluded Artifacts</description>
        </parameter>
        <parameter>
          <name>excludedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some ArtifactsIds
This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some GroupIds
This is a regular expression that is applied to groupIds (not an ant pattern).</description>
        </parameter>
        <parameter>
          <name>excludedLicenses</name>
          <type>org.codehaus.mojo.license.AbstractAddThirdPartyMojo$ExcludedLicenses</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify some licenses to exclude.
&lt;p&gt;
If a such license is found then build will fail when property {@link #failOnBlacklist} is &lt;tt&gt;true&lt;/tt&gt;.
&lt;p&gt;
Since version {@code 1.4}, there are three ways to fill this parameter :
&lt;ul&gt;
&lt;li&gt;A simple string (separated by {@code |}), the way to use by property configuration:

&lt;pre&gt;
&amp;lt;excludedLicenses&amp;gt;licenseA|licenseB&amp;lt;/excludedLicenses&amp;gt;
&lt;/pre&gt;

or

&lt;pre&gt;
-Dlicense.excludedLicenses=licenseA|licenseB
&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;A list of string (can only be used in plugin configuration, not via property configuration)

&lt;pre&gt;
&amp;lt;excludedLicenses&amp;gt;
  &amp;lt;excludedLicense&amp;gt;licenseA&amp;lt;/excludedLicense&amp;gt;
  &amp;lt;excludedLicense&amp;gt;licenseB&amp;lt;/excludedLicense&amp;gt;
&amp;lt;/excludedLicenses&amp;gt;
&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;Since version {@code 1.15}&lt;br&gt;
a URL that contains a set of license names at the target source (only a single URL is accepted as
parameter)

&lt;pre&gt;
   &amp;lt;includedLicenses&amp;gt;http://my.license.host.com/my-blacklist&amp;lt;/includedLicenses&amp;gt;
&lt;/pre&gt;

the license-list on the given URL is expected to be list with a line-break after every entry e.g.:
&lt;ul style=&quot;list-style-type:none;&quot;&gt;
&lt;li&gt;The Apache Software License, Version 2.0&lt;/li&gt;
&lt;li&gt;Apache License, Version 2.0&lt;/li&gt;
&lt;li&gt;Bouncy Castle Licence&lt;/li&gt;
&lt;li&gt;MIT License&lt;/li&gt;
&lt;/ul&gt;
empty lines will be ignored.&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>excludedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some scopes.</description>
        </parameter>
        <parameter>
          <name>excludedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some types.</description>
        </parameter>
        <parameter>
          <name>failIfWarning</name>
          <type>boolean</type>
          <since>1.0</since>
          <deprecated>since 1.14, use now {@link #failOnMissing} or {@link #failOnBlacklist}.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if at least one dependency was detected without a license.</description>
        </parameter>
        <parameter>
          <name>failOnBlacklist</name>
          <type>boolean</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if at least one dependency was blacklisted.</description>
        </parameter>
        <parameter>
          <name>failOnMissing</name>
          <type>boolean</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if at least one dependency was detected without a license.</description>
        </parameter>
        <parameter>
          <name>fileTemplate</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Template used to build the third-party file.
&lt;p&gt;
(This template uses freemarker).
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; This property can either point to a file or a resource on
the classpath. In case it points to a file and this plugin is used within
a sub-module as part of a multi-module build, you need to make this path
resolvable, e.g. by prepending {@code basedir}.</description>
        </parameter>
        <parameter>
          <name>force</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To force generation of the third-party file even if everything is up to date.</description>
        </parameter>
        <parameter>
          <name>generateBundle</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to copy a bundled version of the third-party file. This is useful
to avoid for a final application collision name of third party file.
&lt;p&gt;
The file will be copied at the {@link #bundleThirdPartyPath} location.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include transitive dependencies when checking for missing licenses and downloading license files.
If this is &lt;tt&gt;false&lt;/tt&gt;, then only direct dependencies are examined.</description>
        </parameter>
        <parameter>
          <name>includedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some ArtifactsIds
This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some GroupIds
This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedLicenses</name>
          <type>org.codehaus.mojo.license.AbstractAddThirdPartyMojo$IncludedLicenses</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify some licenses to include.
&lt;p&gt;
If this parameter is filled and a license is not in this {@code whitelist} then build will fail when
property {@link #failOnBlacklist} is &lt;tt&gt;true&lt;/tt&gt;.
&lt;p&gt;
Since version {@code 1.4}, there are three ways to fill this parameter :
&lt;ul&gt;
&lt;li&gt;A simple string (separated by {@code |}), the way to use by property configuration:

&lt;pre&gt;
&amp;lt;includedLicenses&amp;gt;licenseA|licenseB&amp;lt;/includedLicenses&amp;gt;
&lt;/pre&gt;

or

&lt;pre&gt;
-Dlicense.includedLicenses=licenseA|licenseB
&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;A list of string (can only be used in plugin configuration, not via property configuration)

&lt;pre&gt;
&amp;lt;includedLicenses&amp;gt;
  &amp;lt;includedLicense&amp;gt;licenseA&amp;lt;/includedLicense&amp;gt;
  &amp;lt;includedLicenses&amp;gt;licenseB&amp;lt;/includedLicense&amp;gt;
&amp;lt;/includedLicenses&amp;gt;
&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;Since version {@code 1.15}&lt;br&gt;
a URL that contains a set of license names at the target source (only a single URL is accepted as
parameter)

&lt;pre&gt;
   &amp;lt;includedLicenses&amp;gt;http://my.license.host.com/my-whitelist&amp;lt;/includedLicenses&amp;gt;
&lt;/pre&gt;

the license-list on the given URL is expected to be list with a line-break after every entry e.g.:
&lt;ul style=&quot;list-style-type:none;&quot;&gt;
&lt;li&gt;The Apache Software License, Version 2.0&lt;/li&gt;
&lt;li&gt;Apache License, Version 2.0&lt;/li&gt;
&lt;li&gt;Bouncy Castle Licence&lt;/li&gt;
&lt;li&gt;MIT License&lt;/li&gt;
&lt;/ul&gt;
empty lines will be ignored.&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>includedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some scopes, if let empty then all scopes will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some types, if let empty then all types will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>licenseMerges</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To merge licenses in final file.
&lt;p&gt;
Each entry represents a merge (first license is main license to keep), licenses are separated by {@code |}.
&lt;p&gt;
Example :
&lt;p&gt;
&lt;pre&gt;
&amp;lt;licenseMerges&amp;gt;
&amp;lt;licenseMerge&amp;gt;The Apache Software License|Version 2.0,Apache License, Version 2.0&amp;lt;/licenseMerge&amp;gt;
&amp;lt;/licenseMerges&amp;gt;
&amp;lt;/pre&amp;gt;

&lt;b&gt;Note:&lt;/b&gt; This option will be overridden by {@link #licenseMergesUrl} if it is used by command line.</description>
        </parameter>
        <parameter>
          <name>licenseMergesFile</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <deprecated>prefer use now {@link #licenseMergesUrl}</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>The file with the merge licenses in order to be used by command line.
&lt;b&gt;Note:&lt;/b&gt; This option overrides {@link #licenseMerges}.</description>
        </parameter>
        <parameter>
          <name>licenseMergesUrl</name>
          <type>java.lang.String</type>
          <since>1.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Location of file with the merge licenses in order to be used by command line.
&lt;b&gt;Note:&lt;/b&gt; This option overrides {@link #licenseMerges}.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <since>1.0.0</since>
          <required>true</required>
          <editable>false</editable>
          <description>Local Repository.</description>
        </parameter>
        <parameter>
          <name>missingFile</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file to write with a license information template for dependencies with unknown license.</description>
        </parameter>
        <parameter>
          <name>missingFileUrl</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>The Url that holds the missing license dependency entries. This is an extension to {@link #missingFile}.
If set then the entries that will be found at this URL will be added additionally to the entries of the
missing file.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;NOTE:&lt;/b&gt;&lt;br&gt;
the response of the URL endpoint must return content that matches the THIRD-PARTY.properties file!</description>
        </parameter>
        <parameter>
          <name>missingLicensesFileArtifact</name>
          <type>java.lang.String</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>To resolve third party licenses from an artifact.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Directory where to generate files.</description>
        </parameter>
        <parameter>
          <name>overrideFile</name>
          <type>java.io.File</type>
          <since>1.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file to write with a license information template for dependencies to override.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>The reacted project.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>true</required>
          <editable>false</editable>
          <description>The projects in the reactor.</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>1.0.0</since>
          <required>true</required>
          <editable>false</editable>
          <description>Remote repositories used for the project.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>Current maven session. (used to launch certain mojo once by build).</description>
        </parameter>
        <parameter>
          <name>skipAggregateAddThirdParty</name>
          <type>boolean</type>
          <since>1.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>To skip execution of this mojo.</description>
        </parameter>
        <parameter>
          <name>sortArtifactByName</name>
          <type>boolean</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to sort artifact by name in the generated third-party file.
&lt;p&gt;
If not then artifacts are sorted by &lt;pre&gt;groupId:artifactId:version&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>thirdPartyFilename</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>File where to write the third-party file.</description>
        </parameter>
        <parameter>
          <name>useMissingFile</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to use the missing licenses file to consolidate the THID-PARTY file.</description>
        </parameter>
        <parameter>
          <name>useRepositoryMissingFiles</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Load files supplying information for missing third party licenses from repositories.
The plugin looks for Maven artifacts with coordinates of the form G:A:V:properties:third-party, where
the group, artifact, and version are those for dependencies of your project,
while the type is &apos;properties&apos; and the classifier is &apos;third-party&apos;.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode.

&lt;b&gt;Note:&lt;/b&gt; Verbose mode is always on if you starts a debug maven instance
(says via {@code -X}).</description>
        </parameter>
      </parameters>
      <configuration>
        <acceptPomPackaging implementation="boolean" default-value="false">${license.acceptPomPackaging}</acceptPomPackaging>
        <aggregateMissingLicensesFile implementation="java.io.File" default-value="${project.basedir}/src/license/THIRD-PARTY.properties">${license.aggregateMissingLicensesFile}</aggregateMissingLicensesFile>
        <aggregateMissingLicensesFileArtifact implementation="java.lang.String">${license.aggregateMissingLicensesFileArtifact}</aggregateMissingLicensesFileArtifact>
        <bundleThirdPartyPath implementation="java.lang.String" default-value="META-INF/${project.artifactId}-THIRD-PARTY.txt">${license.bundleThirdPartyPath}</bundleThirdPartyPath>
        <dependencies implementation="java.util.Set">${project.artifacts}</dependencies>
        <deployMissingFile implementation="boolean" default-value="true">${license.deployMissingFile}</deployMissingFile>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <excludeTransitiveDependencies implementation="boolean" default-value="false">${license.excludeTransitiveDependencies}</excludeTransitiveDependencies>
        <excludedArtifacts implementation="java.lang.String">${license.excludedArtifacts}</excludedArtifacts>
        <excludedGroups implementation="java.lang.String">${license.excludedGroups}</excludedGroups>
        <excludedLicenses implementation="org.codehaus.mojo.license.AbstractAddThirdPartyMojo$ExcludedLicenses">${license.excludedLicenses}</excludedLicenses>
        <excludedScopes implementation="java.lang.String" default-value="system">${license.excludedScopes}</excludedScopes>
        <excludedTypes implementation="java.lang.String">${license.excludedTypes}</excludedTypes>
        <failIfWarning implementation="boolean" default-value="false">${license.failIfWarning}</failIfWarning>
        <failOnBlacklist implementation="boolean" default-value="false">${license.failOnBlacklist}</failOnBlacklist>
        <failOnMissing implementation="boolean" default-value="false">${license.failOnMissing}</failOnMissing>
        <fileTemplate implementation="java.lang.String" default-value="/org/codehaus/mojo/license/third-party-file.ftl">${license.fileTemplate}</fileTemplate>
        <force implementation="boolean" default-value="false">${license.force}</force>
        <generateBundle implementation="boolean" default-value="false">${license.generateBundle}</generateBundle>
        <includeTransitiveDependencies implementation="boolean" default-value="true">${license.includeTransitiveDependencies}</includeTransitiveDependencies>
        <includedArtifacts implementation="java.lang.String">${license.includedArtifacts}</includedArtifacts>
        <includedGroups implementation="java.lang.String">${license.includedGroups}</includedGroups>
        <includedLicenses implementation="org.codehaus.mojo.license.AbstractAddThirdPartyMojo$IncludedLicenses">${license.includedLicenses}</includedLicenses>
        <includedScopes implementation="java.lang.String">${license.includedScopes}</includedScopes>
        <includedTypes implementation="java.lang.String">${license.includedTypes}</includedTypes>
        <licenseMergesFile implementation="java.lang.String">${license.licenseMergesFile}</licenseMergesFile>
        <licenseMergesUrl implementation="java.lang.String">${license.licenseMergesUrl}</licenseMergesUrl>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <missingFile implementation="java.io.File" default-value="src/license/THIRD-PARTY.properties">${license.missingFile}</missingFile>
        <missingFileUrl implementation="java.lang.String">${license.missingFileUrl}</missingFileUrl>
        <missingLicensesFileArtifact implementation="java.lang.String">${license.missingLicensesFileArtifact}</missingLicensesFileArtifact>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/license">${license.outputDirectory}</outputDirectory>
        <overrideFile implementation="java.io.File" default-value="src/license/override-THIRD-PARTY.properties">${license.overrideFile}</overrideFile>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <remoteRepositories implementation="java.util.List">${project.remoteArtifactRepositories}</remoteRepositories>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skipAggregateAddThirdParty implementation="boolean" default-value="false">${license.skipAggregateAddThirdParty}</skipAggregateAddThirdParty>
        <sortArtifactByName implementation="boolean" default-value="false">${license.sortArtifactByName}</sortArtifactByName>
        <thirdPartyFilename implementation="java.lang.String" default-value="THIRD-PARTY.txt">${license.thirdPartyFilename}</thirdPartyFilename>
        <useMissingFile implementation="boolean" default-value="false">${license.useMissingFile}</useMissingFile>
        <useRepositoryMissingFiles implementation="boolean" default-value="true">${license.useRepositoryMissingFiles}</useRepositoryMissingFiles>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.mojo.license.api.DependenciesTool</role>
          <field-name>dependenciesTool</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.mojo.license.api.ThirdPartyTool</role>
          <field-name>thirdPartyTool</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>aggregate-download-licenses</goal>
      <description>Download the license files of all aggregated dependencies of the current project, and generate a summary file containing a list
of all dependencies and their licenses.

Created on 23/05/16.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>org.codehaus.mojo.license.AggregateDownloadLicensesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.10</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>excludeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Exclude transitive dependencies from excluded artifacts.</description>
        </parameter>
        <parameter>
          <name>excludedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some ArtifactsIds
This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some GroupIds
This is a regular expression that is applied to groupIds (not an ant pattern).</description>
        </parameter>
        <parameter>
          <name>excludedScopes</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some scopes.</description>
        </parameter>
        <parameter>
          <name>excludedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some types.</description>
        </parameter>
        <parameter>
          <name>executeOnlyOnRootModule</name>
          <alias>aggregateDownloadLicenses.executeOnlyOnRootModule</alias>
          <type>boolean</type>
          <since>1.10</since>
          <required>false</required>
          <editable>true</editable>
          <description>To generate report only on root module.

Default value is {@code true}, since aggregate mojo should only be executed on root module.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include transitive dependencies when downloading license files.</description>
        </parameter>
        <parameter>
          <name>includedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some ArtifactsIds
This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedGroups</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some GroupIds
This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedScopes</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some scopes, if let empty then all scopes will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some types, if let empty then all types will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>licensesConfigFile</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Input file containing a mapping between each dependency and it&apos;s license information.</description>
        </parameter>
        <parameter>
          <name>licensesOutputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The directory to which the dependency licenses should be written.</description>
        </parameter>
        <parameter>
          <name>licensesOutputFile</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The output file containing a mapping between each dependency and it&apos;s license information.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>Location of the local repository.</description>
        </parameter>
        <parameter>
          <name>offline</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Settings offline flag (will not download anything if setted to true).</description>
        </parameter>
        <parameter>
          <name>organizeLicensesByDependencies</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to organize the licenses by dependencies. When this is done, each dependency will
get its full license file, even if already downloaded for another dependency.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>proxies</name>
          <type>java.util.List</type>
          <since>1.4</since>
          <required>false</required>
          <editable>false</editable>
          <description>Get declared proxies from the {@code settings.xml} file.</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Don&apos;t show warnings about bad or missing license files.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <since>1.10</since>
          <required>true</required>
          <editable>false</editable>
          <description>The projects in the reactor.</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>List of Remote Repositories used by the resolver</description>
        </parameter>
        <parameter>
          <name>skipAggregateDownloadLicenses</name>
          <type>boolean</type>
          <since>1.10</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip to generate the report.</description>
        </parameter>
        <parameter>
          <name>sortByGroupIdAndArtifactId</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <excludeTransitiveDependencies implementation="boolean" default-value="false">${license.excludeTransitiveDependencies}</excludeTransitiveDependencies>
        <excludedArtifacts implementation="java.lang.String">${license.excludedArtifacts}</excludedArtifacts>
        <excludedGroups implementation="java.lang.String">${license.excludedGroups}</excludedGroups>
        <excludedScopes implementation="java.lang.String" default-value="system">${license.excludedScopes}</excludedScopes>
        <excludedTypes implementation="java.lang.String">${license.excludedTypes}</excludedTypes>
        <executeOnlyOnRootModule implementation="boolean" default-value="true">${license.executeOnlyOnRootModule}</executeOnlyOnRootModule>
        <includeTransitiveDependencies implementation="boolean" default-value="true"/>
        <includedArtifacts implementation="java.lang.String">${license.includedArtifacts}</includedArtifacts>
        <includedGroups implementation="java.lang.String">${license.includedGroups}</includedGroups>
        <includedScopes implementation="java.lang.String">${license.includedScopes}</includedScopes>
        <includedTypes implementation="java.lang.String">${license.includedTypes}</includedTypes>
        <licensesConfigFile implementation="java.io.File" default-value="${project.basedir}/src/license/licenses.xml">${licensesConfigFile}</licensesConfigFile>
        <licensesOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-resources/licenses">${licensesOutputDirectory}</licensesOutputDirectory>
        <licensesOutputFile implementation="java.io.File" default-value="${project.build.directory}/generated-resources/licenses.xml">${licensesOutputFile}</licensesOutputFile>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository" default-value="${localRepository}"/>
        <offline implementation="boolean" default-value="${settings.offline}"/>
        <organizeLicensesByDependencies implementation="boolean" default-value="false">${license.organizeLicensesByDependencies}</organizeLicensesByDependencies>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <proxies implementation="java.util.List" default-value="${settings.proxies}"/>
        <quiet implementation="boolean" default-value="false"/>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <remoteRepositories implementation="java.util.List" default-value="${project.remoteArtifactRepositories}"/>
        <skipAggregateDownloadLicenses implementation="boolean" default-value="false">${license.skipAggregateDownloadLicenses}</skipAggregateDownloadLicenses>
        <sortByGroupIdAndArtifactId implementation="boolean" default-value="false">${license.sortByGroupIdAndArtifactId}</sortByGroupIdAndArtifactId>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.mojo.license.api.DependenciesTool</role>
          <field-name>dependenciesTool</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>aggregate-third-party-report</goal>
      <description>Generates a report of all third-parties detected in the module.

Created on 22/05/16.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.AggregatorThirdPartyReportMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.10</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; If nothing is filled here, we will use the system
property {@code file.encoding}.</description>
        </parameter>
        <parameter>
          <name>excludeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude transitive dependencies from excluded artifacts.</description>
        </parameter>
        <parameter>
          <name>excludedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some ArtifactsIds</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some GroupIds</description>
        </parameter>
        <parameter>
          <name>excludedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some scopes.</description>
        </parameter>
        <parameter>
          <name>excludedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some types.</description>
        </parameter>
        <parameter>
          <name>executeOnlyOnRootModule</name>
          <alias>aggregateThirdPartyReport.executeOnlyOnRootModule</alias>
          <type>boolean</type>
          <since>1.10</since>
          <required>false</required>
          <editable>true</editable>
          <description>To generate report only on root module.

Default value is {@code true}, since aggregate report should only be executed on root module.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include transitive dependencies when looking for missing licenses and downloading license files.</description>
        </parameter>
        <parameter>
          <name>includedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some ArtifactsIds</description>
        </parameter>
        <parameter>
          <name>includedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some GroupIds</description>
        </parameter>
        <parameter>
          <name>includedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some scopes, if let empty then all scopes will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some types, if let empty then all types will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>inputEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>Specifies the input encoding.</description>
        </parameter>
        <parameter>
          <name>licenseMerges</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To merge licenses in final file.
&lt;p&gt;
Each entry represents a merge (first license is main license to keep), licenses are separated by {@code |}.
&lt;p&gt;
Example :
&lt;p&gt;
&lt;pre&gt;
&amp;lt;licenseMerges&amp;gt;
&amp;lt;licenseMerge&amp;gt;The Apache Software License|Version 2.0,Apache License, Version 2.0&amp;lt;/licenseMerge&amp;gt;
&amp;lt;/licenseMerges&amp;gt;
&amp;lt;/pre&amp;gt;</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <since>1.1</since>
          <required>true</required>
          <editable>false</editable>
          <description>Local Repository.</description>
        </parameter>
        <parameter>
          <name>missingFile</name>
          <type>java.io.File</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file where to fill the license for dependencies with unknwon license.</description>
        </parameter>
        <parameter>
          <name>missingFileUrl</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>The Url that holds the missing license dependency entries. This is an extension to {@link #missingFile}.
If set then the entries that will be found at this URL will be added additionally to the entries of the
missing file.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;NOTE:&lt;/b&gt;&lt;br&gt;
the response of the URL endpoint must return content that matches the THIRD-PARTY.properties file!</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.1</since>
          <required>true</required>
          <editable>true</editable>
          <description>The output directory for the report. Note that this parameter is only evaluated if the goal is run directly from
the command line. If the goal is run indirectly as part of a site generation, the output directory configured in
the Maven Site Plugin is used instead.</description>
        </parameter>
        <parameter>
          <name>outputEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>Specifies the output encoding.</description>
        </parameter>
        <parameter>
          <name>overrideFile</name>
          <type>java.io.File</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file where to fill the override license for dependencies.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.1</since>
          <required>false</required>
          <editable>false</editable>
          <description>The Maven Project.</description>
        </parameter>
        <parameter>
          <name>reactorProjects</name>
          <type>java.util.List</type>
          <since>1.10</since>
          <required>true</required>
          <editable>false</editable>
          <description>The projects in the reactor.</description>
        </parameter>
        <parameter>
          <name>skipAggregateThirdPartyReport</name>
          <type>boolean</type>
          <since>1.10</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip to generate the report.</description>
        </parameter>
        <parameter>
          <name>useMissingFile</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to use the missing licenses file to consolidate the THID-PARTY file.</description>
        </parameter>
        <parameter>
          <name>useRepositoryMissingFiles</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Load from repositories third party missing files.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Verbose mode is always on if you starts a debug maven instance
(says via {@code -X}).</description>
        </parameter>
      </parameters>
      <configuration>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <excludeTransitiveDependencies implementation="boolean" default-value="false">${license.excludeTransitiveDependencies}</excludeTransitiveDependencies>
        <excludedArtifacts implementation="java.lang.String">${license.excludedArtifacts}</excludedArtifacts>
        <excludedGroups implementation="java.lang.String">${license.excludedGroups}</excludedGroups>
        <excludedScopes implementation="java.lang.String" default-value="system">${license.excludedScopes}</excludedScopes>
        <excludedTypes implementation="java.lang.String">${license.excludedTypes}</excludedTypes>
        <executeOnlyOnRootModule implementation="boolean" default-value="true">${license.executeOnlyOnRootModule}</executeOnlyOnRootModule>
        <includeTransitiveDependencies implementation="boolean" default-value="true">${license.includeTransitiveDependencies}</includeTransitiveDependencies>
        <includedArtifacts implementation="java.lang.String">${license.includedArtifacts}</includedArtifacts>
        <includedGroups implementation="java.lang.String">${license.includedGroups}</includedGroups>
        <includedScopes implementation="java.lang.String">${license.includedScopes}</includedScopes>
        <includedTypes implementation="java.lang.String">${license.includedTypes}</includedTypes>
        <inputEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</inputEncoding>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <missingFile implementation="java.io.File" default-value="src/license/THIRD-PARTY.properties">${license.missingFile}</missingFile>
        <missingFileUrl implementation="java.lang.String">${license.missingFileUrl}</missingFileUrl>
        <outputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}"/>
        <outputEncoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${outputEncoding}</outputEncoding>
        <overrideFile implementation="java.io.File" default-value="src/license/override-THIRD-PARTY.properties">${license.overrideFile}</overrideFile>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <reactorProjects implementation="java.util.List">${reactorProjects}</reactorProjects>
        <skipAggregateThirdPartyReport implementation="boolean" default-value="false">${license.skipAggregateThirdPartyReport}</skipAggregateThirdPartyReport>
        <useMissingFile implementation="boolean" default-value="false">${license.useMissingFile}</useMissingFile>
        <useRepositoryMissingFiles implementation="boolean" default-value="true">${license.useRepositoryMissingFiles}</useRepositoryMissingFiles>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.mojo.license.api.DependenciesTool</role>
          <field-name>dependenciesTool</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.i18n.I18N</role>
          <field-name>i18n</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.doxia.siterenderer.Renderer</role>
          <field-name>siteRenderer</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.mojo.license.api.ThirdPartyTool</role>
          <field-name>thirdPartyTool</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>check-file-header</goal>
      <description>The goal to check if the state of header on project source files.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.CheckFileHeaderMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.2</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addJavaLicenseAfterPackage</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to add the license header in java files after the package statement.
&lt;p&gt;
This is a practice used by many people (apache, codehaus, ...).
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; By default this property is then to {@code true} since it is a good practice.</description>
        </parameter>
        <parameter>
          <name>addSvnKeyWords</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to add svn:keywords on new header.
&lt;p&gt;
Will add svn keywords :
&lt;pre&gt;Id, HeadURL&lt;/pre&gt;

&lt;strong&gt;Note:&lt;/strong&gt; This parameter is used by the {@link #descriptionTemplate}, so if you change this
template, the parameter could be no more used (depends what you put in your own template...).</description>
        </parameter>
        <parameter>
          <name>canUpdateCopyright</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to authorize update of the copyright part of the header.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; By default, do NOT authorize it since copyright part should be
handled by developpers (holder can change on each file for example).</description>
        </parameter>
        <parameter>
          <name>canUpdateDescription</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to authorize update of the description part of the header.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; By default, do NOT authorize it since description can change
on each file).</description>
        </parameter>
        <parameter>
          <name>canUpdateLicense</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to authorize update of the license part of the header.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; By default, authorize it since license part should always be
generated by the plugin.</description>
        </parameter>
        <parameter>
          <name>copyrightOwners</name>
          <type>java.lang.String</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional copyright owners.
&lt;p&gt;
If not set, {@code organizationName} parameter will be used instead.</description>
        </parameter>
        <parameter>
          <name>descriptionTemplate</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Template used to build the description section of the license header.
&lt;p&gt;
(This template use freemarker).</description>
        </parameter>
        <parameter>
          <name>emptyLineAfterHeader</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to indicate if there should be an empty line after the header.
&lt;p&gt;
Checkstyle requires empty line between license header and package statement.
If you are using addJavaLicenseAfterPackage=false it could make sense to set this to true.
&lt;/p&gt;
&lt;b&gt;Note:&lt;/b&gt; By default this property is set to {@code false} to keep old behavior.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files.

&lt;b&gt;Note:&lt;/b&gt; If nothing is filled here, we will use the system
property {@code file.encoding}.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specific files to excludes, separated by a comma.
By default, those file types are excluded:
&lt;ul&gt;
&lt;li&gt;modelisation&lt;/li&gt;
&lt;li&gt;images&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>extraExtensions</name>
          <type>java.util.Map</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To associate extra extension files to an existing comment style.
&lt;p&gt;
Keys of the map are the extension of extra files to treat, and the value
is the comment style you want to associate.
&lt;p&gt;
For example, to treat file with extensions {@code java2} and {@code jdata}
as {@code java} files (says using the {@code java} comment style, declare this
in your plugin configuration :
&lt;pre&gt;
&amp;lt;extraExtensions&amp;gt;
&amp;lt;java2&amp;gt;java&amp;lt;/java2&amp;gt;
&amp;lt;jdata&amp;gt;java&amp;lt;/jdata&amp;gt;
&amp;lt;/extraExtensions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>extraFiles</name>
          <type>java.util.Map</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>To associate extra files to an existing comment style.
&lt;p&gt;
Keys of the map are the name of extra files to treat, and the value
is the comment style you want to associate.
&lt;p&gt;
For example, to treat a file named {@code DockerFile} as {@code properties} files
(says using the {@code properties} comment style, declare this in your plugin configuration :
&lt;pre&gt;
&amp;lt;extraFiles&amp;gt;
&amp;lt;DockerFile&amp;gt;properties&amp;lt;/DockerFile&amp;gt;
&amp;lt;/extraFiles&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>extraTemplateParameters</name>
          <type>java.util.Map</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional extra templates parameters.
&lt;p&gt;
If filled, they are available with prefix extra_ to process license content
(says the header and license content).</description>
        </parameter>
        <parameter>
          <name>failOnMissingHeader</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if there is some files with no header are detected.</description>
        </parameter>
        <parameter>
          <name>failOnNotUptodateHeader</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if there is some files with headers to update.</description>
        </parameter>
        <parameter>
          <name>ignoreNoFileToScan</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to ignore no files to scan.
&lt;p&gt;
This flag will suppress the &quot;No file to scan&quot; warning. This will allow you to set the plug-in in the root pom of
your project without getting a lot of warnings for aggregation modules / artifacts.
&lt;/p&gt;
&lt;b&gt;Note:&lt;/b&gt; By default this property is set to {@code false} to keep old behavior.</description>
        </parameter>
        <parameter>
          <name>ignoreTag</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A tag to place on files that will be ignored by the plugin.
&lt;p&gt;
Sometimes, it is necessary to do this when file is under a specific license.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; If no sets, will use the default tag {@code %% Ignore-License}</description>
        </parameter>
        <parameter>
          <name>inceptionYear</name>
          <type>java.lang.Integer</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Inception year of the project.
&lt;p&gt;
Will be used as first year of copyright section in new header.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specific files to includes, separated by a comma. By default, it is &quot;** /*&quot;.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; This parameter is not usable if you are still using a project file descriptor.</description>
        </parameter>
        <parameter>
          <name>keepBackup</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to keep a backup of every modified file.</description>
        </parameter>
        <parameter>
          <name>licenseName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the license to use in the project.</description>
        </parameter>
        <parameter>
          <name>licenseResolver</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify an external extra licenses repository resolver (says the base
url of the repository where the {@code license.properties} is present).
&lt;p&gt;
&lt;p&gt;
&lt;strong&gt;Note: &lt;/strong&gt;If you want to refer to a file within this project, start the expression with &lt;code&gt;${project.baseUri}&lt;/code&gt;
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>lineSeparator</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>To specify a line separator to use.

If not set, will use system property {@code line.separator}.</description>
        </parameter>
        <parameter>
          <name>organizationName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project&apos;s organization.
&lt;p&gt;
Will be used as copyrigth&apos;s holder in new header.</description>
        </parameter>
        <parameter>
          <name>processEndTag</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To overwrite the processEndTag used to build header model.
&lt;p&gt;
See http://mojo.codehaus.org/license-maven-plugin/header.html#Configuration .</description>
        </parameter>
        <parameter>
          <name>processStartTag</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To overwrite the processStartTag used to build header model.
&lt;p&gt;
See http://mojo.codehaus.org/license-maven-plugin/header.html#Configuration .</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>The reacted project.</description>
        </parameter>
        <parameter>
          <name>projectName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project (or module).
&lt;p&gt;
Will be used as description section of new header.</description>
        </parameter>
        <parameter>
          <name>roots</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify the base dir from which we apply the license.
&lt;p&gt;
Should be on form &quot;root1,root2,rootn&quot;.
&lt;p&gt;
By default, the main roots are &quot;src, target/generated-sources, target/processed-sources&quot;.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; If some of these roots do not exist, they will be simply
ignored.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; This parameter is not useable if you are still using a project file descriptor.</description>
        </parameter>
        <parameter>
          <name>sectionDelimiter</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To overwrite the sectionDelimiter used to build header model.
&lt;p&gt;
See http://mojo.codehaus.org/license-maven-plugin/header.html#Configuration .</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>Current maven session. (used to launch certain mojo once by build).</description>
        </parameter>
        <parameter>
          <name>skipCheckLicense</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to skip the goal.</description>
        </parameter>
        <parameter>
          <name>trimHeaderLine</name>
          <type>boolean</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to indicate if there should be an empty line after the header.
&lt;p&gt;
Checkstyle usually requires no trailing whitespace.
If it is the case it could make sense to set this to true
&lt;/p&gt;
&lt;b&gt;Note:&lt;/b&gt; By default this property is set to {@code false} to keep old behavior.</description>
        </parameter>
        <parameter>
          <name>useJavaNoReformatCommentStartTag</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to use for java comment start tag with no reformat syntax {@code /*-}.
&lt;p&gt;
See http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-141999.html#350</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode.

&lt;b&gt;Note:&lt;/b&gt; Verbose mode is always on if you starts a debug maven instance
(says via {@code -X}).</description>
        </parameter>
      </parameters>
      <configuration>
        <addJavaLicenseAfterPackage implementation="boolean" default-value="true">${license.addJavaLicenseAfterPackage}</addJavaLicenseAfterPackage>
        <addSvnKeyWords implementation="boolean" default-value="false">${license.addSvnKeyWords}</addSvnKeyWords>
        <canUpdateCopyright implementation="boolean" default-value="false">${license.canUpdateCopyright}</canUpdateCopyright>
        <canUpdateDescription implementation="boolean" default-value="false">${license.canUpdateDescription}</canUpdateDescription>
        <canUpdateLicense implementation="boolean" default-value="true">${license.canUpdateLicense}</canUpdateLicense>
        <copyrightOwners implementation="java.lang.String">${license.copyrightOwners}</copyrightOwners>
        <descriptionTemplate implementation="java.lang.String" default-value="/org/codehaus/mojo/license/default-file-header-description.ftl">${license.descriptionTemplate}</descriptionTemplate>
        <emptyLineAfterHeader implementation="boolean" default-value="false">${license.emptyLineAfterHeader}</emptyLineAfterHeader>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <excludes implementation="java.lang.String[]">${license.excludes}</excludes>
        <failOnMissingHeader implementation="boolean" default-value="false">${license.failOnMissingHeader}</failOnMissingHeader>
        <failOnNotUptodateHeader implementation="boolean" default-value="false">${license.failOnNotUptodateHeader}</failOnNotUptodateHeader>
        <ignoreNoFileToScan implementation="boolean" default-value="false">${license.ignoreNoFileToScan}</ignoreNoFileToScan>
        <ignoreTag implementation="java.lang.String">${license.ignoreTag}</ignoreTag>
        <inceptionYear implementation="java.lang.Integer" default-value="${project.inceptionYear}">${license.inceptionYear}</inceptionYear>
        <includes implementation="java.lang.String[]">${license.includes}</includes>
        <keepBackup implementation="boolean" default-value="false">${license.keepBackup}</keepBackup>
        <licenseName implementation="java.lang.String">${license.licenseName}</licenseName>
        <licenseResolver implementation="java.lang.String">${license.licenseResolver}</licenseResolver>
        <lineSeparator implementation="java.lang.String">${license.lineSeparator}</lineSeparator>
        <organizationName implementation="java.lang.String" default-value="${project.organization.name}">${license.organizationName}</organizationName>
        <processEndTag implementation="java.lang.String">${license.processEndTag}</processEndTag>
        <processStartTag implementation="java.lang.String">${license.processStartTag}</processStartTag>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <projectName implementation="java.lang.String" default-value="${project.name}">${license.projectName}</projectName>
        <roots implementation="java.lang.String[]">${license.roots}</roots>
        <sectionDelimiter implementation="java.lang.String">${license.sectionDelimiter}</sectionDelimiter>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skipCheckLicense implementation="boolean" default-value="false">${license.skipCheckLicense}</skipCheckLicense>
        <trimHeaderLine implementation="boolean" default-value="false">${license.trimHeaderLine}</trimHeaderLine>
        <useJavaNoReformatCommentStartTag implementation="boolean" default-value="true">${license.useJavaNoReformatCommentStartTag}</useJavaNoReformatCommentStartTag>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.mojo.license.header.transformer.FileHeaderTransformer</role>
          <field-name>transformers</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>comment-style-list</goal>
      <description>Displays all the available comment style to box file headers.</description>
      <requiresDirectInvocation>true</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.CommentStyleListMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to display also the content of each license.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files.

&lt;b&gt;Note:&lt;/b&gt; If nothing is filled here, we will use the system
property {@code file.encoding}.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>The reacted project.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>Current maven session. (used to launch certain mojo once by build).</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode.

&lt;b&gt;Note:&lt;/b&gt; Verbose mode is always on if you starts a debug maven instance
(says via {@code -X}).</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean">${detail}</detail>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.mojo.license.header.transformer.FileHeaderTransformer</role>
          <field-name>transformers</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>download-licenses</goal>
      <description>Download the license files of all the current project&apos;s dependencies, and generate a summary file containing a list
of all dependencies and their licenses.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>org.codehaus.mojo.license.DownloadLicensesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>excludeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Exclude transitive dependencies from excluded artifacts.</description>
        </parameter>
        <parameter>
          <name>excludedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some ArtifactsIds
This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some GroupIds
This is a regular expression that is applied to groupIds (not an ant pattern).</description>
        </parameter>
        <parameter>
          <name>excludedScopes</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some scopes.</description>
        </parameter>
        <parameter>
          <name>excludedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some types.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include transitive dependencies when downloading license files.</description>
        </parameter>
        <parameter>
          <name>includedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some ArtifactsIds
This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedGroups</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some GroupIds
This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedScopes</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some scopes, if let empty then all scopes will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some types, if let empty then all types will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>licensesConfigFile</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Input file containing a mapping between each dependency and it&apos;s license information.</description>
        </parameter>
        <parameter>
          <name>licensesOutputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The directory to which the dependency licenses should be written.</description>
        </parameter>
        <parameter>
          <name>licensesOutputFile</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The output file containing a mapping between each dependency and it&apos;s license information.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>Location of the local repository.</description>
        </parameter>
        <parameter>
          <name>offline</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Settings offline flag (will not download anything if setted to true).</description>
        </parameter>
        <parameter>
          <name>organizeLicensesByDependencies</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to organize the licenses by dependencies. When this is done, each dependency will
get its full license file, even if already downloaded for another dependency.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>The Maven Project Object</description>
        </parameter>
        <parameter>
          <name>proxies</name>
          <type>java.util.List</type>
          <since>1.4</since>
          <required>false</required>
          <editable>false</editable>
          <description>Get declared proxies from the {@code settings.xml} file.</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Don&apos;t show warnings about bad or missing license files.</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>List of Remote Repositories used by the resolver</description>
        </parameter>
        <parameter>
          <name>skipDownloadLicenses</name>
          <type>boolean</type>
          <since>1.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to skip the goal.</description>
        </parameter>
        <parameter>
          <name>sortByGroupIdAndArtifactId</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <excludeTransitiveDependencies implementation="boolean" default-value="false">${license.excludeTransitiveDependencies}</excludeTransitiveDependencies>
        <excludedArtifacts implementation="java.lang.String">${license.excludedArtifacts}</excludedArtifacts>
        <excludedGroups implementation="java.lang.String">${license.excludedGroups}</excludedGroups>
        <excludedScopes implementation="java.lang.String" default-value="system">${license.excludedScopes}</excludedScopes>
        <excludedTypes implementation="java.lang.String">${license.excludedTypes}</excludedTypes>
        <includeTransitiveDependencies implementation="boolean" default-value="true"/>
        <includedArtifacts implementation="java.lang.String">${license.includedArtifacts}</includedArtifacts>
        <includedGroups implementation="java.lang.String">${license.includedGroups}</includedGroups>
        <includedScopes implementation="java.lang.String">${license.includedScopes}</includedScopes>
        <includedTypes implementation="java.lang.String">${license.includedTypes}</includedTypes>
        <licensesConfigFile implementation="java.io.File" default-value="${project.basedir}/src/license/licenses.xml">${licensesConfigFile}</licensesConfigFile>
        <licensesOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-resources/licenses">${licensesOutputDirectory}</licensesOutputDirectory>
        <licensesOutputFile implementation="java.io.File" default-value="${project.build.directory}/generated-resources/licenses.xml">${licensesOutputFile}</licensesOutputFile>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository" default-value="${localRepository}"/>
        <offline implementation="boolean" default-value="${settings.offline}"/>
        <organizeLicensesByDependencies implementation="boolean" default-value="false">${license.organizeLicensesByDependencies}</organizeLicensesByDependencies>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <proxies implementation="java.util.List" default-value="${settings.proxies}"/>
        <quiet implementation="boolean" default-value="false"/>
        <remoteRepositories implementation="java.util.List" default-value="${project.remoteArtifactRepositories}"/>
        <skipDownloadLicenses implementation="boolean" default-value="false">${license.skipDownloadLicenses}</skipDownloadLicenses>
        <sortByGroupIdAndArtifactId implementation="boolean" default-value="false">${license.sortByGroupIdAndArtifactId}</sortByGroupIdAndArtifactId>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.mojo.license.api.DependenciesTool</role>
          <field-name>dependenciesTool</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on license-maven-plugin.&lt;br&gt;
Call &lt;code&gt;mvn license:help -Ddetail=true -Dgoal=&amp;lt;goal-name&amp;gt;&lt;/code&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If &lt;code&gt;true&lt;/code&gt;, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>license-list</goal>
      <description>Display all available licenses.</description>
      <requiresDirectInvocation>true</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.LicenseListMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to display also the content of each license.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files.

&lt;b&gt;Note:&lt;/b&gt; If nothing is filled here, we will use the system
property {@code file.encoding}.</description>
        </parameter>
        <parameter>
          <name>extraResolver</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The url of an extra license repository.
&lt;p&gt;
&lt;strong&gt;Note: &lt;/strong&gt;If you want to refer to a file within this project, start the expression with &lt;code&gt;${project.baseUri}&lt;/code&gt;
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>The reacted project.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>Current maven session. (used to launch certain mojo once by build).</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode.

&lt;b&gt;Note:&lt;/b&gt; Verbose mode is always on if you starts a debug maven instance
(says via {@code -X}).</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean">${detail}</detail>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <extraResolver implementation="java.lang.String">${extraResolver}</extraResolver>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>remove-file-header</goal>
      <description>The goal to remove the header on project source files.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.RemoveFileHeaderMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.11</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>copyrightOwners</name>
          <type>java.lang.String</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional copyright owners.
&lt;p&gt;
If not set, {@code organizationName} parameter will be used instead.</description>
        </parameter>
        <parameter>
          <name>dryRun</name>
          <type>boolean</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to test plugin but modify no file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files.

&lt;b&gt;Note:&lt;/b&gt; If nothing is filled here, we will use the system
property {@code file.encoding}.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String[]</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specific files to excludes, separated by a comma.
By default, those file types are excluded:
&lt;ul&gt;
&lt;li&gt;modelisation&lt;/li&gt;
&lt;li&gt;images&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>extraExtensions</name>
          <type>java.util.Map</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>To associate extra extension files to an existing comment style.
&lt;p&gt;
Keys of the map are the extension of extra files to treat, and the value
is the comment style you want to associate.
&lt;p&gt;
For example, to treat file with extensions {@code java2} and {@code jdata}
as {@code java} files (says using the {@code java} comment style, declare this
in your plugin configuration :
&lt;pre&gt;
&amp;lt;extraExtensions&amp;gt;
&amp;lt;java2&amp;gt;java&amp;lt;/java2&amp;gt;
&amp;lt;jdata&amp;gt;java&amp;lt;/jdata&amp;gt;
&amp;lt;/extraExtensions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>extraFiles</name>
          <type>java.util.Map</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>To associate extra files to an existing comment style.
&lt;p&gt;
Keys of the map are the name of extra files to treat, and the value
is the comment style you want to associate.
&lt;p&gt;
For example, to treat a file named {@code DockerFile} as {@code properties} files
(says using the {@code properties} comment style, declare this in your plugin configuration :
&lt;pre&gt;
&amp;lt;extraFiles&amp;gt;
&amp;lt;DockerFile&amp;gt;properties&amp;lt;/DockerFile&amp;gt;
&amp;lt;/extraFiles&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>extraTemplateParameters</name>
          <type>java.util.Map</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional extra templates parameters.
&lt;p&gt;
If filled, they are available with prefix extra_ to process license content
(says the header and license content).</description>
        </parameter>
        <parameter>
          <name>ignoreNoFileToScan</name>
          <type>boolean</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to ignore no files to scan.
&lt;p&gt;
This flag will suppress the &quot;No file to scan&quot; warning. This will allow you to set the plug-in in the root pom of
your project without getting a lot of warnings for aggregation modules / artifacts.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ignoreTag</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A tag to place on files that will be ignored by the plugin.
&lt;p&gt;
Sometimes, it is necessary to do this when file is under a specific license.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; If no sets, will use the default tag {@code %% Ignore-License}</description>
        </parameter>
        <parameter>
          <name>inceptionYear</name>
          <type>java.lang.Integer</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Inception year of the project.
&lt;p&gt;
Will be used as first year of copyright section in new header.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String[]</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specific files to includes, separated by a comma. By default, it is &quot;** /*&quot;.</description>
        </parameter>
        <parameter>
          <name>keepBackup</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to keep a backup of every modified file.</description>
        </parameter>
        <parameter>
          <name>licenseName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the license to use in the project.</description>
        </parameter>
        <parameter>
          <name>licenseResolver</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify an external extra licenses repository resolver (says the base
url of the repository where the {@code license.properties} is present).
&lt;p&gt;
&lt;p&gt;
&lt;strong&gt;Note: &lt;/strong&gt;If you want to refer to a file within this project, start the expression with &lt;code&gt;${project.baseUri}&lt;/code&gt;
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>organizationName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project&apos;s organization.
&lt;p&gt;
Will be used as copyrigth&apos;s holder in new header.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>The reacted project.</description>
        </parameter>
        <parameter>
          <name>projectName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project (or module).
&lt;p&gt;
Will be used as description section of new header.</description>
        </parameter>
        <parameter>
          <name>roots</name>
          <type>java.lang.String[]</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify the base dir from which we apply the license.
&lt;p&gt;
Should be on form &quot;root1,root2,rootn&quot;.
&lt;p&gt;
By default, the main roots are &quot;src, target/generated-sources, target/processed-sources&quot;.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; If some of these roots do not exist, they will be simply
ignored.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>Current maven session. (used to launch certain mojo once by build).</description>
        </parameter>
        <parameter>
          <name>skipRemoveLicense</name>
          <type>boolean</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to skip the goal.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode.

&lt;b&gt;Note:&lt;/b&gt; Verbose mode is always on if you starts a debug maven instance
(says via {@code -X}).</description>
        </parameter>
      </parameters>
      <configuration>
        <copyrightOwners implementation="java.lang.String">${license.copyrightOwners}</copyrightOwners>
        <dryRun implementation="boolean" default-value="false">${dryRun}</dryRun>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <excludes implementation="java.lang.String[]">${license.excludes}</excludes>
        <ignoreNoFileToScan implementation="boolean" default-value="false">${license.ignoreNoFileToScan}</ignoreNoFileToScan>
        <ignoreTag implementation="java.lang.String">${license.ignoreTag}</ignoreTag>
        <inceptionYear implementation="java.lang.Integer" default-value="${project.inceptionYear}">${license.inceptionYear}</inceptionYear>
        <includes implementation="java.lang.String[]">${license.includes}</includes>
        <keepBackup implementation="boolean" default-value="false">${license.keepBackup}</keepBackup>
        <licenseName implementation="java.lang.String">${license.licenseName}</licenseName>
        <licenseResolver implementation="java.lang.String">${license.licenseResolver}</licenseResolver>
        <organizationName implementation="java.lang.String" default-value="${project.organization.name}">${license.organizationName}</organizationName>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <projectName implementation="java.lang.String" default-value="${project.name}">${license.projectName}</projectName>
        <roots implementation="java.lang.String[]">${license.roots}</roots>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skipRemoveLicense implementation="boolean" default-value="false">${license.skipRemoveLicense}</skipRemoveLicense>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.mojo.license.header.transformer.FileHeaderTransformer</role>
          <field-name>transformers</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>third-party-report</goal>
      <description>Generates a report of all third-parties detected in the module.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.ThirdPartyReportMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.1</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; If nothing is filled here, we will use the system
property {@code file.encoding}.</description>
        </parameter>
        <parameter>
          <name>excludeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude transitive dependencies from excluded artifacts.</description>
        </parameter>
        <parameter>
          <name>excludedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some ArtifactsIds</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some GroupIds</description>
        </parameter>
        <parameter>
          <name>excludedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some scopes.</description>
        </parameter>
        <parameter>
          <name>excludedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some types.</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include transitive dependencies when looking for missing licenses and downloading license files.</description>
        </parameter>
        <parameter>
          <name>includedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some ArtifactsIds</description>
        </parameter>
        <parameter>
          <name>includedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some GroupIds</description>
        </parameter>
        <parameter>
          <name>includedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some scopes, if let empty then all scopes will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some types, if let empty then all types will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>inputEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>Specifies the input encoding.</description>
        </parameter>
        <parameter>
          <name>licenseMerges</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To merge licenses in final file.
&lt;p&gt;
Each entry represents a merge (first license is main license to keep), licenses are separated by {@code |}.
&lt;p&gt;
Example :
&lt;p&gt;
&lt;pre&gt;
&amp;lt;licenseMerges&amp;gt;
&amp;lt;licenseMerge&amp;gt;The Apache Software License|Version 2.0,Apache License, Version 2.0&amp;lt;/licenseMerge&amp;gt;
&amp;lt;/licenseMerges&amp;gt;
&amp;lt;/pre&amp;gt;</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <since>1.1</since>
          <required>true</required>
          <editable>false</editable>
          <description>Local Repository.</description>
        </parameter>
        <parameter>
          <name>missingFile</name>
          <type>java.io.File</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file where to fill the license for dependencies with unknwon license.</description>
        </parameter>
        <parameter>
          <name>missingFileUrl</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>The Url that holds the missing license dependency entries. This is an extension to {@link #missingFile}.
If set then the entries that will be found at this URL will be added additionally to the entries of the
missing file.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;NOTE:&lt;/b&gt;&lt;br&gt;
the response of the URL endpoint must return content that matches the THIRD-PARTY.properties file!</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.1</since>
          <required>true</required>
          <editable>true</editable>
          <description>The output directory for the report. Note that this parameter is only evaluated if the goal is run directly from
the command line. If the goal is run indirectly as part of a site generation, the output directory configured in
the Maven Site Plugin is used instead.</description>
        </parameter>
        <parameter>
          <name>outputEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>Specifies the output encoding.</description>
        </parameter>
        <parameter>
          <name>overrideFile</name>
          <type>java.io.File</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file where to fill the override license for dependencies.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.1</since>
          <required>false</required>
          <editable>false</editable>
          <description>The Maven Project.</description>
        </parameter>
        <parameter>
          <name>skipThirdPartyReport</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip to generate the report.</description>
        </parameter>
        <parameter>
          <name>useMissingFile</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to use the missing licenses file to consolidate the THID-PARTY file.</description>
        </parameter>
        <parameter>
          <name>useRepositoryMissingFiles</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Load from repositories third party missing files.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; Verbose mode is always on if you starts a debug maven instance
(says via {@code -X}).</description>
        </parameter>
      </parameters>
      <configuration>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <excludeTransitiveDependencies implementation="boolean" default-value="false">${license.excludeTransitiveDependencies}</excludeTransitiveDependencies>
        <excludedArtifacts implementation="java.lang.String">${license.excludedArtifacts}</excludedArtifacts>
        <excludedGroups implementation="java.lang.String">${license.excludedGroups}</excludedGroups>
        <excludedScopes implementation="java.lang.String" default-value="system">${license.excludedScopes}</excludedScopes>
        <excludedTypes implementation="java.lang.String">${license.excludedTypes}</excludedTypes>
        <includeTransitiveDependencies implementation="boolean" default-value="true">${license.includeTransitiveDependencies}</includeTransitiveDependencies>
        <includedArtifacts implementation="java.lang.String">${license.includedArtifacts}</includedArtifacts>
        <includedGroups implementation="java.lang.String">${license.includedGroups}</includedGroups>
        <includedScopes implementation="java.lang.String">${license.includedScopes}</includedScopes>
        <includedTypes implementation="java.lang.String">${license.includedTypes}</includedTypes>
        <inputEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${encoding}</inputEncoding>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository">${localRepository}</localRepository>
        <missingFile implementation="java.io.File" default-value="src/license/THIRD-PARTY.properties">${license.missingFile}</missingFile>
        <missingFileUrl implementation="java.lang.String">${license.missingFileUrl}</missingFileUrl>
        <outputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}"/>
        <outputEncoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${outputEncoding}</outputEncoding>
        <overrideFile implementation="java.io.File" default-value="src/license/override-THIRD-PARTY.properties">${license.overrideFile}</overrideFile>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <skipThirdPartyReport implementation="boolean" default-value="false">${license.skipThirdPartyReport}</skipThirdPartyReport>
        <useMissingFile implementation="boolean" default-value="false">${license.useMissingFile}</useMissingFile>
        <useRepositoryMissingFiles implementation="boolean" default-value="true">${license.useRepositoryMissingFiles}</useRepositoryMissingFiles>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.mojo.license.api.DependenciesTool</role>
          <field-name>dependenciesTool</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.i18n.I18N</role>
          <field-name>i18n</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.doxia.siterenderer.Renderer</role>
          <field-name>siteRenderer</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.mojo.license.api.ThirdPartyTool</role>
          <field-name>thirdPartyTool</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>update-file-header</goal>
      <description>The goal to update (or add) the header on project source files.
&lt;p&gt;
This goal replace the {@code update-header} goal which can not deal with
Copyright.
&lt;p&gt;
This goal use a specific project file descriptor {@code project.xml} to
describe all files to update for a whole project.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.UpdateFileHeaderMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addJavaLicenseAfterPackage</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to add the license header in java files after the package statement.
&lt;p&gt;
This is a practice used by many people (apache, codehaus, ...).
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; By default this property is then to {@code true} since it is a good practice.</description>
        </parameter>
        <parameter>
          <name>addSvnKeyWords</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to add svn:keywords on new header.
&lt;p&gt;
Will add svn keywords :
&lt;pre&gt;Id, HeadURL&lt;/pre&gt;

&lt;strong&gt;Note:&lt;/strong&gt; This parameter is used by the {@link #descriptionTemplate}, so if you change this
template, the parameter could be no more used (depends what you put in your own template...).</description>
        </parameter>
        <parameter>
          <name>canUpdateCopyright</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to authorize update of the copyright part of the header.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; By default, do NOT authorize it since copyright part should be
handled by developpers (holder can change on each file for example).</description>
        </parameter>
        <parameter>
          <name>canUpdateDescription</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to authorize update of the description part of the header.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; By default, do NOT authorize it since description can change
on each file).</description>
        </parameter>
        <parameter>
          <name>canUpdateLicense</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to authorize update of the license part of the header.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; By default, authorize it since license part should always be
generated by the plugin.</description>
        </parameter>
        <parameter>
          <name>copyrightOwners</name>
          <type>java.lang.String</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional copyright owners.
&lt;p&gt;
If not set, {@code organizationName} parameter will be used instead.</description>
        </parameter>
        <parameter>
          <name>descriptionTemplate</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Template used to build the description section of the license header.
&lt;p&gt;
(This template use freemarker).</description>
        </parameter>
        <parameter>
          <name>dryRun</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to test plugin but modify no file.</description>
        </parameter>
        <parameter>
          <name>emptyLineAfterHeader</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to indicate if there should be an empty line after the header.
&lt;p&gt;
Checkstyle requires empty line between license header and package statement.
If you are using addJavaLicenseAfterPackage=false it could make sense to set this to true.
&lt;/p&gt;
&lt;b&gt;Note:&lt;/b&gt; By default this property is set to {@code false} to keep old behavior.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files.

&lt;b&gt;Note:&lt;/b&gt; If nothing is filled here, we will use the system
property {@code file.encoding}.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specific files to excludes, separated by a comma.
By default, those file types are excluded:
&lt;ul&gt;
&lt;li&gt;modelisation&lt;/li&gt;
&lt;li&gt;images&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>extraExtensions</name>
          <type>java.util.Map</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To associate extra extension files to an existing comment style.
&lt;p&gt;
Keys of the map are the extension of extra files to treat, and the value
is the comment style you want to associate.
&lt;p&gt;
For example, to treat file with extensions {@code java2} and {@code jdata}
as {@code java} files (says using the {@code java} comment style, declare this
in your plugin configuration :
&lt;pre&gt;
&amp;lt;extraExtensions&amp;gt;
&amp;lt;java2&amp;gt;java&amp;lt;/java2&amp;gt;
&amp;lt;jdata&amp;gt;java&amp;lt;/jdata&amp;gt;
&amp;lt;/extraExtensions&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>extraFiles</name>
          <type>java.util.Map</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>To associate extra files to an existing comment style.
&lt;p&gt;
Keys of the map are the name of extra files to treat, and the value
is the comment style you want to associate.
&lt;p&gt;
For example, to treat a file named {@code DockerFile} as {@code properties} files
(says using the {@code properties} comment style, declare this in your plugin configuration :
&lt;pre&gt;
&amp;lt;extraFiles&amp;gt;
&amp;lt;DockerFile&amp;gt;properties&amp;lt;/DockerFile&amp;gt;
&amp;lt;/extraFiles&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>extraTemplateParameters</name>
          <type>java.util.Map</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional extra templates parameters.
&lt;p&gt;
If filled, they are available with prefix extra_ to process license content
(says the header and license content).</description>
        </parameter>
        <parameter>
          <name>failOnMissingHeader</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if {@link #dryRun} flag is on and some files with
no header are detected.
&lt;p&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If {@link #dryRun} flag is not set, there is no effect.</description>
        </parameter>
        <parameter>
          <name>failOnNotUptodateHeader</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if {@link #dryRun} flag is on and some files with headers
to update.
&lt;p&gt;
&lt;strong&gt;Note:&lt;/strong&gt; If {@link #dryRun} flag is not set, there is no effect.</description>
        </parameter>
        <parameter>
          <name>ignoreNoFileToScan</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to ignore no files to scan.
&lt;p&gt;
This flag will suppress the &quot;No file to scan&quot; warning. This will allow you to set the plug-in in the root pom of
your project without getting a lot of warnings for aggregation modules / artifacts.
&lt;/p&gt;
&lt;b&gt;Note:&lt;/b&gt; By default this property is set to {@code false} to keep old behavior.</description>
        </parameter>
        <parameter>
          <name>ignoreTag</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A tag to place on files that will be ignored by the plugin.
&lt;p&gt;
Sometimes, it is necessary to do this when file is under a specific license.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; If no sets, will use the default tag {@code %% Ignore-License}</description>
        </parameter>
        <parameter>
          <name>inceptionYear</name>
          <type>java.lang.Integer</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Inception year of the project.
&lt;p&gt;
Will be used as first year of copyright section in new header.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specific files to includes, separated by a comma. By default, it is &quot;** /*&quot;.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; This parameter is not usable if you are still using a project file descriptor.</description>
        </parameter>
        <parameter>
          <name>keepBackup</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to keep a backup of every modified file.</description>
        </parameter>
        <parameter>
          <name>licenseName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the license to use in the project.</description>
        </parameter>
        <parameter>
          <name>licenseResolver</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify an external extra licenses repository resolver (says the base
url of the repository where the {@code license.properties} is present).
&lt;p&gt;
&lt;p&gt;
&lt;strong&gt;Note: &lt;/strong&gt;If you want to refer to a file within this project, start the expression with &lt;code&gt;${project.baseUri}&lt;/code&gt;
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>lineSeparator</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>To specify a line separator to use.

If not set, will use system property {@code line.separator}.</description>
        </parameter>
        <parameter>
          <name>organizationName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project&apos;s organization.
&lt;p&gt;
Will be used as copyrigth&apos;s holder in new header.</description>
        </parameter>
        <parameter>
          <name>processEndTag</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To overwrite the processEndTag used to build header model.
&lt;p&gt;
See http://mojo.codehaus.org/license-maven-plugin/header.html#Configuration .</description>
        </parameter>
        <parameter>
          <name>processStartTag</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To overwrite the processStartTag used to build header model.
&lt;p&gt;
See http://mojo.codehaus.org/license-maven-plugin/header.html#Configuration .</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>The reacted project.</description>
        </parameter>
        <parameter>
          <name>projectName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project (or module).
&lt;p&gt;
Will be used as description section of new header.</description>
        </parameter>
        <parameter>
          <name>roots</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify the base dir from which we apply the license.
&lt;p&gt;
Should be on form &quot;root1,root2,rootn&quot;.
&lt;p&gt;
By default, the main roots are &quot;src, target/generated-sources, target/processed-sources&quot;.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; If some of these roots do not exist, they will be simply
ignored.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt; This parameter is not useable if you are still using a project file descriptor.</description>
        </parameter>
        <parameter>
          <name>sectionDelimiter</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To overwrite the sectionDelimiter used to build header model.
&lt;p&gt;
See http://mojo.codehaus.org/license-maven-plugin/header.html#Configuration .</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>Current maven session. (used to launch certain mojo once by build).</description>
        </parameter>
        <parameter>
          <name>skipUpdateLicense</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to skip the goal.</description>
        </parameter>
        <parameter>
          <name>trimHeaderLine</name>
          <type>boolean</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to indicate if there should be an empty line after the header.
&lt;p&gt;
Checkstyle usually requires no trailing whitespace.
If it is the case it could make sense to set this to true
&lt;/p&gt;
&lt;b&gt;Note:&lt;/b&gt; By default this property is set to {@code false} to keep old behavior.</description>
        </parameter>
        <parameter>
          <name>useJavaNoReformatCommentStartTag</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to use for java comment start tag with no reformat syntax {@code /*-}.
&lt;p&gt;
See http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-141999.html#350</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode.

&lt;b&gt;Note:&lt;/b&gt; Verbose mode is always on if you starts a debug maven instance
(says via {@code -X}).</description>
        </parameter>
      </parameters>
      <configuration>
        <addJavaLicenseAfterPackage implementation="boolean" default-value="true">${license.addJavaLicenseAfterPackage}</addJavaLicenseAfterPackage>
        <addSvnKeyWords implementation="boolean" default-value="false">${license.addSvnKeyWords}</addSvnKeyWords>
        <canUpdateCopyright implementation="boolean" default-value="false">${license.canUpdateCopyright}</canUpdateCopyright>
        <canUpdateDescription implementation="boolean" default-value="false">${license.canUpdateDescription}</canUpdateDescription>
        <canUpdateLicense implementation="boolean" default-value="true">${license.canUpdateLicense}</canUpdateLicense>
        <copyrightOwners implementation="java.lang.String">${license.copyrightOwners}</copyrightOwners>
        <descriptionTemplate implementation="java.lang.String" default-value="/org/codehaus/mojo/license/default-file-header-description.ftl">${license.descriptionTemplate}</descriptionTemplate>
        <dryRun implementation="boolean" default-value="false">${dryRun}</dryRun>
        <emptyLineAfterHeader implementation="boolean" default-value="false">${license.emptyLineAfterHeader}</emptyLineAfterHeader>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <excludes implementation="java.lang.String[]">${license.excludes}</excludes>
        <failOnMissingHeader implementation="boolean" default-value="false">${license.failOnMissingHeader}</failOnMissingHeader>
        <failOnNotUptodateHeader implementation="boolean" default-value="false">${license.failOnNotUptodateHeader}</failOnNotUptodateHeader>
        <ignoreNoFileToScan implementation="boolean" default-value="false">${license.ignoreNoFileToScan}</ignoreNoFileToScan>
        <ignoreTag implementation="java.lang.String">${license.ignoreTag}</ignoreTag>
        <inceptionYear implementation="java.lang.Integer" default-value="${project.inceptionYear}">${license.inceptionYear}</inceptionYear>
        <includes implementation="java.lang.String[]">${license.includes}</includes>
        <keepBackup implementation="boolean" default-value="false">${license.keepBackup}</keepBackup>
        <licenseName implementation="java.lang.String">${license.licenseName}</licenseName>
        <licenseResolver implementation="java.lang.String">${license.licenseResolver}</licenseResolver>
        <lineSeparator implementation="java.lang.String">${license.lineSeparator}</lineSeparator>
        <organizationName implementation="java.lang.String" default-value="${project.organization.name}">${license.organizationName}</organizationName>
        <processEndTag implementation="java.lang.String">${license.processEndTag}</processEndTag>
        <processStartTag implementation="java.lang.String">${license.processStartTag}</processStartTag>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <projectName implementation="java.lang.String" default-value="${project.name}">${license.projectName}</projectName>
        <roots implementation="java.lang.String[]">${license.roots}</roots>
        <sectionDelimiter implementation="java.lang.String">${license.sectionDelimiter}</sectionDelimiter>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skipUpdateLicense implementation="boolean" default-value="false">${license.skipUpdateLicense}</skipUpdateLicense>
        <trimHeaderLine implementation="boolean" default-value="false">${license.trimHeaderLine}</trimHeaderLine>
        <useJavaNoReformatCommentStartTag implementation="boolean" default-value="true">${license.useJavaNoReformatCommentStartTag}</useJavaNoReformatCommentStartTag>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.mojo.license.header.transformer.FileHeaderTransformer</role>
          <field-name>transformers</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>update-project-license</goal>
      <description>Updates (or creates) the main project license file according to the given
license defines as {@link #licenseName}.

Can also generate a bundled license file (to avoid collision names in
class-path). This file is by default generated in
{@code META-INF class-path directory}.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-resources</phase>
      <implementation>org.codehaus.mojo.license.UpdateProjectLicenseMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>bundleLicensePath</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The path of the bundled license file to produce when
{@link #generateBundle} is on.

&lt;b&gt;Note:&lt;/b&gt; This option is not available for {@code pom} module types.</description>
        </parameter>
        <parameter>
          <name>copyrightOwners</name>
          <type>java.lang.String</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional copyright owners.
&lt;p&gt;
If not set, {@code organizationName} parameter will be used instead.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files.

&lt;b&gt;Note:&lt;/b&gt; If nothing is filled here, we will use the system
property {@code file.encoding}.</description>
        </parameter>
        <parameter>
          <name>extraTemplateParameters</name>
          <type>java.util.Map</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional extra templates parameters.
&lt;p&gt;
If filled, they are available with prefix extra_ to process license content
(says the header and license content).</description>
        </parameter>
        <parameter>
          <name>force</name>
          <type>boolean</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to force to generate project license file even if it is up-to-date.</description>
        </parameter>
        <parameter>
          <name>generateBundle</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to copy the main license file in a bundled place.

This is usefull for final application to have a none confusing location
to seek for the application license.

If Sets to {@code true}, will copy the license file to the
{@link #bundleLicensePath} to {@link #outputDirectory}.

&lt;b&gt;Note:&lt;/b&gt; This option is not available for {@code pom} module types.</description>
        </parameter>
        <parameter>
          <name>inceptionYear</name>
          <type>java.lang.Integer</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Inception year of the project.
&lt;p&gt;
Will be used as first year of copyright section in new header.</description>
        </parameter>
        <parameter>
          <name>keepBackup</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to keep a backup of every modified file.</description>
        </parameter>
        <parameter>
          <name>licenseFile</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Project license file to synchronize with main license defined in
descriptor file.</description>
        </parameter>
        <parameter>
          <name>licenseName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the license to use in the project.</description>
        </parameter>
        <parameter>
          <name>licenseResolver</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify an external extra licenses repository resolver (says the base
url of the repository where the {@code license.properties} is present).
&lt;p&gt;
&lt;p&gt;
&lt;strong&gt;Note: &lt;/strong&gt;If you want to refer to a file within this project, start the expression with &lt;code&gt;${project.baseUri}&lt;/code&gt;
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>organizationName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project&apos;s organization.
&lt;p&gt;
Will be used as copyrigth&apos;s holder in new header.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The directory where to generate license resources.

&lt;b&gt;Note:&lt;/b&gt; This option is not available for {@code pom} module types.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>The reacted project.</description>
        </parameter>
        <parameter>
          <name>projectName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project (or module).
&lt;p&gt;
Will be used as description section of new header.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <since>1.0</since>
          <required>false</required>
          <editable>false</editable>
          <description>Current maven session. (used to launch certain mojo once by build).</description>
        </parameter>
        <parameter>
          <name>skipUpdateProjectLicense</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to skip the goal.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode.

&lt;b&gt;Note:&lt;/b&gt; Verbose mode is always on if you starts a debug maven instance
(says via {@code -X}).</description>
        </parameter>
      </parameters>
      <configuration>
        <bundleLicensePath implementation="java.lang.String" default-value="META-INF/${project.artifactId}-LICENSE.txt">${license.bundleLicensePath}</bundleLicensePath>
        <copyrightOwners implementation="java.lang.String">${license.copyrightOwners}</copyrightOwners>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <force implementation="boolean" default-value="false">${license.force}</force>
        <generateBundle implementation="boolean" default-value="false">${license.generateBundle}</generateBundle>
        <inceptionYear implementation="java.lang.Integer" default-value="${project.inceptionYear}">${license.inceptionYear}</inceptionYear>
        <keepBackup implementation="boolean" default-value="false">${license.keepBackup}</keepBackup>
        <licenseFile implementation="java.io.File" default-value="${basedir}/LICENSE.txt">${license.licenceFile}</licenseFile>
        <licenseName implementation="java.lang.String">${license.licenseName}</licenseName>
        <licenseResolver implementation="java.lang.String">${license.licenseResolver}</licenseResolver>
        <organizationName implementation="java.lang.String" default-value="${project.organization.name}">${license.organizationName}</organizationName>
        <outputDirectory implementation="java.io.File" default-value="target/generated-sources/license">${license.outputDirectory}</outputDirectory>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <projectName implementation="java.lang.String" default-value="${project.name}">${license.projectName}</projectName>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <skipUpdateProjectLicense implementation="boolean" default-value="false">${license.skipUpdateProjectLicense}</skipUpdateProjectLicense>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-project</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-profile</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact-manager</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>backport-util-concurrent</groupId>
      <artifactId>backport-util-concurrent</artifactId>
      <type>jar</type>
      <version>3.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-registry</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-interpolation</artifactId>
      <type>jar</type>
      <version>1.11</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-provider-api</artifactId>
      <type>jar</type>
      <version>1.0-beta-6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-repository-metadata</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.reporting</groupId>
      <artifactId>maven-reporting-api</artifactId>
      <type>jar</type>
      <version>3.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.reporting</groupId>
      <artifactId>maven-reporting-impl</artifactId>
      <type>jar</type>
      <version>3.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-shared-utils</artifactId>
      <type>jar</type>
      <version>3.2.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-decoration-model</artifactId>
      <type>jar</type>
      <version>1.7.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-core</artifactId>
      <type>jar</type>
      <version>1.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-logging-api</artifactId>
      <type>jar</type>
      <version>1.5</version>
    </dependency>
    <dependency>
      <groupId>xerces</groupId>
      <artifactId>xercesImpl</artifactId>
      <type>jar</type>
      <version>2.9.1</version>
    </dependency>
    <dependency>
      <groupId>xml-apis</groupId>
      <artifactId>xml-apis</artifactId>
      <type>jar</type>
      <version>1.3.04</version>
    </dependency>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
      <type>jar</type>
      <version>2.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <type>jar</type>
      <version>4.5.4</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <type>jar</type>
      <version>1.10</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore</artifactId>
      <type>jar</type>
      <version>4.4.8</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-sink-api</artifactId>
      <type>jar</type>
      <version>1.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-site-renderer</artifactId>
      <type>jar</type>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-module-xhtml</artifactId>
      <type>jar</type>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-module-fml</artifactId>
      <type>jar</type>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-i18n</artifactId>
      <type>jar</type>
      <version>1.0-beta-7</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-velocity</artifactId>
      <type>jar</type>
      <version>1.1.7</version>
    </dependency>
    <dependency>
      <groupId>org.apache.velocity</groupId>
      <artifactId>velocity</artifactId>
      <type>jar</type>
      <version>1.5</version>
    </dependency>
    <dependency>
      <groupId>oro</groupId>
      <artifactId>oro</artifactId>
      <type>jar</type>
      <version>2.0.8</version>
    </dependency>
    <dependency>
      <groupId>org.apache.velocity</groupId>
      <artifactId>velocity-tools</artifactId>
      <type>jar</type>
      <version>2.0</version>
    </dependency>
    <dependency>
      <groupId>commons-beanutils</groupId>
      <artifactId>commons-beanutils</artifactId>
      <type>jar</type>
      <version>1.7.0</version>
    </dependency>
    <dependency>
      <groupId>commons-digester</groupId>
      <artifactId>commons-digester</artifactId>
      <type>jar</type>
      <version>1.8</version>
    </dependency>
    <dependency>
      <groupId>commons-chain</groupId>
      <artifactId>commons-chain</artifactId>
      <type>jar</type>
      <version>1.1</version>
    </dependency>
    <dependency>
      <groupId>commons-validator</groupId>
      <artifactId>commons-validator</artifactId>
      <type>jar</type>
      <version>1.3.1</version>
    </dependency>
    <dependency>
      <groupId>sslext</groupId>
      <artifactId>sslext</artifactId>
      <type>jar</type>
      <version>1.2-0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.struts</groupId>
      <artifactId>struts-core</artifactId>
      <type>jar</type>
      <version>1.3.8</version>
    </dependency>
    <dependency>
      <groupId>org.apache.struts</groupId>
      <artifactId>struts-taglib</artifactId>
      <type>jar</type>
      <version>1.3.8</version>
    </dependency>
    <dependency>
      <groupId>org.apache.struts</groupId>
      <artifactId>struts-tiles</artifactId>
      <type>jar</type>
      <version>1.3.8</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-component-annotations</artifactId>
      <type>jar</type>
      <version>1.7.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <type>jar</type>
      <version>3.1.0</version>
    </dependency>
    <dependency>
      <groupId>org.nuiton.processor</groupId>
      <artifactId>nuiton-processor</artifactId>
      <type>jar</type>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <type>jar</type>
      <version>3.7</version>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <type>jar</type>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>commons-collections</groupId>
      <artifactId>commons-collections</artifactId>
      <type>jar</type>
      <version>3.2.1</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <type>jar</type>
      <version>2.6</version>
    </dependency>
    <dependency>
      <groupId>org.freemarker</groupId>
      <artifactId>freemarker</artifactId>
      <type>jar</type>
      <version>2.3.20</version>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <type>jar</type>
      <version>1.2.17</version>
    </dependency>
  </dependencies>
</plugin>