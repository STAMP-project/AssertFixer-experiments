<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.5 -->

<plugin>
  <name>License Maven Plugin</name>
  <description>Maven plugin to download and collect license files from project dependencies.</description>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>license-maven-plugin</artifactId>
  <version>1.17-SNAPSHOT</version>
  <goalPrefix>license</goalPrefix>
  <mojos>
    <mojo>
      <goal>add-third-party</goal>
      <description>Goal to generate the third-party license file.
This file contains a list of the dependencies and their licenses. Each dependency and its license is displayed on a single line in the format

  (&lt;license-name&gt;) &lt;project-name&gt; &lt;groupId&gt;:&lt;artifactId&gt;:&lt;version&gt; - &lt;project-url&gt;
The directory containing the license database file is added to the classpath as an additional resource.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-resources</phase>
      <implementation>org.codehaus.mojo.license.AddThirdPartyMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>acceptPomPackaging</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To execute or not this mojo if project packaging is pom.
Note: The default value is false.
</description>
        </parameter>
        <parameter>
          <name>bundleThirdPartyPath</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The path of the bundled third party file to produce when generateBundle is on.
Note: This option is not available for pom module types.
</description>
        </parameter>
        <parameter>
          <name>deployMissingFile</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach the &apos;missing&apos; file as an additional artifact so that it is deployed in the deploy phase.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files. Note: If nothing is filled here, we will use the system property file.encoding.</description>
        </parameter>
        <parameter>
          <name>excludedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some ArtifactsIds This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some GroupIds This is a regular expression that is applied to groupIds (not an ant pattern).</description>
        </parameter>
        <parameter>
          <name>excludedLicenses</name>
          <type>org.codehaus.mojo.license.AbstractAddThirdPartyMojo$ExcludedLicenses</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify some licenses to exclude.
If a such license is found then build will fail when property failOnBlacklist is true.

Since version 1.4, there are three ways to fill this parameter :

-	A simple string (separated by |), the way to use by property configuration:
	&lt;excludedLicenses&gt;licenseA|licenseB&lt;/excludedLicenses&gt;
	or
	-Dlicense.excludedLicenses=licenseA|licenseB
-	A list of string (can only be used in plugin configuration, not via property configuration)
	&lt;excludedLicenses&gt;
  &lt;excludedLicense&gt;licenseA&lt;/excludedLicense&gt;
  &lt;excludedLicense&gt;licenseB&lt;/excludedLicense&gt;
&lt;/excludedLicenses&gt;
-	Since version 1.15
	a URL that contains a set of license names at the target source (only a single URL is accepted as parameter)
	   &lt;includedLicenses&gt;http://my.license.host.com/my-blacklist&lt;/includedLicenses&gt;
	the license-list on the given URL is expected to be list with a line-break after every entry e.g.:
	-	The Apache Software License, Version 2.0
	-	Apache License, Version 2.0
	-	Bouncy Castle Licence
	-	MIT License
	empty lines will be ignored.
</description>
        </parameter>
        <parameter>
          <name>excludedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some scopes.</description>
        </parameter>
        <parameter>
          <name>excludedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some types.</description>
        </parameter>
        <parameter>
          <name>excludeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Exclude transitive dependencies from excluded Artifacts</description>
        </parameter>
        <parameter>
          <name>failIfWarning</name>
          <type>boolean</type>
          <since>1.0</since>
          <deprecated>since 1.14, use now {@link #failOnMissing} or {@link #failOnBlacklist}.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if at least one dependency was detected without a license.</description>
        </parameter>
        <parameter>
          <name>failOnBlacklist</name>
          <type>boolean</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if at least one dependency was blacklisted.</description>
        </parameter>
        <parameter>
          <name>failOnMissing</name>
          <type>boolean</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if at least one dependency was detected without a license.</description>
        </parameter>
        <parameter>
          <name>fileTemplate</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Template used to build the third-party file.
(This template uses freemarker).

Note: This property can either point to a file or a resource on the classpath. In case it points to a file and this plugin is used within a sub-module as part of a multi-module build, you need to make this path resolvable, e.g. by prepending basedir.
</description>
        </parameter>
        <parameter>
          <name>force</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To force generation of the third-party file even if everything is up to date.</description>
        </parameter>
        <parameter>
          <name>generateBundle</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to copy a bundled version of the third-party file. This is useful to avoid for a final application collision name of third party file.
The file will be copied at the bundleThirdPartyPath location.
</description>
        </parameter>
        <parameter>
          <name>includedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some ArtifactsIds This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some GroupIds This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedLicenses</name>
          <type>org.codehaus.mojo.license.AbstractAddThirdPartyMojo$IncludedLicenses</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify some licenses to include.
If this parameter is filled and a license is not in this whitelist then build will fail when property failOnBlacklist is true.

Since version 1.4, there are three ways to fill this parameter :

-	A simple string (separated by |), the way to use by property configuration:
	&lt;includedLicenses&gt;licenseA|licenseB&lt;/includedLicenses&gt;
	or
	-Dlicense.includedLicenses=licenseA|licenseB
-	A list of string (can only be used in plugin configuration, not via property configuration)
	&lt;includedLicenses&gt;
  &lt;includedLicense&gt;licenseA&lt;/includedLicense&gt;
  &lt;includedLicenses&gt;licenseB&lt;/includedLicense&gt;
&lt;/includedLicenses&gt;
-	Since version 1.15
	a URL that contains a set of license names at the target source (only a single URL is accepted as parameter)
	   &lt;includedLicenses&gt;http://my.license.host.com/my-whitelist&lt;/includedLicenses&gt;
	the license-list on the given URL is expected to be list with a line-break after every entry e.g.:
	-	The Apache Software License, Version 2.0
	-	Apache License, Version 2.0
	-	Bouncy Castle Licence
	-	MIT License
	empty lines will be ignored.
</description>
        </parameter>
        <parameter>
          <name>includedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some scopes, if let empty then all scopes will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some types, if let empty then all types will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include transitive dependencies when checking for missing licenses and downloading license files. If this is false, then only direct dependencies are examined.</description>
        </parameter>
        <parameter>
          <name>licenseMerges</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To merge licenses in final file.
Each entry represents a merge (first license is main license to keep), licenses are separated by |.

Example :

&lt;licenseMerges&gt;
&lt;licenseMerge&gt;The Apache Software License|Version 2.0,Apache License, Version 2.0&lt;/licenseMerge&gt;
&lt;/licenseMerges&gt;
&lt;/pre&gt;

Note: This option will be overridden by licenseMergesUrl if it is used by command line.
</description>
        </parameter>
        <parameter>
          <name>licenseMergesFile</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <deprecated>prefer use now {@link #licenseMergesUrl}</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>The file with the merge licenses in order to be used by command line. Note: This option overrides licenseMerges.</description>
        </parameter>
        <parameter>
          <name>licenseMergesUrl</name>
          <type>java.lang.String</type>
          <since>1.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Location of file with the merge licenses in order to be used by command line. Note: This option overrides licenseMerges.</description>
        </parameter>
        <parameter>
          <name>missingFile</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file to write with a license information template for dependencies with unknown license.</description>
        </parameter>
        <parameter>
          <name>missingFileUrl</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>The Url that holds the missing license dependency entries. This is an extension to missingFile. If set then the entries that will be found at this URL will be added additionally to the entries of the missing file.

NOTE:
the response of the URL endpoint must return content that matches the THIRD-PARTY.properties file!</description>
        </parameter>
        <parameter>
          <name>missingLicensesFileArtifact</name>
          <type>java.lang.String</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>To resolve third party licenses from an artifact.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Directory where to generate files.</description>
        </parameter>
        <parameter>
          <name>overrideFile</name>
          <type>java.io.File</type>
          <since>1.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file to write with a license information template for dependencies to override.</description>
        </parameter>
        <parameter>
          <name>skipAddThirdParty</name>
          <type>boolean</type>
          <since>1.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>To skip execution of this mojo.</description>
        </parameter>
        <parameter>
          <name>sortArtifactByName</name>
          <type>boolean</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to sort artifact by name in the generated third-party file.
If not then artifacts are sorted by

groupId:artifactId:version
</description>
        </parameter>
        <parameter>
          <name>thirdPartyFilename</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>File where to write the third-party file.</description>
        </parameter>
        <parameter>
          <name>useMissingFile</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to use the missing licenses file to consolidate the THID-PARTY file.</description>
        </parameter>
        <parameter>
          <name>useRepositoryMissingFiles</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Load files supplying information for missing third party licenses from repositories. The plugin looks for Maven artifacts with coordinates of the form G:A:V:properties:third-party, where the group, artifact, and version are those for dependencies of your project, while the type is &apos;properties&apos; and the classifier is &apos;third-party&apos;.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode. Note: Verbose mode is always on if you starts a debug maven instance (says via -X).</description>
        </parameter>
      </parameters>
      <configuration>
        <acceptPomPackaging implementation="boolean" default-value="false">${license.acceptPomPackaging}</acceptPomPackaging>
        <bundleThirdPartyPath implementation="java.lang.String" default-value="META-INF/${project.artifactId}-THIRD-PARTY.txt">${license.bundleThirdPartyPath}</bundleThirdPartyPath>
        <deployMissingFile implementation="boolean" default-value="true">${license.deployMissingFile}</deployMissingFile>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <excludedArtifacts implementation="java.lang.String">${license.excludedArtifacts}</excludedArtifacts>
        <excludedGroups implementation="java.lang.String">${license.excludedGroups}</excludedGroups>
        <excludedLicenses implementation="org.codehaus.mojo.license.AbstractAddThirdPartyMojo$ExcludedLicenses">${license.excludedLicenses}</excludedLicenses>
        <excludedScopes implementation="java.lang.String" default-value="system">${license.excludedScopes}</excludedScopes>
        <excludedTypes implementation="java.lang.String">${license.excludedTypes}</excludedTypes>
        <excludeTransitiveDependencies implementation="boolean" default-value="false">${license.excludeTransitiveDependencies}</excludeTransitiveDependencies>
        <failIfWarning implementation="boolean" default-value="false">${license.failIfWarning}</failIfWarning>
        <failOnBlacklist implementation="boolean" default-value="false">${license.failOnBlacklist}</failOnBlacklist>
        <failOnMissing implementation="boolean" default-value="false">${license.failOnMissing}</failOnMissing>
        <fileTemplate implementation="java.lang.String" default-value="/org/codehaus/mojo/license/third-party-file.ftl">${license.fileTemplate}</fileTemplate>
        <force implementation="boolean" default-value="false">${license.force}</force>
        <generateBundle implementation="boolean" default-value="false">${license.generateBundle}</generateBundle>
        <includedArtifacts implementation="java.lang.String">${license.includedArtifacts}</includedArtifacts>
        <includedGroups implementation="java.lang.String">${license.includedGroups}</includedGroups>
        <includedLicenses implementation="org.codehaus.mojo.license.AbstractAddThirdPartyMojo$IncludedLicenses">${license.includedLicenses}</includedLicenses>
        <includedScopes implementation="java.lang.String">${license.includedScopes}</includedScopes>
        <includedTypes implementation="java.lang.String">${license.includedTypes}</includedTypes>
        <includeTransitiveDependencies implementation="boolean" default-value="true">${license.includeTransitiveDependencies}</includeTransitiveDependencies>
        <licenseMergesFile implementation="java.lang.String">${license.licenseMergesFile}</licenseMergesFile>
        <licenseMergesUrl implementation="java.lang.String">${license.licenseMergesUrl}</licenseMergesUrl>
        <missingFile implementation="java.io.File" default-value="src/license/THIRD-PARTY.properties">${license.missingFile}</missingFile>
        <missingFileUrl implementation="java.lang.String">${license.missingFileUrl}</missingFileUrl>
        <missingLicensesFileArtifact implementation="java.lang.String">${license.missingLicensesFileArtifact}</missingLicensesFileArtifact>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/license">${license.outputDirectory}</outputDirectory>
        <overrideFile implementation="java.io.File" default-value="src/license/override-THIRD-PARTY.properties">${license.overrideFile}</overrideFile>
        <skipAddThirdParty implementation="boolean" default-value="false">${license.skipAddThirdParty}</skipAddThirdParty>
        <sortArtifactByName implementation="boolean" default-value="false">${license.sortArtifactByName}</sortArtifactByName>
        <thirdPartyFilename implementation="java.lang.String" default-value="THIRD-PARTY.txt">${license.thirdPartyFilename}</thirdPartyFilename>
        <useMissingFile implementation="boolean" default-value="false">${license.useMissingFile}</useMissingFile>
        <useRepositoryMissingFiles implementation="boolean" default-value="true">${license.useRepositoryMissingFiles}</useRepositoryMissingFiles>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>aggregate-add-third-party</goal>
      <description>This goal forks executions of the add-third-party goal for all the leaf projects of the tree of modules below the point where it is executed. Note that this plugin sets a specific name, &apos;add-third-party&apos;, for the forked executions in the individual projects. From command level, then even though the execution of this goal is named &apos;default-cli&apos;, the forked executions have the name &apos;add-third-party&apos;. Thus, to use the pluginManagement element of the POM to set options, you have to name the execution &apos;add-third-party&apos;, not &apos;default-cli&apos;.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-resources</phase>
      <implementation>org.codehaus.mojo.license.AggregatorAddThirdPartyMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>acceptPomPackaging</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To execute or not this mojo if project packaging is pom.
Note: The default value is false.
</description>
        </parameter>
        <parameter>
          <name>aggregateMissingLicensesFile</name>
          <type>java.io.File</type>
          <since>1.11</since>
          <deprecated>since 1.14, please use now {@link #missingFile}.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>To resolve third party licenses from a file.</description>
        </parameter>
        <parameter>
          <name>aggregateMissingLicensesFileArtifact</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <deprecated>since 1.14, please use now {@link #missingLicensesFileArtifact}</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>To resolve third party licenses from an artifact.</description>
        </parameter>
        <parameter>
          <name>bundleThirdPartyPath</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The path of the bundled third party file to produce when generateBundle is on.
Note: This option is not available for pom module types.
</description>
        </parameter>
        <parameter>
          <name>deployMissingFile</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach the &apos;missing&apos; file as an additional artifact so that it is deployed in the deploy phase.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files. Note: If nothing is filled here, we will use the system property file.encoding.</description>
        </parameter>
        <parameter>
          <name>excludedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some ArtifactsIds This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some GroupIds This is a regular expression that is applied to groupIds (not an ant pattern).</description>
        </parameter>
        <parameter>
          <name>excludedLicenses</name>
          <type>org.codehaus.mojo.license.AbstractAddThirdPartyMojo$ExcludedLicenses</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify some licenses to exclude.
If a such license is found then build will fail when property failOnBlacklist is true.

Since version 1.4, there are three ways to fill this parameter :

-	A simple string (separated by |), the way to use by property configuration:
	&lt;excludedLicenses&gt;licenseA|licenseB&lt;/excludedLicenses&gt;
	or
	-Dlicense.excludedLicenses=licenseA|licenseB
-	A list of string (can only be used in plugin configuration, not via property configuration)
	&lt;excludedLicenses&gt;
  &lt;excludedLicense&gt;licenseA&lt;/excludedLicense&gt;
  &lt;excludedLicense&gt;licenseB&lt;/excludedLicense&gt;
&lt;/excludedLicenses&gt;
-	Since version 1.15
	a URL that contains a set of license names at the target source (only a single URL is accepted as parameter)
	   &lt;includedLicenses&gt;http://my.license.host.com/my-blacklist&lt;/includedLicenses&gt;
	the license-list on the given URL is expected to be list with a line-break after every entry e.g.:
	-	The Apache Software License, Version 2.0
	-	Apache License, Version 2.0
	-	Bouncy Castle Licence
	-	MIT License
	empty lines will be ignored.
</description>
        </parameter>
        <parameter>
          <name>excludedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some scopes.</description>
        </parameter>
        <parameter>
          <name>excludedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some types.</description>
        </parameter>
        <parameter>
          <name>excludeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Exclude transitive dependencies from excluded Artifacts</description>
        </parameter>
        <parameter>
          <name>failIfWarning</name>
          <type>boolean</type>
          <since>1.0</since>
          <deprecated>since 1.14, use now {@link #failOnMissing} or {@link #failOnBlacklist}.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if at least one dependency was detected without a license.</description>
        </parameter>
        <parameter>
          <name>failOnBlacklist</name>
          <type>boolean</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if at least one dependency was blacklisted.</description>
        </parameter>
        <parameter>
          <name>failOnMissing</name>
          <type>boolean</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if at least one dependency was detected without a license.</description>
        </parameter>
        <parameter>
          <name>fileTemplate</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Template used to build the third-party file.
(This template uses freemarker).

Note: This property can either point to a file or a resource on the classpath. In case it points to a file and this plugin is used within a sub-module as part of a multi-module build, you need to make this path resolvable, e.g. by prepending basedir.
</description>
        </parameter>
        <parameter>
          <name>force</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To force generation of the third-party file even if everything is up to date.</description>
        </parameter>
        <parameter>
          <name>generateBundle</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to copy a bundled version of the third-party file. This is useful to avoid for a final application collision name of third party file.
The file will be copied at the bundleThirdPartyPath location.
</description>
        </parameter>
        <parameter>
          <name>includedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some ArtifactsIds This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some GroupIds This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedLicenses</name>
          <type>org.codehaus.mojo.license.AbstractAddThirdPartyMojo$IncludedLicenses</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify some licenses to include.
If this parameter is filled and a license is not in this whitelist then build will fail when property failOnBlacklist is true.

Since version 1.4, there are three ways to fill this parameter :

-	A simple string (separated by |), the way to use by property configuration:
	&lt;includedLicenses&gt;licenseA|licenseB&lt;/includedLicenses&gt;
	or
	-Dlicense.includedLicenses=licenseA|licenseB
-	A list of string (can only be used in plugin configuration, not via property configuration)
	&lt;includedLicenses&gt;
  &lt;includedLicense&gt;licenseA&lt;/includedLicense&gt;
  &lt;includedLicenses&gt;licenseB&lt;/includedLicense&gt;
&lt;/includedLicenses&gt;
-	Since version 1.15
	a URL that contains a set of license names at the target source (only a single URL is accepted as parameter)
	   &lt;includedLicenses&gt;http://my.license.host.com/my-whitelist&lt;/includedLicenses&gt;
	the license-list on the given URL is expected to be list with a line-break after every entry e.g.:
	-	The Apache Software License, Version 2.0
	-	Apache License, Version 2.0
	-	Bouncy Castle Licence
	-	MIT License
	empty lines will be ignored.
</description>
        </parameter>
        <parameter>
          <name>includedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some scopes, if let empty then all scopes will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some types, if let empty then all types will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include transitive dependencies when checking for missing licenses and downloading license files. If this is false, then only direct dependencies are examined.</description>
        </parameter>
        <parameter>
          <name>licenseMerges</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To merge licenses in final file.
Each entry represents a merge (first license is main license to keep), licenses are separated by |.

Example :

&lt;licenseMerges&gt;
&lt;licenseMerge&gt;The Apache Software License|Version 2.0,Apache License, Version 2.0&lt;/licenseMerge&gt;
&lt;/licenseMerges&gt;
&lt;/pre&gt;

Note: This option will be overridden by licenseMergesUrl if it is used by command line.
</description>
        </parameter>
        <parameter>
          <name>licenseMergesFile</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <deprecated>prefer use now {@link #licenseMergesUrl}</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>The file with the merge licenses in order to be used by command line. Note: This option overrides licenseMerges.</description>
        </parameter>
        <parameter>
          <name>licenseMergesUrl</name>
          <type>java.lang.String</type>
          <since>1.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Location of file with the merge licenses in order to be used by command line. Note: This option overrides licenseMerges.</description>
        </parameter>
        <parameter>
          <name>missingFile</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file to write with a license information template for dependencies with unknown license.</description>
        </parameter>
        <parameter>
          <name>missingFileUrl</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>The Url that holds the missing license dependency entries. This is an extension to missingFile. If set then the entries that will be found at this URL will be added additionally to the entries of the missing file.

NOTE:
the response of the URL endpoint must return content that matches the THIRD-PARTY.properties file!</description>
        </parameter>
        <parameter>
          <name>missingLicensesFileArtifact</name>
          <type>java.lang.String</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>To resolve third party licenses from an artifact.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Directory where to generate files.</description>
        </parameter>
        <parameter>
          <name>overrideFile</name>
          <type>java.io.File</type>
          <since>1.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file to write with a license information template for dependencies to override.</description>
        </parameter>
        <parameter>
          <name>skipAggregateAddThirdParty</name>
          <type>boolean</type>
          <since>1.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>To skip execution of this mojo.</description>
        </parameter>
        <parameter>
          <name>sortArtifactByName</name>
          <type>boolean</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to sort artifact by name in the generated third-party file.
If not then artifacts are sorted by

groupId:artifactId:version
</description>
        </parameter>
        <parameter>
          <name>thirdPartyFilename</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>File where to write the third-party file.</description>
        </parameter>
        <parameter>
          <name>useMissingFile</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to use the missing licenses file to consolidate the THID-PARTY file.</description>
        </parameter>
        <parameter>
          <name>useRepositoryMissingFiles</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Load files supplying information for missing third party licenses from repositories. The plugin looks for Maven artifacts with coordinates of the form G:A:V:properties:third-party, where the group, artifact, and version are those for dependencies of your project, while the type is &apos;properties&apos; and the classifier is &apos;third-party&apos;.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode. Note: Verbose mode is always on if you starts a debug maven instance (says via -X).</description>
        </parameter>
      </parameters>
      <configuration>
        <acceptPomPackaging implementation="boolean" default-value="false">${license.acceptPomPackaging}</acceptPomPackaging>
        <aggregateMissingLicensesFile implementation="java.io.File" default-value="${project.basedir}/src/license/THIRD-PARTY.properties">${license.aggregateMissingLicensesFile}</aggregateMissingLicensesFile>
        <aggregateMissingLicensesFileArtifact implementation="java.lang.String">${license.aggregateMissingLicensesFileArtifact}</aggregateMissingLicensesFileArtifact>
        <bundleThirdPartyPath implementation="java.lang.String" default-value="META-INF/${project.artifactId}-THIRD-PARTY.txt">${license.bundleThirdPartyPath}</bundleThirdPartyPath>
        <deployMissingFile implementation="boolean" default-value="true">${license.deployMissingFile}</deployMissingFile>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <excludedArtifacts implementation="java.lang.String">${license.excludedArtifacts}</excludedArtifacts>
        <excludedGroups implementation="java.lang.String">${license.excludedGroups}</excludedGroups>
        <excludedLicenses implementation="org.codehaus.mojo.license.AbstractAddThirdPartyMojo$ExcludedLicenses">${license.excludedLicenses}</excludedLicenses>
        <excludedScopes implementation="java.lang.String" default-value="system">${license.excludedScopes}</excludedScopes>
        <excludedTypes implementation="java.lang.String">${license.excludedTypes}</excludedTypes>
        <excludeTransitiveDependencies implementation="boolean" default-value="false">${license.excludeTransitiveDependencies}</excludeTransitiveDependencies>
        <failIfWarning implementation="boolean" default-value="false">${license.failIfWarning}</failIfWarning>
        <failOnBlacklist implementation="boolean" default-value="false">${license.failOnBlacklist}</failOnBlacklist>
        <failOnMissing implementation="boolean" default-value="false">${license.failOnMissing}</failOnMissing>
        <fileTemplate implementation="java.lang.String" default-value="/org/codehaus/mojo/license/third-party-file.ftl">${license.fileTemplate}</fileTemplate>
        <force implementation="boolean" default-value="false">${license.force}</force>
        <generateBundle implementation="boolean" default-value="false">${license.generateBundle}</generateBundle>
        <includedArtifacts implementation="java.lang.String">${license.includedArtifacts}</includedArtifacts>
        <includedGroups implementation="java.lang.String">${license.includedGroups}</includedGroups>
        <includedLicenses implementation="org.codehaus.mojo.license.AbstractAddThirdPartyMojo$IncludedLicenses">${license.includedLicenses}</includedLicenses>
        <includedScopes implementation="java.lang.String">${license.includedScopes}</includedScopes>
        <includedTypes implementation="java.lang.String">${license.includedTypes}</includedTypes>
        <includeTransitiveDependencies implementation="boolean" default-value="true">${license.includeTransitiveDependencies}</includeTransitiveDependencies>
        <licenseMergesFile implementation="java.lang.String">${license.licenseMergesFile}</licenseMergesFile>
        <licenseMergesUrl implementation="java.lang.String">${license.licenseMergesUrl}</licenseMergesUrl>
        <missingFile implementation="java.io.File" default-value="src/license/THIRD-PARTY.properties">${license.missingFile}</missingFile>
        <missingFileUrl implementation="java.lang.String">${license.missingFileUrl}</missingFileUrl>
        <missingLicensesFileArtifact implementation="java.lang.String">${license.missingLicensesFileArtifact}</missingLicensesFileArtifact>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/license">${license.outputDirectory}</outputDirectory>
        <overrideFile implementation="java.io.File" default-value="src/license/override-THIRD-PARTY.properties">${license.overrideFile}</overrideFile>
        <skipAggregateAddThirdParty implementation="boolean" default-value="false">${license.skipAggregateAddThirdParty}</skipAggregateAddThirdParty>
        <sortArtifactByName implementation="boolean" default-value="false">${license.sortArtifactByName}</sortArtifactByName>
        <thirdPartyFilename implementation="java.lang.String" default-value="THIRD-PARTY.txt">${license.thirdPartyFilename}</thirdPartyFilename>
        <useMissingFile implementation="boolean" default-value="false">${license.useMissingFile}</useMissingFile>
        <useRepositoryMissingFiles implementation="boolean" default-value="true">${license.useRepositoryMissingFiles}</useRepositoryMissingFiles>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>aggregate-download-licenses</goal>
      <description>Download the license files of all aggregated dependencies of the current project, and generate a summary file containing a list of all dependencies and their licenses. Created on 23/05/16.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>org.codehaus.mojo.license.AggregateDownloadLicensesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.10</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>excludedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some ArtifactsIds This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some GroupIds This is a regular expression that is applied to groupIds (not an ant pattern).</description>
        </parameter>
        <parameter>
          <name>excludedScopes</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some scopes.</description>
        </parameter>
        <parameter>
          <name>excludedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some types.</description>
        </parameter>
        <parameter>
          <name>excludeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Exclude transitive dependencies from excluded artifacts.</description>
        </parameter>
        <parameter>
          <name>executeOnlyOnRootModule</name>
          <alias>aggregateDownloadLicenses.executeOnlyOnRootModule</alias>
          <type>boolean</type>
          <since>1.10</since>
          <required>false</required>
          <editable>true</editable>
          <description>To generate report only on root module. Default value is true, since aggregate mojo should only be executed on root module.</description>
        </parameter>
        <parameter>
          <name>includedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some ArtifactsIds This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedGroups</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some GroupIds This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedScopes</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some scopes, if let empty then all scopes will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some types, if let empty then all types will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include transitive dependencies when downloading license files.</description>
        </parameter>
        <parameter>
          <name>licensesConfigFile</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Input file containing a mapping between each dependency and it&apos;s license information.</description>
        </parameter>
        <parameter>
          <name>licensesOutputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The directory to which the dependency licenses should be written.</description>
        </parameter>
        <parameter>
          <name>licensesOutputFile</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The output file containing a mapping between each dependency and it&apos;s license information.</description>
        </parameter>
        <parameter>
          <name>offline</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Settings offline flag (will not download anything if setted to true).</description>
        </parameter>
        <parameter>
          <name>organizeLicensesByDependencies</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to organize the licenses by dependencies. When this is done, each dependency will get its full license file, even if already downloaded for another dependency.</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Don&apos;t show warnings about bad or missing license files.</description>
        </parameter>
        <parameter>
          <name>skipAggregateDownloadLicenses</name>
          <type>boolean</type>
          <since>1.10</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip to generate the report.</description>
        </parameter>
        <parameter>
          <name>sortByGroupIdAndArtifactId</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <excludedArtifacts implementation="java.lang.String">${license.excludedArtifacts}</excludedArtifacts>
        <excludedGroups implementation="java.lang.String">${license.excludedGroups}</excludedGroups>
        <excludedScopes implementation="java.lang.String" default-value="system">${license.excludedScopes}</excludedScopes>
        <excludedTypes implementation="java.lang.String">${license.excludedTypes}</excludedTypes>
        <excludeTransitiveDependencies implementation="boolean" default-value="false">${license.excludeTransitiveDependencies}</excludeTransitiveDependencies>
        <executeOnlyOnRootModule implementation="boolean" default-value="true">${license.executeOnlyOnRootModule}</executeOnlyOnRootModule>
        <includedArtifacts implementation="java.lang.String">${license.includedArtifacts}</includedArtifacts>
        <includedGroups implementation="java.lang.String">${license.includedGroups}</includedGroups>
        <includedScopes implementation="java.lang.String">${license.includedScopes}</includedScopes>
        <includedTypes implementation="java.lang.String">${license.includedTypes}</includedTypes>
        <includeTransitiveDependencies implementation="boolean" default-value="true"/>
        <licensesConfigFile implementation="java.io.File" default-value="${project.basedir}/src/license/licenses.xml">${licensesConfigFile}</licensesConfigFile>
        <licensesOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-resources/licenses">${licensesOutputDirectory}</licensesOutputDirectory>
        <licensesOutputFile implementation="java.io.File" default-value="${project.build.directory}/generated-resources/licenses.xml">${licensesOutputFile}</licensesOutputFile>
        <offline implementation="boolean" default-value="${settings.offline}"/>
        <organizeLicensesByDependencies implementation="boolean" default-value="false">${license.organizeLicensesByDependencies}</organizeLicensesByDependencies>
        <quiet implementation="boolean" default-value="false"/>
        <skipAggregateDownloadLicenses implementation="boolean" default-value="false">${license.skipAggregateDownloadLicenses}</skipAggregateDownloadLicenses>
        <sortByGroupIdAndArtifactId implementation="boolean" default-value="false">${license.sortByGroupIdAndArtifactId}</sortByGroupIdAndArtifactId>
      </configuration>
    </mojo>
    <mojo>
      <goal>aggregate-third-party-report</goal>
      <description>Generates a report of all third-parties detected in the module. Created on 22/05/16.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>true</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.AggregatorThirdPartyReportMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.10</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files.
Note: If nothing is filled here, we will use the system property file.encoding.
</description>
        </parameter>
        <parameter>
          <name>excludedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some ArtifactsIds</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some GroupIds</description>
        </parameter>
        <parameter>
          <name>excludedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some scopes.</description>
        </parameter>
        <parameter>
          <name>excludedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some types.</description>
        </parameter>
        <parameter>
          <name>excludeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude transitive dependencies from excluded artifacts.</description>
        </parameter>
        <parameter>
          <name>executeOnlyOnRootModule</name>
          <alias>aggregateThirdPartyReport.executeOnlyOnRootModule</alias>
          <type>boolean</type>
          <since>1.10</since>
          <required>false</required>
          <editable>true</editable>
          <description>To generate report only on root module. Default value is true, since aggregate report should only be executed on root module.</description>
        </parameter>
        <parameter>
          <name>includedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some ArtifactsIds</description>
        </parameter>
        <parameter>
          <name>includedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some GroupIds</description>
        </parameter>
        <parameter>
          <name>includedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some scopes, if let empty then all scopes will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some types, if let empty then all types will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include transitive dependencies when looking for missing licenses and downloading license files.</description>
        </parameter>
        <parameter>
          <name>licenseMerges</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To merge licenses in final file.
Each entry represents a merge (first license is main license to keep), licenses are separated by |.

Example :

&lt;licenseMerges&gt;
&lt;licenseMerge&gt;The Apache Software License|Version 2.0,Apache License, Version 2.0&lt;/licenseMerge&gt;
&lt;/licenseMerges&gt;
&lt;/pre&gt;
</description>
        </parameter>
        <parameter>
          <name>missingFile</name>
          <type>java.io.File</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file where to fill the license for dependencies with unknwon license.</description>
        </parameter>
        <parameter>
          <name>missingFileUrl</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>The Url that holds the missing license dependency entries. This is an extension to missingFile. If set then the entries that will be found at this URL will be added additionally to the entries of the missing file.

NOTE:
the response of the URL endpoint must return content that matches the THIRD-PARTY.properties file!</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.1</since>
          <required>true</required>
          <editable>true</editable>
          <description>The output directory for the report. Note that this parameter is only evaluated if the goal is run directly from the command line. If the goal is run indirectly as part of a site generation, the output directory configured in the Maven Site Plugin is used instead.</description>
        </parameter>
        <parameter>
          <name>overrideFile</name>
          <type>java.io.File</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file where to fill the override license for dependencies.</description>
        </parameter>
        <parameter>
          <name>skipAggregateThirdPartyReport</name>
          <type>boolean</type>
          <since>1.10</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip to generate the report.</description>
        </parameter>
        <parameter>
          <name>useMissingFile</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to use the missing licenses file to consolidate the THID-PARTY file.</description>
        </parameter>
        <parameter>
          <name>useRepositoryMissingFiles</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Load from repositories third party missing files.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode.
Note: Verbose mode is always on if you starts a debug maven instance (says via -X).
</description>
        </parameter>
      </parameters>
      <configuration>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <excludedArtifacts implementation="java.lang.String">${license.excludedArtifacts}</excludedArtifacts>
        <excludedGroups implementation="java.lang.String">${license.excludedGroups}</excludedGroups>
        <excludedScopes implementation="java.lang.String" default-value="system">${license.excludedScopes}</excludedScopes>
        <excludedTypes implementation="java.lang.String">${license.excludedTypes}</excludedTypes>
        <excludeTransitiveDependencies implementation="boolean" default-value="false">${license.excludeTransitiveDependencies}</excludeTransitiveDependencies>
        <executeOnlyOnRootModule implementation="boolean" default-value="true">${license.executeOnlyOnRootModule}</executeOnlyOnRootModule>
        <includedArtifacts implementation="java.lang.String">${license.includedArtifacts}</includedArtifacts>
        <includedGroups implementation="java.lang.String">${license.includedGroups}</includedGroups>
        <includedScopes implementation="java.lang.String">${license.includedScopes}</includedScopes>
        <includedTypes implementation="java.lang.String">${license.includedTypes}</includedTypes>
        <includeTransitiveDependencies implementation="boolean" default-value="true">${license.includeTransitiveDependencies}</includeTransitiveDependencies>
        <missingFile implementation="java.io.File" default-value="src/license/THIRD-PARTY.properties">${license.missingFile}</missingFile>
        <missingFileUrl implementation="java.lang.String">${license.missingFileUrl}</missingFileUrl>
        <outputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}"/>
        <overrideFile implementation="java.io.File" default-value="src/license/override-THIRD-PARTY.properties">${license.overrideFile}</overrideFile>
        <skipAggregateThirdPartyReport implementation="boolean" default-value="false">${license.skipAggregateThirdPartyReport}</skipAggregateThirdPartyReport>
        <useMissingFile implementation="boolean" default-value="false">${license.useMissingFile}</useMissingFile>
        <useRepositoryMissingFiles implementation="boolean" default-value="true">${license.useRepositoryMissingFiles}</useRepositoryMissingFiles>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>check-file-header</goal>
      <description>The goal to check if the state of header on project source files.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.CheckFileHeaderMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.2</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addJavaLicenseAfterPackage</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to add the license header in java files after the package statement.
This is a practice used by many people (apache, codehaus, ...).

Note: By default this property is then to true since it is a good practice.
</description>
        </parameter>
        <parameter>
          <name>addSvnKeyWords</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to add svn:keywords on new header.
Will add svn keywords :

Id, HeadURL
Note: This parameter is used by the descriptionTemplate, so if you change this template, the parameter could be no more used (depends what you put in your own template...).</description>
        </parameter>
        <parameter>
          <name>canUpdateCopyright</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to authorize update of the copyright part of the header.
Note: By default, do NOT authorize it since copyright part should be handled by developpers (holder can change on each file for example).
</description>
        </parameter>
        <parameter>
          <name>canUpdateDescription</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to authorize update of the description part of the header.
Note: By default, do NOT authorize it since description can change on each file).
</description>
        </parameter>
        <parameter>
          <name>canUpdateLicense</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to authorize update of the license part of the header.
Note: By default, authorize it since license part should always be generated by the plugin.
</description>
        </parameter>
        <parameter>
          <name>copyrightOwners</name>
          <type>java.lang.String</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional copyright owners.
If not set, organizationName parameter will be used instead.
</description>
        </parameter>
        <parameter>
          <name>descriptionTemplate</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Template used to build the description section of the license header.
(This template use freemarker).
</description>
        </parameter>
        <parameter>
          <name>emptyLineAfterHeader</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to indicate if there should be an empty line after the header.
Checkstyle requires empty line between license header and package statement. If you are using addJavaLicenseAfterPackage=false it could make sense to set this to true.
Note: By default this property is set to false to keep old behavior.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files. Note: If nothing is filled here, we will use the system property file.encoding.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specific files to excludes, separated by a comma. By default, those file types are excluded:
-	modelisation
-	images
</description>
        </parameter>
        <parameter>
          <name>extraExtensions</name>
          <type>java.util.Map</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To associate extra extension files to an existing comment style.
Keys of the map are the extension of extra files to treat, and the value is the comment style you want to associate.

For example, to treat file with extensions java2 and jdata as java files (says using the java comment style, declare this in your plugin configuration :

&lt;extraExtensions&gt;
&lt;java2&gt;java&lt;/java2&gt;
&lt;jdata&gt;java&lt;/jdata&gt;
&lt;/extraExtensions&gt;
</description>
        </parameter>
        <parameter>
          <name>extraFiles</name>
          <type>java.util.Map</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>To associate extra files to an existing comment style.
Keys of the map are the name of extra files to treat, and the value is the comment style you want to associate.

For example, to treat a file named DockerFile as properties files (says using the properties comment style, declare this in your plugin configuration :

&lt;extraFiles&gt;
&lt;DockerFile&gt;properties&lt;/DockerFile&gt;
&lt;/extraFiles&gt;
</description>
        </parameter>
        <parameter>
          <name>extraTemplateParameters</name>
          <type>java.util.Map</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional extra templates parameters.
If filled, they are available with prefix extra_ to process license content (says the header and license content).
</description>
        </parameter>
        <parameter>
          <name>failOnMissingHeader</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if there is some files with no header are detected.</description>
        </parameter>
        <parameter>
          <name>failOnNotUptodateHeader</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if there is some files with headers to update.</description>
        </parameter>
        <parameter>
          <name>ignoreNoFileToScan</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to ignore no files to scan.
This flag will suppress the &apos;No file to scan&apos; warning. This will allow you to set the plug-in in the root pom of your project without getting a lot of warnings for aggregation modules / artifacts.
Note: By default this property is set to false to keep old behavior.</description>
        </parameter>
        <parameter>
          <name>ignoreTag</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A tag to place on files that will be ignored by the plugin.
Sometimes, it is necessary to do this when file is under a specific license.

Note: If no sets, will use the default tag %% Ignore-License
</description>
        </parameter>
        <parameter>
          <name>inceptionYear</name>
          <type>java.lang.Integer</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Inception year of the project.
Will be used as first year of copyright section in new header.
</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specific files to includes, separated by a comma. By default, it is &apos;** /*&apos;.
Note: This parameter is not usable if you are still using a project file descriptor.
</description>
        </parameter>
        <parameter>
          <name>keepBackup</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to keep a backup of every modified file.</description>
        </parameter>
        <parameter>
          <name>licenseName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the license to use in the project.</description>
        </parameter>
        <parameter>
          <name>licenseResolver</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify an external extra licenses repository resolver (says the base url of the repository where the license.properties is present).
Note: If you want to refer to a file within this project, start the expression with ${project.baseUri}
</description>
        </parameter>
        <parameter>
          <name>lineSeparator</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>To specify a line separator to use. If not set, will use system property line.separator.</description>
        </parameter>
        <parameter>
          <name>organizationName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project&apos;s organization.
Will be used as copyrigth&apos;s holder in new header.
</description>
        </parameter>
        <parameter>
          <name>processEndTag</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To overwrite the processEndTag used to build header model.
See http://mojo.codehaus.org/license-maven-plugin/header.html#Configuration .
</description>
        </parameter>
        <parameter>
          <name>processStartTag</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To overwrite the processStartTag used to build header model.
See http://mojo.codehaus.org/license-maven-plugin/header.html#Configuration .
</description>
        </parameter>
        <parameter>
          <name>projectName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project (or module).
Will be used as description section of new header.
</description>
        </parameter>
        <parameter>
          <name>roots</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify the base dir from which we apply the license.
Should be on form &apos;root1,root2,rootn&apos;.

By default, the main roots are &apos;src, target/generated-sources, target/processed-sources&apos;.

Note: If some of these roots do not exist, they will be simply ignored.

Note: This parameter is not useable if you are still using a project file descriptor.
</description>
        </parameter>
        <parameter>
          <name>sectionDelimiter</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To overwrite the sectionDelimiter used to build header model.
See http://mojo.codehaus.org/license-maven-plugin/header.html#Configuration .
</description>
        </parameter>
        <parameter>
          <name>skipCheckLicense</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to skip the goal.</description>
        </parameter>
        <parameter>
          <name>trimHeaderLine</name>
          <type>boolean</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to indicate if there should be an empty line after the header.
Checkstyle usually requires no trailing whitespace. If it is the case it could make sense to set this to true
Note: By default this property is set to false to keep old behavior.</description>
        </parameter>
        <parameter>
          <name>useJavaNoReformatCommentStartTag</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to use for java comment start tag with no reformat syntax /*-.
See http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-141999.html#350
</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode. Note: Verbose mode is always on if you starts a debug maven instance (says via -X).</description>
        </parameter>
      </parameters>
      <configuration>
        <addJavaLicenseAfterPackage implementation="boolean" default-value="true">${license.addJavaLicenseAfterPackage}</addJavaLicenseAfterPackage>
        <addSvnKeyWords implementation="boolean" default-value="false">${license.addSvnKeyWords}</addSvnKeyWords>
        <canUpdateCopyright implementation="boolean" default-value="false">${license.canUpdateCopyright}</canUpdateCopyright>
        <canUpdateDescription implementation="boolean" default-value="false">${license.canUpdateDescription}</canUpdateDescription>
        <canUpdateLicense implementation="boolean" default-value="true">${license.canUpdateLicense}</canUpdateLicense>
        <copyrightOwners implementation="java.lang.String">${license.copyrightOwners}</copyrightOwners>
        <descriptionTemplate implementation="java.lang.String" default-value="/org/codehaus/mojo/license/default-file-header-description.ftl">${license.descriptionTemplate}</descriptionTemplate>
        <emptyLineAfterHeader implementation="boolean" default-value="false">${license.emptyLineAfterHeader}</emptyLineAfterHeader>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <excludes implementation="java.lang.String[]">${license.excludes}</excludes>
        <failOnMissingHeader implementation="boolean" default-value="false">${license.failOnMissingHeader}</failOnMissingHeader>
        <failOnNotUptodateHeader implementation="boolean" default-value="false">${license.failOnNotUptodateHeader}</failOnNotUptodateHeader>
        <ignoreNoFileToScan implementation="boolean" default-value="false">${license.ignoreNoFileToScan}</ignoreNoFileToScan>
        <ignoreTag implementation="java.lang.String">${license.ignoreTag}</ignoreTag>
        <inceptionYear implementation="java.lang.Integer" default-value="${project.inceptionYear}">${license.inceptionYear}</inceptionYear>
        <includes implementation="java.lang.String[]">${license.includes}</includes>
        <keepBackup implementation="boolean" default-value="false">${license.keepBackup}</keepBackup>
        <licenseName implementation="java.lang.String">${license.licenseName}</licenseName>
        <licenseResolver implementation="java.lang.String">${license.licenseResolver}</licenseResolver>
        <lineSeparator implementation="java.lang.String">${license.lineSeparator}</lineSeparator>
        <organizationName implementation="java.lang.String" default-value="${project.organization.name}">${license.organizationName}</organizationName>
        <processEndTag implementation="java.lang.String">${license.processEndTag}</processEndTag>
        <processStartTag implementation="java.lang.String">${license.processStartTag}</processStartTag>
        <projectName implementation="java.lang.String" default-value="${project.name}">${license.projectName}</projectName>
        <roots implementation="java.lang.String[]">${license.roots}</roots>
        <sectionDelimiter implementation="java.lang.String">${license.sectionDelimiter}</sectionDelimiter>
        <skipCheckLicense implementation="boolean" default-value="false">${license.skipCheckLicense}</skipCheckLicense>
        <trimHeaderLine implementation="boolean" default-value="false">${license.trimHeaderLine}</trimHeaderLine>
        <useJavaNoReformatCommentStartTag implementation="boolean" default-value="true">${license.useJavaNoReformatCommentStartTag}</useJavaNoReformatCommentStartTag>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>comment-style-list</goal>
      <description>Displays all the available comment style to box file headers.</description>
      <requiresDirectInvocation>true</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.CommentStyleListMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to display also the content of each license.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files. Note: If nothing is filled here, we will use the system property file.encoding.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode. Note: Verbose mode is always on if you starts a debug maven instance (says via -X).</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean">${detail}</detail>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>download-licenses</goal>
      <description>Download the license files of all the current project&apos;s dependencies, and generate a summary file containing a list of all dependencies and their licenses.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>org.codehaus.mojo.license.DownloadLicensesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>excludedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some ArtifactsIds This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some GroupIds This is a regular expression that is applied to groupIds (not an ant pattern).</description>
        </parameter>
        <parameter>
          <name>excludedScopes</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some scopes.</description>
        </parameter>
        <parameter>
          <name>excludedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some types.</description>
        </parameter>
        <parameter>
          <name>excludeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Exclude transitive dependencies from excluded artifacts.</description>
        </parameter>
        <parameter>
          <name>includedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some ArtifactsIds This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedGroups</name>
          <type>java.lang.String</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some GroupIds This is a regular expression applied to artifactIds.</description>
        </parameter>
        <parameter>
          <name>includedScopes</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some scopes, if let empty then all scopes will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some types, if let empty then all types will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include transitive dependencies when downloading license files.</description>
        </parameter>
        <parameter>
          <name>licensesConfigFile</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Input file containing a mapping between each dependency and it&apos;s license information.</description>
        </parameter>
        <parameter>
          <name>licensesOutputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The directory to which the dependency licenses should be written.</description>
        </parameter>
        <parameter>
          <name>licensesOutputFile</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The output file containing a mapping between each dependency and it&apos;s license information.</description>
        </parameter>
        <parameter>
          <name>offline</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Settings offline flag (will not download anything if setted to true).</description>
        </parameter>
        <parameter>
          <name>organizeLicensesByDependencies</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to organize the licenses by dependencies. When this is done, each dependency will get its full license file, even if already downloaded for another dependency.</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Don&apos;t show warnings about bad or missing license files.</description>
        </parameter>
        <parameter>
          <name>skipDownloadLicenses</name>
          <type>boolean</type>
          <since>1.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to skip the goal.</description>
        </parameter>
        <parameter>
          <name>sortByGroupIdAndArtifactId</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <excludedArtifacts implementation="java.lang.String">${license.excludedArtifacts}</excludedArtifacts>
        <excludedGroups implementation="java.lang.String">${license.excludedGroups}</excludedGroups>
        <excludedScopes implementation="java.lang.String" default-value="system">${license.excludedScopes}</excludedScopes>
        <excludedTypes implementation="java.lang.String">${license.excludedTypes}</excludedTypes>
        <excludeTransitiveDependencies implementation="boolean" default-value="false">${license.excludeTransitiveDependencies}</excludeTransitiveDependencies>
        <includedArtifacts implementation="java.lang.String">${license.includedArtifacts}</includedArtifacts>
        <includedGroups implementation="java.lang.String">${license.includedGroups}</includedGroups>
        <includedScopes implementation="java.lang.String">${license.includedScopes}</includedScopes>
        <includedTypes implementation="java.lang.String">${license.includedTypes}</includedTypes>
        <includeTransitiveDependencies implementation="boolean" default-value="true"/>
        <licensesConfigFile implementation="java.io.File" default-value="${project.basedir}/src/license/licenses.xml">${licensesConfigFile}</licensesConfigFile>
        <licensesOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-resources/licenses">${licensesOutputDirectory}</licensesOutputDirectory>
        <licensesOutputFile implementation="java.io.File" default-value="${project.build.directory}/generated-resources/licenses.xml">${licensesOutputFile}</licensesOutputFile>
        <offline implementation="boolean" default-value="${settings.offline}"/>
        <organizeLicensesByDependencies implementation="boolean" default-value="false">${license.organizeLicensesByDependencies}</organizeLicensesByDependencies>
        <quiet implementation="boolean" default-value="false"/>
        <skipDownloadLicenses implementation="boolean" default-value="false">${license.skipDownloadLicenses}</skipDownloadLicenses>
        <sortByGroupIdAndArtifactId implementation="boolean" default-value="false">${license.sortByGroupIdAndArtifactId}</sortByGroupIdAndArtifactId>
      </configuration>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on license-maven-plugin.
Call mvn license:help -Ddetail=true -Dgoal=&lt;goal-name&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>license-list</goal>
      <description>Display all available licenses.</description>
      <requiresDirectInvocation>true</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.LicenseListMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to display also the content of each license.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files. Note: If nothing is filled here, we will use the system property file.encoding.</description>
        </parameter>
        <parameter>
          <name>extraResolver</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The url of an extra license repository.
Note: If you want to refer to a file within this project, start the expression with ${project.baseUri}
</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode. Note: Verbose mode is always on if you starts a debug maven instance (says via -X).</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean">${detail}</detail>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <extraResolver implementation="java.lang.String">${extraResolver}</extraResolver>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>remove-file-header</goal>
      <description>The goal to remove the header on project source files.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.RemoveFileHeaderMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.11</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>copyrightOwners</name>
          <type>java.lang.String</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional copyright owners.
If not set, organizationName parameter will be used instead.
</description>
        </parameter>
        <parameter>
          <name>dryRun</name>
          <type>boolean</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to test plugin but modify no file.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files. Note: If nothing is filled here, we will use the system property file.encoding.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String[]</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specific files to excludes, separated by a comma. By default, those file types are excluded:
-	modelisation
-	images
</description>
        </parameter>
        <parameter>
          <name>extraExtensions</name>
          <type>java.util.Map</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>To associate extra extension files to an existing comment style.
Keys of the map are the extension of extra files to treat, and the value is the comment style you want to associate.

For example, to treat file with extensions java2 and jdata as java files (says using the java comment style, declare this in your plugin configuration :

&lt;extraExtensions&gt;
&lt;java2&gt;java&lt;/java2&gt;
&lt;jdata&gt;java&lt;/jdata&gt;
&lt;/extraExtensions&gt;
</description>
        </parameter>
        <parameter>
          <name>extraFiles</name>
          <type>java.util.Map</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>To associate extra files to an existing comment style.
Keys of the map are the name of extra files to treat, and the value is the comment style you want to associate.

For example, to treat a file named DockerFile as properties files (says using the properties comment style, declare this in your plugin configuration :

&lt;extraFiles&gt;
&lt;DockerFile&gt;properties&lt;/DockerFile&gt;
&lt;/extraFiles&gt;
</description>
        </parameter>
        <parameter>
          <name>extraTemplateParameters</name>
          <type>java.util.Map</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional extra templates parameters.
If filled, they are available with prefix extra_ to process license content (says the header and license content).
</description>
        </parameter>
        <parameter>
          <name>ignoreNoFileToScan</name>
          <type>boolean</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to ignore no files to scan.
This flag will suppress the &apos;No file to scan&apos; warning. This will allow you to set the plug-in in the root pom of your project without getting a lot of warnings for aggregation modules / artifacts.
</description>
        </parameter>
        <parameter>
          <name>ignoreTag</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A tag to place on files that will be ignored by the plugin.
Sometimes, it is necessary to do this when file is under a specific license.

Note: If no sets, will use the default tag %% Ignore-License
</description>
        </parameter>
        <parameter>
          <name>inceptionYear</name>
          <type>java.lang.Integer</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Inception year of the project.
Will be used as first year of copyright section in new header.
</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String[]</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specific files to includes, separated by a comma. By default, it is &apos;** /*&apos;.</description>
        </parameter>
        <parameter>
          <name>keepBackup</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to keep a backup of every modified file.</description>
        </parameter>
        <parameter>
          <name>licenseName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the license to use in the project.</description>
        </parameter>
        <parameter>
          <name>licenseResolver</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify an external extra licenses repository resolver (says the base url of the repository where the license.properties is present).
Note: If you want to refer to a file within this project, start the expression with ${project.baseUri}
</description>
        </parameter>
        <parameter>
          <name>organizationName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project&apos;s organization.
Will be used as copyrigth&apos;s holder in new header.
</description>
        </parameter>
        <parameter>
          <name>projectName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project (or module).
Will be used as description section of new header.
</description>
        </parameter>
        <parameter>
          <name>roots</name>
          <type>java.lang.String[]</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify the base dir from which we apply the license.
Should be on form &apos;root1,root2,rootn&apos;.

By default, the main roots are &apos;src, target/generated-sources, target/processed-sources&apos;.

Note: If some of these roots do not exist, they will be simply ignored.
</description>
        </parameter>
        <parameter>
          <name>skipRemoveLicense</name>
          <type>boolean</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to skip the goal.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode. Note: Verbose mode is always on if you starts a debug maven instance (says via -X).</description>
        </parameter>
      </parameters>
      <configuration>
        <copyrightOwners implementation="java.lang.String">${license.copyrightOwners}</copyrightOwners>
        <dryRun implementation="boolean" default-value="false">${dryRun}</dryRun>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <excludes implementation="java.lang.String[]">${license.excludes}</excludes>
        <ignoreNoFileToScan implementation="boolean" default-value="false">${license.ignoreNoFileToScan}</ignoreNoFileToScan>
        <ignoreTag implementation="java.lang.String">${license.ignoreTag}</ignoreTag>
        <inceptionYear implementation="java.lang.Integer" default-value="${project.inceptionYear}">${license.inceptionYear}</inceptionYear>
        <includes implementation="java.lang.String[]">${license.includes}</includes>
        <keepBackup implementation="boolean" default-value="false">${license.keepBackup}</keepBackup>
        <licenseName implementation="java.lang.String">${license.licenseName}</licenseName>
        <licenseResolver implementation="java.lang.String">${license.licenseResolver}</licenseResolver>
        <organizationName implementation="java.lang.String" default-value="${project.organization.name}">${license.organizationName}</organizationName>
        <projectName implementation="java.lang.String" default-value="${project.name}">${license.projectName}</projectName>
        <roots implementation="java.lang.String[]">${license.roots}</roots>
        <skipRemoveLicense implementation="boolean" default-value="false">${license.skipRemoveLicense}</skipRemoveLicense>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>third-party-report</goal>
      <description>Generates a report of all third-parties detected in the module.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.ThirdPartyReportMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.1</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files.
Note: If nothing is filled here, we will use the system property file.encoding.
</description>
        </parameter>
        <parameter>
          <name>excludedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some ArtifactsIds</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some GroupIds</description>
        </parameter>
        <parameter>
          <name>excludedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some scopes.</description>
        </parameter>
        <parameter>
          <name>excludedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude some types.</description>
        </parameter>
        <parameter>
          <name>excludeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to exclude transitive dependencies from excluded artifacts.</description>
        </parameter>
        <parameter>
          <name>includedArtifacts</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some ArtifactsIds</description>
        </parameter>
        <parameter>
          <name>includedGroups</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some GroupIds</description>
        </parameter>
        <parameter>
          <name>includedScopes</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some scopes, if let empty then all scopes will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includedTypes</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>A filter to include only some types, if let empty then all types will be used (no filter).</description>
        </parameter>
        <parameter>
          <name>includeTransitiveDependencies</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Include transitive dependencies when looking for missing licenses and downloading license files.</description>
        </parameter>
        <parameter>
          <name>licenseMerges</name>
          <type>java.util.List</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To merge licenses in final file.
Each entry represents a merge (first license is main license to keep), licenses are separated by |.

Example :

&lt;licenseMerges&gt;
&lt;licenseMerge&gt;The Apache Software License|Version 2.0,Apache License, Version 2.0&lt;/licenseMerge&gt;
&lt;/licenseMerges&gt;
&lt;/pre&gt;
</description>
        </parameter>
        <parameter>
          <name>missingFile</name>
          <type>java.io.File</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file where to fill the license for dependencies with unknwon license.</description>
        </parameter>
        <parameter>
          <name>missingFileUrl</name>
          <type>java.lang.String</type>
          <since>1.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>The Url that holds the missing license dependency entries. This is an extension to missingFile. If set then the entries that will be found at this URL will be added additionally to the entries of the missing file.

NOTE:
the response of the URL endpoint must return content that matches the THIRD-PARTY.properties file!</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.1</since>
          <required>true</required>
          <editable>true</editable>
          <description>The output directory for the report. Note that this parameter is only evaluated if the goal is run directly from the command line. If the goal is run indirectly as part of a site generation, the output directory configured in the Maven Site Plugin is used instead.</description>
        </parameter>
        <parameter>
          <name>overrideFile</name>
          <type>java.io.File</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>The file where to fill the override license for dependencies.</description>
        </parameter>
        <parameter>
          <name>skipThirdPartyReport</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Skip to generate the report.</description>
        </parameter>
        <parameter>
          <name>useMissingFile</name>
          <type>boolean</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to use the missing licenses file to consolidate the THID-PARTY file.</description>
        </parameter>
        <parameter>
          <name>useRepositoryMissingFiles</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Load from repositories third party missing files.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode.
Note: Verbose mode is always on if you starts a debug maven instance (says via -X).
</description>
        </parameter>
      </parameters>
      <configuration>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <excludedArtifacts implementation="java.lang.String">${license.excludedArtifacts}</excludedArtifacts>
        <excludedGroups implementation="java.lang.String">${license.excludedGroups}</excludedGroups>
        <excludedScopes implementation="java.lang.String" default-value="system">${license.excludedScopes}</excludedScopes>
        <excludedTypes implementation="java.lang.String">${license.excludedTypes}</excludedTypes>
        <excludeTransitiveDependencies implementation="boolean" default-value="false">${license.excludeTransitiveDependencies}</excludeTransitiveDependencies>
        <includedArtifacts implementation="java.lang.String">${license.includedArtifacts}</includedArtifacts>
        <includedGroups implementation="java.lang.String">${license.includedGroups}</includedGroups>
        <includedScopes implementation="java.lang.String">${license.includedScopes}</includedScopes>
        <includedTypes implementation="java.lang.String">${license.includedTypes}</includedTypes>
        <includeTransitiveDependencies implementation="boolean" default-value="true">${license.includeTransitiveDependencies}</includeTransitiveDependencies>
        <missingFile implementation="java.io.File" default-value="src/license/THIRD-PARTY.properties">${license.missingFile}</missingFile>
        <missingFileUrl implementation="java.lang.String">${license.missingFileUrl}</missingFileUrl>
        <outputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}"/>
        <overrideFile implementation="java.io.File" default-value="src/license/override-THIRD-PARTY.properties">${license.overrideFile}</overrideFile>
        <skipThirdPartyReport implementation="boolean" default-value="false">${license.skipThirdPartyReport}</skipThirdPartyReport>
        <useMissingFile implementation="boolean" default-value="false">${license.useMissingFile}</useMissingFile>
        <useRepositoryMissingFiles implementation="boolean" default-value="true">${license.useRepositoryMissingFiles}</useRepositoryMissingFiles>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>update-file-header</goal>
      <description>The goal to update (or add) the header on project source files.
This goal replace the update-header goal which can not deal with Copyright.

This goal use a specific project file descriptor project.xml to describe all files to update for a whole project.
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.codehaus.mojo.license.UpdateFileHeaderMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>addJavaLicenseAfterPackage</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to add the license header in java files after the package statement.
This is a practice used by many people (apache, codehaus, ...).

Note: By default this property is then to true since it is a good practice.
</description>
        </parameter>
        <parameter>
          <name>addSvnKeyWords</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to add svn:keywords on new header.
Will add svn keywords :

Id, HeadURL
Note: This parameter is used by the descriptionTemplate, so if you change this template, the parameter could be no more used (depends what you put in your own template...).</description>
        </parameter>
        <parameter>
          <name>canUpdateCopyright</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to authorize update of the copyright part of the header.
Note: By default, do NOT authorize it since copyright part should be handled by developpers (holder can change on each file for example).
</description>
        </parameter>
        <parameter>
          <name>canUpdateDescription</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to authorize update of the description part of the header.
Note: By default, do NOT authorize it since description can change on each file).
</description>
        </parameter>
        <parameter>
          <name>canUpdateLicense</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to authorize update of the license part of the header.
Note: By default, authorize it since license part should always be generated by the plugin.
</description>
        </parameter>
        <parameter>
          <name>copyrightOwners</name>
          <type>java.lang.String</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional copyright owners.
If not set, organizationName parameter will be used instead.
</description>
        </parameter>
        <parameter>
          <name>descriptionTemplate</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Template used to build the description section of the license header.
(This template use freemarker).
</description>
        </parameter>
        <parameter>
          <name>dryRun</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to test plugin but modify no file.</description>
        </parameter>
        <parameter>
          <name>emptyLineAfterHeader</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to indicate if there should be an empty line after the header.
Checkstyle requires empty line between license header and package statement. If you are using addJavaLicenseAfterPackage=false it could make sense to set this to true.
Note: By default this property is set to false to keep old behavior.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files. Note: If nothing is filled here, we will use the system property file.encoding.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specific files to excludes, separated by a comma. By default, those file types are excluded:
-	modelisation
-	images
</description>
        </parameter>
        <parameter>
          <name>extraExtensions</name>
          <type>java.util.Map</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To associate extra extension files to an existing comment style.
Keys of the map are the extension of extra files to treat, and the value is the comment style you want to associate.

For example, to treat file with extensions java2 and jdata as java files (says using the java comment style, declare this in your plugin configuration :

&lt;extraExtensions&gt;
&lt;java2&gt;java&lt;/java2&gt;
&lt;jdata&gt;java&lt;/jdata&gt;
&lt;/extraExtensions&gt;
</description>
        </parameter>
        <parameter>
          <name>extraFiles</name>
          <type>java.util.Map</type>
          <since>1.11</since>
          <required>false</required>
          <editable>true</editable>
          <description>To associate extra files to an existing comment style.
Keys of the map are the name of extra files to treat, and the value is the comment style you want to associate.

For example, to treat a file named DockerFile as properties files (says using the properties comment style, declare this in your plugin configuration :

&lt;extraFiles&gt;
&lt;DockerFile&gt;properties&lt;/DockerFile&gt;
&lt;/extraFiles&gt;
</description>
        </parameter>
        <parameter>
          <name>extraTemplateParameters</name>
          <type>java.util.Map</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional extra templates parameters.
If filled, they are available with prefix extra_ to process license content (says the header and license content).
</description>
        </parameter>
        <parameter>
          <name>failOnMissingHeader</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if dryRun flag is on and some files with no header are detected.
Note: If dryRun flag is not set, there is no effect.
</description>
        </parameter>
        <parameter>
          <name>failOnNotUptodateHeader</name>
          <type>boolean</type>
          <since>1.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to fail the build if dryRun flag is on and some files with headers to update.
Note: If dryRun flag is not set, there is no effect.
</description>
        </parameter>
        <parameter>
          <name>ignoreNoFileToScan</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to ignore no files to scan.
This flag will suppress the &apos;No file to scan&apos; warning. This will allow you to set the plug-in in the root pom of your project without getting a lot of warnings for aggregation modules / artifacts.
Note: By default this property is set to false to keep old behavior.</description>
        </parameter>
        <parameter>
          <name>ignoreTag</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A tag to place on files that will be ignored by the plugin.
Sometimes, it is necessary to do this when file is under a specific license.

Note: If no sets, will use the default tag %% Ignore-License
</description>
        </parameter>
        <parameter>
          <name>inceptionYear</name>
          <type>java.lang.Integer</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Inception year of the project.
Will be used as first year of copyright section in new header.
</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Specific files to includes, separated by a comma. By default, it is &apos;** /*&apos;.
Note: This parameter is not usable if you are still using a project file descriptor.
</description>
        </parameter>
        <parameter>
          <name>keepBackup</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to keep a backup of every modified file.</description>
        </parameter>
        <parameter>
          <name>licenseName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the license to use in the project.</description>
        </parameter>
        <parameter>
          <name>licenseResolver</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify an external extra licenses repository resolver (says the base url of the repository where the license.properties is present).
Note: If you want to refer to a file within this project, start the expression with ${project.baseUri}
</description>
        </parameter>
        <parameter>
          <name>lineSeparator</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>To specify a line separator to use. If not set, will use system property line.separator.</description>
        </parameter>
        <parameter>
          <name>organizationName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project&apos;s organization.
Will be used as copyrigth&apos;s holder in new header.
</description>
        </parameter>
        <parameter>
          <name>processEndTag</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To overwrite the processEndTag used to build header model.
See http://mojo.codehaus.org/license-maven-plugin/header.html#Configuration .
</description>
        </parameter>
        <parameter>
          <name>processStartTag</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To overwrite the processStartTag used to build header model.
See http://mojo.codehaus.org/license-maven-plugin/header.html#Configuration .
</description>
        </parameter>
        <parameter>
          <name>projectName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project (or module).
Will be used as description section of new header.
</description>
        </parameter>
        <parameter>
          <name>roots</name>
          <type>java.lang.String[]</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify the base dir from which we apply the license.
Should be on form &apos;root1,root2,rootn&apos;.

By default, the main roots are &apos;src, target/generated-sources, target/processed-sources&apos;.

Note: If some of these roots do not exist, they will be simply ignored.

Note: This parameter is not useable if you are still using a project file descriptor.
</description>
        </parameter>
        <parameter>
          <name>sectionDelimiter</name>
          <type>java.lang.String</type>
          <since>1.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>To overwrite the sectionDelimiter used to build header model.
See http://mojo.codehaus.org/license-maven-plugin/header.html#Configuration .
</description>
        </parameter>
        <parameter>
          <name>skipUpdateLicense</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to skip the goal.</description>
        </parameter>
        <parameter>
          <name>trimHeaderLine</name>
          <type>boolean</type>
          <since>1.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to indicate if there should be an empty line after the header.
Checkstyle usually requires no trailing whitespace. If it is the case it could make sense to set this to true
Note: By default this property is set to false to keep old behavior.</description>
        </parameter>
        <parameter>
          <name>useJavaNoReformatCommentStartTag</name>
          <type>boolean</type>
          <since>1.9</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to use for java comment start tag with no reformat syntax /*-.
See http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-141999.html#350
</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode. Note: Verbose mode is always on if you starts a debug maven instance (says via -X).</description>
        </parameter>
      </parameters>
      <configuration>
        <addJavaLicenseAfterPackage implementation="boolean" default-value="true">${license.addJavaLicenseAfterPackage}</addJavaLicenseAfterPackage>
        <addSvnKeyWords implementation="boolean" default-value="false">${license.addSvnKeyWords}</addSvnKeyWords>
        <canUpdateCopyright implementation="boolean" default-value="false">${license.canUpdateCopyright}</canUpdateCopyright>
        <canUpdateDescription implementation="boolean" default-value="false">${license.canUpdateDescription}</canUpdateDescription>
        <canUpdateLicense implementation="boolean" default-value="true">${license.canUpdateLicense}</canUpdateLicense>
        <copyrightOwners implementation="java.lang.String">${license.copyrightOwners}</copyrightOwners>
        <descriptionTemplate implementation="java.lang.String" default-value="/org/codehaus/mojo/license/default-file-header-description.ftl">${license.descriptionTemplate}</descriptionTemplate>
        <dryRun implementation="boolean" default-value="false">${dryRun}</dryRun>
        <emptyLineAfterHeader implementation="boolean" default-value="false">${license.emptyLineAfterHeader}</emptyLineAfterHeader>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <excludes implementation="java.lang.String[]">${license.excludes}</excludes>
        <failOnMissingHeader implementation="boolean" default-value="false">${license.failOnMissingHeader}</failOnMissingHeader>
        <failOnNotUptodateHeader implementation="boolean" default-value="false">${license.failOnNotUptodateHeader}</failOnNotUptodateHeader>
        <ignoreNoFileToScan implementation="boolean" default-value="false">${license.ignoreNoFileToScan}</ignoreNoFileToScan>
        <ignoreTag implementation="java.lang.String">${license.ignoreTag}</ignoreTag>
        <inceptionYear implementation="java.lang.Integer" default-value="${project.inceptionYear}">${license.inceptionYear}</inceptionYear>
        <includes implementation="java.lang.String[]">${license.includes}</includes>
        <keepBackup implementation="boolean" default-value="false">${license.keepBackup}</keepBackup>
        <licenseName implementation="java.lang.String">${license.licenseName}</licenseName>
        <licenseResolver implementation="java.lang.String">${license.licenseResolver}</licenseResolver>
        <lineSeparator implementation="java.lang.String">${license.lineSeparator}</lineSeparator>
        <organizationName implementation="java.lang.String" default-value="${project.organization.name}">${license.organizationName}</organizationName>
        <processEndTag implementation="java.lang.String">${license.processEndTag}</processEndTag>
        <processStartTag implementation="java.lang.String">${license.processStartTag}</processStartTag>
        <projectName implementation="java.lang.String" default-value="${project.name}">${license.projectName}</projectName>
        <roots implementation="java.lang.String[]">${license.roots}</roots>
        <sectionDelimiter implementation="java.lang.String">${license.sectionDelimiter}</sectionDelimiter>
        <skipUpdateLicense implementation="boolean" default-value="false">${license.skipUpdateLicense}</skipUpdateLicense>
        <trimHeaderLine implementation="boolean" default-value="false">${license.trimHeaderLine}</trimHeaderLine>
        <useJavaNoReformatCommentStartTag implementation="boolean" default-value="true">${license.useJavaNoReformatCommentStartTag}</useJavaNoReformatCommentStartTag>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>update-project-license</goal>
      <description>Updates (or creates) the main project license file according to the given license defines as licenseName. Can also generate a bundled license file (to avoid collision names in class-path). This file is by default generated in META-INF class-path directory.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-resources</phase>
      <implementation>org.codehaus.mojo.license.UpdateProjectLicenseMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>1.0</since>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>bundleLicensePath</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The path of the bundled license file to produce when generateBundle is on. Note: This option is not available for pom module types.</description>
        </parameter>
        <parameter>
          <name>copyrightOwners</name>
          <type>java.lang.String</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional copyright owners.
If not set, organizationName parameter will be used instead.
</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding used to read and writes files. Note: If nothing is filled here, we will use the system property file.encoding.</description>
        </parameter>
        <parameter>
          <name>extraTemplateParameters</name>
          <type>java.util.Map</type>
          <since>1.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>optional extra templates parameters.
If filled, they are available with prefix extra_ to process license content (says the header and license content).
</description>
        </parameter>
        <parameter>
          <name>force</name>
          <type>boolean</type>
          <since>1.0.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to force to generate project license file even if it is up-to-date.</description>
        </parameter>
        <parameter>
          <name>generateBundle</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to copy the main license file in a bundled place. This is usefull for final application to have a none confusing location to seek for the application license. If Sets to true, will copy the license file to the bundleLicensePath to outputDirectory. Note: This option is not available for pom module types.</description>
        </parameter>
        <parameter>
          <name>inceptionYear</name>
          <type>java.lang.Integer</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Inception year of the project.
Will be used as first year of copyright section in new header.
</description>
        </parameter>
        <parameter>
          <name>keepBackup</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to keep a backup of every modified file.</description>
        </parameter>
        <parameter>
          <name>licenseFile</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Project license file to synchronize with main license defined in descriptor file.</description>
        </parameter>
        <parameter>
          <name>licenseName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the license to use in the project.</description>
        </parameter>
        <parameter>
          <name>licenseResolver</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To specify an external extra licenses repository resolver (says the base url of the repository where the license.properties is present).
Note: If you want to refer to a file within this project, start the expression with ${project.baseUri}
</description>
        </parameter>
        <parameter>
          <name>organizationName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project&apos;s organization.
Will be used as copyrigth&apos;s holder in new header.
</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>The directory where to generate license resources. Note: This option is not available for pom module types.</description>
        </parameter>
        <parameter>
          <name>projectName</name>
          <type>java.lang.String</type>
          <since>1.0</since>
          <required>true</required>
          <editable>true</editable>
          <description>Name of project (or module).
Will be used as description section of new header.
</description>
        </parameter>
        <parameter>
          <name>skipUpdateProjectLicense</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>A flag to skip the goal.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <since>1.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to activate verbose mode. Note: Verbose mode is always on if you starts a debug maven instance (says via -X).</description>
        </parameter>
      </parameters>
      <configuration>
        <bundleLicensePath implementation="java.lang.String" default-value="META-INF/${project.artifactId}-LICENSE.txt">${license.bundleLicensePath}</bundleLicensePath>
        <copyrightOwners implementation="java.lang.String">${license.copyrightOwners}</copyrightOwners>
        <encoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}">${license.encoding}</encoding>
        <force implementation="boolean" default-value="false">${license.force}</force>
        <generateBundle implementation="boolean" default-value="false">${license.generateBundle}</generateBundle>
        <inceptionYear implementation="java.lang.Integer" default-value="${project.inceptionYear}">${license.inceptionYear}</inceptionYear>
        <keepBackup implementation="boolean" default-value="false">${license.keepBackup}</keepBackup>
        <licenseFile implementation="java.io.File" default-value="${basedir}/LICENSE.txt">${license.licenceFile}</licenseFile>
        <licenseName implementation="java.lang.String">${license.licenseName}</licenseName>
        <licenseResolver implementation="java.lang.String">${license.licenseResolver}</licenseResolver>
        <organizationName implementation="java.lang.String" default-value="${project.organization.name}">${license.organizationName}</organizationName>
        <outputDirectory implementation="java.io.File" default-value="target/generated-sources/license">${license.outputDirectory}</outputDirectory>
        <projectName implementation="java.lang.String" default-value="${project.name}">${license.projectName}</projectName>
        <skipUpdateProjectLicense implementation="boolean" default-value="false">${license.skipUpdateProjectLicense}</skipUpdateProjectLicense>
        <verbose implementation="boolean" default-value="${maven.verbose}">${license.verbose}</verbose>
      </configuration>
    </mojo>
  </mojos>
</plugin>