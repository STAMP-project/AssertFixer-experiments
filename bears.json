{
  "repository": {
    "name": "JMRI/JMRI",
    "githubId": 42789514,
    "url": "https://github.com/JMRI/JMRI",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": true,
    "pullRequestId": 5919
  },
  "builds": {
    "buggyBuild": {
      "id": 436503218,
      "url": "http://travis-ci.org/JMRI/JMRI/builds/436503218",
      "date": "Oct 3, 2018 10:03:49 AM"
    }
  },
  "projectMetrics": {
    "numberModules": 1,
    "numberSourceFiles": 4089,
    "numberTestFiles": 4554,
    "numberLibrariesFailingModule": 138
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Oct 3, 2018 10:04:02 AM",
    "reproductionDateEnd": "Oct 3, 2018 10:34:51 AM",
    "totalDuration": 1845,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 248,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          248
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 132,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          26,
          106
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 1180,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          1180
        ]
      }
    },
    "projectRootPomPath": "./workspace/JMRI/JMRI/436503218/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "tests": {
    "failingModule": "/root/workspace/JMRI/JMRI/436503218",
    "overallMetrics": {
      "numberRunning": 34316,
      "numberPassing": 34281,
      "numberFailing": 3,
      "numberErroring": 32,
      "numberSkipping": 2144,
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 3
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true,
          "occurrences": 1
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "isError": true,
          "occurrences": 31
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "jmri.jmrit.logix.LogixActionTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "jmri.jmrix.nce.NceConsistTest",
        "numberRunning": 12,
        "numberPassing": 11,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "jmri.implementation.JmriMultiStatePropertyListenerTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "jmri.implementation.JmriSimplePropertyListenerTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "jmri.implementation.JmriMemoryPropertyListenerTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "jmri.configurexml.LoadAndStoreTest",
        "numberRunning": 20,
        "numberPassing": 10,
        "numberFailing": 0,
        "numberErroring": 10,
        "numberSkipping": 0
      },
      {
        "testClass": "jmri.implementation.JmriTwoStatePropertyListenerTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "jmri.managers.LogixSystemTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "jmri.ConditionalTest",
        "numberRunning": 3,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "jmri.jmrix.loconet.spjfile.SpjFileTest",
        "numberRunning": 3,
        "numberPassing": 2,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "jmri.jmrit.ussctc.OsIndicatorTest",
        "numberRunning": 5,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "jmri.implementation.JmriClockPropertyListenerTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "jmri.implementation.DefaultConditionalTest",
        "numberRunning": 10,
        "numberPassing": 9,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "jmri.ConditionalVariableTest",
        "numberRunning": 15,
        "numberPassing": 5,
        "numberFailing": 0,
        "numberErroring": 10,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "jmri.configurexml.LoadAndStoreTest",
        "testMethod": "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/LoadFileTest277-4.7.4.xml (pass\u003dtrue)]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.implementation.JmriMemoryPropertyListenerTest",
        "testMethod": "testCTor",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.implementation.JmriClockPropertyListenerTest",
        "testMethod": "testCTor",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.configurexml.LoadAndStoreTest",
        "testMethod": "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/PanelFileSchemaTest295.xml (pass\u003dtrue)]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.ConditionalVariableTest",
        "testMethod": "testDataString",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.jmrit.ussctc.OsIndicatorTest",
        "testMethod": "testInvokeNoLock",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.ConditionalVariableTest",
        "testMethod": "testConditionalType_toString",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.implementation.JmriTwoStatePropertyListenerTest",
        "testMethod": "testCTor",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.ConditionalTest",
        "testMethod": "testEnums",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.ConditionalVariableTest",
        "testMethod": "testGetTestTypeString",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.jmrit.logix.LogixActionTest",
        "testMethod": "testLogixAction",
        "failureName": "java.lang.ExceptionInInitializerError",
        "isError": true
      },
      {
        "testClass": "jmri.jmrit.ussctc.OsIndicatorTest",
        "testMethod": "testIntantiateLocked",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.jmrix.loconet.spjfile.SpjFileTest",
        "testMethod": "testPlayWav",
        "failureName": "java.lang.AssertionError",
        "detail": "Level mismatch when looking for WARN message: \"line not supported: interface SourceDataLine supporting format PCM_UNSIGNED 11200.0 Hz, 8 bit, mono, 1 bytes/frame, \" found \"error opening line: javax.sound.sampled.LineUnavailableException\"",
        "isError": false
      },
      {
        "testClass": "jmri.ConditionalVariableTest",
        "testMethod": "testCtor",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.ConditionalVariableTest",
        "testMethod": "testEquals",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.configurexml.LoadAndStoreTest",
        "testMethod": "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/LoadFileTest295-4.7.4.xml (pass\u003dtrue)]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.managers.LogixSystemTest",
        "testMethod": "testLogixReferenceSetup",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.implementation.JmriSimplePropertyListenerTest",
        "testMethod": "testCTor",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.configurexml.LoadAndStoreTest",
        "testMethod": "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/LoadFileTest.xml (pass\u003dtrue)]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.configurexml.LoadAndStoreTest",
        "testMethod": "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/PanelFileSchemaTest382.xml (pass\u003dtrue)]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.ConditionalVariableTest",
        "testMethod": "testCompare",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.jmrit.ussctc.OsIndicatorTest",
        "testMethod": "testIntantiateNoLock",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.jmrix.nce.NceConsistTest",
        "testMethod": "testCtor2",
        "failureName": "java.lang.AssertionError",
        "detail": "Unexpected ERROR or higher messages emitted",
        "isError": false
      },
      {
        "testClass": "jmri.implementation.JmriMultiStatePropertyListenerTest",
        "testMethod": "testCTor",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.configurexml.LoadAndStoreTest",
        "testMethod": "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/PanelFileSchemaTest.xml (pass\u003dtrue)]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.ConditionalVariableTest",
        "testMethod": "testEvaluate",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.configurexml.LoadAndStoreTest",
        "testMethod": "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/LoadFileTest-4.7.4.xml (pass\u003dtrue)]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.ConditionalVariableTest",
        "testMethod": "testGetOpernString",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.ConditionalVariableTest",
        "testMethod": "testStringToVariableTest",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.configurexml.LoadAndStoreTest",
        "testMethod": "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/LoadFileTest277.xml (pass\u003dtrue)]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.configurexml.LoadAndStoreTest",
        "testMethod": "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/PanelFileSchemaTest382-4.7.4.xml (pass\u003dtrue)]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.implementation.DefaultConditionalTest",
        "testMethod": "testActionPlaySound",
        "failureName": "java.lang.AssertionError",
        "detail": "Unexpected ERROR or higher messages emitted",
        "isError": false
      },
      {
        "testClass": "jmri.ConditionalVariableTest",
        "testMethod": "testState",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.configurexml.LoadAndStoreTest",
        "testMethod": "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/LoadFileTest295.xml (pass\u003dtrue)]",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      },
      {
        "testClass": "jmri.ConditionalTest",
        "testMethod": "testArrays",
        "failureName": "java.lang.NoClassDefFoundError",
        "detail": "Could not initialize class jmri.Conditional$Type",
        "isError": true
      }
    ]
  },
  "commits": {
    "buggyBuild": {
      "repoName": "JMRI/JMRI",
      "branchName": "master",
      "sha": "fb5f2331bc21a95852157a7c8dced7ca4cac1ebc",
      "url": "http://github.com/JMRI/JMRI/commit/fb5f2331bc21a95852157a7c8dced7ca4cac1ebc",
      "date": "Oct 3, 2018 9:28:50 AM"
    },
    "buggyBuildForkRepo": {
      "repoName": "danielb987/JMRI",
      "branchName": "Change-integer-constants-to-enums",
      "sha": "8bfdddbdb6814681a6a9b5e0e98f0e706101df45",
      "url": "https://github.com/danielb987/JMRI/commit/8bfdddbdb6814681a6a9b5e0e98f0e706101df45",
      "date": "Oct 3, 2018 9:35:28 AM"
    },
    "buggyBuildBaseRepo": {
      "repoName": "JMRI/JMRI",
      "branchName": "master",
      "sha": "974e2de7a49b100dead88434b7c0602240cd9b10",
      "url": "https://github.com/JMRI/JMRI/commit/974e2de7a49b100dead88434b7c0602240cd9b10",
      "date": "Oct 3, 2018 1:52:59 AM"
    }
  },
  "type": "only_fail"
}