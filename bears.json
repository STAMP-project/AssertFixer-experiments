{
  "repository": {
    "name": "jgrandja/spring-security-oauth",
    "githubId": 58223310,
    "url": "https://github.com/jgrandja/spring-security-oauth",
    "isFork": true,
    "original": {
      "name": "spring-projects/spring-security-oauth",
      "githubId": 2108481,
      "url": "https://github.com/spring-projects/spring-security-oauth"
    },
    "isPullRequest": false,
    "pullRequestId": 0
  },
  "builds": {
    "buggyBuild": {
      "id": 439137870,
      "url": "http://travis-ci.org/jgrandja/spring-security-oauth/builds/439137870",
      "date": "Oct 9, 2018 3:34:00 PM"
    }
  },
  "tests": {
    "failingModule": "/root/workspace/jgrandja/spring-security-oauth/439137870/spring-security-oauth2",
    "overallMetrics": {
      "numberRunning": 741,
      "numberPassing": 700,
      "numberFailing": 0,
      "numberErroring": 41,
      "numberSkipping": 0,
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "isError": true,
          "occurrences": 31
        },
        {
          "failureName": "java.lang.Exception",
          "isError": true,
          "occurrences": 1
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true,
          "occurrences": 9
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "numberRunning": 16,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 16,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "numberRunning": 15,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 15,
        "numberSkipping": 0
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests",
        "numberRunning": 26,
        "numberPassing": 16,
        "numberFailing": 0,
        "numberErroring": 10,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testRemovedTokenCannotBeFoundByUsername",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testReadingRefreshTokenForTokenThatDoesNotExist",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests",
        "testMethod": "testAuthorizationCodeWithQueryParams",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests",
        "testMethod": "testAuthorizationCodeWithMoreTrickyEncodedQueryParams",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testRemovedTokenCannotBeFoundByUsername",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testStoreAccessTokenTwice",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testRemoveRefreshToken",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests",
        "testMethod": "testApproveOrDeny",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testFindAccessTokensByClientIdAndUserName",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testReadingRefreshTokenForTokenThatDoesNotExist",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testFindAccessTokensByClientIdAndUserName",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testRetrieveAccessToken",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testExpiringRefreshToken",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testExpiringRefreshToken",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests",
        "testMethod": "testAuthorizationCodeWithMultipleQueryParams",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testRetrieveAccessToken",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests",
        "testMethod": "testAuthorizationCodeWithTrickyState",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testExpiringAccessToken",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testStoreRefreshToken",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testReadingAuthenticationForTokenThatDoesNotExist",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testGetAccessTokenForDeletedUser",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testStoreRefreshToken",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests",
        "testMethod": "testAuthorizationCodeWithFragment",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests",
        "testMethod": "testApprovalDenied",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testReadingAccessTokenForTokenThatDoesNotExist",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testStoreAccessToken",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testExpiringAccessToken",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests",
        "testMethod": "testAuthorizationCodeWithTrickyQueryParams",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testReadingAuthenticationForTokenThatDoesNotExist",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testFindAccessTokensByClientId",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testFindAccessTokensByClientId",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testRemoveRefreshToken",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "storeAccessTokenWithoutRefreshTokenRemoveAccessTokenVerifyTokenRemoved",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testStoreAccessTokenTwice",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testStoreAccessToken",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testGetAccessTokenForDeletedUser",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testRefreshTokenIsNotStoredDuringAccessToken",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
        "testMethod": "testRefreshTokenIsNotStoredDuringAccessToken",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests",
        "testMethod": "testAuthorizationCodeWithTrickyEncodedQueryParams",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests",
        "testMethod": "testApproveOrDenyWithOAuth2RequestWithoutRedirectUri",
        "failureName": "java.lang.Exception",
        "detail": "Unexpected exception, expected\u003corg.springframework.security.oauth2.common.exceptions.InvalidRequestException\u003e but was\u003cjava.lang.NullPointerException\u003e",
        "isError": true
      },
      {
        "testClass": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
        "testMethod": "testReadingAccessTokenForTokenThatDoesNotExist",
        "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
        "detail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
        "isError": true
      }
    ]
  },
  "commits": {
    "buggyBuild": {
      "repoName": "jgrandja/spring-security-oauth",
      "branchName": "authz-req-validate",
      "sha": "462b67fce209bab6c35a7698fa33888d3ad4c5ba",
      "url": "http://github.com/jgrandja/spring-security-oauth/commit/462b67fce209bab6c35a7698fa33888d3ad4c5ba",
      "date": "Oct 9, 2018 3:24:23 PM"
    }
  },
  "projectMetrics": {
    "numberModules": 32,
    "numberSourceFiles": 435,
    "numberTestFiles": 290,
    "numberLibrariesFailingModule": 48
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Oct 9, 2018 3:34:03 PM",
    "reproductionDateEnd": "Oct 9, 2018 3:38:37 PM",
    "totalDuration": 270,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 6,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          6
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 217,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          0,
          217
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 31,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          31
        ]
      }
    },
    "projectRootPomPath": "./workspace/jgrandja/spring-security-oauth/439137870/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "type": "only_fail"
}