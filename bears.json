{
  "repository": {
    "name": "graphql-java/graphql-java-tools",
    "githubId": 81460205,
    "url": "https://github.com/graphql-java/graphql-java-tools",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": false,
    "pullRequestId": 0
  },
  "builds": {
    "buggyBuild": {
      "id": 432085275,
      "url": "http://travis-ci.org/graphql-java/graphql-java-tools/builds/432085275",
      "date": "Sep 23, 2018 11:39:48 AM"
    }
  },
  "tests": {
    "failingModule": "/root/workspace/graphql-java/graphql-java-tools/432085275",
    "overallMetrics": {
      "numberRunning": 77,
      "numberPassing": 43,
      "numberFailing": 28,
      "numberErroring": 6,
      "numberSkipping": 0,
      "failures": [
        {
          "failureName": "Expected exception of type \u0027com.coxautodev.graphql.tools.ResolverError\u0027, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
          "isError": false,
          "occurrences": 1
        },
        {
          "failureName": "Expected exception of type \u0027com.coxautodev.graphql.tools.TypeClassMatcher$RawClassRequiredForGraphQLMappingException\u0027, but got \u0027com.coxautodev.graphql.tools.SchemaClassScannerError\u0027  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
          "isError": false,
          "occurrences": 1
        },
        {
          "failureName": "Expected exception of type \u0027com.coxautodev.graphql.tools.TypeClassMatcher$RawClassRequiredForGraphQLMappingException\u0027, but no exception was thrown  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
          "isError": false,
          "occurrences": 1
        },
        {
          "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
          "isError": false,
          "occurrences": 6
        },
        {
          "failureName": "Expected exception of type \u0027com.coxautodev.graphql.tools.SchemaError\u0027, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
          "isError": false,
          "occurrences": 1
        },
        {
          "failureName": "Condition not satisfied",
          "isError": false,
          "occurrences": 15
        },
        {
          "failureName": "com.coxautodev.graphql.tools.FieldResolverError",
          "isError": true,
          "occurrences": 6
        },
        {
          "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.SchemaError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
          "isError": false,
          "occurrences": 3
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "com.coxautodev.graphql.tools.MultiResolverSpec",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "numberRunning": 20,
        "numberPassing": 5,
        "numberFailing": 15,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "com.coxautodev.graphql.tools.EnumListParameterSpec",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SuperclassResolverSpec",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "com.coxautodev.graphql.tools.NestedInputTypesSpec",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "com.coxautodev.graphql.tools.ParameterizedGetterSpec",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SchemaParserSpec",
        "numberRunning": 16,
        "numberPassing": 9,
        "numberFailing": 7,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SchemaClassScannerSpec",
        "numberRunning": 13,
        "numberPassing": 9,
        "numberFailing": 2,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "com.coxautodev.graphql.tools.EndToEndSpec",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "com.coxautodev.graphql.tools.GenericResolverSpec",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "com.coxautodev.graphql.tools.RelayConnectionSpec",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher verifies that nested return type matches graphql definition for method superType",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.lang.Object com.coxautodev.graphql.tools.TypeClassMatcherSpec$Super.superType()) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher verifies that nested return type matches graphql definition for method futureListType",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.concurrent.CompletableFuture com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.futureListType()) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.GenericResolverSpec",
        "testMethod": "methods from generic resolvers are resolved",
        "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
        "detail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher verifies that nested return type matches graphql definition for method genericCustomType",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public com.coxautodev.graphql.tools.TypeClassMatcherSpec$GenericCustomType com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.genericCustomType()) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SchemaParserSpec",
        "testMethod": "parser should parse correctly when multiple resolvers for the same data type are given",
        "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
        "detail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SchemaParserSpec",
        "testMethod": "support enum types if only used as input type",
        "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.SchemaError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
        "detail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.SchemaError\u0027",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher verifies that nested return type matches graphql definition for method listListFutureType",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.List com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.listListFutureType()) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.EnumListParameterSpec",
        "testMethod": "com.coxautodev.graphql.tools.EnumListParameterSpec",
        "failureName": "com.coxautodev.graphql.tools.FieldResolverError",
        "detail": "No method or field found as defined in schema \u003cunknown\u003e:11 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:    java.lang.Class.code()   java.lang.Class.getCode()   java.lang.Class.code",
        "isError": true
      },
      {
        "testClass": "com.coxautodev.graphql.tools.MultiResolverSpec",
        "testMethod": "com.coxautodev.graphql.tools.MultiResolverSpec",
        "failureName": "com.coxautodev.graphql.tools.FieldResolverError",
        "detail": "No method found as defined in schema \u003cunknown\u003e:7 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:    java.lang.Class.friends(~friendName)   java.lang.Class.getFriends(~friendName)",
        "isError": true
      },
      {
        "testClass": "com.coxautodev.graphql.tools.NestedInputTypesSpec",
        "testMethod": "nested input types are parsed",
        "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
        "detail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.ParameterizedGetterSpec",
        "testMethod": "com.coxautodev.graphql.tools.ParameterizedGetterSpec",
        "failureName": "com.coxautodev.graphql.tools.FieldResolverError",
        "detail": "No method or field found as defined in schema \u003cunknown\u003e:6 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:    java.lang.Class.bestFriends()   java.lang.Class.getBestFriends()   java.lang.Class.bestFriends",
        "isError": true
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher verifies that nested return type matches graphql definition for method type",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public com.coxautodev.graphql.tools.TypeClassMatcherSpec$CustomType com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.type()) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SchemaClassScannerSpec",
        "testMethod": "scanner handles input types that reference other input types",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  objects.definitions.findAll { it instanceof InputObjectTypeDefinition }.size() \u003d\u003d 3 |       |           |                                                   |      | |       |           |                                                   1      false |       |           [InputObjectTypeDefinition{name\u003d\u0027FirstInput\u0027, directives\u003d[], inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027id\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, defaultValue\u003dnull, directives\u003d[]}, InputValueDefinition{name\u003d\u0027second\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027SecondInput\u0027}}, defaultValue\u003dnull, directives\u003d[]}, InputValueDefinition{name\u003d\u0027third\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027ThirdInput\u0027}}, defaultValue\u003dnull, directives\u003d[]}]}] |       [InputObjectTypeDefinition{name\u003d\u0027FirstInput\u0027, directives\u003d[], inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027id\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, defaultValue\u003dnull, directives\u003d[]}, InputValueDefinition{name\u003d\u0027second\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027SecondInput\u0027}}, defaultValue\u003dnull, directives\u003d[]}, InputValueDefinition{name\u003d\u0027third\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027ThirdInput\u0027}}, defaultValue\u003dnull, directives\u003d[]}]}, ObjectTypeDefinition{name\u003d\u0027Query\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[FieldDefinition{name\u003d\u0027test\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027input\u0027, type\u003dTypeName{name\u003d\u0027FirstInput\u0027}, defaultValue\u003dnull, directives\u003d[]}], directives\u003d[]}]}, ScalarTypeDefinition{name\u003d\u0027String\u0027, directives\u003d[]}] ScannedSchemaObjects(dictionary\u003d{}, definitions\u003d[InputObjectTypeDefinition{name\u003d\u0027FirstInput\u0027, directives\u003d[], inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027id\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, defaultValue\u003dnull, directives\u003d[]}, InputValueDefinition{name\u003d\u0027second\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027SecondInput\u0027}}, defaultValue\u003dnull, directives\u003d[]}, InputValueDefinition{name\u003d\u0027third\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027ThirdInput\u0027}}, defaultValue\u003dnull, directives\u003d[]}]}, ObjectTypeDefinition{name\u003d\u0027Query\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[FieldDefinition{name\u003d\u0027test\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027input\u0027, type\u003dTypeName{name\u003d\u0027FirstInput\u0027}, defaultValue\u003dnull, directives\u003d[]}], directives\u003d[]}]}, ScalarTypeDefinition{name\u003d\u0027String\u0027, directives\u003d[]}], customScalars\u003d{}, rootInfo\u003dcom.coxautodev.graphql.tools.RootTypeInfo@1c25b8a7, fieldResolversByType\u003d{ObjectTypeDefinition{name\u003d\u0027Query\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[FieldDefinition{name\u003d\u0027test\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027input\u0027, type\u003dTypeName{name\u003d\u0027FirstInput\u0027}, defaultValue\u003dnull, directives\u003d[]}], directives\u003d[]}]}\u003d{FieldDefinition{name\u003d\u0027test\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027input\u0027, type\u003dTypeName{name\u003d\u0027FirstInput\u0027}, defaultValue\u003dnull, directives\u003d[]}], directives\u003d[]}\u003dMethodFieldResolver{method\u003dpublic java.lang.String com.coxautodev.graphql.tools.SchemaClassScannerSpec$MultipleInputTypeQuery.test(com.coxautodev.graphql.tools.SchemaClassScannerSpec$MultipleInputTypeQuery$FirstInput)}}}, unusedDefinitions\u003d[InputObjectTypeDefinition{name\u003d\u0027SecondInput\u0027, directives\u003d[], inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027id\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, defaultValue\u003dnull, directives\u003d[]}]}, InputObjectTypeDefinition{name\u003d\u0027ThirdInput\u0027, directives\u003d[], inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027id\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, defaultValue\u003dnull, directives\u003d[]}]}]) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher verifies that nested return type matches graphql definition for method listListType",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.List com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.listListType()) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher verifies that nested return type matches graphql definition for method listType",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.List com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.listType()) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher verifies that nested return type matches graphql definition for method nullableListType",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.Optional com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.nullableListType()) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SchemaClassScannerSpec",
        "testMethod": "scanner should handle nested types in input types",
        "failureName": "com.coxautodev.graphql.tools.FieldResolverError",
        "detail": "No method or field found as defined in schema \u003cunknown\u003e:19 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:    java.lang.Class.id()   java.lang.Class.getId()   java.lang.Class.id",
        "isError": true
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SchemaParserSpec",
        "testMethod": "support enum types if only used in input Map",
        "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.SchemaError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
        "detail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.SchemaError\u0027",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SchemaParserSpec",
        "testMethod": "parser should parse correctly when multiple query resolvers are given",
        "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
        "detail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher verifies that nested return type matches graphql definition for method futureListListType",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.concurrent.CompletableFuture com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.futureListListType()) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher verifies that nested return type matches graphql definition for method futureType",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.concurrent.Future com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.futureType()) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.RelayConnectionSpec",
        "testMethod": "relay connection types are compatible",
        "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
        "detail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher verifies that nested return type matches graphql definition for method listFutureType",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.List com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.listFutureType()) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher verifies that nested return type matches graphql definition for method nullableType",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.Optional com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.nullableType()) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher does not allow unwrapped parameterized types as root types",
        "failureName": "Expected exception of type \u0027com.coxautodev.graphql.tools.TypeClassMatcher$RawClassRequiredForGraphQLMappingException\u0027, but no exception was thrown  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
        "detail": "Expected exception of type \u0027com.coxautodev.graphql.tools.TypeClassMatcher$RawClassRequiredForGraphQLMappingException\u0027, but no exception was thrown",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.EndToEndSpec",
        "testMethod": "com.coxautodev.graphql.tools.EndToEndSpec",
        "failureName": "com.coxautodev.graphql.tools.FieldResolverError",
        "detail": "No method or field found as defined in schema \u003cunknown\u003e:96 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:    java.lang.Class.id()   java.lang.Class.getId()   java.lang.Class.id",
        "isError": true
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SchemaParserSpec",
        "testMethod": "parser should allow turning off default generic wrappers",
        "failureName": "Expected exception of type \u0027com.coxautodev.graphql.tools.TypeClassMatcher$RawClassRequiredForGraphQLMappingException\u0027, but got \u0027com.coxautodev.graphql.tools.SchemaClassScannerError\u0027  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
        "detail": "Expected exception of type \u0027com.coxautodev.graphql.tools.TypeClassMatcher$RawClassRequiredForGraphQLMappingException\u0027, but got \u0027com.coxautodev.graphql.tools.SchemaClassScannerError\u0027",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SuperclassResolverSpec",
        "testMethod": "methods from generic resolvers are resolved",
        "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
        "detail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SchemaParserSpec",
        "testMethod": "parser should throw descriptive exception when object is used as input type incorrectly",
        "failureName": "Expected exception of type \u0027com.coxautodev.graphql.tools.SchemaError\u0027, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
        "detail": "Expected exception of type \u0027com.coxautodev.graphql.tools.SchemaError\u0027, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher verifies that nested return type matches graphql definition for method genericListType",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public com.coxautodev.graphql.tools.TypeClassMatcherSpec$GenericCustomListType com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.genericListType()) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SchemaClassScannerSpec",
        "testMethod": "scanner handles multiple interfaces that are not used as field types",
        "failureName": "com.coxautodev.graphql.tools.FieldResolverError",
        "detail": "No method or field found as defined in schema \u003cunknown\u003e:20 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:    java.lang.Class.version()   java.lang.Class.getVersion()   java.lang.Class.version",
        "isError": true
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SchemaParserSpec",
        "testMethod": "parser handles enums with overridden toString method",
        "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.SchemaError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
        "detail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.SchemaError\u0027",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
        "testMethod": "matcher verifies that nested return type matches graphql definition for method superListFutureType",
        "failureName": "Condition not satisfied",
        "detail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.lang.Object com.coxautodev.graphql.tools.TypeClassMatcherSpec$Super.superListFutureType()) ",
        "isError": false
      },
      {
        "testClass": "com.coxautodev.graphql.tools.SchemaClassScannerSpec",
        "testMethod": "scanner throws if @Batched is used on data class",
        "failureName": "Expected exception of type \u0027com.coxautodev.graphql.tools.ResolverError\u0027, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
        "detail": "Expected exception of type \u0027com.coxautodev.graphql.tools.ResolverError\u0027, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
        "isError": false
      }
    ]
  },
  "commits": {
    "buggyBuild": {
      "repoName": "graphql-java/graphql-java-tools",
      "branchName": "bugfix/114",
      "sha": "91b7299b2c43897cb387384353e3df3b93d5e2be",
      "url": "http://github.com/graphql-java/graphql-java-tools/commit/91b7299b2c43897cb387384353e3df3b93d5e2be",
      "date": "Sep 23, 2018 11:28:43 AM"
    }
  },
  "projectMetrics": {
    "numberModules": 1,
    "numberSourceFiles": 8,
    "numberTestFiles": 0,
    "numberLibrariesFailingModule": 35
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Sep 23, 2018 11:39:20 AM",
    "reproductionDateEnd": "Sep 23, 2018 11:40:43 AM",
    "totalDuration": 80,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 3,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          3
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 43,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          0,
          43
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 25,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          25
        ]
      }
    },
    "projectRootPomPath": "./workspace/graphql-java/graphql-java-tools/432085275/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "type": "only_fail"
}