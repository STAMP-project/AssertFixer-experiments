{
  "repository": {
    "name": "apache/calcite",
    "githubId": 21193524,
    "url": "https://github.com/apache/calcite",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": true,
    "pullRequestId": 855
  },
  "builds": {
    "buggyBuild": {
      "id": 432115269,
      "url": "http://travis-ci.org/apache/calcite/builds/432115269",
      "date": "Sep 23, 2018 2:13:28 PM"
    }
  },
  "tests": {
    "failingModule": "/root/workspace/apache/calcite/432115269/core",
    "overallMetrics": {
      "numberRunning": 4716,
      "numberPassing": 4669,
      "numberFailing": 45,
      "numberErroring": 2,
      "numberSkipping": 118,
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "isError": true,
          "occurrences": 1
        },
        {
          "failureName": "java.lang.reflect.InvocationTargetException",
          "isError": true,
          "occurrences": 1
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 45
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "org.apache.calcite.test.JdbcAdapterTest",
        "numberRunning": 34,
        "numberPassing": 28,
        "numberFailing": 6,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "org.apache.calcite.test.JdbcTest",
        "numberRunning": 261,
        "numberPassing": 253,
        "numberFailing": 8,
        "numberErroring": 0,
        "numberSkipping": 18
      },
      {
        "testClass": "org.apache.calcite.plan.volcano.VolcanoPlannerTest",
        "numberRunning": 7,
        "numberPassing": 5,
        "numberFailing": 2,
        "numberErroring": 0,
        "numberSkipping": 3
      },
      {
        "testClass": "org.apache.calcite.test.LatticeTest",
        "numberRunning": 36,
        "numberPassing": 29,
        "numberFailing": 7,
        "numberErroring": 0,
        "numberSkipping": 2
      },
      {
        "testClass": "org.apache.calcite.test.MaterializationTest",
        "numberRunning": 113,
        "numberPassing": 107,
        "numberFailing": 6,
        "numberErroring": 0,
        "numberSkipping": 17
      },
      {
        "testClass": "org.apache.calcite.test.CoreQuidemTest",
        "numberRunning": 16,
        "numberPassing": 11,
        "numberFailing": 4,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "org.apache.calcite.test.enumerable.EnumerableCorrelateTest",
        "numberRunning": 2,
        "numberPassing": 1,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "org.apache.calcite.test.ScannableTableTest",
        "numberRunning": 16,
        "numberPassing": 7,
        "numberFailing": 9,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "org.apache.calcite.plan.volcano.ComboRuleTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "org.apache.calcite.test.StreamTest",
        "numberRunning": 7,
        "numberPassing": 5,
        "numberFailing": 1,
        "numberErroring": 1,
        "numberSkipping": 2
      }
    ],
    "failureDetails": [
      {
        "testClass": "org.apache.calcite.test.JdbcTest",
        "testMethod": "testIntersectMismatchedVarchar",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: is \"C\u003d12\\n\"\n     but: was \"C\u003d2\\nC\u003d2\\nC\u003d2\\nC\u003d2\\nC\u003d2\\nC\u003d2\\nC\u003d2\\nC\u003d2\\nC\u003d2\\nC\u003d2\\nC\u003d2\\nC\u003d2\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.StreamTest",
        "testMethod": "testStreamFilterProject",
        "failureName": "java.lang.RuntimeException",
        "detail": "exception while preparing [select stream product from orders where units \u003e 6]",
        "isError": true
      },
      {
        "testClass": "org.apache.calcite.test.enumerable.EnumerableCorrelateTest",
        "testMethod": "simpleCorrelateDecorrelated",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableCalc(expr#0..2\u003d[{inputs}], empid\u003d[$t0], name\u003d[$t2])\\n  EnumerableSemiJoin(condition\u003d[\u003d($1, $3)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..4\u003d[{inputs}], proj#0..2\u003d[{exprs}])\\n      EnumerableTableScan(table\u003d[[s, emps]])\\n    EnumerableTableScan(table\u003d[[s, depts]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..2\u003d[{inputs}], empid\u003d[$t0], name\u003d[$t2])\\n  EnumerableSemiJoin(condition\u003d[\u003d($1, $3)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..4\u003d[{inputs}], proj#0..2\u003d[{exprs}])\\n      EnumerableTableScan(table\u003d[[s, emps]])\\n    EnumerableCalc(expr#0..3\u003d[{inputs}], deptno\u003d[$t0])\\n      EnumerableTableScan(table\u003d[[s, depts]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.ScannableTableTest",
        "testMethod": "testPFTableRefusesFilterCooperative",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dEnumerableInterpreter\\n  BindableTableScan(table\u003d[[s, beatles2]], filters\u003d[[\u003d($0, 4)]], projects\u003d[[2]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[4], expr#3\u003d[\u003d($t0, $t2)], k\u003d[$t1], $condition\u003d[$t3])\\n  EnumerableInterpreter\\n    BindableTableScan(table\u003d[[s, beatles2]], projects\u003d[[0, 2]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.LatticeTest",
        "testMethod": "testTileAlgorithm3",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableAggregate(group\u003d[{0, 1}])\\n  EnumerableTableScan(table\u003d[[adhoc, m{27, 31, 32, 36, 37}]\"\n     but: was \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcAggregate(group\u003d[{2, 3}])\\n    JdbcJoin(condition\u003d[\u003d($0, $1)], joinType\u003d[inner])\\n      JdbcProject(time_id\u003d[$1])\\n        JdbcTableScan(table\u003d[[foodmart, sales_fact_1997]])\\n      JdbcProject(time_id\u003d[$0], the_year\u003d[$4], quarter\u003d[$8])\\n        JdbcTableScan(table\u003d[[foodmart, time_by_day]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.plan.volcano.VolcanoPlannerTest",
        "testMethod": "testRemoveSingleGood",
        "failureName": "java.lang.AssertionError",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.MaterializationTest",
        "testMethod": "testJoinAggregateMaterializationNoAggregateFuncs9",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableAggregate(group\u003d[{2}])\"\n     but: was \"PLAN\u003dEnumerableAggregate(group\u003d[{0}])\\n  EnumerableUnion(all\u003d[true])\\n    EnumerableAggregate(group\u003d[{1}])\\n      EnumerableCalc(expr#0..2\u003d[{inputs}], deptno\u003d[$t1], empid\u003d[$t2], deptno0\u003d[$t0])\\n        EnumerableJoin(condition\u003d[\u003d($0, $1)], joinType\u003d[inner])\\n          EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[11], expr#6\u003d[\u003e\u003d($t5, $t1)], expr#7\u003d[19], expr#8\u003d[\u003c\u003d($t7, $t1)], expr#9\u003d[OR($t6, $t8)], deptno\u003d[$t1], $condition\u003d[$t9])\\n            EnumerableTableScan(table\u003d[[hr, emps]])\\n          EnumerableCalc(expr#0..3\u003d[{inputs}], deptno\u003d[$t1], empid\u003d[$t2])\\n            EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\\n              EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], name0\u003d[$t2])\\n                EnumerableTableScan(table\u003d[[hr, locations]])\\n              EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[CAST($t3):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], deptno\u003d[$t0], empid\u003d[$t2], name10\u003d[$t5])\\n                EnumerableJoin(condition\u003d[\u003d($1, $4)], joinType\u003d[inner])\\n                  EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], expr#5\u003d[10], expr#6\u003d[\u003e($t0, $t5)], expr#7\u003d[20], expr#8\u003d[\u003c($t0, $t7)], expr#9\u003d[AND($t6, $t8)], deptno\u003d[$t0], name0\u003d[$t4], $condition\u003d[$t9])\\n                    EnumerableTableScan(table\u003d[[hr, depts]])\\n                  EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], proj#0..2\u003d[{exprs}])\\n                    EnumerableTableScan(table\u003d[[hr, dependents]])\\n    EnumerableCalc(expr#0..1\u003d[{inputs}], empid\u003d[$t1])\\n      EnumerableTableScan(table\u003d[[hr, m0]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.ScannableTableTest",
        "testMethod": "testProjectableFilterableNonCooperative",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dEnumerableInterpreter\\n  BindableTableScan(table\u003d[[s, beatles2]], filters\u003d[[\u003d($0, 4)]], projects\u003d[[1]]\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[4], expr#3\u003d[\u003d($t0, $t2)], j\u003d[$t1], $condition\u003d[$t3])\\n  EnumerableInterpreter\\n    BindableTableScan(table\u003d[[s, beatles2]], projects\u003d[[0, 1]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.MaterializationTest",
        "testMethod": "testJoinMaterializationUKFK6",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableCalc(expr#0..1\u003d[{inputs}], empid0\u003d[$t0])\\n  EnumerableTableScan(table\u003d[[hr, m0]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..1\u003d[{inputs}], empid\u003d[$t0])\\n  EnumerableTableScan(table\u003d[[hr, m0]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcTest",
        "testMethod": "testReduceCountNotNullable",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dEnumerableCalc(expr#0\u003d[{inputs}], CS\u003d[$t0], CS2\u003d[$t0])\\n  EnumerableAggregate(group\u003d[{}], CS\u003d[COUNT()])\\n    EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[0], expr#6\u003d[\u003c($t1, $t5)], proj#0..4\u003d[{exprs}], $condition\u003d[$t6])\\n      EnumerableTableScan(table\u003d[[hr, emps]])\\n\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0\u003d[{inputs}], CS\u003d[$t0], CS2\u003d[$t0])\\n  EnumerableAggregate(group\u003d[{}], CS\u003d[COUNT()])\\n    EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[0], expr#6\u003d[\u003c($t1, $t5)], deptno\u003d[$t1], $condition\u003d[$t6])\\n      EnumerableTableScan(table\u003d[[hr, emps]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcTest",
        "testMethod": "testDistinctCount2",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t0):INTEGER NOT NULL], u\u003d[$t2], m0\u003d[$t1])\\n  EnumerableAggregate(group\u003d[{1}], m0\u003d[COUNT($0)])\\n    EnumerableAggregate(group\u003d[{2, 7}])\\n      EnumerableTableScan(table\u003d[[foodmart2, sales_fact_1997]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t0):INTEGER NOT NULL], u\u003d[$t2], m0\u003d[$t1])\\n  EnumerableAggregate(group\u003d[{0}], m0\u003d[COUNT($1)])\\n    EnumerableCalc(expr#0..1\u003d[{inputs}], unit_sales\u003d[$t1], customer_id\u003d[$t0])\\n      EnumerableAggregate(group\u003d[{2, 7}])\\n        EnumerableTableScan(table\u003d[[foodmart2, sales_fact_1997]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.CoreQuidemTest",
        "testMethod": "test[4: quidem(sql/join.iq)]",
        "failureName": "java.lang.AssertionError",
        "detail": "Files differ: /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/surefire/sql/join.iq /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/join.iq\n125,130c125,132\n\u003c EnumerableAggregate(group\u003d[{0, 2}])\n\u003c   EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c       EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003c     EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003c       EnumerableTableScan(table\u003d[[scott, EMP]])\n---\n\u003e EnumerableCalc(expr#0..1\u003d[{inputs}], DEPTNO0\u003d[$t1], DEPTNO\u003d[$t0])\n\u003e   EnumerableAggregate(group\u003d[{1, 2}])\n\u003e     EnumerableCalc(expr#0..2\u003d[{inputs}], EMPNO\u003d[$t1], DEPTNO\u003d[$t2], DEPTNO0\u003d[$t0])\n\u003e       EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\n\u003e         EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e           EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003e         EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003e           EnumerableTableScan(table\u003d[[scott, EMP]])\n145,150c147,153\n\u003c EnumerableAggregate(group\u003d[{0}])\n\u003c   EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c       EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003c     EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003c       EnumerableTableScan(table\u003d[[scott, EMP]])\n---\n\u003e EnumerableAggregate(group\u003d[{2}])\n\u003e   EnumerableCalc(expr#0..2\u003d[{inputs}], EMPNO\u003d[$t1], DEPTNO\u003d[$t2], DEPTNO0\u003d[$t0])\n\u003e     EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\n\u003e       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003e       EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003e         EnumerableTableScan(table\u003d[[scott, EMP]])\n198,208c201,210\n\u003c EnumerableCalc(expr#0..1\u003d[{inputs}], DEPTNO\u003d[$t1], ENAME\u003d[$t0])\n\u003c   EnumerableAggregate(group\u003d[{1, 3}])\n\u003c     EnumerableJoin(condition\u003d[\u003d($2, $4)], joinType\u003d[inner])\n\u003c       EnumerableCalc(expr#0..7\u003d[{inputs}], expr#8\u003d[10], expr#9\u003d[+($t7, $t8)], proj#0..1\u003d[{exprs}], $f8\u003d[$t9])\n\u003c         EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003c       EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[+($t1, $t3)], expr#5\u003d[CAST($t4):INTEGER], DEPTNO\u003d[$t1], $f16\u003d[$t5])\n\u003c         EnumerableJoin(condition\u003d[\u003d($1, $3)], joinType\u003d[inner])\n\u003c           EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003c             EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003c           EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003c             EnumerableTableScan(table\u003d[[scott, EMP]])\n---\n\u003e EnumerableAggregate(group\u003d[{0, 3}])\n\u003e   EnumerableJoin(condition\u003d[\u003d($1, $4)], joinType\u003d[inner])\n\u003e     EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[+($t1, $t3)], expr#5\u003d[CAST($t4):INTEGER], DEPTNO\u003d[$t1], $f16\u003d[$t5])\n\u003e       EnumerableJoin(condition\u003d[\u003d($1, $3)], joinType\u003d[inner])\n\u003e         EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003e           EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003e         EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003e           EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003e     EnumerableCalc(expr#0..7\u003d[{inputs}], expr#8\u003d[10], expr#9\u003d[+($t7, $t8)], proj#0..1\u003d[{exprs}], $f8\u003d[$t9])\n\u003e       EnumerableTableScan(table\u003d[[scott, EMP]])\n",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcAdapterTest",
        "testMethod": "testMixedJoinWithOrPlan",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$3], ENAME\u003d[$4], EMPNO0\u003d[$3], ENAME0\u003d[$4])\\n    JdbcJoin(condition\u003d[AND(\u003d($5, $0), OR(\u003e($7, $2), \u003e($1, $6)))], joinType\u003d[inner])\\n      JdbcProject(EMPNO\u003d[$0], HIREDATE\u003d[$4], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\"\n     but: was \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], EMPNO0\u003d[$0], ENAME0\u003d[$1])\\n    JdbcJoin(condition\u003d[AND(\u003d($2, $5), OR(\u003e($4, $7), \u003e($6, $3)))], joinType\u003d[inner])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n      JdbcProject(EMPNO\u003d[$0], HIREDATE\u003d[$4], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcAdapterTest",
        "testMethod": "testJoin3TablesPlan",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$3], ENAME\u003d[$4], DNAME\u003d[$8], GRADE\u003d[$0])\\n    JdbcJoin(condition\u003d[AND(\u003e($5, $1), \u003c($5, $2))], joinType\u003d[inner])\\n      JdbcTableScan(table\u003d[[SCOTT, SALGRADE]])\\n      JdbcJoin(condition\u003d[\u003d($3, $4)], joinType\u003d[inner])\\n        JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], SAL\u003d[$5], DEPTNO\u003d[$7])\\n          JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n        JdbcProject(DEPTNO\u003d[$0], DNAME\u003d[$1])\\n          JdbcTableScan(table\u003d[[SCOTT, DEPT]])\"\n     but: was \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], DNAME\u003d[$5], GRADE\u003d[$6])\\n    JdbcJoin(condition\u003d[AND(\u003e($2, $7), \u003c($2, $8))], joinType\u003d[inner])\\n      JdbcJoin(condition\u003d[\u003d($3, $4)], joinType\u003d[inner])\\n        JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], SAL\u003d[$5], DEPTNO\u003d[$7])\\n          JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n        JdbcProject(DEPTNO\u003d[$0], DNAME\u003d[$1])\\n          JdbcTableScan(table\u003d[[SCOTT, DEPT]])\\n      JdbcTableScan(table\u003d[[SCOTT, SALGRADE]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcTest",
        "testMethod": "testSimpleIn",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableSemiJoin(condition\u003d[\u003d($0, $5)], joinType\u003d[inner])\\n  EnumerableTableScan(table\u003d[[hr, depts]])\\n  EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[150], expr#6\u003d[\u003c($t0, $t5)], proj#0..4\u003d[{exprs}], $condition\u003d[$t6])\\n    EnumerableTableScan(table\u003d[[hr, emps]])\"\n     but: was \"PLAN\u003dEnumerableSemiJoin(condition\u003d[\u003d($0, $4)], joinType\u003d[inner])\\n  EnumerableTableScan(table\u003d[[hr, depts]])\\n  EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[150], expr#6\u003d[\u003c($t0, $t5)], deptno\u003d[$t1], $condition\u003d[$t6])\\n    EnumerableTableScan(table\u003d[[hr, emps]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcTest",
        "testMethod": "testOrderByFetch",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dEnumerableCalc(expr#0..23\u003d[{inputs}], store_id\u003d[$t0], grocery_sqft\u003d[$t16])\\n  EnumerableLimit(fetch\u003d[5])\\n    EnumerableCalc(expr#0..23\u003d[{inputs}], expr#24\u003d[10], expr#25\u003d[\u003c($t0, $t24)], proj#0..23\u003d[{exprs}], $condition\u003d[$t25])\\n      EnumerableTableScan(table\u003d[[foodmart2, store]])\\n\"\n     but: was \"PLAN\u003dEnumerableLimit(fetch\u003d[5])\\n  EnumerableCalc(expr#0..23\u003d[{inputs}], expr#24\u003d[10], expr#25\u003d[\u003c($t0, $t24)], store_id\u003d[$t0], grocery_sqft\u003d[$t16], $condition\u003d[$t25])\\n    EnumerableTableScan(table\u003d[[foodmart2, store]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.CoreQuidemTest",
        "testMethod": "test[5: quidem(sql/sub-query.iq)]",
        "failureName": "java.lang.AssertionError",
        "detail": "Files differ: /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/surefire/sql/sub-query.iq /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/sub-query.iq\n466,467c466,468\n\u003c EnumerableCalc(expr#0..2\u003d[{inputs}], A\u003d[$t1], B\u003d[$t2])\n\u003c   EnumerableMergeJoin(condition\u003d[\u003d($0, $1)], joinType\u003d[inner])\n---\n\u003e EnumerableCalc(expr#0..2\u003d[{inputs}], proj#0..1\u003d[{exprs}])\n\u003e   EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\n\u003e     EnumerableValues(tuples\u003d[[{ 60, \u0027b\u0027 }]])\n470d470\n\u003c     EnumerableValues(tuples\u003d[[{ 60, \u0027b\u0027 }]])\n624c624\n\u003c EnumerableSemiJoin(condition\u003d[\u003d($0, $10)], joinType\u003d[inner])\n---\n\u003e EnumerableSemiJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\n626c626\n\u003c   EnumerableCalc(expr#0..7\u003d[{inputs}], expr#8\u003d[\u003d($t7, $t7)], expr#9\u003d[\u0027SMITH\u0027], expr#10\u003d[\u003d($t1, $t9)], expr#11\u003d[AND($t8, $t10)], proj#0..7\u003d[{exprs}], $condition\u003d[$t11])\n---\n\u003e   EnumerableCalc(expr#0..7\u003d[{inputs}], expr#8\u003d[\u003d($t7, $t7)], expr#9\u003d[\u0027SMITH\u0027], expr#10\u003d[\u003d($t1, $t9)], expr#11\u003d[AND($t8, $t10)], DEPTNO\u003d[$t7], $condition\u003d[$t11])\n833c833\n\u003c           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[false], expr#4\u003d[123], expr#5\u003d[null], expr#6\u003d[\u003d($t4, $t5)], expr#7\u003d[IS NULL($t5)], expr#8\u003d[OR($t6, $t7)], cs\u003d[$t3], $condition\u003d[$t8])\n---\n\u003e           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[null], expr#4\u003d[IS NOT NULL($t3)], expr#5\u003d[123], expr#6\u003d[\u003d($t5, $t3)], expr#7\u003d[IS NULL($t3)], expr#8\u003d[OR($t6, $t7)], cs\u003d[$t4], $condition\u003d[$t8])\n1011c1011\n\u003c           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[true], expr#4\u003d[10], expr#5\u003d[CAST($t0):TINYINT], expr#6\u003d[\u003d($t4, $t5)], cs\u003d[$t3], $condition\u003d[$t6])\n---\n\u003e           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[CAST($t0):TINYINT], expr#4\u003d[IS NOT NULL($t3)], expr#5\u003d[10], expr#6\u003d[\u003d($t5, $t3)], expr#7\u003d[IS NULL($t3)], expr#8\u003d[OR($t6, $t7)], cs\u003d[$t4], $condition\u003d[$t8])\n1083c1083\n\u003c           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[false], expr#4\u003d[123], expr#5\u003d[null], expr#6\u003d[\u003d($t4, $t5)], expr#7\u003d[IS NULL($t5)], expr#8\u003d[OR($t6, $t7)], cs\u003d[$t3], $condition\u003d[$t8])\n---\n\u003e           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[null], expr#4\u003d[IS NOT NULL($t3)], expr#5\u003d[123], expr#6\u003d[\u003d($t5, $t3)], expr#7\u003d[IS NULL($t3)], expr#8\u003d[OR($t6, $t7)], cs\u003d[$t4], $condition\u003d[$t8])\n1261c1261\n\u003c           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[true], expr#4\u003d[10], expr#5\u003d[CAST($t0):TINYINT], expr#6\u003d[\u003d($t4, $t5)], cs\u003d[$t3], $condition\u003d[$t6])\n---\n\u003e           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[CAST($t0):TINYINT], expr#4\u003d[IS NOT NULL($t3)], expr#5\u003d[10], expr#6\u003d[\u003d($t5, $t3)], expr#7\u003d[IS NULL($t3)], expr#8\u003d[OR($t6, $t7)], cs\u003d[$t4], $condition\u003d[$t8])\n1311c1311,1312\n\u003c EnumerableValues(tuples\u003d[[]])\n---\n\u003e EnumerableCalc(expr#0..2\u003d[{inputs}], SAL\u003d[$t1])\n\u003e   EnumerableValues(tuples\u003d[[]])\n1324c1325,1326\n\u003c EnumerableValues(tuples\u003d[[]])\n---\n\u003e EnumerableCalc(expr#0..2\u003d[{inputs}], SAL\u003d[$t1])\n\u003e   EnumerableValues(tuples\u003d[[]])\n1337c1339,1340\n\u003c EnumerableValues(tuples\u003d[[]])\n---\n\u003e EnumerableCalc(expr#0..2\u003d[{inputs}], SAL\u003d[$t1])\n\u003e   EnumerableValues(tuples\u003d[[]])\n1350c1353,1354\n\u003c EnumerableValues(tuples\u003d[[]])\n---\n\u003e EnumerableCalc(expr#0..2\u003d[{inputs}], SAL\u003d[$t1])\n\u003e   EnumerableValues(tuples\u003d[[]])\n1363c1367,1368\n\u003c EnumerableValues(tuples\u003d[[]])\n---\n\u003e EnumerableCalc(expr#0..2\u003d[{inputs}], SAL\u003d[$t1])\n\u003e   EnumerableValues(tuples\u003d[[]])\n1470c1475\n\u003c           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[false], expr#4\u003d[123], expr#5\u003d[null], expr#6\u003d[\u003d($t4, $t5)], expr#7\u003d[IS NULL($t5)], expr#8\u003d[OR($t6, $t7)], cs\u003d[$t3], $condition\u003d[$t8])\n---\n\u003e           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[null], expr#4\u003d[IS NOT NULL($t3)], expr#5\u003d[123], expr#6\u003d[\u003d($t5, $t3)], expr#7\u003d[IS NULL($t3)], expr#8\u003d[OR($t6, $t7)], cs\u003d[$t4], $condition\u003d[$t8])\n1575c1580\n\u003c           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[true], expr#4\u003d[10], expr#5\u003d[CAST($t0):TINYINT], expr#6\u003d[\u003d($t4, $t5)], expr#7\u003d[IS NULL($t5)], expr#8\u003d[OR($t6, $t7)], cs\u003d[$t3], $condition\u003d[$t8])\n---\n\u003e           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[CAST($t0):TINYINT], expr#4\u003d[IS NOT NULL($t3)], expr#5\u003d[10], expr#6\u003d[\u003d($t5, $t3)], expr#7\u003d[IS NULL($t3)], expr#8\u003d[OR($t6, $t7)], cs\u003d[$t4], $condition\u003d[$t8])\n1643c1648,1649\n\u003c EnumerableValues(tuples\u003d[[]])\n---\n\u003e EnumerableCalc(expr#0..3\u003d[{inputs}], SAL\u003d[$t1])\n\u003e   EnumerableValues(tuples\u003d[[]])\n",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.plan.volcano.VolcanoPlannerTest",
        "testMethod": "testOomProjectMergeRule",
        "failureName": "java.lang.AssertionError",
        "detail": "Too many rules fired. Output relation is rel#291:EnumerableValues.ENUMERABLE.[[0]](type\u003dRecordType(CHAR(1) f),tuples\u003d[{ \u00271\u0027 }]), expected id to be less than 100",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.ScannableTableTest",
        "testMethod": "testPFPushDownProjectFilterAggregateGroup",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dEnumerableAggregate(group\u003d[{0}], C\u003d[COUNT()])\\n  EnumerableInterpreter\\n    BindableTableScan(table\u003d[[s, beatles]], filters\u003d[[\u003e($2, 1900)]], projects\u003d[[0]])\"\n     but: was \"PLAN\u003dEnumerableAggregate(group\u003d[{0}], C\u003d[COUNT()])\\n  EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[1900], expr#3\u003d[\u003e($t1, $t2)], proj#0..1\u003d[{exprs}], $condition\u003d[$t3])\\n    EnumerableInterpreter\\n      BindableTableScan(table\u003d[[s, beatles]], projects\u003d[[0, 2]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.LatticeTest",
        "testMethod": "testTileAlgorithm2",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableAggregate(group\u003d[{0, 1}])\\n  EnumerableTableScan(table\u003d[[adhoc, m{27, 31, 32, 36, 37}]\"\n     but: was \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcAggregate(group\u003d[{2, 3}])\\n    JdbcJoin(condition\u003d[\u003d($0, $1)], joinType\u003d[inner])\\n      JdbcProject(time_id\u003d[$1])\\n        JdbcTableScan(table\u003d[[foodmart, sales_fact_1997]])\\n      JdbcProject(time_id\u003d[$0], the_year\u003d[$4], quarter\u003d[$8])\\n        JdbcTableScan(table\u003d[[foodmart, time_by_day]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcTest",
        "testMethod": "testInnerJoinValues",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableCalc(expr#0..1\u003d[{inputs}], EMPNO\u003d[$t1], DESC\u003d[$t0])\\n  EnumerableAggregate(group\u003d[{1, 2}])\\n    EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[CAST($t3):INTEGER NOT NULL], expr#5\u003d[\u003d($t4, $t0)], expr#6\u003d[\u0027SameName\u0027], expr#7\u003d[\u003d($t1, $t6)], expr#8\u003d[AND($t5, $t7)], proj#0..3\u003d[{exprs}], $condition\u003d[$t8])\\n      EnumerableJoin(condition\u003d[true], joinType\u003d[inner])\\n        EnumerableValues(tuples\u003d[[{ 10, \u0027SameName\u0027 }]])\\n        EnumerableTableScan(table\u003d[[SALES, EMPS]])\\n\"\n     but: was \"PLAN\u003dEnumerableAggregate(group\u003d[{0, 3}])\\n  EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[CAST($t3):INTEGER NOT NULL], expr#5\u003d[\u003d($t4, $t0)], EMPNO\u003d[$t2], DEPTNO\u003d[$t3], ID\u003d[$t0], DESC\u003d[$t1], $condition\u003d[$t5])\\n    EnumerableJoin(condition\u003d[true], joinType\u003d[inner])\\n      EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[\u0027SameName\u0027], expr#3\u003d[\u003d($t1, $t2)], proj#0..1\u003d[{exprs}], $condition\u003d[$t3])\\n        EnumerableValues(tuples\u003d[[{ 10, \u0027SameName\u0027 }]])\\n      EnumerableTableScan(table\u003d[[SALES, EMPS]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.ScannableTableTest",
        "testMethod": "testPFPushDownProjectFilterAggregateNested",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dEnumerableAggregate(group\u003d[{0}], C\u003d[COUNT()])\\n  EnumerableAggregate(group\u003d[{0, 1}])\\n    EnumerableInterpreter\\n      BindableTableScan(table\u003d[[s, beatles]], filters\u003d[[\u003d($2, 1940)]], projects\u003d[[2, 0]])\"\n     but: was \"PLAN\u003dEnumerableAggregate(group\u003d[{0}], C\u003d[COUNT()])\\n  EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[1940], expr#3\u003d[\u003d($t0, $t2)], proj#0..1\u003d[{exprs}], $condition\u003d[$t3])\\n    EnumerableAggregate(group\u003d[{0, 1}])\\n      EnumerableInterpreter\\n        BindableTableScan(table\u003d[[s, beatles]], projects\u003d[[2, 0]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.StreamTest",
        "testMethod": "testStreamToRelationJoin",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableCalc(expr#0..6\u003d[{inputs}], proj#0..1\u003d[{exprs}], SUPPLIERID\u003d[$t6])\\n  EnumerableJoin(condition\u003d[\u003d($4, $5)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[CAST($t2):VARCHAR(32) CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\" NOT NULL], proj#0..4\u003d[{exprs}])\\n      EnumerableInterpreter\\n        BindableTableScan(table\u003d[[STREAM_JOINS, ORDERS, (STREAM)]])\\n    EnumerableInterpreter\\n      BindableTableScan(table\u003d[[STREAM_JOINS, PRODUCTS]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..6\u003d[{inputs}], proj#0..1\u003d[{exprs}], SUPPLIERID\u003d[$t6])\\n  EnumerableUnion(all\u003d[true])\\n    EnumerableValues(tuples\u003d[[]])\\n    EnumerableJoin(condition\u003d[\u003d($4, $5)], joinType\u003d[inner])\\n      EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[CAST($t2):VARCHAR(32) CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\" NOT NULL], proj#0..4\u003d[{exprs}])\\n        EnumerableInterpreter\\n          BindableTableScan(table\u003d[[STREAM_JOINS, ORDERS, (STREAM)]])\\n      EnumerableInterpreter\\n        BindableTableScan(table\u003d[[STREAM_JOINS, PRODUCTS]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcAdapterTest",
        "testMethod": "testNonEquiJoinReverseConditionPlan",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$3], ENAME\u003d[$4], GRADE\u003d[$0])\\n    JdbcJoin(condition\u003d[AND(\u003c\u003d($1, $5), \u003e\u003d($2, $5))], joinType\u003d[inner])\\n      JdbcTableScan(table\u003d[[SCOTT, SALGRADE]])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\"\n     but: was \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], GRADE\u003d[$3])\\n    JdbcJoin(condition\u003d[AND(\u003c\u003d($4, $2), \u003e\u003d($5, $2))], joinType\u003d[inner])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n      JdbcTableScan(table\u003d[[SCOTT, SALGRADE]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcAdapterTest",
        "testMethod": "testMixedJoinPlan",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$2], ENAME\u003d[$3], EMPNO0\u003d[$2], ENAME0\u003d[$3])\\n    JdbcJoin(condition\u003d[AND(\u003d($4, $0), \u003e($5, $1))], joinType\u003d[inner])\\n      JdbcProject(EMPNO\u003d[$0], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], MGR\u003d[$3], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\"\n     but: was \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], EMPNO0\u003d[$0], ENAME0\u003d[$1])\\n    JdbcJoin(condition\u003d[AND(\u003d($2, $4), \u003e($3, $5))], joinType\u003d[inner])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], MGR\u003d[$3], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n      JdbcProject(EMPNO\u003d[$0], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.MaterializationTest",
        "testMethod": "testJoinAggregateMaterializationAggregateFuncs11",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableAggregate(group\u003d[{2}], agg#0\u003d[COUNT()])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[1], expr#3\u003d[+($t1, $t2)], empid\u003d[$t0], EXPR$1\u003d[$t3])\\n  EnumerableAggregate(group\u003d[{0}], agg#0\u003d[$SUM0($1)])\\n    EnumerableUnion(all\u003d[true])\\n      EnumerableAggregate(group\u003d[{1}], agg#0\u003d[COUNT()])\\n        EnumerableCalc(expr#0..2\u003d[{inputs}], deptno\u003d[$t1], empid\u003d[$t2], deptno0\u003d[$t0])\\n          EnumerableJoin(condition\u003d[\u003d($0, $1)], joinType\u003d[inner])\\n            EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[11], expr#6\u003d[\u003e\u003d($t5, $t1)], expr#7\u003d[19], expr#8\u003d[\u003c\u003d($t7, $t1)], expr#9\u003d[OR($t6, $t8)], deptno\u003d[$t1], $condition\u003d[$t9])\\n              EnumerableTableScan(table\u003d[[hr, emps]])\\n            EnumerableCalc(expr#0..3\u003d[{inputs}], deptno\u003d[$t1], empid\u003d[$t2])\\n              EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\\n                EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], name0\u003d[$t2])\\n                  EnumerableTableScan(table\u003d[[hr, locations]])\\n                EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[CAST($t3):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], deptno\u003d[$t0], empid\u003d[$t2], name10\u003d[$t5])\\n                  EnumerableJoin(condition\u003d[\u003d($1, $4)], joinType\u003d[inner])\\n                    EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], expr#5\u003d[10], expr#6\u003d[\u003e($t0, $t5)], expr#7\u003d[20], expr#8\u003d[\u003c($t0, $t7)], expr#9\u003d[AND($t6, $t8)], deptno\u003d[$t0], name0\u003d[$t4], $condition\u003d[$t9])\\n                      EnumerableTableScan(table\u003d[[hr, depts]])\\n                    EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], proj#0..2\u003d[{exprs}])\\n                      EnumerableTableScan(table\u003d[[hr, dependents]])\\n      EnumerableAggregate(group\u003d[{1}], agg#0\u003d[$SUM0($2)])\\n        EnumerableTableScan(table\u003d[[hr, m0]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.ScannableTableTest",
        "testMethod": "testProjectableFilterableWithProjectFilterNonCooperative",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dEnumerableInterpreter\\n  BindableTableScan(table\u003d[[s, beatles]], filters\u003d[[\u003e($2, 1941)]], projects\u003d[[0, 2]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[1941], expr#3\u003d[\u003e($t1, $t2)], proj#0..1\u003d[{exprs}], $condition\u003d[$t3])\\n  EnumerableInterpreter\\n    BindableTableScan(table\u003d[[s, beatles]], projects\u003d[[0, 2]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.LatticeTest",
        "testMethod": "testLatticeWithPreDefinedTiles",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableTableScan(table\u003d[[adhoc, m{27, 31}\"\n     but: was \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcAggregate(group\u003d[{2, 3}])\\n    JdbcJoin(condition\u003d[\u003d($0, $1)], joinType\u003d[inner])\\n      JdbcProject(time_id\u003d[$1])\\n        JdbcTableScan(table\u003d[[foodmart, sales_fact_1997]])\\n      JdbcProject(time_id\u003d[$0], the_year\u003d[$4], quarter\u003d[$8])\\n        JdbcTableScan(table\u003d[[foodmart, time_by_day]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcAdapterTest",
        "testMethod": "testNonEquiJoinPlan",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$3], ENAME\u003d[$4], GRADE\u003d[$0])\\n    JdbcJoin(condition\u003d[AND(\u003e($5, $1), \u003c($5, $2))], joinType\u003d[inner])\\n      JdbcTableScan(table\u003d[[SCOTT, SALGRADE]])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\"\n     but: was \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], GRADE\u003d[$3])\\n    JdbcJoin(condition\u003d[AND(\u003e($2, $4), \u003c($2, $5))], joinType\u003d[inner])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n      JdbcTableScan(table\u003d[[SCOTT, SALGRADE]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.CoreQuidemTest",
        "testMethod": "test[7: quidem(sql/winagg.iq)]",
        "failureName": "java.lang.AssertionError",
        "detail": "Files differ: /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/surefire/sql/winagg.iq /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/winagg.iq\n443c443\n\u003c |     10 | 110 | 110 |\n---\n\u003e |     10 | 110 | 150 |\n",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.plan.volcano.ComboRuleTest",
        "testMethod": "testCombo",
        "failureName": "java.lang.AssertionError",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.ScannableTableTest",
        "testMethod": "testPFPushDownProjectFilterInAggregateNoGroup",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dEnumerableAggregate(group\u003d[{}], M\u003d[MAX($0)])\\n  EnumerableInterpreter\\n    BindableTableScan(table\u003d[[s, beatles]], filters\u003d[[\u003e($0, 1)]], projects\u003d[[2]])\"\n     but: was \"PLAN\u003dEnumerableAggregate(group\u003d[{}], M\u003d[MAX($1)])\\n  EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[1], expr#3\u003d[\u003e($t0, $t2)], proj#0..1\u003d[{exprs}], $condition\u003d[$t3])\\n    EnumerableInterpreter\\n      BindableTableScan(table\u003d[[s, beatles]], projects\u003d[[0, 2]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.MaterializationTest",
        "testMethod": "testJoinMaterializationUKFK5",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableCalc(expr#0..1\u003d[{inputs}], empid0\u003d[$t0])\\n  EnumerableTableScan(table\u003d[[hr, m0]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..1\u003d[{inputs}], empid\u003d[$t0])\\n  EnumerableTableScan(table\u003d[[hr, m0]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.CoreQuidemTest",
        "testMethod": "test[1: quidem(sql/misc.iq)]",
        "failureName": "java.lang.reflect.InvocationTargetException",
        "isError": true
      },
      {
        "testClass": "org.apache.calcite.test.MaterializationTest",
        "testMethod": "testJoinAggregateMaterializationNoAggregateFuncs7",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableAggregate(group\u003d[{2}])\"\n     but: was \"PLAN\u003dEnumerableAggregate(group\u003d[{0}])\\n  EnumerableUnion(all\u003d[true])\\n    EnumerableAggregate(group\u003d[{1}])\\n      EnumerableCalc(expr#0..2\u003d[{inputs}], deptno\u003d[$t1], empid\u003d[$t2], deptno0\u003d[$t0])\\n        EnumerableJoin(condition\u003d[\u003d($0, $1)], joinType\u003d[inner])\\n          EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[11], expr#6\u003d[\u003e\u003d($t5, $t1)], deptno\u003d[$t1], $condition\u003d[$t6])\\n            EnumerableTableScan(table\u003d[[hr, emps]])\\n          EnumerableCalc(expr#0..3\u003d[{inputs}], deptno\u003d[$t1], empid\u003d[$t2])\\n            EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\\n              EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], name0\u003d[$t2])\\n                EnumerableTableScan(table\u003d[[hr, locations]])\\n              EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[CAST($t3):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], deptno\u003d[$t0], empid\u003d[$t2], name10\u003d[$t5])\\n                EnumerableJoin(condition\u003d[\u003d($1, $4)], joinType\u003d[inner])\\n                  EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], expr#5\u003d[10], expr#6\u003d[\u003e($t0, $t5)], deptno\u003d[$t0], name0\u003d[$t4], $condition\u003d[$t6])\\n                    EnumerableTableScan(table\u003d[[hr, depts]])\\n                  EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], proj#0..2\u003d[{exprs}])\\n                    EnumerableTableScan(table\u003d[[hr, dependents]])\\n    EnumerableCalc(expr#0..1\u003d[{inputs}], empid\u003d[$t1])\\n      EnumerableTableScan(table\u003d[[hr, m0]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcAdapterTest",
        "testMethod": "testEquiJoinPlan",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$2], ENAME\u003d[$3], DEPTNO\u003d[$4], DNAME\u003d[$1])\\n    JdbcJoin(condition\u003d[\u003d($4, $0)], joinType\u003d[inner])\\n      JdbcProject(DEPTNO\u003d[$0], DNAME\u003d[$1])\\n        JdbcTableScan(table\u003d[[SCOTT, DEPT]])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], DEPTNO\u003d[$7])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\"\n     but: was \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], DEPTNO\u003d[$2], DNAME\u003d[$4])\\n    JdbcJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[inner])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], DEPTNO\u003d[$7])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n      JdbcProject(DEPTNO\u003d[$0], DNAME\u003d[$1])\\n        JdbcTableScan(table\u003d[[SCOTT, DEPT]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.LatticeTest",
        "testMethod": "testTileAlgorithm",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableAggregate(group\u003d[{2, 3}])\\n  EnumerableTableScan(table\u003d[[adhoc, m{16, 17, 27, 31, 32, 37}]])\"\n     but: was \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcAggregate(group\u003d[{2, 3}])\\n    JdbcJoin(condition\u003d[\u003d($0, $1)], joinType\u003d[inner])\\n      JdbcProject(time_id\u003d[$1])\\n        JdbcTableScan(table\u003d[[foodmart, sales_fact_1997]])\\n      JdbcProject(time_id\u003d[$0], the_year\u003d[$4], quarter\u003d[$8])\\n        JdbcTableScan(table\u003d[[foodmart, time_by_day]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcTest",
        "testMethod": "testAggregateEmpty",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dEnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[0], expr#3\u003d[\u003d($t0, $t2)], expr#4\u003d[null], expr#5\u003d[CASE($t3, $t4, $t1)], expr#6\u003d[/($t5, $t0)], expr#7\u003d[CAST($t6):JavaType(class java.lang.Integer)], CS\u003d[$t0], C\u003d[$t0], S\u003d[$t5], A\u003d[$t7])\\n  EnumerableAggregate(group\u003d[{}], CS\u003d[COUNT()], S\u003d[$SUM0($1)])\\n    EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[0], expr#6\u003d[\u003c($t1, $t5)], proj#0..4\u003d[{exprs}], $condition\u003d[$t6])\\n      EnumerableTableScan(table\u003d[[hr, emps]])\\n\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[0], expr#4\u003d[\u003d($t0, $t3)], expr#5\u003d[null], expr#6\u003d[CASE($t4, $t5, $t1)], expr#7\u003d[/($t2, $t0)], expr#8\u003d[CAST($t7):JavaType(class java.lang.Integer)], CS\u003d[$t0], C\u003d[$t0], S\u003d[$t6], A\u003d[$t8])\\n  EnumerableAggregate(group\u003d[{}], CS\u003d[COUNT()], S\u003d[$SUM0($1)], agg#2\u003d[SUM($1)])\\n    EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[0], expr#6\u003d[\u003c($t1, $t5)], proj#0..4\u003d[{exprs}], $condition\u003d[$t6])\\n      EnumerableTableScan(table\u003d[[hr, emps]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.LatticeTest",
        "testMethod": "testLatticeWithPreDefinedTilesRollUp",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[10], expr#5\u003d[*($t3, $t4)], proj#0..2\u003d[{exprs}], US\u003d[$t5])\\n  EnumerableAggregate(group\u003d[{0}], C\u003d[$SUM0($2)], Q\u003d[MIN($1)], agg#2\u003d[$SUM0($4)])\\n    EnumerableTableScan(table\u003d[[adhoc, m{27, 31}\"\n     but: was \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(the_year\u003d[$0], C\u003d[$1], Q\u003d[$2], US\u003d[*($3, 10)])\\n    JdbcAggregate(group\u003d[{1}], C\u003d[COUNT()], Q\u003d[MIN($2)], agg#2\u003d[$SUM0($4)])\\n      JdbcJoin(condition\u003d[\u003d($3, $0)], joinType\u003d[inner])\\n        JdbcProject(time_id\u003d[$0], the_year\u003d[$4], quarter\u003d[$8])\\n          JdbcTableScan(table\u003d[[foodmart, time_by_day]])\\n        JdbcProject(time_id\u003d[$1], unit_sales\u003d[$7])\\n          JdbcTableScan(table\u003d[[foodmart, sales_fact_1997]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.ScannableTableTest",
        "testMethod": "testProjectableFilterableWithProjectAndFilter",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dEnumerableInterpreter\\n  BindableTableScan(table\u003d[[s, beatles]], filters\u003d[[\u003d($0, 4)]], projects\u003d[[2, 1]]\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..2\u003d[{inputs}], k\u003d[$t2], j\u003d[$t1])\\n  EnumerableInterpreter\\n    BindableTableScan(table\u003d[[s, beatles]], filters\u003d[[\u003d($0, 4)]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.LatticeTest",
        "testMethod": "testLatticeRecognizeGroupJoin",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: \u003c2\u003e\n     but: was \u003c1\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcTest",
        "testMethod": "testMergeJoin",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableCalc(expr#0..3\u003d[{inputs}], empid\u003d[$t2], deptno\u003d[$t0], name\u003d[$t1])\\n  EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..3\u003d[{inputs}], proj#0..1\u003d[{exprs}])\\n      EnumerableTableScan(table\u003d[[hr, depts]])\\n    EnumerableCalc(expr#0..4\u003d[{inputs}], proj#0..1\u003d[{exprs}])\\n      EnumerableTableScan(table\u003d[[hr, emps]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..3\u003d[{inputs}], empid\u003d[$t0], deptno\u003d[$t2], name\u003d[$t3])\\n  EnumerableJoin(condition\u003d[\u003d($1, $2)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..4\u003d[{inputs}], proj#0..1\u003d[{exprs}])\\n      EnumerableTableScan(table\u003d[[hr, emps]])\\n    EnumerableCalc(expr#0..3\u003d[{inputs}], proj#0..1\u003d[{exprs}])\\n      EnumerableTableScan(table\u003d[[hr, depts]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.ScannableTableTest",
        "testMethod": "testPFTableRefusesFilterSingleColumn",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dEnumerableInterpreter\\n  BindableTableScan(table\u003d[[s, beatles2]], filters\u003d[[\u003e($2, 1941)]], projects\u003d[[2]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0\u003d[{inputs}], expr#1\u003d[1941], expr#2\u003d[\u003e($t0, $t1)], k\u003d[$t0], $condition\u003d[$t2])\\n  EnumerableInterpreter\\n    BindableTableScan(table\u003d[[s, beatles2]], projects\u003d[[2]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.CoreQuidemTest",
        "testMethod": "test[3: quidem(sql/agg.iq)]",
        "failureName": "java.lang.AssertionError",
        "detail": "Files differ: /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/surefire/sql/agg.iq /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/agg.iq\n1471,1475c1471,1476\n\u003c   EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c       EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003c     EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003c       EnumerableTableScan(table\u003d[[scott, EMP]])\n---\n\u003e   EnumerableCalc(expr#0..2\u003d[{inputs}], EMPNO\u003d[$t1], DEPTNO\u003d[$t2], DEPTNO0\u003d[$t0])\n\u003e     EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\n\u003e       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003e       EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003e         EnumerableTableScan(table\u003d[[scott, EMP]])\n1489,1494c1490,1496\n\u003c EnumerableAggregate(group\u003d[{}], EXPR$0\u003d[SUM($2)])\n\u003c   EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c       EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003c     EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], SAL\u003d[$t5], DEPTNO\u003d[$t7])\n\u003c       EnumerableTableScan(table\u003d[[scott, EMP]])\n---\n\u003e EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[0], expr#3\u003d[\u003d($t1, $t2)], expr#4\u003d[null], expr#5\u003d[CASE($t3, $t4, $t0)], EXPR$0\u003d[$t5])\n\u003e   EnumerableAggregate(group\u003d[{}], EXPR$0\u003d[$SUM0($2)], agg#1\u003d[COUNT($2)])\n\u003e     EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\n\u003e       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003e       EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], SAL\u003d[$t5], DEPTNO\u003d[$t7])\n\u003e         EnumerableTableScan(table\u003d[[scott, EMP]])\n1558,1563c1560,1566\n\u003c   EnumerableAggregate(group\u003d[{3}], EXPR$0\u003d[MIN($2)])\n\u003c     EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\n\u003c       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c         EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003c       EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], SAL\u003d[$t5], DEPTNO\u003d[$t7])\n\u003c         EnumerableTableScan(table\u003d[[scott, EMP]])\n---\n\u003e   EnumerableAggregate(group\u003d[{2}], EXPR$0\u003d[MIN($1)])\n\u003e     EnumerableCalc(expr#0..3\u003d[{inputs}], EMPNO\u003d[$t1], SAL\u003d[$t2], DEPTNO\u003d[$t3], DEPTNO0\u003d[$t0])\n\u003e       EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\n\u003e         EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e           EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003e         EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], SAL\u003d[$t5], DEPTNO\u003d[$t7])\n\u003e           EnumerableTableScan(table\u003d[[scott, EMP]])\n1577,1582c1580,1586\n\u003c EnumerableAggregate(group\u003d[{}], C\u003d[COUNT()], S\u003d[SUM($2)])\n\u003c   EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c       EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003c     EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], SAL\u003d[$t5], DEPTNO\u003d[$t7])\n\u003c       EnumerableTableScan(table\u003d[[scott, EMP]])\n---\n\u003e EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[0], expr#4\u003d[\u003d($t2, $t3)], expr#5\u003d[null], expr#6\u003d[CASE($t4, $t5, $t1)], C\u003d[$t0], S\u003d[$t6])\n\u003e   EnumerableAggregate(group\u003d[{}], C\u003d[COUNT()], S\u003d[$SUM0($2)], agg#2\u003d[COUNT($2)])\n\u003e     EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\n\u003e       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003e       EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], SAL\u003d[$t5], DEPTNO\u003d[$t7])\n\u003e         EnumerableTableScan(table\u003d[[scott, EMP]])\n",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.MaterializationTest",
        "testMethod": "testJoinAggregateMaterializationAggregateFuncs5",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[1], expr#3\u003d[+($t1, $t2)], deptno\u003d[$t0], S\u003d[$t3])\\n  EnumerableAggregate(group\u003d[{1}], agg#0\u003d[$SUM0($3)])\\n    EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[10], expr#5\u003d[\u003c($t4, $t1)], proj#0..3\u003d[{exprs}], $condition\u003d[$t5])\\n      EnumerableTableScan(table\u003d[[hr, m0]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[1], expr#3\u003d[+($t1, $t2)], deptno\u003d[$t0], $f1\u003d[$t3])\\n  EnumerableAggregate(group\u003d[{1}], agg#0\u003d[$SUM0($3)])\\n    EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[10], expr#5\u003d[\u003c($t4, $t1)], proj#0..3\u003d[{exprs}], $condition\u003d[$t5])\\n      EnumerableTableScan(table\u003d[[hr, m0]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.ScannableTableTest",
        "testMethod": "testProjectableFilterableCooperative",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"PLAN\u003dEnumerableInterpreter\\n  BindableTableScan(table\u003d[[s, beatles]], filters\u003d[[\u003d($0, 4)]], projects\u003d[[1]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[4], expr#3\u003d[\u003d($t0, $t2)], j\u003d[$t1], $condition\u003d[$t3])\\n  EnumerableInterpreter\\n    BindableTableScan(table\u003d[[s, beatles]], projects\u003d[[0, 1]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.LatticeTest",
        "testMethod": "testLatticeWithPreDefinedTilesFewerMeasures",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableCalc(expr#0..4\u003d[{inputs}], proj#0..2\u003d[{exprs}])\\n  EnumerableTableScan(table\u003d[[adhoc, m{27, 31}\"\n     but: was \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcAggregate(group\u003d[{2, 3}], C\u003d[COUNT()])\\n    JdbcJoin(condition\u003d[\u003d($0, $1)], joinType\u003d[inner])\\n      JdbcProject(time_id\u003d[$1])\\n        JdbcTableScan(table\u003d[[foodmart, sales_fact_1997]])\\n      JdbcProject(time_id\u003d[$0], the_year\u003d[$4], quarter\u003d[$8])\\n        JdbcTableScan(table\u003d[[foodmart, time_by_day]])\\n\\n\"",
        "isError": false
      }
    ]
  },
  "commits": {
    "buggyBuild": {
      "repoName": "apache/calcite",
      "branchName": "master",
      "sha": "9d783e7fc06d9c0af975246ac0e42e87d63d08d5",
      "url": "http://github.com/apache/calcite/commit/9d783e7fc06d9c0af975246ac0e42e87d63d08d5",
      "date": "Sep 23, 2018 2:01:10 PM"
    },
    "buggyBuildForkRepo": {
      "repoName": "vlsi/calcite",
      "branchName": "calcite2223",
      "sha": "d6134054bd95d81aa3baeb7e74da1a6a28b82b77",
      "url": "https://github.com/vlsi/calcite/commit/d6134054bd95d81aa3baeb7e74da1a6a28b82b77",
      "date": "Sep 23, 2018 2:01:10 PM"
    },
    "buggyBuildBaseRepo": {
      "repoName": "apache/calcite",
      "branchName": "master",
      "sha": "00c36467d0a90290f6085f88debec71b217fe43f",
      "url": "https://github.com/apache/calcite/commit/00c36467d0a90290f6085f88debec71b217fe43f",
      "date": "Sep 22, 2018 4:55:50 PM"
    }
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Sep 23, 2018 2:13:07 PM",
    "reproductionDateEnd": "Sep 23, 2018 2:19:26 PM",
    "totalDuration": 374,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 19,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          19
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 155,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          3,
          152
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 152,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          152
        ]
      }
    },
    "projectRootPomPath": "./workspace/apache/calcite/432115269/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "projectMetrics": {
    "numberModules": 19,
    "numberSourceFiles": 1512,
    "numberTestFiles": 231,
    "numberLibrariesFailingModule": 48
  },
  "type": "only_fail"
}