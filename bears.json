{
  "tests": {
    "failingModule": "/root/workspace/airlift/aircompressor/428477278",
    "overallMetrics": {
      "numberRunning": 9950,
      "numberPassing": 8295,
      "numberFailing": 1655,
      "numberErroring": 0,
      "numberSkipping": 0,
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "isError": false,
          "occurrences": 1655
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "numberRunning": 709,
        "numberPassing": 473,
        "numberFailing": 236,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "numberRunning": 709,
        "numberPassing": 472,
        "numberFailing": 237,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "numberRunning": 709,
        "numberPassing": 0,
        "numberFailing": 709,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "numberRunning": 709,
        "numberPassing": 472,
        "numberFailing": 237,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "numberRunning": 709,
        "numberPassing": 473,
        "numberFailing": 236,
        "numberErroring": 0,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testRoundTripSmallLiteral",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testRoundTripSmallLiteral",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testRoundTripSmallLiteral",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodec",
        "testMethod": "testDecompressWithOutputPadding",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferHeapToHeap",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testDecompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzopCodecByteAtATime",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferHeapToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompress",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzoCodec",
        "testMethod": "testDecompressionBufferOverrun",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      },
      {
        "testClass": "io.airlift.compress.lzo.TestLzo",
        "testMethod": "testCompressByteBufferDirectToDirect",
        "failureName": "java.lang.RuntimeException",
        "detail": "native-lzo library not available",
        "isError": false
      }
    ]
  },
  "projectMetrics": {
    "numberModules": 1,
    "numberSourceFiles": 52,
    "numberTestFiles": 41,
    "numberLibrariesFailingModule": 23
  },
  "repository": {
    "name": "airlift/aircompressor",
    "githubId": 5174103,
    "url": "https://github.com/airlift/aircompressor",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": true,
    "pullRequestId": 91
  },
  "builds": {
    "buggyBuild": {
      "id": 428477278,
      "url": "http://travis-ci.org/airlift/aircompressor/builds/428477278",
      "date": "Sep 14, 2018 7:59:42 AM"
    }
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Sep 14, 2018 7:59:35 AM",
    "reproductionDateEnd": "Sep 14, 2018 8:06:46 AM",
    "totalDuration": 429,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 12,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          12
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 95,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          4,
          91
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 244,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          244
        ]
      }
    },
    "projectRootPomPath": "./workspace/airlift/aircompressor/428477278/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "commits": {
    "buggyBuild": {
      "repoName": "airlift/aircompressor",
      "branchName": "master",
      "sha": "77335c456943e72f4b62d736513f1e6075787c7c",
      "url": "http://github.com/airlift/aircompressor/commit/77335c456943e72f4b62d736513f1e6075787c7c",
      "date": "Sep 14, 2018 7:49:16 AM"
    },
    "buggyBuildForkRepo": {
      "repoName": "luohao/aircompressor",
      "branchName": "use-lzo1x-999",
      "sha": "950b44c913488da303902dcf25889edbb1c37278",
      "url": "https://github.com/luohao/aircompressor/commit/950b44c913488da303902dcf25889edbb1c37278",
      "date": "Sep 14, 2018 7:49:16 AM"
    },
    "buggyBuildBaseRepo": {
      "repoName": "airlift/aircompressor",
      "branchName": "master",
      "sha": "158b727635f359e7c6716bc74a72b271a1353297",
      "url": "https://github.com/airlift/aircompressor/commit/158b727635f359e7c6716bc74a72b271a1353297",
      "date": "Sep 11, 2018 7:48:10 AM"
    }
  },
  "type": "only_fail"
}