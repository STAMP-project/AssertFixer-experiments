{
  "repository": {
    "name": "DmitriiSerikov/money-transfer-service",
    "githubId": 153101102,
    "url": "https://github.com/DmitriiSerikov/money-transfer-service",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": false,
    "pullRequestId": 0
  },
  "builds": {
    "buggyBuild": {
      "id": 441821049,
      "url": "http://travis-ci.org/DmitriiSerikov/money-transfer-service/builds/441821049",
      "date": "Oct 15, 2018 9:06:04 PM"
    }
  },
  "projectMetrics": {
    "numberModules": 1,
    "numberSourceFiles": 30,
    "numberTestFiles": 0,
    "numberLibrariesFailingModule": 45
  },
  "tests": {
    "failingModule": "/root/workspace/DmitriiSerikov/money-transfer-service/441821049",
    "overallMetrics": {
      "numberRunning": 91,
      "numberPassing": 74,
      "numberFailing": 3,
      "numberErroring": 14,
      "numberSkipping": 0,
      "failures": [
        {
          "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
          "isError": true,
          "occurrences": 14
        },
        {
          "failureName": "org.spockframework.runtime.SpockComparisonFailure",
          "isError": false,
          "occurrences": 3
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "com.github.example.controller.AccountControllerSpec",
        "numberRunning": 7,
        "numberPassing": 0,
        "numberFailing": 3,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "com.github.example.controller.TransactionControllerSpec",
        "numberRunning": 10,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 10,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "com.github.example.controller.AccountControllerSpec",
        "testMethod": "should return error with 400 status code when trying to create account with negative balance",
        "failureName": "org.spockframework.runtime.SpockComparisonFailure",
        "detail": "Condition not satisfied:\n\nex.status \u003d\u003d HttpStatus.BAD_REQUEST\n|  |      |\n|  |      false\n|  INTERNAL_SERVER_ERROR\nio.micronaut.http.client.exceptions.HttpClientResponseException: Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n \nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])\n",
        "isError": false
      },
      {
        "testClass": "com.github.example.controller.TransactionControllerSpec",
        "testMethod": "should return error response with 404 status code when transaction with specified id doesn\u0027t exist",
        "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
        "detail": "Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n\nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])",
        "isError": true
      },
      {
        "testClass": "com.github.example.controller.TransactionControllerSpec",
        "testMethod": "should return transaction data with 200 status code when transaction with specified id exist",
        "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
        "detail": "Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n\nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])",
        "isError": true
      },
      {
        "testClass": "com.github.example.controller.AccountControllerSpec",
        "testMethod": "should return account data with 201 status code and location header when create account by valid command",
        "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
        "detail": "Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n\nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])",
        "isError": true
      },
      {
        "testClass": "com.github.example.controller.AccountControllerSpec",
        "testMethod": "should return error with 400 status code when trying to create account with null balance",
        "failureName": "org.spockframework.runtime.SpockComparisonFailure",
        "detail": "Condition not satisfied:\n\nex.status \u003d\u003d HttpStatus.BAD_REQUEST\n|  |      |\n|  |      false\n|  INTERNAL_SERVER_ERROR\nio.micronaut.http.client.exceptions.HttpClientResponseException: Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n \nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])\n",
        "isError": false
      },
      {
        "testClass": "com.github.example.controller.TransactionControllerSpec",
        "testMethod": "should return error with 400 status code when trying to create transaction between same accounts",
        "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
        "detail": "Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n\nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])",
        "isError": true
      },
      {
        "testClass": "com.github.example.controller.AccountControllerSpec",
        "testMethod": "should return collection of accounts data with 200 status code when accounts exists",
        "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
        "detail": "Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n\nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])",
        "isError": true
      },
      {
        "testClass": "com.github.example.controller.AccountControllerSpec",
        "testMethod": "should return empty collection with 200 status code when accounts not exists yet",
        "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
        "detail": "Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n\nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])",
        "isError": true
      },
      {
        "testClass": "com.github.example.controller.AccountControllerSpec",
        "testMethod": "should return error response with 404 status code when account with specified id doesn\u0027t exist",
        "failureName": "org.spockframework.runtime.SpockComparisonFailure",
        "detail": "Condition not satisfied:\n\nex.status \u003d\u003d HttpStatus.NOT_FOUND\n|  |      |\n|  |      false\n|  INTERNAL_SERVER_ERROR\nio.micronaut.http.client.exceptions.HttpClientResponseException: Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n \nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])\n",
        "isError": false
      },
      {
        "testClass": "com.github.example.controller.TransactionControllerSpec",
        "testMethod": "should return error with 400 status code when trying to create transaction with null amount",
        "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
        "detail": "Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n\nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])",
        "isError": true
      },
      {
        "testClass": "com.github.example.controller.TransactionControllerSpec",
        "testMethod": "should return error with 400 status code when trying to create transaction with negative amount",
        "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
        "detail": "Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n\nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])",
        "isError": true
      },
      {
        "testClass": "com.github.example.controller.TransactionControllerSpec",
        "testMethod": "should return collection of transactions data with 200 status code when transactions exists",
        "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
        "detail": "Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n\nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])",
        "isError": true
      },
      {
        "testClass": "com.github.example.controller.AccountControllerSpec",
        "testMethod": "should return account data with 200 status code when account with specified id exist",
        "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
        "detail": "Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n\nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])",
        "isError": true
      },
      {
        "testClass": "com.github.example.controller.TransactionControllerSpec",
        "testMethod": "should return 202 status code and location header when create transaction by valid command",
        "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
        "detail": "Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n\nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])",
        "isError": true
      },
      {
        "testClass": "com.github.example.controller.TransactionControllerSpec",
        "testMethod": "should return error with 400 status code when trying to create transaction for source account that not exists",
        "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
        "detail": "Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n\nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])",
        "isError": true
      },
      {
        "testClass": "com.github.example.controller.TransactionControllerSpec",
        "testMethod": "should return empty collection with 200 status code when transactions not exists yet",
        "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
        "detail": "Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n\nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])",
        "isError": true
      },
      {
        "testClass": "com.github.example.controller.TransactionControllerSpec",
        "testMethod": "should return error with 400 status code when trying to create transaction for target account that not exists",
        "failureName": "io.micronaut.http.client.exceptions.HttpClientResponseException",
        "detail": "Internal Server Error: Failed to inject value for parameter [lockHolder] of class: com.github.example.dao.impl.InMemoryAccountDaoImpl\n\nMessage: No bean of type [com.github.example.holder.LockHolder] exists. Ensure the class is declared a bean and if you are using Java or Kotlin make sure you have enabled annotation processing.\nPath Taken: new AccountController(ModelMapper modelMapper,[AccountService accountService]) --\u003e new AccountServiceImpl([AccountDao accountDao]) --\u003e new InMemoryAccountDaoImpl([LockHolder lockHolder])",
        "isError": true
      }
    ]
  },
  "commits": {
    "buggyBuild": {
      "repoName": "DmitriiSerikov/money-transfer-service",
      "branchName": "master",
      "sha": "45fc1c69243f7292a674aa5b9bf09cef0a201c02",
      "url": "http://github.com/DmitriiSerikov/money-transfer-service/commit/45fc1c69243f7292a674aa5b9bf09cef0a201c02",
      "date": "Oct 15, 2018 9:03:26 PM"
    }
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Oct 15, 2018 9:09:37 PM",
    "reproductionDateEnd": "Oct 15, 2018 9:11:40 PM",
    "totalDuration": 121,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 2,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          2
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 77,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          0,
          77
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 21,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          21
        ]
      }
    },
    "projectRootPomPath": "./workspace/DmitriiSerikov/money-transfer-service/441821049/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "type": "only_fail"
}