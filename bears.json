{
  "repository": {
    "name": "Flipkart/foxtrot",
    "githubId": 19980663,
    "url": "https://github.com/Flipkart/foxtrot",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": true,
    "pullRequestId": 241
  },
  "builds": {
    "buggyBuild": {
      "id": 433435626,
      "url": "http://travis-ci.org/Flipkart/foxtrot/builds/433435626",
      "date": "Sep 26, 2018 1:07:50 PM"
    }
  },
  "projectMetrics": {
    "numberModules": 4,
    "numberSourceFiles": 196,
    "numberTestFiles": 41,
    "numberLibrariesFailingModule": 308
  },
  "tests": {
    "failingModule": "/root/workspace/Flipkart/foxtrot/433435626/foxtrot-core",
    "overallMetrics": {
      "numberRunning": 207,
      "numberPassing": 116,
      "numberFailing": 9,
      "numberErroring": 82,
      "numberSkipping": 4,
      "failures": [
        {
          "failureName": "com.flipkart.foxtrot.core.exception.StoreExecutionException",
          "isError": true,
          "occurrences": 4
        },
        {
          "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
          "isError": true,
          "occurrences": 8
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true,
          "occurrences": 62
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 9
        },
        {
          "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
          "isError": true,
          "occurrences": 8
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.impl.DistributedTableMetadataManagerTest",
        "numberRunning": 5,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.CountActionTest",
        "numberRunning": 5,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 5,
        "numberSkipping": 0
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionEstimationTest",
        "numberRunning": 4,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "numberRunning": 15,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 15,
        "numberSkipping": 0
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.DistinctActionTest",
        "numberRunning": 4,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.TrendActionTest",
        "numberRunning": 13,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 9,
        "numberSkipping": 0
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionCardinalityTest",
        "numberRunning": 2,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.StatsTrendActionTest",
        "numberRunning": 6,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.StatsActionTest",
        "numberRunning": 5,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 3,
        "numberSkipping": 0
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "numberRunning": 32,
        "numberPassing": 1,
        "numberFailing": 9,
        "numberErroring": 22,
        "numberSkipping": 2
      },
      {
        "testClass": "com.flipkart.foxtrot.core.datastore.impl.hbase.HBaseDataStoreTest",
        "numberRunning": 23,
        "numberPassing": 22,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.HistogramActionTest",
        "numberRunning": 7,
        "numberPassing": 1,
        "numberFailing": 0,
        "numberErroring": 6,
        "numberSkipping": 0
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionTest",
        "numberRunning": 8,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 6,
        "numberSkipping": 1
      }
    ],
    "failureDetails": [
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testMissingIndicesQuery",
        "failureName": "java.lang.AssertionError",
        "detail": "4",
        "isError": false
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.TrendActionTest",
        "testMethod": "testTrendActionWithFieldWithFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryAnyFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "saveTableEmptyName",
        "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
        "detail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTable(FoxtrotTableManagerTest.java:104)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.DistinctActionTest",
        "testMethod": "testDistinctDesc",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryNotInFilterMissingField",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.CountActionTest",
        "testMethod": "testCountDistinct",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryNotInFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.HistogramActionTest",
        "testMethod": "testHistogramActionIntervalHourNoFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "saveTableNullName",
        "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
        "detail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateNullTable(FoxtrotTableManagerTest.java:210)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "updateTableEmptyName",
        "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
        "detail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateTableEmptyName(FoxtrotTableManagerTest.java:241)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.StatsTrendActionTest",
        "testMethod": "testStatsTrendActionWithNesting",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionTest",
        "testMethod": "testGroupActionTwoFieldsWithFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.TrendActionTest",
        "testMethod": "testTrendActionWithFieldWithValues",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionEstimationTest",
        "testMethod": "testEstimationCardinalFilterHighCardinality",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "updateTableInvalidTtl",
        "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
        "detail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateTableInvalidTtl(FoxtrotTableManagerTest.java:258)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.HistogramActionTest",
        "testMethod": "testHistogramActionIntervalDayNoFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryAnyFilter",
        "failureName": "java.lang.AssertionError",
        "detail": "2",
        "isError": false
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.CountActionTest",
        "testMethod": "testCountDistinctWithFilterOnSameField",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryGreaterThanFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryLessThanFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryBetweenFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryPagination",
        "failureName": "java.lang.AssertionError",
        "detail": "3",
        "isError": false
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "saveExistingTable",
        "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
        "detail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateTableNullName(FoxtrotTableManagerTest.java:224)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.TrendActionTest",
        "testMethod": "testTrendActionWithFieldZeroTo",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "saveTable",
        "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
        "detail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTable(FoxtrotTableManagerTest.java:104)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.datastore.impl.hbase.HBaseDataStoreTest",
        "testMethod": "testSaveSingleNullDocument",
        "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
        "detail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTableInvalidTtl(FoxtrotTableManagerTest.java:88)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.HistogramActionTest",
        "testMethod": "testHistogramActionIntervalHourWithFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.StatsTrendActionTest",
        "testMethod": "testStatsTrendActionWithoutNesting",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryContainsFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryNotInFilter",
        "failureName": "java.lang.AssertionError",
        "detail": "2",
        "isError": false
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.CountActionTest",
        "testMethod": "testCountDistinctWithFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryNoFilterDescending",
        "failureName": "java.lang.AssertionError",
        "detail": "1",
        "isError": false
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.StatsActionTest",
        "testMethod": "testStatsActionWithMultiLevelNesting",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.HistogramActionTest",
        "testMethod": "testHistogramActionIntervalMinuteWithFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.TrendActionTest",
        "testMethod": "testTrendActionWithFieldZeroFrom",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryMultipleFiltersEmptyResult",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "updateNonExistingTable",
        "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
        "detail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTableDataStoreNoTableFound(FoxtrotTableManagerTest.java:165)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryGreaterThanFilter",
        "failureName": "java.lang.AssertionError",
        "detail": "1",
        "isError": false
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.TrendActionTest",
        "testMethod": "testTrendActionFieldAll",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryMultipleFiltersAndCombiner",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryNoFilterWithLimit",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.HistogramActionTest",
        "testMethod": "testHistogramActionIntervalDayWithFilter",
        "failureName": "com.flipkart.foxtrot.core.exception.StoreExecutionException",
        "detail": "java.util.concurrent.TimeoutException: Timeout waiting for task.",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionTest",
        "testMethod": "testGroupActionSingleFieldHavingSpecialCharactersWithFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryCaching",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryEmptyResult",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "saveTableQueryStoreFailed",
        "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
        "detail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTableQueryStoreFailed(FoxtrotTableManagerTest.java:132)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionEstimationTest",
        "testMethod": "testEstimationTemporalFilterHighCardinality",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "saveTableInvalidTtl",
        "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
        "detail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTableInvalidTtl(FoxtrotTableManagerTest.java:88)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionTest",
        "testMethod": "testGroupActionSingleFieldNoFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionEstimationTest",
        "testMethod": "testEstimationNoFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "updateTableNullName",
        "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
        "detail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateTableNullName(FoxtrotTableManagerTest.java:224)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryNullFilters",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.StatsActionTest",
        "testMethod": "testStatsActionWithoutNesting",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryCaching",
        "failureName": "java.lang.AssertionError",
        "detail": "1",
        "isError": false
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "saveTableDataStoreFailed",
        "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
        "detail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTableQueryStoreFailed(FoxtrotTableManagerTest.java:132)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryContainsFilter",
        "failureName": "java.lang.AssertionError",
        "detail": "4",
        "isError": false
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.DistinctActionTest",
        "testMethod": "testDistinctMultipleNestingAscAsc",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "updateNullTable",
        "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
        "detail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateNullTable(FoxtrotTableManagerTest.java:210)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.impl.DistributedTableMetadataManagerTest",
        "testMethod": "testGetFieldMappings",
        "failureName": "com.flipkart.foxtrot.core.exception.StoreExecutionException",
        "detail": "java.util.concurrent.TimeoutException: Timeout waiting for task.",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryNotEqualsFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionCardinalityTest",
        "testMethod": "testEstimationWithMultipleNesting",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.CountActionTest",
        "testMethod": "testCount",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.StatsTrendActionTest",
        "testMethod": "testStatsTrendActionWithNoFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "updateTable",
        "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
        "detail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateTableInvalidTtl(FoxtrotTableManagerTest.java:258)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryEqualsFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.TrendActionTest",
        "testMethod": "testTrendActionWithFieldWithFilterWithInterval",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionEstimationTest",
        "testMethod": "testEstimationLTFilterHighCardinality",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryPagination",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryGreaterEqualFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryEqualsFilter",
        "failureName": "java.lang.AssertionError",
        "detail": "1",
        "isError": false
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionTest",
        "testMethod": "testGroupActionSingleFieldWithFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "saveTableDataStoreNoTableFound",
        "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
        "detail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTableDataStoreNoTableFound(FoxtrotTableManagerTest.java:165)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryTotalHitsWithLimit",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryNoFilterAscending",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.TrendActionTest",
        "testMethod": "testTrendActionWithField",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryNoFilterDescending",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testQueryLessEqualFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
        "testMethod": "testMissingIndicesQuery",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionTest",
        "testMethod": "testGroupActionTwoFieldsNoFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.StatsActionTest",
        "testMethod": "testStatsActionWithNesting",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionTest",
        "testMethod": "testGroupActionMultipleFieldsWithFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.HistogramActionTest",
        "testMethod": "testHistogramActionIntervalMinuteNoFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.CountActionTest",
        "testMethod": "testCountWithFilter",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.StatsTrendActionTest",
        "testMethod": "testStatsTrendActionWithMultiLevelNesting",
        "failureName": "com.flipkart.foxtrot.core.exception.StoreExecutionException",
        "detail": "java.util.concurrent.TimeoutException: Timeout waiting for task.",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
        "testMethod": "saveNullTable",
        "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
        "detail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateTableEmptyName(FoxtrotTableManagerTest.java:241)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.TrendActionTest",
        "testMethod": "testTrendActionFieldWithSpecialCharacters",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.GroupActionCardinalityTest",
        "testMethod": "testEstimationBooleanCardinality",
        "failureName": "com.flipkart.foxtrot.core.exception.StoreExecutionException",
        "detail": "java.util.concurrent.TimeoutException: Timeout waiting for task.",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.TrendActionTest",
        "testMethod": "testTrendActionWithFieldWithFilterWithValues",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.DistinctActionTest",
        "testMethod": "testDistinctMultipleNestingAscDesc",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      },
      {
        "testClass": "com.flipkart.foxtrot.core.querystore.actions.DistinctActionTest",
        "testMethod": "testDistinctAsc",
        "failureName": "java.lang.NullPointerException",
        "isError": true
      }
    ]
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Sep 26, 2018 1:12:40 PM",
    "reproductionDateEnd": "Sep 26, 2018 1:37:42 PM",
    "totalDuration": 1497,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 6,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          6
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 485,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          4,
          481
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 981,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          981
        ]
      }
    },
    "projectRootPomPath": "./workspace/Flipkart/foxtrot/433435626/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "commits": {
    "buggyBuild": {
      "repoName": "Flipkart/foxtrot",
      "branchName": "0.5.x",
      "sha": "cda45cf8a10ed59a63d7e683b6d5df76fc8a96cf",
      "url": "http://github.com/Flipkart/foxtrot/commit/cda45cf8a10ed59a63d7e683b6d5df76fc8a96cf",
      "date": "Sep 26, 2018 1:03:33 PM"
    },
    "buggyBuildForkRepo": {
      "repoName": "nitishgoyal13/foxtrot",
      "branchName": "master",
      "sha": "27d18045a35ed339a51b213b13520cdb11600d59",
      "url": "https://github.com/nitishgoyal13/foxtrot/commit/27d18045a35ed339a51b213b13520cdb11600d59",
      "date": "Sep 26, 2018 1:03:33 PM"
    },
    "buggyBuildBaseRepo": {
      "repoName": "Flipkart/foxtrot",
      "branchName": "0.5.x",
      "sha": "5e47d86701c627380d80b26eb710c8f6e50097b4",
      "url": "https://github.com/Flipkart/foxtrot/commit/5e47d86701c627380d80b26eb710c8f6e50097b4",
      "date": "Sep 19, 2018 6:17:25 AM"
    }
  },
  "type": "only_fail"
}