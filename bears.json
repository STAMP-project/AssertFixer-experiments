{
  "commits": {
    "buggyBuild": {
      "repoName": "gregorydgraham/DBvolution7",
      "branchName": "master",
      "sha": "6c015718cb5d9f0b2633fc1b92624456750294ec",
      "url": "http://github.com/gregorydgraham/DBvolution7/commit/6c015718cb5d9f0b2633fc1b92624456750294ec",
      "date": "Sep 17, 2018 1:36:29 AM"
    }
  },
  "projectMetrics": {
    "numberModules": 1,
    "numberSourceFiles": 390,
    "numberTestFiles": 120,
    "numberLibrariesFailingModule": 42
  },
  "tests": {
    "failingModule": "/root/workspace/gregorydgraham/DBvolution7/429361851",
    "overallMetrics": {
      "numberRunning": 1028,
      "numberPassing": 856,
      "numberFailing": 1,
      "numberErroring": 171,
      "numberSkipping": 0,
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 1
        },
        {
          "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
          "isError": true,
          "occurrences": 171
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.BooleanArrayExpressionTest",
        "numberRunning": 10,
        "numberPassing": 6,
        "numberFailing": 0,
        "numberErroring": 4,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBBooleanArrayTest",
        "numberRunning": 12,
        "numberPassing": 11,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBNumberTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.StringExpressionTest",
        "numberRunning": 39,
        "numberPassing": 37,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBDateOnlyTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBBooleanTest",
        "numberRunning": 2,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.actions.DBInsertTest",
        "numberRunning": 4,
        "numberPassing": 2,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.actions.DBActionListCreationTest",
        "numberRunning": 10,
        "numberPassing": 9,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "numberRunning": 30,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 30,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBLargeBinaryTest",
        "numberRunning": 7,
        "numberPassing": 6,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBLargeTextTest",
        "numberRunning": 5,
        "numberPassing": 4,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "numberRunning": 26,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 26,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBJavaObjectTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "numberRunning": 26,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 26,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.reflection.DataModelTest",
        "numberRunning": 17,
        "numberPassing": 16,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "numberRunning": 34,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 34,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Polygon2DExpressionTest",
        "numberRunning": 10,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 10,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBDateRepeatTest",
        "numberRunning": 15,
        "numberPassing": 14,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "numberRunning": 16,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 16,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.OuterJoinTest",
        "numberRunning": 10,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 10,
        "numberSkipping": 0
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBPasswordHashTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "nz.co.gregs.dbvolution.OuterJoinTest",
        "testMethod": "testSimpleCriteriaInOnClause[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "ascendSimpleTreeWithoutTableName[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testBoundingBox[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testValueWithPoints[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIsPurelyFunctional[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "getTreesFromRoot[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBPasswordHashTest",
        "testMethod": "testDBPasswordHash[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testGetIncludesNull[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.OuterJoinTest",
        "testMethod": "testANSIFullOuterQueryCreation[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "checkForeignKeyInvolvesQueryTablesException[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testIntersectsUsingCoordsArray[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.OuterJoinTest",
        "testMethod": "testSimpleLeftOuterJoin[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.actions.DBActionListCreationTest",
        "testMethod": "insertAndRevertWithAutoIncrementTest[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testGetMinY[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testGetY[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Polygon2DExpressionTest",
        "testMethod": "testIntersection[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testHasMagnitude[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testIs_Line2DResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testIntersectionWithCoordArray[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Polygon2DExpressionTest",
        "testMethod": "testUnitSquare[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "descendTreeFrom2TableQueryToPathsList[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testIsNot_MultiPoint2DResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testGetMaxY[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testValueWithLineSegment2DResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testIntersectionWith[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testDimension[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testSpatialDimensions[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testIsNot_MultiPoint2D[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testGetMinX[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testIntersectionWithMultiPoint2DExpression[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testCopy[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testMaxY[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBJavaObjectTest",
        "testMethod": "testTableCreation[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "descendSimpleTree[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIsAggregator[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testPointAtIndex_long[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testIsPurelyFunctional[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testMaxX[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testHasMagnitude[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testGetTablesInvolved[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.OuterJoinTest",
        "testMethod": "demonstrateAccessingEachRowWithOptionalTables[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testNumberOfPoints[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Polygon2DExpressionTest",
        "testMethod": "testIsNull[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIntersectsUsingPoints[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testIsAggregator[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.OuterJoinTest",
        "testMethod": "testOuterJoinQueryCreatesEmptyRows[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testDimension[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "ascendTreeFrom2TableQueryToPathsList[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testIs_MultiPoint[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testGetMinX[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testIsPurelyFunctional[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Polygon2DExpressionTest",
        "testMethod": "testOverlaps[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.StringExpressionTest",
        "testMethod": "testFindFirstInteger[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.OuterJoinTest",
        "testMethod": "testExpressionsInLeftOuterOnClause[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testMagnitude[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testCopy[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testMagnitude[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Polygon2DExpressionTest",
        "testMethod": "testDimensions[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.BooleanArrayExpressionTest",
        "testMethod": "testIsNotExpression[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.actions.DBInsertTest",
        "testMethod": "testSaveWithoutValues[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBBooleanTest",
        "testMethod": "testPermittedAndExcludedValues[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBBooleanTest",
        "testMethod": "testGetValue[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBNumberTest",
        "testMethod": "testGetSQLDatatype[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Polygon2DExpressionTest",
        "testMethod": "testContains[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testPointAtIndex_int[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "ascendSimpleTree[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testHasMagnitude[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Polygon2DExpressionTest",
        "testMethod": "testTouches[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Polygon2DExpressionTest",
        "testMethod": "testIntersects[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testGetIncludesNull[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testValue[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testMagnitude[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.BooleanArrayExpressionTest",
        "testMethod": "testIsExpressionWithNull[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testValueWithLine2DResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testGetQueryableDatatypeForExpressionValue[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBDateRepeatTest",
        "testMethod": "basicTest[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testCopy[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testGetIncludesNull[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.OuterJoinTest",
        "testMethod": "testOuterJoinQueryAvoidsBadOrder[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testBoundingBox[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testGetMinY[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.OuterJoinTest",
        "testMethod": "testFullOuterJoinWithSimpleCriteria[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testGetMinX[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testIsPurelyFunctional[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testMagnitude[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testGetMaxX[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.StringExpressionTest",
        "testMethod": "testFindFirstNumber[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testSpatialDimension[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "descendSimpleTreeWithoutTableName[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testSpatialDimensions[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testStringResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testGetMaxX[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIntersectionWithPoint[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testValueWithMultiPoint2DResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testValue[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testDimension[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.OuterJoinTest",
        "testMethod": "testANSIQueryCreation[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testStringResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testIsNot_Point2D[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testGetIncludesNull[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testGetQueryableDatatypeForExpressionValue[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "getPathsToRoot[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIsNot_LineSegment2DResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Polygon2DExpressionTest",
        "testMethod": "testHasMagnitude[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testSpatialDimension[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testValueUsingPoint2DResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testStringResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testIsAggregator[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "getPathToRoot[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testToWKTValue[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIs_LineSegment2DResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.BooleanArrayExpressionTest",
        "testMethod": "testIsExpressionWithBooleanArrayResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "getTreeFromRoot[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testHasMagnitude[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testMinY[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.OuterJoinTest",
        "testMethod": "testANSIInnerJoinQueryCreation[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testDistance[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testIntersectionWithPointArray[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testLine2DResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "descendTreeFrom2TableQuery[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testGetMinY[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBLargeTextTest",
        "testMethod": "retrieveStringWithBinaryObjectAndAutoIncrement[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBDateOnlyTest",
        "testMethod": "testGetSQLDatatype[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testGetQueryableDatatypeForExpressionValue[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIntersectsUsingCoordinates[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testMinX[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "ascendTreeFrom2TableQuery[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testIntersectionWithLineString[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testValueWithDoubles[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testDimension[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testIntersectsUsingLineString[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testBoundingBox[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIntersects[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testGetTablesInvolved[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testGetMaxY[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testIntersectsUsingPointArray[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testStringResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testGetMaxX[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testGetQueryableDatatypeForExpressionValue[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testValueUsingLongs[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testValue[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testGetTablesInvolved[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Polygon2DExpressionTest",
        "testMethod": "testIs[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.BooleanArrayExpressionTest",
        "testMethod": "testIsExpression[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testBoundingBox[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testGetTablesInvolved[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBBooleanArrayTest",
        "testMethod": "testGetFromResultSet[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testIs_Point2DResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIntersectionWithCoordinates[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIntersectionWithLineSegment[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIs_Line[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "checkColumnIsNotAForeignKeyException[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.reflection.DataModelTest",
        "testMethod": "testGetDBDatabaseCreationMethodsStaticWithoutParameters[H2BlankDB]",
        "failureName": "java.lang.AssertionError",
        "detail": "Unable to invoke nz.co.gregs.dbvolution.generic.AbstractTest.SQLiteTestDB.getFromSettings()",
        "isError": false
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIntersectionWithDoubles[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testIsAggregator[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIntersectionWith[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testValue[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testIs_Line[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.datatypes.DBLargeBinaryTest",
        "testMethod": "retrieveStringWithBinaryObjectAndAutoIncrement[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIsNot_Line[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testIs_Point[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.actions.DBInsertTest",
        "testMethod": "testSaveWithDefaultValues[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testIntersectionPoints[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testIntersectsUsingLineSegment[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testIs_MultiPoint2DResult[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testGetMaxY[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Line2DExpressionTest",
        "testMethod": "testIntersects[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.Point2DExpressionTest",
        "testMethod": "testGetX[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.MultiPoint2DExpressionTest",
        "testMethod": "testValueWithPointArray[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.expressions.spatial2D.LineSegment2DExpressionTest",
        "testMethod": "testToWKTValue[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "checkEverythingWorksForStringIDs[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      },
      {
        "testClass": "nz.co.gregs.dbvolution.DBRecursiveQueryTest",
        "testMethod": "checkForeignKeyIsRecursiveException[H2BlankDB]",
        "failureName": "nz.co.gregs.dbvolution.exceptions.DBRuntimeException",
        "detail": "Synchronisation Failed:nz.co.gregs.dbvolution.datatypes.DBInteger.setValueFromDatabase(java.lang.Long)",
        "isError": true
      }
    ]
  },
  "repository": {
    "name": "gregorydgraham/DBvolution7",
    "githubId": 56992132,
    "url": "https://github.com/gregorydgraham/DBvolution7",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": false,
    "pullRequestId": 0
  },
  "builds": {
    "buggyBuild": {
      "id": 429361851,
      "url": "http://travis-ci.org/gregorydgraham/DBvolution7/builds/429361851",
      "date": "Sep 17, 2018 1:50:19 AM"
    }
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Sep 17, 2018 1:50:07 AM",
    "reproductionDateEnd": "Sep 17, 2018 2:23:38 AM",
    "totalDuration": 2008,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 8,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          8
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 144,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          0,
          144
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 45,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          45
        ]
      }
    },
    "projectRootPomPath": "./workspace/gregorydgraham/DBvolution7/429361851/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "type": "only_fail"
}