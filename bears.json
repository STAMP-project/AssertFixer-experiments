{
  "repository": {
    "name": "apache/calcite",
    "githubId": 21193524,
    "url": "https://github.com/apache/calcite",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": true,
    "pullRequestId": 880
  },
  "builds": {
    "buggyBuild": {
      "id": 440202710,
      "url": "http://travis-ci.org/apache/calcite/builds/440202710",
      "date": "Oct 11, 2018 5:46:16 PM"
    }
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Oct 11, 2018 5:47:22 PM",
    "reproductionDateEnd": "Oct 11, 2018 5:58:44 PM",
    "totalDuration": 678,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 20,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          20
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 189,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          5,
          184
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 381,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          381
        ]
      }
    },
    "projectRootPomPath": "./workspace/apache/calcite/440202710/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "projectMetrics": {
    "numberModules": 19,
    "numberSourceFiles": 1513,
    "numberTestFiles": 231,
    "numberLibrariesFailingModule": 55
  },
  "commits": {
    "buggyBuild": {
      "repoName": "apache/calcite",
      "branchName": "master",
      "sha": "21fde714ebbe4428d4c12634152e2c33bdca330a",
      "url": "http://github.com/apache/calcite/commit/21fde714ebbe4428d4c12634152e2c33bdca330a",
      "date": "Oct 11, 2018 5:26:36 PM"
    },
    "buggyBuildForkRepo": {
      "repoName": "kgyrtkirk/calcite",
      "branchName": "2615-notand",
      "sha": "1a63d7778bb8cc83fbfb957547c5e31fee89cd9d",
      "url": "https://github.com/kgyrtkirk/calcite/commit/1a63d7778bb8cc83fbfb957547c5e31fee89cd9d",
      "date": "Oct 11, 2018 5:26:36 PM"
    },
    "buggyBuildBaseRepo": {
      "repoName": "apache/calcite",
      "branchName": "master",
      "sha": "dfd012cf082adf50688c2cc57c7e857f6d702f72",
      "url": "https://github.com/apache/calcite/commit/dfd012cf082adf50688c2cc57c7e857f6d702f72",
      "date": "Oct 9, 2018 7:49:56 PM"
    }
  },
  "tests": {
    "failingModule": "/root/workspace/apache/calcite/440202710/core",
    "overallMetrics": {
      "numberRunning": 4738,
      "numberPassing": 4733,
      "numberFailing": 5,
      "numberErroring": 0,
      "numberSkipping": 117,
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 4
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "isError": false,
          "occurrences": 1
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "org.apache.calcite.test.RelOptRulesTest",
        "numberRunning": 297,
        "numberPassing": 296,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 8
      },
      {
        "testClass": "org.apache.calcite.test.RexProgramTest",
        "numberRunning": 59,
        "numberPassing": 55,
        "numberFailing": 4,
        "numberErroring": 0,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "org.apache.calcite.test.RexProgramTest",
        "testMethod": "testSimplifyOrNot",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: \"IS NOT NULL(?0.int1)\"\n     but: was \"OR(\u003d(?0.int1, ?0.int1), \u003c(?0.int2, ?0.int2))\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.RexProgramTest",
        "testMethod": "testSimplifyUnknown",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: \"true\"\n     but: was \"OR(\u003d(?0.a, 1), null)\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.RelOptRulesTest",
        "testMethod": "testJoinPushTransitivePredicatesRule2",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "planAfter expected:\u003c...ilter(condition\u003d[OR([IS NOT NULL($5), \u003d($5, 4))])\n      LogicalProject(EMPNO\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], SLACKER\u003d[$8])\n        LogicalFilter(condition\u003d[AND(\u003d($7, 20), \u003e($5, 1000))])\n          LogicalTableScan(table\u003d[[CATALOG, SALES, EMPNULLABLES]])\n    LogicalFilter(condition\u003d[AND(OR(IS NOT NULL($0), \u003d($0, 4)), OR(\u003d($0, $1), \u003d($0, 4)), OR(IS NOT NULL(]$1), \u003d($1, 4)))])\n  ...\u003e but was:\u003c...ilter(condition\u003d[OR([\u003d($5, $5), \u003d($5, 4))])\n      LogicalProject(EMPNO\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], SLACKER\u003d[$8])\n        LogicalFilter(condition\u003d[AND(\u003d($7, 20), \u003e($5, 1000))])\n          LogicalTableScan(table\u003d[[CATALOG, SALES, EMPNULLABLES]])\n    LogicalFilter(condition\u003d[AND(OR(\u003d($0, $0), \u003d($0, 4)), OR(\u003d($0, $1), \u003d($0, 4)), OR(\u003d($1, ]$1), \u003d($1, 4)))])\n  ...\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.RexProgramTest",
        "testMethod": "testSimplifyAndPush",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: \"\u003d(?0.a, 1)\"\n     but: was \"OR(\u003d(?0.a, 1), AND(\u003d(?0.a, 10), \u003d(?0.a, 1)))\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.RexProgramTest",
        "testMethod": "testSimplifyOrTerms",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: \"true\"\n     but: was \"OR(null, \u003c\u003e(0, ?0.int0))\"",
        "isError": false
      }
    ]
  },
  "type": "only_fail"
}