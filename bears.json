{
  "tests": {
    "failingModule": "/root/workspace/risdenk/calcite/423386498/core",
    "overallMetrics": {
      "numberRunning": 4675,
      "numberPassing": 4526,
      "numberFailing": 140,
      "numberErroring": 9,
      "numberSkipping": 110,
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "isError": true,
          "occurrences": 9
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 126
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "isError": false,
          "occurrences": 14
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "org.apache.calcite.test.SqlValidatorTest",
        "numberRunning": 385,
        "numberPassing": 380,
        "numberFailing": 0,
        "numberErroring": 5,
        "numberSkipping": 5
      },
      {
        "testClass": "org.apache.calcite.test.CalciteSqlOperatorTest",
        "numberRunning": 226,
        "numberPassing": 225,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 1
      },
      {
        "testClass": "org.apache.calcite.tools.PlannerTest",
        "numberRunning": 38,
        "numberPassing": 37,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 1
      },
      {
        "testClass": "org.apache.calcite.test.CoreQuidemTest",
        "numberRunning": 16,
        "numberPassing": 15,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "org.apache.calcite.test.JdbcTest",
        "numberRunning": 267,
        "numberPassing": 264,
        "numberFailing": 3,
        "numberErroring": 0,
        "numberSkipping": 18
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlOperatorTest",
        "numberRunning": 226,
        "numberPassing": 225,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 1
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "numberRunning": 18,
        "numberPassing": 4,
        "numberFailing": 14,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "numberRunning": 313,
        "numberPassing": 253,
        "numberFailing": 60,
        "numberErroring": 0,
        "numberSkipping": 6
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "numberRunning": 311,
        "numberPassing": 251,
        "numberFailing": 60,
        "numberErroring": 0,
        "numberSkipping": 4
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlUnParserTest",
        "numberRunning": 309,
        "numberPassing": 308,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 6
      },
      {
        "testClass": "org.apache.calcite.test.SqlValidatorMatchTest",
        "numberRunning": 16,
        "numberPassing": 14,
        "numberFailing": 0,
        "numberErroring": 2,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "testMethod": "testFrom",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003cCATALOG(CATALOG)\n[KEYWORD(()\nKEYWORD(LATERAL)\nKEYWORD(TABLE)\nKEYWORD(UNNEST)\n]SCHEMA(CATALOG.CUSTO...\u003e but was:\u003cCATALOG(CATALOG)\n[]SCHEMA(CATALOG.CUSTO...\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testSqlOptions",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [alter system set aString \u003d \u0027abc\u0027 || \u0027def\u0027 ];\n expected pattern [(?s)Encountered \"\\|\\|\" at line 1, column 34\\..*];\n actual [Encountered \" \"||\" \"|| \"\" at line 1, column 34.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"\\\\||\\\\||\\\" \\\"\\\\||\\\\|| \\\"\\\" at line 1, column 34\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 34 thru line 1 col 35]; sql [alter system set aString \u003d \u0027abc\u0027 ^||^ \u0027def\u0027 ]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testExceptionCleanup",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select 0.5e1.1 from sales.emps];\n expected pattern [(?s).*Encountered \".1\" at line 1, column 13.\nWas expecting one of:\n    \u003cEOF\u003e \n    \"ORDER\" ...\n    \"LIMIT\" ...\n.*];\n actual [Encountered \" \u003cDECIMAL_NUMERIC_LITERAL\u003e \".1 \"\" at line 1, column 13.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \u003cDECIMAL_NUMERIC_LITERAL\u003e \\\"\\\\.1 \\\"\\\" at line 1, column 13\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 13 thru line 1 col 14]; sql [select 0.5e1^.1^ from sales.emps]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testLimitStartCount",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select a from foo limit 2, all];\n expected pattern [(?s).*Encountered \"all\" at line 1.*];\n actual [Encountered \"\" at line 1, column 28.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 28\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 28 thru line 1 col 30]; sql [select a from foo limit 2, ^all^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testInListEmptyFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from emp where deptno in () and gender \u003d \u0027F\u0027];\n expected pattern [(?s).*Encountered \"\\)\" at line 1, column 36\\..*];\n actual [Encountered \"\" at line 1, column 36.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 36\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 36 thru line 1 col 36]; sql [select * from emp where deptno in (^)^ and gender \u003d \u0027F\u0027]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testAsAliases",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select x from (values (1, 2), (3, 4)) as t1 ()];\n expected pattern [(?s).*Encountered \"\\( \\)\" at .*];\n actual [Encountered \" \"(\" \"( \"\" at line 1, column 45.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"\\\\(\\\" \\\"\\\\( \\\"\\\" at line 1, column 45\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 45 thru line 1 col 45]; sql [select x from (values (1, 2), (3, 4)) as t1 ^(^)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testOrderUnion",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select a from t order by a\nunion all\nselect b from t order by b];\n expected pattern [(?s).*Encountered \"union\" at .*];\n actual [Encountered \" \"UNION\" \"union \"\" at line 2, column 1.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"UNION\\\" \\\"union \\\"\\\" at line 2, column 1\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [2 col 1 thru line 2 col 5]; sql [select a from t order by a\n^union^ all\nselect b from t order by b]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testIntervalOperators",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [interval \u0027wael was here\u0027];\n expected pattern [(?s)Encountered \"\u003cEOF\u003e\".*];\n actual [Encountered \"\" at line 1, column 24.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 24\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 24 thru line 1 col 24]; sql [interval \u0027wael was here^\u0027^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testSelectWithoutFromHavingFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select 2+2 as x having 1 \u003e 2];\n expected pattern [(?s).*Encountered \"having\" at line .*];\n actual [Encountered \" \"HAVING\" \"having \"\" at line 1, column 17.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"HAVING\\\" \\\"having \\\"\\\" at line 1, column 17\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 17 thru line 1 col 22]; sql [select 2+2 as x ^having^ 1 \u003e 2]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testWithNestedFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [with emp2 as (select * from emp)\nwith dept2 as (select * from dept)\nselect 1 as uno from emp, dept];\n expected pattern [(?s)Encountered \"with\" at .*];\n actual [Encountered \"\" at line 2, column 1.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 2, column 1\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [2 col 1 thru line 2 col 4]; sql [with emp2 as (select * from emp)\n^with^ dept2 as (select * from dept)\nselect 1 as uno from emp, dept]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testLikeAndSimilar",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from t where escape \u0027e\u0027];\n expected pattern [(?s).*Encountered \"where escape\" at .*];\n actual [Encountered \" \"WHERE\" \"where \"\" at line 1, column 17.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"WHERE\\\" \\\"where \\\"\\\" at line 1, column 17\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 17 thru line 1 col 21]; sql [select * from t ^where^ escape \u0027e\u0027]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testSelectList4",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select from emp];\n expected pattern [(?s).*Encountered \"from\" at line .*];\n actual [Encountered \"\" at line 1, column 8.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 8\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 8 thru line 1 col 11]; sql [select ^from^ emp]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testDescribeStatement",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [describe explain plan for select * from emps];\n expected pattern [(?s).*Encountered \"describe explain\" at .*];\n actual [Encountered \"\" at line 1, column 1.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 1\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 1 thru line 1 col 8]; sql [^describe^ explain plan for select * from emps]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testBitStringNotImplemented",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select B\u00271011\u0027 || \u0027foobar\u0027 from (values (true))];\n expected pattern [(?s).*Encountered \"\\\\\u00271011\\\\\u0027\" at line 1, column 9.*];\n actual [Encountered \" \u003cQUOTED_STRING\u003e \"\\\u00271011\\\u0027 \"\" at line 1, column 9.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \u003cQUOTED_STRING\u003e \\\"\\\\\u00271011\\\\\u0027 \\\"\\\" at line 1, column 9\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 9 thru line 1 col 14]; sql [select B^\u00271011\u0027^ || \u0027foobar\u0027 from (values (true))]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testJdbcFunctionCall",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [{fn convert(1, sql_interval_year_to_day)}];\n expected pattern [(?s)Encountered \"sql_interval_year_to_day\" at line 1, column 16\\.\n.*];\n actual [Encountered \"\" at line 1, column 16.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 16\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 16 thru line 1 col 39]; sql [{fn convert(1, ^sql_interval_year_to_day^)}]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "testMethod": "testSubQuery",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003cCOLUMN(X)\nCOLUMN(Y)\n[KEYWORD(()\nKEYWORD(*)\nKEYWORD(+)\nKEYWORD(-)\nKEYWORD(?)\nKEYWORD(ABS)\nKEYWORD(ALL)\nKEYWORD(ARRAY)\nKEYWORD(AVG)\nKEYWORD(CARDINALITY)\nKEYWORD(CASE)\nKEYWORD(CAST)\nKEYWORD(CEIL)\nKEYWORD(CEILING)\nKEYWORD(CHARACTER_LENGTH)\nKEYWORD(CHAR_LENGTH)\nKEYWORD(CLASSIFIER)\nKEYWORD(COALESCE)\nKEYWORD(COLLECT)\nKEYWORD(CONVERT)\nKEYWORD(COUNT)\nKEYWORD(COVAR_POP)\nKEYWORD(COVAR_SAMP)\nKEYWORD(CUME_DIST)\nKEYWORD(CURRENT)\nKEYWORD(CURRENT_CATALOG)\nKEYWORD(CURRENT_DATE)\nKEYWORD(CURRENT_DEFAULT_TRANSFORM_GROUP)\nKEYWORD(CURRENT_PATH)\nKEYWORD(CURRENT_ROLE)\nKEYWORD(CURRENT_SCHEMA)\nKEYWORD(CURRENT_TIME)\nKEYWORD(CURRENT_TIMESTAMP)\nKEYWORD(CURRENT_USER)\nKEYWORD(CURSOR)\nKEYWORD(DATE)\nKEYWORD(DENSE_RANK)\nKEYWORD(DISTINCT)\nKEYWORD(ELEMENT)\nKEYWORD(EXCEPT)\nKEYWORD(EXISTS)\nKEYWORD(EXP)\nKEYWORD(EXTRACT)\nKEYWORD(FALSE)\nKEYWORD(FETCH)\nKEYWORD(FIRST_VALUE)\nKEYWORD(FLOOR)\nKEYWORD(FUSION)\nKEYWORD(GROUPING)\nKEYWORD(HOUR)\nKEYWORD(INTERSECT)\nKEYWORD(INTERVAL)\nKEYWORD(LAG)\nKEYWORD(LAST_VALUE)\nKEYWORD(LEAD)\nKEYWORD(LIMIT)\nKEYWORD(LN)\nKEYWORD(LOCALTIME)\nKEYWORD(LOCALTIMESTAMP)\nKEYWORD(LOWER)\nKEYWORD(MATCH_NUMBER)\nKEYWORD(MAX)\nKEYWORD(MIN)\nKEYWORD(MINUS)\nKEYWORD(MINUTE)\nKEYWORD(MOD)\nKEYWORD(MONTH)\nKEYWORD(MULTISET)\nKEYWORD(NEW)\nKEYWORD(NEXT)\nKEYWORD(NOT)\nKEYWORD(NTH_VALUE)\nKEYWORD(NTILE)\nKEYWORD(NULL)\nKEYWORD(NULLIF)\nKEYWORD(OCTET_LENGTH)\nKEYWORD(OFFSET)\nKEYWORD(ORDER)\nKEYWORD(OVERLAY)\nKEYWORD(PERCENT_RANK)\nKEYWORD(PERIOD)\nKEYWORD(POSITION)\nKEYWORD(POWER)\nKEYWORD(PREV)\nKEYWORD(RANK)\nKEYWORD(REGR_COUNT)\nKEYWORD(REGR_SXX)\nKEYWORD(REGR_SYY)\nKEYWORD(ROW)\nKEYWORD(ROW_NUMBER)\nKEYWORD(RUNNING)\nKEYWORD(SECOND)\nKEYWORD(SESSION_USER)\nKEYWORD(SPECIFIC)\nKEYWORD(SQRT)\nKEYWORD(STDDEV_POP)\nKEYWORD(STDDEV_SAMP)\nKEYWORD(STREAM)\nKEYWORD(SUBSTRING)\nKEYWORD(SUM)\nKEYWORD(SYSTEM_USER)\nKEYWORD(TIME)\nKEYWORD(TIMESTAMP)\nKEYWORD(TRANSLATE)\nKEYWORD(TRIM)\nKEYWORD(TRUE)\nKEYWORD(TRUNCATE)\nKEYWORD(UNION)\nKEYWORD(UNKNOWN)\nKEYWORD(UPPER)\nKEYWORD(USER)\nKEYWORD(VAR_POP)\nKEYWORD(VAR_SAMP)\nKEYWORD(YEAR)\n]TABLE(T)\n\u003e but was:\u003cCOLUMN(X)\nCOLUMN(Y)\n[]TABLE(T)\n\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testWithFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [with femaleEmps as select * from emps where gender \u003d \u0027F\u0027\nselect deptno from femaleEmps];\n expected pattern [(?s)Encountered \"select\" at .*];\n actual [Encountered \" \"SELECT\" \"select \"\" at line 1, column 20.\nWas expecting:\n    \"(\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"SELECT\\\" \\\"select \\\"\\\" at line 1, column 20\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\(\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 20 thru line 1 col 25]; sql [with femaleEmps as ^select^ * from emps where gender \u003d \u0027F\u0027\nselect deptno from femaleEmps]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testSome",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from emp\nwhere name like (select some name from emp)];\n expected pattern [(?s).*Encountered \"some\" at .*];\n actual [Encountered \"\" at line 2, column 25.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 2, column 25\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [2 col 25 thru line 2 col 28]; sql [select * from emp\nwhere name like (select ^some^ name from emp)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testGroupByCube2",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select deptno from emp\ngroup by cube ()];\n expected pattern [(?s)Encountered \"\\)\" at .*];\n actual [Encountered \"\" at line 2, column 16.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 2, column 16\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [2 col 16 thru line 2 col 16]; sql [select deptno from emp\ngroup by cube (^)^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testFullInnerJoinFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from a full inner join b];\n expected pattern [(?s).*Encountered \"full inner\" at line 1, column 17.*];\n actual [Encountered \" \"FULL\" \"full \"\" at line 1, column 17.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"FULL\\\" \\\"full \\\"\\\" at line 1, column 17\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 17 thru line 1 col 20]; sql [select * from a ^full^ inner join b]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testHavingBeforeGroupFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select deptno from emp having count(*) \u003e 5 and deptno \u003c 4 group by deptno, emp];\n expected pattern [(?s).*Encountered \"group\" at .*];\n actual [Encountered \" \"GROUP\" \"group \"\" at line 1, column 59.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"GROUP\\\" \\\"group \\\"\\\" at line 1, column 59\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 59 thru line 1 col 63]; sql [select deptno from emp having count(*) \u003e 5 and deptno \u003c 4 ^group^ by deptno, emp]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testUnnestWithOrdinality",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select*from unnest(x) as T with ordinality];\n expected pattern [(?s)Encountered \"with\" at .*];\n actual [Encountered \" \"WITH\" \"with \"\" at line 1, column 28.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"WITH\\\" \\\"with \\\"\\\" at line 1, column 28\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 28 thru line 1 col 31]; sql [select*from unnest(x) as T ^with^ ordinality]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testDefault",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select DEFAULT from emp];\n expected pattern [(?s)Encountered \"DEFAULT\" at .*];\n actual [Encountered \"\" at line 1, column 8.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 8\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 8 thru line 1 col 14]; sql [select ^DEFAULT^ from emp]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "testMethod": "testFromWhere",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c[KEYWORD(()\nKEYWORD(+)\nKEYWORD(-)\nKEYWORD(?)\nKEYWORD(ABS)\nKEYWORD(ALL)\nKEYWORD(ANY)\nKEYWORD(ARRAY)\nKEYWORD(AVG)\nKEYWORD(CARDINALITY)\nKEYWORD(CASE)\nKEYWORD(CAST)\nKEYWORD(CEIL)\nKEYWORD(CEILING)\nKEYWORD(CHARACTER_LENGTH)\nKEYWORD(CHAR_LENGTH)\nKEYWORD(CLASSIFIER)\nKEYWORD(COALESCE)\nKEYWORD(COLLECT)\nKEYWORD(CONVERT)\nKEYWORD(COUNT)\nKEYWORD(COVAR_POP)\nKEYWORD(COVAR_SAMP)\nKEYWORD(CUME_DIST)\nKEYWORD(CURRENT)\nKEYWORD(CURRENT_CATALOG)\nKEYWORD(CURRENT_DATE)\nKEYWORD(CURRENT_DEFAULT_TRANSFORM_GROUP)\nKEYWORD(CURRENT_PATH)\nKEYWORD(CURRENT_ROLE)\nKEYWORD(CURRENT_SCHEMA)\nKEYWORD(CURRENT_TIME)\nKEYWORD(CURRENT_TIMESTAMP)\nKEYWORD(CURRENT_USER)\nKEYWORD(CURSOR)\nKEYWORD(DATE)\nKEYWORD(DENSE_RANK)\nKEYWORD(ELEMENT)\nKEYWORD(EXISTS)\nKEYWORD(EXP)\nKEYWORD(EXTRACT)\nKEYWORD(FALSE)\nKEYWORD(FIRST_VALUE)\nKEYWORD(FLOOR)\nKEYWORD(FUSION)\nKEYWORD(GROUPING)\nKEYWORD(HOUR)\nKEYWORD(INTERVAL)\nKEYWORD(LAG)\nKEYWORD(LAST_VALUE)\nKEYWORD(LEAD)\nKEYWORD(LN)\nKEYWORD(LOCALTIME)\nKEYWORD(LOCALTIMESTAMP)\nKEYWORD(LOWER)\nKEYWORD(MATCH_NUMBER)\nKEYWORD(MAX)\nKEYWORD(MIN)\nKEYWORD(MINUTE)\nKEYWORD(MOD)\nKEYWORD(MONTH)\nKEYWORD(MULTISET)\nKEYWORD(NEW)\nKEYWORD(NEXT)\nKEYWORD(NOT)\nKEYWORD(NTH_VALUE)\nKEYWORD(NTILE)\nKEYWORD(NULL)\nKEYWORD(NULLIF)\nKEYWORD(OCTET_LENGTH)\nKEYWORD(OVERLAY)\nKEYWORD(PERCENT_RANK)\nKEYWORD(PERIOD)\nKEYWORD(POSITION)\nKEYWORD(POWER)\nKEYWORD(PREV)\nKEYWORD(RANK)\nKEYWORD(REGR_COUNT)\nKEYWORD(REGR_SXX)\nKEYWORD(REGR_SYY)\nKEYWORD(ROW)\nKEYWORD(ROW_NUMBER)\nKEYWORD(RUNNING)\nKEYWORD(SECOND)\nKEYWORD(SESSION_USER)\nKEYWORD(SOME)\nKEYWORD(SPECIFIC)\nKEYWORD(SQRT)\nKEYWORD(STDDEV_POP)\nKEYWORD(STDDEV_SAMP)\nKEYWORD(SUBSTRING)\nKEYWORD(SUM)\nKEYWORD(SYSTEM_USER)\nKEYWORD(TIME)\nKEYWORD(TIMESTAMP)\nKEYWORD(TRANSLATE)\nKEYWORD(TRIM)\nKEYWORD(TRUE)\nKEYWORD(TRUNCATE)\nKEYWORD(UNKNOWN)\nKEYWORD(UPPER)\nKEYWORD(USER)\nKEYWORD(VAR_POP)\nKEYWORD(VAR_SAMP)\nKEYWORD(YEAR)\n]TABLE(A)\nTABLE(B)\n\u003e but was:\u003c[]TABLE(A)\nTABLE(B)\n\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testMiscIntervalQualifier",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [interval \u00271 2:3:4.567\u0027 day to hour to second];\n expected pattern [(?s)Encountered \"to\" at.*];\n actual [Encountered \" \"TO\" \"to \"\" at line 1, column 36.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"TO\\\" \\\"to \\\"\\\" at line 1, column 36\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 36 thru line 1 col 37]; sql [interval \u00271 2:3:4.567\u0027 day to hour ^to^ second]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testUnnest",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [unnest(x)];\n expected pattern [(?s)Encountered \"unnest\" at.*];\n actual [Encountered \"\" at line 1, column 1.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 1\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 1 thru line 1 col 6]; sql [^unnest^(x)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.SqlValidatorTest",
        "testMethod": "testLexJava",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error did not match expected [(?s).*Encountered \"\\. \\\\\"\" at line .*] while parsing query [select EMP.\"x\" from EMP]",
        "isError": true
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testParensInFrom",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select *from (unnest(x))];\n expected pattern [(?s)Encountered \"\\( unnest\" at .*];\n actual [Encountered \"\" at line 1, column 14.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 14\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 14 thru line 1 col 14]; sql [select *from ^(^unnest(x))]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testOuterApplyFunctionFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from dept outer apply ramp(deptno))];\n expected pattern [(?s).*Encountered \"\\)\" at .*];\n actual [Encountered \"\" at line 1, column 43.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 43\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 43 thru line 1 col 43]; sql [select * from dept outer apply ramp(deptno^)^)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testExtendedSqlStmt",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [DESCRIBE SEA POWER];\n expected pattern [(?s)Encountered \"POWER\" at line 1, column 14..*];\n actual [Encountered \" \"POWER\" \"POWER \"\" at line 1, column 14.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"POWER\\\" \\\"POWER \\\"\\\" at line 1, column 14\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 14 thru line 1 col 18]; sql [DESCRIBE SEA ^POWER^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testCaseExpression",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [case x when 2, 4 then 3 when then 5 else 4 end];\n expected pattern [(?s)Encountered \"when then\" at .*];\n actual [Encountered \" \"WHEN\" \"when \"\" at line 1, column 25.\nWas expecting:\n    \"END\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"WHEN\\\" \\\"when \\\"\\\" at line 1, column 25\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"END\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 25 thru line 1 col 28]; sql [case x when 2, 4 then 3 ^when^ then 5 else 4 end]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcTest",
        "testMethod": "testSqlAdvisorSchemaNames",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: \"id\u003d(; names\u003d[(]; type\u003dKEYWORD\\nid\u003d; names\u003dnull; type\u003dMATCH\\nid\u003dLATERAL; names\u003d[LATERAL]; type\u003dKEYWORD\\nid\u003dTABLE; names\u003d[TABLE]; type\u003dKEYWORD\\nid\u003dUNNEST; names\u003d[UNNEST]; type\u003dKEYWORD\\nid\u003dhr.dependents; names\u003d[hr, dependents]; type\u003dTABLE\\nid\u003dhr.depts; names\u003d[hr, depts]; type\u003dTABLE\\nid\u003dhr.emps; names\u003d[hr, emps]; type\u003dTABLE\\nid\u003dhr.locations; names\u003d[hr, locations]; type\u003dTABLE\\nid\u003dhr; names\u003d[hr]; type\u003dSCHEMA\\nid\u003dmetadata; names\u003d[metadata]; type\u003dSCHEMA\\nid\u003ds; names\u003d[s]; type\u003dSCHEMA\"\n     but: was \"id\u003d; names\u003dnull; type\u003dMATCH\\nid\u003dhr.dependents; names\u003d[hr, dependents]; type\u003dTABLE\\nid\u003dhr.depts; names\u003d[hr, depts]; type\u003dTABLE\\nid\u003dhr.emps; names\u003d[hr, emps]; type\u003dTABLE\\nid\u003dhr.locations; names\u003d[hr, locations]; type\u003dTABLE\\nid\u003dhr; names\u003d[hr]; type\u003dSCHEMA\\nid\u003dmetadata; names\u003d[metadata]; type\u003dSCHEMA\\nid\u003ds; names\u003d[s]; type\u003dSCHEMA\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "testMethod": "testJoinKeywords",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c[KEYWORD(()\nKEYWORD(,)\nKEYWORD(.)\nKEYWORD(AS)\nKEYWORD(CROSS)\nKEYWORD(EXCEPT)\nKEYWORD(EXTEND)\nKEYWORD(FETCH)\nKEYWORD(FULL)\nKEYWORD(GROUP)\nKEYWORD(HAVING)\nKEYWORD(INNER)\nKEYWORD(INTERSECT)\nKEYWORD(JOIN)\nKEYWORD(LEFT)\nKEYWORD(LIMIT)\nKEYWORD(MATCH_RECOGNIZE)\nKEYWORD(MINUS)\nKEYWORD(NATURAL)\nKEYWORD(OFFSET)\nKEYWORD(ON)\nKEYWORD(ORDER)\nKEYWORD(OUTER)\nKEYWORD(RIGHT)\nKEYWORD(TABLESAMPLE)\nKEYWORD(UNION)\nKEYWORD(USING)\nKEYWORD(WHERE)\nKEYWORD(WINDOW)\n]\u003e but was:\u003c[]\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testFunctionNamedArgument",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [foo(x.y \u003d\u003e 1)];\n expected pattern [(?s).*Encountered \"\u003d\u003e\" at .*];\n actual [Encountered \" \"\u003d\u003e\" \"\u003d\u003e \"\" at line 1, column 9.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"\u003d\u003e\\\" \\\"\u003d\u003e \\\"\\\" at line 1, column 9\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 9 thru line 1 col 10]; sql [foo(x.y ^\u003d\u003e^ 1)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlOperatorTest",
        "testMethod": "testTimestampDiff",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error did not match expected [(?s)Encountered \"CENTURY\" at .*] while parsing query [values (timestampdiff(CENTURY, timestamp \u00272014-02-24 12:42:25\u0027, timestamp \u00272614-02-24 12:42:25\u0027))]",
        "isError": true
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testGroupByRollup",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select deptno from emp\ngroup by rollup (deptno, rollup(e, d))];\n expected pattern [(?s)Encountered \", rollup\" at .*];\n actual [Encountered \" \",\" \", \"\" at line 2, column 24.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\",\\\" \\\", \\\"\\\" at line 2, column 24\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [2 col 24 thru line 2 col 24]; sql [select deptno from emp\ngroup by rollup (deptno^,^ rollup(e, d))]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "testMethod": "testSelectList",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c[KEYWORD(()\nKEYWORD(*)\nKEYWORD(+)\nKEYWORD(-)\nKEYWORD(?)\nKEYWORD(ABS)\nKEYWORD(ALL)\nKEYWORD(ARRAY)\nKEYWORD(AVG)\nKEYWORD(CARDINALITY)\nKEYWORD(CASE)\nKEYWORD(CAST)\nKEYWORD(CEIL)\nKEYWORD(CEILING)\nKEYWORD(CHARACTER_LENGTH)\nKEYWORD(CHAR_LENGTH)\nKEYWORD(CLASSIFIER)\nKEYWORD(COALESCE)\nKEYWORD(COLLECT)\nKEYWORD(CONVERT)\nKEYWORD(COUNT)\nKEYWORD(COVAR_POP)\nKEYWORD(COVAR_SAMP)\nKEYWORD(CUME_DIST)\nKEYWORD(CURRENT)\nKEYWORD(CURRENT_CATALOG)\nKEYWORD(CURRENT_DATE)\nKEYWORD(CURRENT_DEFAULT_TRANSFORM_GROUP)\nKEYWORD(CURRENT_PATH)\nKEYWORD(CURRENT_ROLE)\nKEYWORD(CURRENT_SCHEMA)\nKEYWORD(CURRENT_TIME)\nKEYWORD(CURRENT_TIMESTAMP)\nKEYWORD(CURRENT_USER)\nKEYWORD(CURSOR)\nKEYWORD(DATE)\nKEYWORD(DENSE_RANK)\nKEYWORD(DISTINCT)\nKEYWORD(ELEMENT)\nKEYWORD(EXCEPT)\nKEYWORD(EXISTS)\nKEYWORD(EXP)\nKEYWORD(EXTRACT)\nKEYWORD(FALSE)\nKEYWORD(FETCH)\nKEYWORD(FIRST_VALUE)\nKEYWORD(FLOOR)\nKEYWORD(FUSION)\nKEYWORD(GROUPING)\nKEYWORD(HOUR)\nKEYWORD(INTERSECT)\nKEYWORD(INTERVAL)\nKEYWORD(LAG)\nKEYWORD(LAST_VALUE)\nKEYWORD(LEAD)\nKEYWORD(LIMIT)\nKEYWORD(LN)\nKEYWORD(LOCALTIME)\nKEYWORD(LOCALTIMESTAMP)\nKEYWORD(LOWER)\nKEYWORD(MATCH_NUMBER)\nKEYWORD(MAX)\nKEYWORD(MIN)\nKEYWORD(MINUS)\nKEYWORD(MINUTE)\nKEYWORD(MOD)\nKEYWORD(MONTH)\nKEYWORD(MULTISET)\nKEYWORD(NEW)\nKEYWORD(NEXT)\nKEYWORD(NOT)\nKEYWORD(NTH_VALUE)\nKEYWORD(NTILE)\nKEYWORD(NULL)\nKEYWORD(NULLIF)\nKEYWORD(OCTET_LENGTH)\nKEYWORD(OFFSET)\nKEYWORD(ORDER)\nKEYWORD(OVERLAY)\nKEYWORD(PERCENT_RANK)\nKEYWORD(PERIOD)\nKEYWORD(POSITION)\nKEYWORD(POWER)\nKEYWORD(PREV)\nKEYWORD(RANK)\nKEYWORD(REGR_COUNT)\nKEYWORD(REGR_SXX)\nKEYWORD(REGR_SYY)\nKEYWORD(ROW)\nKEYWORD(ROW_NUMBER)\nKEYWORD(RUNNING)\nKEYWORD(SECOND)\nKEYWORD(SESSION_USER)\nKEYWORD(SPECIFIC)\nKEYWORD(SQRT)\nKEYWORD(STDDEV_POP)\nKEYWORD(STDDEV_SAMP)\nKEYWORD(STREAM)\nKEYWORD(SUBSTRING)\nKEYWORD(SUM)\nKEYWORD(SYSTEM_USER)\nKEYWORD(TIME)\nKEYWORD(TIMESTAMP)\nKEYWORD(TRANSLATE)\nKEYWORD(TRIM)\nKEYWORD(TRUE)\nKEYWORD(TRUNCATE)\nKEYWORD(UNION)\nKEYWORD(UNKNOWN)\nKEYWORD(UPPER)\nKEYWORD(USER)\nKEYWORD(VAR_POP)\nKEYWORD(VAR_SAMP)\nKEYWORD(YEAR)\n]TABLE(A)\nTABLE(B)\n\u003e but was:\u003c[]TABLE(A)\nTABLE(B)\n\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testTabStop",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [SELECT * FROM mytable  WHERE x \u003d \u003d y AND b \u003d 1];\n expected pattern [(?s).*Encountered \"\u003d \u003d\" at line 1, column 32\\..*];\n actual [Encountered \" \"\u003d\" \"\u003d \"\" at line 1, column 32.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"\u003d\\\" \\\"\u003d \\\"\\\" at line 1, column 32\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 32 thru line 1 col 32]; sql [SELECT * FROM mytable  WHERE x ^\u003d^ \u003d y AND b \u003d 1]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testGroupingSets",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select deptno from emp\ngroup by grouping sets deptno, (deptno, gender), ()];\n expected pattern [(?s).*Encountered \"deptno\" at line 2, column 24.\nWas expecting:\n    \"\\(\" .*];\n actual [Encountered \" \u003cIDENTIFIER\u003e \"deptno \"\" at line 2, column 24.\nWas expecting:\n    \"(\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \u003cIDENTIFIER\u003e \\\"deptno \\\"\\\" at line 2, column 24\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\(\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [2 col 24 thru line 2 col 29]; sql [select deptno from emp\ngroup by grouping sets ^deptno^, (deptno, gender), ()]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.SqlValidatorTest",
        "testMethod": "testBrackets",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error did not match expected [(?s).*Encountered \"\\. \\\\\"\" at line .*] while parsing query [select EMP.\"x\" from EMP]",
        "isError": true
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testFromValuesWithoutParens",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select 1 from values(\u0027x\u0027)];\n expected pattern [(?s)Encountered \"from values\" at line 1, column 10\\.\nWas expecting one of:\n    \u003cEOF\u003e \n    \"ORDER\" \\.\\.\\.\n    \"LIMIT\" \\.\\.\\.\n.*    \"FROM\" \u003cIDENTIFIER\u003e \\.\\.\\.\n    \"FROM\" \u003cQUOTED_IDENTIFIER\u003e \\.\\.\\.\n.*];\n actual [Encountered \" \"FROM\" \"from \"\" at line 1, column 10.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"FROM\\\" \\\"from \\\"\\\" at line 1, column 10\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 10 thru line 1 col 13]; sql [select 1 ^from^ values(\u0027x\u0027)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testBitStringNotImplemented",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select B\u00271011\u0027 || \u0027foobar\u0027 from (values (true))];\n expected pattern [(?s).*Encountered \"\\\\\u00271011\\\\\u0027\" at line 1, column 9.*];\n actual [Encountered \" \u003cQUOTED_STRING\u003e \"\\\u00271011\\\u0027 \"\" at line 1, column 9.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \u003cQUOTED_STRING\u003e \\\"\\\\\u00271011\\\\\u0027 \\\"\\\" at line 1, column 9\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 9 thru line 1 col 14]; sql [select B^\u00271011\u0027^ || \u0027foobar\u0027 from (values (true))]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testMiscIntervalQualifier",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [interval \u00271 2:3:4.567\u0027 day to hour to second];\n expected pattern [(?s)Encountered \"to\" at.*];\n actual [Encountered \" \"TO\" \"to \"\" at line 1, column 36.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"TO\\\" \\\"to \\\"\\\" at line 1, column 36\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 36 thru line 1 col 37]; sql [interval \u00271 2:3:4.567\u0027 day to hour ^to^ second]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testMinusIsReserved",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select minus from t];\n expected pattern [(?s).*Encountered \"minus from\" at .*];\n actual [Encountered \"\" at line 1, column 8.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 8\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 8 thru line 1 col 12]; sql [select ^minus^ from t]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testSome",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from emp\nwhere name like (select some name from emp)];\n expected pattern [(?s).*Encountered \"some\" at .*];\n actual [Encountered \"\" at line 2, column 25.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 2, column 25\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [2 col 25 thru line 2 col 28]; sql [select * from emp\nwhere name like (select ^some^ name from emp)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.CoreQuidemTest",
        "testMethod": "test[15: quidem(sql/lateral.iq)]",
        "failureName": "java.lang.AssertionError",
        "detail": "Files differ: /root/workspace/risdenk/calcite/423386498/core/target/test-classes/sql/surefire/sql/lateral.iq /root/workspace/risdenk/calcite/423386498/core/target/test-classes/sql/lateral.iq\n23c23\n\u003c parse failed: Encountered \"lateral \\\"scott\\\"\" at line 1, column 32.\n---\n\u003e java.sql.SQLException: Error while executing SQL \"select * from \"scott\".emp join lateral \"scott\".dept using (deptno)\": parse failed: Encountered \"\" at line 1, column 32.\n25,32c25,93\n\u003c     \u003cIDENTIFIER\u003e ...\n\u003c     \u003cQUOTED_IDENTIFIER\u003e ...\n\u003c     \u003cBACK_QUOTED_IDENTIFIER\u003e ...\n\u003c     \u003cBRACKET_QUOTED_IDENTIFIER\u003e ...\n\u003c     \u003cUNICODE_QUOTED_IDENTIFIER\u003e ...\n\u003c     \"LATERAL\" \"(\" ...\n\u003c     \"UNNEST\" ...\n\u003c     \"LATERAL\" \"TABLE\" ...\n---\n\u003e     \n\u003e  at org.apache.calcite.avatica.Helper.createException(Helper.java:56)\n\u003e  at org.apache.calcite.avatica.Helper.createException(Helper.java:41)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:163)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:227)\n\u003e  at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:322)\n\u003e  at net.hydromatic.quidem.Quidem.access$2800(Quidem.java:54)\n\u003e  at net.hydromatic.quidem.Quidem$ContextImpl.checkResult(Quidem.java:1747)\n\u003e  at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:1078)\n\u003e  at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1548)\n\u003e  at net.hydromatic.quidem.Quidem.execute(Quidem.java:216)\n\u003e  at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:160)\n\u003e  at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:197)\n\u003e  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\u003e  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\u003e  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\u003e  at java.lang.reflect.Method.invoke(Method.java:498)\n\u003e  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\u003e  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\u003e  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\u003e  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\u003e  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\u003e  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\u003e  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\u003e  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\u003e  at org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:410)\n\u003e  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\u003e  at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\u003e  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\u003e  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\u003e  at java.lang.Thread.run(Thread.java:745)\n\u003e Caused by: java.lang.RuntimeException: parse failed: Encountered \"\" at line 1, column 32.\n\u003e Was expecting one of:\n\u003e     \n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:751)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare_(CalcitePrepareImpl.java:636)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepareSql(CalcitePrepareImpl.java:606)\n\u003e  at org.apache.calcite.jdbc.CalciteConnectionImpl.parseQuery(CalciteConnectionImpl.java:229)\n\u003e  at org.apache.calcite.jdbc.CalciteMetaImpl.prepareAndExecute(CalciteMetaImpl.java:550)\n\u003e  at org.apache.calcite.avatica.AvaticaConnection.prepareAndExecuteInternal(AvaticaConnection.java:675)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:156)\n\u003e  ... 27 more\n\u003e Caused by: org.apache.calcite.sql.parser.SqlParseException: Encountered \"\" at line 1, column 32.\n\u003e Was expecting one of:\n\u003e     \n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.convertException(SqlParserImpl.java:347)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.normalizeException(SqlParserImpl.java:128)\n\u003e  at org.apache.calcite.sql.parser.SqlParser.parseQuery(SqlParser.java:137)\n\u003e  at org.apache.calcite.sql.parser.SqlParser.parseStmt(SqlParser.java:162)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:747)\n\u003e  ... 33 more\n\u003e Caused by: org.apache.calcite.sql.parser.impl.ParseException: Encountered \"\" at line 1, column 32.\n\u003e Was expecting one of:\n\u003e     \n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.generateParseException(SqlParserImpl.java:23045)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.jj_consume_token(SqlParserImpl.java:22864)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.TableRef2(SqlParserImpl.java:1858)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.TableRef(SqlParserImpl.java:1753)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.FromClause(SqlParserImpl.java:1665)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.SqlSelect(SqlParserImpl.java:915)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.LeafQuery(SqlParserImpl.java:552)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.LeafQueryOrExpr(SqlParserImpl.java:3030)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.QueryOrExpr(SqlParserImpl.java:2949)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.OrderedQueryOrExpr(SqlParserImpl.java:463)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.SqlStmt(SqlParserImpl.java:841)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.SqlStmtEof(SqlParserImpl.java:869)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.parseSqlStmtEof(SqlParserImpl.java:184)\n\u003e  at org.apache.calcite.sql.parser.SqlParser.parseQuery(SqlParser.java:130)\n\u003e  ... 35 more\n37c98\n\u003c parse failed: Encountered \"\\\"scott\\\"\" at line 1, column 46.\n---\n\u003e java.sql.SQLException: Error while executing SQL \"select * from \"scott\".emp join lateral table \"scott\".dept using (deptno)\": parse failed: Encountered \" \u003cQUOTED_IDENTIFIER\u003e \"\\\"scott\\\" \"\" at line 1, column 46.\n39a101,172\n\u003e     \n\u003e  at org.apache.calcite.avatica.Helper.createException(Helper.java:56)\n\u003e  at org.apache.calcite.avatica.Helper.createException(Helper.java:41)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:163)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:227)\n\u003e  at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:322)\n\u003e  at net.hydromatic.quidem.Quidem.access$2800(Quidem.java:54)\n\u003e  at net.hydromatic.quidem.Quidem$ContextImpl.checkResult(Quidem.java:1747)\n\u003e  at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:1078)\n\u003e  at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1548)\n\u003e  at net.hydromatic.quidem.Quidem.execute(Quidem.java:216)\n\u003e  at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:160)\n\u003e  at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:197)\n\u003e  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\u003e  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\u003e  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\u003e  at java.lang.reflect.Method.invoke(Method.java:498)\n\u003e  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\u003e  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\u003e  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\u003e  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\u003e  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\u003e  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\u003e  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\u003e  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\u003e  at org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:410)\n\u003e  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\u003e  at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\u003e  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\u003e  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\u003e  at java.lang.Thread.run(Thread.java:745)\n\u003e Caused by: java.lang.RuntimeException: parse failed: Encountered \" \u003cQUOTED_IDENTIFIER\u003e \"\\\"scott\\\" \"\" at line 1, column 46.\n\u003e Was expecting:\n\u003e     \"(\" ...\n\u003e     \n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:751)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare_(CalcitePrepareImpl.java:636)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepareSql(CalcitePrepareImpl.java:606)\n\u003e  at org.apache.calcite.jdbc.CalciteConnectionImpl.parseQuery(CalciteConnectionImpl.java:229)\n\u003e  at org.apache.calcite.jdbc.CalciteMetaImpl.prepareAndExecute(CalciteMetaImpl.java:550)\n\u003e  at org.apache.calcite.avatica.AvaticaConnection.prepareAndExecuteInternal(AvaticaConnection.java:675)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:156)\n\u003e  ... 27 more\n\u003e Caused by: org.apache.calcite.sql.parser.SqlParseException: Encountered \" \u003cQUOTED_IDENTIFIER\u003e \"\\\"scott\\\" \"\" at line 1, column 46.\n\u003e Was expecting:\n\u003e     \"(\" ...\n\u003e     \n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.convertException(SqlParserImpl.java:347)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.normalizeException(SqlParserImpl.java:128)\n\u003e  at org.apache.calcite.sql.parser.SqlParser.parseQuery(SqlParser.java:137)\n\u003e  at org.apache.calcite.sql.parser.SqlParser.parseStmt(SqlParser.java:162)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:747)\n\u003e  ... 33 more\n\u003e Caused by: org.apache.calcite.sql.parser.impl.ParseException: Encountered \" \u003cQUOTED_IDENTIFIER\u003e \"\\\"scott\\\" \"\" at line 1, column 46.\n\u003e Was expecting:\n\u003e     \"(\" ...\n\u003e     \n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.generateParseException(SqlParserImpl.java:23045)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.jj_consume_token(SqlParserImpl.java:22864)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.TableRef2(SqlParserImpl.java:1848)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.TableRef(SqlParserImpl.java:1753)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.FromClause(SqlParserImpl.java:1665)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.SqlSelect(SqlParserImpl.java:915)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.LeafQuery(SqlParserImpl.java:552)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.LeafQueryOrExpr(SqlParserImpl.java:3030)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.QueryOrExpr(SqlParserImpl.java:2949)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.OrderedQueryOrExpr(SqlParserImpl.java:463)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.SqlStmt(SqlParserImpl.java:841)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.SqlStmtEof(SqlParserImpl.java:869)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.parseSqlStmtEof(SqlParserImpl.java:184)\n\u003e  at org.apache.calcite.sql.parser.SqlParser.parseQuery(SqlParser.java:130)\n\u003e  ... 35 more\n83c216\n\u003c parse failed: Encountered \"table \\\"scott\\\"\" at line 1, column 15.\n---\n\u003e java.sql.SQLException: Error while executing SQL \"select * from table \"scott\".emp\": parse failed: Encountered \"\" at line 1, column 15.\n85,94c218,286\n\u003c     \u003cIDENTIFIER\u003e ...\n\u003c     \u003cQUOTED_IDENTIFIER\u003e ...\n\u003c     \u003cBACK_QUOTED_IDENTIFIER\u003e ...\n\u003c     \u003cBRACKET_QUOTED_IDENTIFIER\u003e ...\n\u003c     \u003cUNICODE_QUOTED_IDENTIFIER\u003e ...\n\u003c     \"LATERAL\" ...\n\u003c     \"(\" ...\n\u003c     \"UNNEST\" ...\n\u003c     \"TABLE\" ...\n\u003c     \"TABLE\" \"(\" ...\n---\n\u003e     \n\u003e  at org.apache.calcite.avatica.Helper.createException(Helper.java:56)\n\u003e  at org.apache.calcite.avatica.Helper.createException(Helper.java:41)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:163)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:227)\n\u003e  at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:322)\n\u003e  at net.hydromatic.quidem.Quidem.access$2800(Quidem.java:54)\n\u003e  at net.hydromatic.quidem.Quidem$ContextImpl.checkResult(Quidem.java:1747)\n\u003e  at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:1078)\n\u003e  at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1548)\n\u003e  at net.hydromatic.quidem.Quidem.execute(Quidem.java:216)\n\u003e  at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:160)\n\u003e  at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:197)\n\u003e  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\u003e  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\u003e  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\u003e  at java.lang.reflect.Method.invoke(Method.java:498)\n\u003e  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\u003e  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\u003e  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\u003e  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\u003e  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\u003e  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\u003e  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\u003e  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\u003e  at org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:410)\n\u003e  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\u003e  at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\u003e  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\u003e  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\u003e  at java.lang.Thread.run(Thread.java:745)\n\u003e Caused by: java.lang.RuntimeException: parse failed: Encountered \"\" at line 1, column 15.\n\u003e Was expecting one of:\n\u003e     \n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:751)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare_(CalcitePrepareImpl.java:636)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepareSql(CalcitePrepareImpl.java:606)\n\u003e  at org.apache.calcite.jdbc.CalciteConnectionImpl.parseQuery(CalciteConnectionImpl.java:229)\n\u003e  at org.apache.calcite.jdbc.CalciteMetaImpl.prepareAndExecute(CalciteMetaImpl.java:550)\n\u003e  at org.apache.calcite.avatica.AvaticaConnection.prepareAndExecuteInternal(AvaticaConnection.java:675)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:156)\n\u003e  ... 27 more\n\u003e Caused by: org.apache.calcite.sql.parser.SqlParseException: Encountered \"\" at line 1, column 15.\n\u003e Was expecting one of:\n\u003e     \n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.convertException(SqlParserImpl.java:347)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.normalizeException(SqlParserImpl.java:128)\n\u003e  at org.apache.calcite.sql.parser.SqlParser.parseQuery(SqlParser.java:137)\n\u003e  at org.apache.calcite.sql.parser.SqlParser.parseStmt(SqlParser.java:162)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:747)\n\u003e  ... 33 more\n\u003e Caused by: org.apache.calcite.sql.parser.impl.ParseException: Encountered \"\" at line 1, column 15.\n\u003e Was expecting one of:\n\u003e     \n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.generateParseException(SqlParserImpl.java:23045)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.jj_consume_token(SqlParserImpl.java:22864)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.TableRef2(SqlParserImpl.java:1858)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.TableRef(SqlParserImpl.java:1753)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.FromClause(SqlParserImpl.java:1654)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.SqlSelect(SqlParserImpl.java:915)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.LeafQuery(SqlParserImpl.java:552)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.LeafQueryOrExpr(SqlParserImpl.java:3030)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.QueryOrExpr(SqlParserImpl.java:2949)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.OrderedQueryOrExpr(SqlParserImpl.java:463)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.SqlStmt(SqlParserImpl.java:841)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.SqlStmtEof(SqlParserImpl.java:869)\n\u003e  at org.apache.calcite.sql.parser.impl.SqlParserImpl.parseSqlStmtEof(SqlParserImpl.java:184)\n\u003e  at org.apache.calcite.sql.parser.SqlParser.parseQuery(SqlParser.java:130)\n\u003e  ... 35 more\n",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testFullInnerJoinFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from a full inner join b];\n expected pattern [(?s).*Encountered \"full inner\" at line 1, column 17.*];\n actual [Encountered \" \"FULL\" \"full \"\" at line 1, column 17.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"FULL\\\" \\\"full \\\"\\\" at line 1, column 17\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 17 thru line 1 col 20]; sql [select * from a ^full^ inner join b]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testLikeAndSimilar",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from t where escape \u0027e\u0027];\n expected pattern [(?s).*Encountered \"where escape\" at .*];\n actual [Encountered \" \"WHERE\" \"where \"\" at line 1, column 17.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"WHERE\\\" \\\"where \\\"\\\" at line 1, column 17\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 17 thru line 1 col 21]; sql [select * from t ^where^ escape \u0027e\u0027]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testOverlaps",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [period (x,xx,xxx) overlaps period (y,yy) or false];\n expected pattern [(?s).*Encountered \",\" at .*];\n actual [Encountered \" \",\" \", \"\" at line 1, column 13.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\",\\\" \\\", \\\"\\\" at line 1, column 13\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 13 thru line 1 col 13]; sql [period (x,xx^,^xxx) overlaps period (y,yy) or false]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testAs",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select sum(x) over w from bids window w (order by x)];\n expected pattern [(?s).*Encountered \"\\(\".*];\n actual [Encountered \" \"(\" \"( \"\" at line 1, column 41.\nWas expecting:\n    \"AS\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"\\\\(\\\" \\\"\\\\( \\\"\\\" at line 1, column 41\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"AS\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 41 thru line 1 col 41]; sql [select sum(x) over w from bids window w ^(^order by x)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testFunctionDefaultArgument",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [foo(x + DEFAULT)];\n expected pattern [(?s).*Encountered \"\\+ DEFAULT\" at .*];\n actual [Encountered \" \"+\" \"+ \"\" at line 1, column 7.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"\\\\+\\\" \\\"\\\\+ \\\"\\\" at line 1, column 7\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 7 thru line 1 col 7]; sql [foo(x ^+^ DEFAULT)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testMinusIsReserved",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select minus from t];\n expected pattern [(?s).*Encountered \"minus from\" at .*];\n actual [Encountered \"\" at line 1, column 8.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 8\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 8 thru line 1 col 12]; sql [select ^minus^ from t]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testHexAndBinaryStringFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select x\u00271\u0027 x\u00272\u0027 from t];\n expected pattern [(?s).*Encountered .x.*2.* at line 1, column 13.*];\n actual [Encountered \" \u003cBINARY_STRING_LITERAL\u003e \"x\\\u00272\\\u0027 \"\" at line 1, column 13.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \u003cBINARY_STRING_LITERAL\u003e \\\"x\\\\\u00272\\\\\u0027 \\\"\\\" at line 1, column 13\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 13 thru line 1 col 16]; sql [select x\u00271\u0027 ^x\u00272\u0027^ from t]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testFunctionDefaultArgument",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [foo(x + DEFAULT)];\n expected pattern [(?s).*Encountered \"\\+ DEFAULT\" at .*];\n actual [Encountered \" \"+\" \"+ \"\" at line 1, column 7.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"\\\\+\\\" \\\"\\\\+ \\\"\\\" at line 1, column 7\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 7 thru line 1 col 7]; sql [foo(x ^+^ DEFAULT)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "testMethod": "testOnCondition",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c[KEYWORD(()\nKEYWORD(+)\nKEYWORD(-)\nKEYWORD(?)\nKEYWORD(ABS)\nKEYWORD(ARRAY)\nKEYWORD(AVG)\nKEYWORD(CARDINALITY)\nKEYWORD(CASE)\nKEYWORD(CAST)\nKEYWORD(CEIL)\nKEYWORD(CEILING)\nKEYWORD(CHARACTER_LENGTH)\nKEYWORD(CHAR_LENGTH)\nKEYWORD(CLASSIFIER)\nKEYWORD(COALESCE)\nKEYWORD(COLLECT)\nKEYWORD(CONVERT)\nKEYWORD(COUNT)\nKEYWORD(COVAR_POP)\nKEYWORD(COVAR_SAMP)\nKEYWORD(CUME_DIST)\nKEYWORD(CURRENT)\nKEYWORD(CURRENT_CATALOG)\nKEYWORD(CURRENT_DATE)\nKEYWORD(CURRENT_DEFAULT_TRANSFORM_GROUP)\nKEYWORD(CURRENT_PATH)\nKEYWORD(CURRENT_ROLE)\nKEYWORD(CURRENT_SCHEMA)\nKEYWORD(CURRENT_TIME)\nKEYWORD(CURRENT_TIMESTAMP)\nKEYWORD(CURRENT_USER)\nKEYWORD(CURSOR)\nKEYWORD(DATE)\nKEYWORD(DENSE_RANK)\nKEYWORD(ELEMENT)\nKEYWORD(EXISTS)\nKEYWORD(EXP)\nKEYWORD(EXTRACT)\nKEYWORD(FALSE)\nKEYWORD(FIRST_VALUE)\nKEYWORD(FLOOR)\nKEYWORD(FUSION)\nKEYWORD(GROUPING)\nKEYWORD(HOUR)\nKEYWORD(INTERVAL)\nKEYWORD(LAG)\nKEYWORD(LAST_VALUE)\nKEYWORD(LEAD)\nKEYWORD(LN)\nKEYWORD(LOCALTIME)\nKEYWORD(LOCALTIMESTAMP)\nKEYWORD(LOWER)\nKEYWORD(MATCH_NUMBER)\nKEYWORD(MAX)\nKEYWORD(MIN)\nKEYWORD(MINUTE)\nKEYWORD(MOD)\nKEYWORD(MONTH)\nKEYWORD(MULTISET)\nKEYWORD(NEW)\nKEYWORD(NEXT)\nKEYWORD(NOT)\nKEYWORD(NTH_VALUE)\nKEYWORD(NTILE)\nKEYWORD(NULL)\nKEYWORD(NULLIF)\nKEYWORD(OCTET_LENGTH)\nKEYWORD(OVERLAY)\nKEYWORD(PERCENT_RANK)\nKEYWORD(PERIOD)\nKEYWORD(POSITION)\nKEYWORD(POWER)\nKEYWORD(PREV)\nKEYWORD(RANK)\nKEYWORD(REGR_COUNT)\nKEYWORD(REGR_SXX)\nKEYWORD(REGR_SYY)\nKEYWORD(ROW)\nKEYWORD(ROW_NUMBER)\nKEYWORD(RUNNING)\nKEYWORD(SECOND)\nKEYWORD(SESSION_USER)\nKEYWORD(SPECIFIC)\nKEYWORD(SQRT)\nKEYWORD(STDDEV_POP)\nKEYWORD(STDDEV_SAMP)\nKEYWORD(SUBSTRING)\nKEYWORD(SUM)\nKEYWORD(SYSTEM_USER)\nKEYWORD(TIME)\nKEYWORD(TIMESTAMP)\nKEYWORD(TRANSLATE)\nKEYWORD(TRIM)\nKEYWORD(TRUE)\nKEYWORD(TRUNCATE)\nKEYWORD(UNKNOWN)\nKEYWORD(UPPER)\nKEYWORD(USER)\nKEYWORD(VAR_POP)\nKEYWORD(VAR_SAMP)\nKEYWORD(YEAR)\n]TABLE(A)\nTABLE(B)\n\u003e but was:\u003c[]TABLE(A)\nTABLE(B)\n\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testAs",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select sum(x) over w from bids window w (order by x)];\n expected pattern [(?s).*Encountered \"\\(\".*];\n actual [Encountered \" \"(\" \"( \"\" at line 1, column 41.\nWas expecting:\n    \"AS\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"\\\\(\\\" \\\"\\\\( \\\"\\\" at line 1, column 41\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"AS\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 41 thru line 1 col 41]; sql [select sum(x) over w from bids window w ^(^order by x)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testDescribeTable",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [describe emps \u0027col_\u0027];\n expected pattern [(?s).*Encountered \"\\\\\u0027col_\\\\\u0027\" at .*];\n actual [Encountered \" \u003cQUOTED_STRING\u003e \"\\\u0027col_\\\u0027 \"\" at line 1, column 15.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \u003cQUOTED_STRING\u003e \\\"\\\\\u0027col_\\\\\u0027 \\\"\\\" at line 1, column 15\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 15 thru line 1 col 20]; sql [describe emps ^\u0027col_\u0027^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testSqlOptions",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [alter system set aString \u003d \u0027abc\u0027 || \u0027def\u0027 ];\n expected pattern [(?s)Encountered \"\\|\\|\" at line 1, column 34\\..*];\n actual [Encountered \" \"||\" \"|| \"\" at line 1, column 34.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"\\\\||\\\\||\\\" \\\"\\\\||\\\\|| \\\"\\\" at line 1, column 34\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 34 thru line 1 col 35]; sql [alter system set aString \u003d \u0027abc\u0027 ^||^ \u0027def\u0027 ]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.SqlValidatorMatchTest",
        "testMethod": "testMatchRecognizeSkipTo2",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error did not match expected [(?s).*Encountered \"measures\" at .*] while parsing query [select *\n  from emp match_recognize (\n    after match skip to no_exists\n    measures\n      STRT.sal as start_sal,      LAST(up.ts) as end_sal    pattern (strt down+ up+)\n    define\n      down as down.sal \u003c PREV(down.sal),\n      up as up.sal \u003e prev(up.sal)\n  ) mr]",
        "isError": true
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testUnparseableIntervalQualifiers",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [interval \u00271\u0027];\n expected pattern [Encountered \"\u003cEOF\u003e\" at line 1, column 12\\.\nWas expecting one of:\n    \"YEAR\" \\.\\.\\.\n    \"MONTH\" \\.\\.\\.\n    \"DAY\" \\.\\.\\.\n    \"HOUR\" \\.\\.\\.\n    \"MINUTE\" \\.\\.\\.\n    \"SECOND\" \\.\\.\\.\n    ];\n actual [Encountered \"\" at line 1, column 12.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 12\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 12 thru line 1 col 12]; sql [interval \u00271^\u0027^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testOuterApplyFunctionFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from dept outer apply ramp(deptno))];\n expected pattern [(?s).*Encountered \"\\)\" at .*];\n actual [Encountered \"\" at line 1, column 43.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 43\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 43 thru line 1 col 43]; sql [select * from dept outer apply ramp(deptno^)^)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testSelectWithoutFromWhereFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select 2+2 as x where 1 \u003e 2];\n expected pattern [(?s).*Encountered \"where\" at line .*];\n actual [Encountered \" \"WHERE\" \"where \"\" at line 1, column 17.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"WHERE\\\" \\\"where \\\"\\\" at line 1, column 17\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 17 thru line 1 col 21]; sql [select 2+2 as x ^where^ 1 \u003e 2]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testLateral",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from lateral emp];\n expected pattern [(?s)Encountered \"lateral emp\" at .*];\n actual [Encountered \"\" at line 1, column 15.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 15\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 15 thru line 1 col 21]; sql [select * from ^lateral^ emp]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testLimitUnion",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select a from t limit 10\nunion all\nselect b from t order by b];\n expected pattern [(?s).*Encountered \"union\" at .*];\n actual [Encountered \" \"UNION\" \"union \"\" at line 2, column 1.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"UNION\\\" \\\"union \\\"\\\" at line 2, column 1\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [2 col 1 thru line 2 col 5]; sql [select a from t limit 10\n^union^ all\nselect b from t order by b]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testGroupingSets",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select deptno from emp\ngroup by grouping sets deptno, (deptno, gender), ()];\n expected pattern [(?s).*Encountered \"deptno\" at line 2, column 24.\nWas expecting:\n    \"\\(\" .*];\n actual [Encountered \" \u003cIDENTIFIER\u003e \"deptno \"\" at line 2, column 24.\nWas expecting:\n    \"(\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \u003cIDENTIFIER\u003e \\\"deptno \\\"\\\" at line 2, column 24\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\(\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [2 col 24 thru line 2 col 29]; sql [select deptno from emp\ngroup by grouping sets ^deptno^, (deptno, gender), ()]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testLimitStartCount",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select a from foo limit 2, all];\n expected pattern [(?s).*Encountered \"all\" at line 1.*];\n actual [Encountered \"\" at line 1, column 28.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 28\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 28 thru line 1 col 30]; sql [select a from foo limit 2, ^all^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.tools.PlannerTest",
        "testMethod": "testParseFails",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"Encountered \\\"*\\\" at line 1, column 10.\"\n     but: was \"Encountered \" \"*\" \"* \"\" at line 1, column 10.\nWas expecting:\n    \u003cEOF\u003e \n    \"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testTabStop",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [SELECT * FROM mytable  WHERE x \u003d \u003d y AND b \u003d 1];\n expected pattern [(?s).*Encountered \"\u003d \u003d\" at line 1, column 32\\..*];\n actual [Encountered \" \"\u003d\" \"\u003d \"\" at line 1, column 32.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"\u003d\\\" \\\"\u003d \\\"\\\" at line 1, column 32\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 32 thru line 1 col 32]; sql [SELECT * FROM mytable  WHERE x ^\u003d^ \u003d y AND b \u003d 1]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testOrderUnion",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select a from t order by a\nunion all\nselect b from t order by b];\n expected pattern [(?s).*Encountered \"union\" at .*];\n actual [Encountered \" \"UNION\" \"union \"\" at line 2, column 1.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"UNION\\\" \\\"union \\\"\\\" at line 2, column 1\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [2 col 1 thru line 2 col 5]; sql [select a from t order by a\n^union^ all\nselect b from t order by b]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testOverlaps",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [period (x,xx,xxx) overlaps period (y,yy) or false];\n expected pattern [(?s).*Encountered \",\" at .*];\n actual [Encountered \" \",\" \", \"\" at line 1, column 13.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\",\\\" \\\", \\\"\\\" at line 1, column 13\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 13 thru line 1 col 13]; sql [period (x,xx^,^xxx) overlaps period (y,yy) or false]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "testMethod": "testInsert",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c...EPTNO)\nCOLUMN(NAME)\n[KEYWORD(()\nKEYWORD(*)\nKEYWORD(+)\nKEYWORD(-)\nKEYWORD(?)\nKEYWORD(ABS)\nKEYWORD(ALL)\nKEYWORD(ARRAY)\nKEYWORD(AVG)\nKEYWORD(CARDINALITY)\nKEYWORD(CASE)\nKEYWORD(CAST)\nKEYWORD(CEIL)\nKEYWORD(CEILING)\nKEYWORD(CHARACTER_LENGTH)\nKEYWORD(CHAR_LENGTH)\nKEYWORD(CLASSIFIER)\nKEYWORD(COALESCE)\nKEYWORD(COLLECT)\nKEYWORD(CONVERT)\nKEYWORD(COUNT)\nKEYWORD(COVAR_POP)\nKEYWORD(COVAR_SAMP)\nKEYWORD(CUME_DIST)\nKEYWORD(CURRENT)\nKEYWORD(CURRENT_CATALOG)\nKEYWORD(CURRENT_DATE)\nKEYWORD(CURRENT_DEFAULT_TRANSFORM_GROUP)\nKEYWORD(CURRENT_PATH)\nKEYWORD(CURRENT_ROLE)\nKEYWORD(CURRENT_SCHEMA)\nKEYWORD(CURRENT_TIME)\nKEYWORD(CURRENT_TIMESTAMP)\nKEYWORD(CURRENT_USER)\nKEYWORD(CURSOR)\nKEYWORD(DATE)\nKEYWORD(DENSE_RANK)\nKEYWORD(DISTINCT)\nKEYWORD(ELEMENT)\nKEYWORD(EXCEPT)\nKEYWORD(EXISTS)\nKEYWORD(EXP)\nKEYWORD(EXTRACT)\nKEYWORD(FALSE)\nKEYWORD(FETCH)\nKEYWORD(FIRST_VALUE)\nKEYWORD(FLOOR)\nKEYWORD(FUSION)\nKEYWORD(GROUPING)\nKEYWORD(HOUR)\nKEYWORD(INTERSECT)\nKEYWORD(INTERVAL)\nKEYWORD(LAG)\nKEYWORD(LAST_VALUE)\nKEYWORD(LEAD)\nKEYWORD(LIMIT)\nKEYWORD(LN)\nKEYWORD(LOCALTIME)\nKEYWORD(LOCALTIMESTAMP)\nKEYWORD(LOWER)\nKEYWORD(MATCH_NUMBER)\nKEYWORD(MAX)\nKEYWORD(MIN)\nKEYWORD(MINUS)\nKEYWORD(MINUTE)\nKEYWORD(MOD)\nKEYWORD(MONTH)\nKEYWORD(MULTISET)\nKEYWORD(NEW)\nKEYWORD(NEXT)\nKEYWORD(NOT)\nKEYWORD(NTH_VALUE)\nKEYWORD(NTILE)\nKEYWORD(NULL)\nKEYWORD(NULLIF)\nKEYWORD(OCTET_LENGTH)\nKEYWORD(OFFSET)\nKEYWORD(ORDER)\nKEYWORD(OVERLAY)\nKEYWORD(PERCENT_RANK)\nKEYWORD(PERIOD)\nKEYWORD(POSITION)\nKEYWORD(POWER)\nKEYWORD(PREV)\nKEYWORD(RANK)\nKEYWORD(REGR_COUNT)\nKEYWORD(REGR_SXX)\nKEYWORD(REGR_SYY)\nKEYWORD(ROW)\nKEYWORD(ROW_NUMBER)\nKEYWORD(RUNNING)\nKEYWORD(SECOND)\nKEYWORD(SESSION_USER)\nKEYWORD(SPECIFIC)\nKEYWORD(SQRT)\nKEYWORD(STDDEV_POP)\nKEYWORD(STDDEV_SAMP)\nKEYWORD(STREAM)\nKEYWORD(SUBSTRING)\nKEYWORD(SUM)\nKEYWORD(SYSTEM_USER)\nKEYWORD(TIME)\nKEYWORD(TIMESTAMP)\nKEYWORD(TRANSLATE)\nKEYWORD(TRIM)\nKEYWORD(TRUE)\nKEYWORD(TRUNCATE)\nKEYWORD(UNION)\nKEYWORD(UNKNOWN)\nKEYWORD(UPPER)\nKEYWORD(USER)\nKEYWORD(VAR_POP)\nKEYWORD(VAR_SAMP)\nKEYWORD(YEAR)\n]TABLE(A)\n\u003e but was:\u003c...EPTNO)\nCOLUMN(NAME)\n[]TABLE(A)\n\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testOrderOffsetFetch",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select a from foo offset 1 fetch next 3 only];\n expected pattern [(?s).*Encountered \"only\" at .*];\n actual [Encountered \"\" at line 1, column 41.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 41\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 41 thru line 1 col 44]; sql [select a from foo offset 1 fetch next 3 ^only^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testExplicitTable",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [table 123];\n expected pattern [(?s)Encountered \"table 123\" at line 1, column 1\\.\n.*];\n actual [Encountered \"\" at line 1, column 1.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 1\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 1 thru line 1 col 5]; sql [^table^ 123]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testJoinUsing",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from a join b using () where c \u003d d];\n expected pattern [(?s).*Encountered \"[)]\" at line 1, column 31.*];\n actual [Encountered \"\" at line 1, column 31.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 31\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 31 thru line 1 col 31]; sql [select * from a join b using (^)^ where c \u003d d]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testSelectList4",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select from emp];\n expected pattern [(?s).*Encountered \"from\" at line .*];\n actual [Encountered \"\" at line 1, column 8.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 8\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 8 thru line 1 col 11]; sql [select ^from^ emp]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.CalciteSqlOperatorTest",
        "testMethod": "testTimestampDiff",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error did not match expected [(?s)Encountered \"CENTURY\" at .*] while parsing query [values (timestampdiff(CENTURY, timestamp \u00272014-02-24 12:42:25\u0027, timestamp \u00272614-02-24 12:42:25\u0027))]",
        "isError": true
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testParensInFrom",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select *from (unnest(x))];\n expected pattern [(?s)Encountered \"\\( unnest\" at .*];\n actual [Encountered \"\" at line 1, column 14.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 14\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 14 thru line 1 col 14]; sql [select *from ^(^unnest(x))]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testEmptyValues",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from (values())];\n expected pattern [(?s).*Encountered \"\\( \\)\" at .*];\n actual [Encountered \"\" at line 1, column 22.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 22\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 22 thru line 1 col 22]; sql [select * from (values^(^))]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "testMethod": "testJoin",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003cCATALOG(CATALOG)\n[KEYWORD(()\nKEYWORD(LATERAL)\nKEYWORD(TABLE)\nKEYWORD(UNNEST)\n]SCHEMA(CATALOG.CUSTO...\u003e but was:\u003cCATALOG(CATALOG)\n[]SCHEMA(CATALOG.CUSTO...\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testInsertValuesRawDefault",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [insert into emps values default];\n expected pattern [(?s).*Encountered \"values default\" at .*];\n actual [Encountered \"\" at line 1, column 18.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 18\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 18 thru line 1 col 23]; sql [insert into emps ^values^ default]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testTableStarColumnFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select emp.*.xx from emp];\n expected pattern [(?s).*Encountered \".\" .*];\n actual [Encountered \" \".\" \". \"\" at line 1, column 13.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"\\\\.\\\" \\\"\\\\. \\\"\\\" at line 1, column 13\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 13 thru line 1 col 13]; sql [select emp.*^.^xx from emp]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "testMethod": "testPartialIdentifier",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c...MPNO)\nCOLUMN(ENAME)\n[KEYWORD(ELEMENT)\nKEYWORD(EXISTS)\nKEYWORD(EXP)\nKEYWORD(EXTRACT)\n]TABLE(EMP)\n\u003e but was:\u003c...MPNO)\nCOLUMN(ENAME)\n[]TABLE(EMP)\n\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testMetadata",
        "failureName": "java.lang.AssertionError",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "testMethod": "testGroup",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c[KEYWORD(BY)\n]\u003e but was:\u003c[]\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testJdbcFunctionCall",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [{fn convert(1, sql_interval_year_to_day)}];\n expected pattern [(?s)Encountered \"sql_interval_year_to_day\" at line 1, column 16\\.\n.*];\n actual [Encountered \"\" at line 1, column 16.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 16\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 16 thru line 1 col 39]; sql [{fn convert(1, ^sql_interval_year_to_day^)}]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testExceptionCleanup",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select 0.5e1.1 from sales.emps];\n expected pattern [(?s).*Encountered \".1\" at line 1, column 13.\nWas expecting one of:\n    \u003cEOF\u003e \n    \"ORDER\" ...\n    \"LIMIT\" ...\n.*];\n actual [Encountered \" \u003cDECIMAL_NUMERIC_LITERAL\u003e \".1 \"\" at line 1, column 13.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \u003cDECIMAL_NUMERIC_LITERAL\u003e \\\"\\\\.1 \\\"\\\" at line 1, column 13\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 13 thru line 1 col 14]; sql [select 0.5e1^.1^ from sales.emps]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testWithFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [with femaleEmps as select * from emps where gender \u003d \u0027F\u0027\nselect deptno from femaleEmps];\n expected pattern [(?s)Encountered \"select\" at .*];\n actual [Encountered \" \"SELECT\" \"select \"\" at line 1, column 20.\nWas expecting:\n    \"(\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"SELECT\\\" \\\"select \\\"\\\" at line 1, column 20\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\(\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 20 thru line 1 col 25]; sql [with femaleEmps as ^select^ * from emps where gender \u003d \u0027F\u0027\nselect deptno from femaleEmps]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testSelectWithoutFromGroupByFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select 2+2 as x group by 1, 2];\n expected pattern [(?s).*Encountered \"group\" at line .*];\n actual [Encountered \" \"GROUP\" \"group \"\" at line 1, column 17.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"GROUP\\\" \\\"group \\\"\\\" at line 1, column 17\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 17 thru line 1 col 21]; sql [select 2+2 as x ^group^ by 1, 2]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testNullIf",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [1 + nullif + 3];\n expected pattern [(?s)Encountered \"nullif \\+\" at line 1, column 5.*];\n actual [Encountered \" \"NULLIF\" \"nullif \"\" at line 1, column 5.\nWas expecting one of:\n    \"DATE\" ...\n    \"FALSE\" ...\n    \"INTERVAL\" ...\n    \"NULL\" ...\n    \"TIME\" ...\n    \"TIMESTAMP\" ...\n    \"TRUE\" ...\n    \"UNKNOWN\" ...\n    \u003cUNSIGNED_INTEGER_LITERAL\u003e ...\n    \u003cAPPROX_NUMERIC_LITERAL\u003e ...\n    \u003cDECIMAL_NUMERIC_LITERAL\u003e ...\n    \u003cBINARY_STRING_LITERAL\u003e ...\n    \u003cQUOTED_STRING\u003e ...\n    \u003cPREFIXED_STRING_LITERAL\u003e ...\n    \u003cUNICODE_STRING_LITERAL\u003e ...\n    \u003cLBRACE_D\u003e ...\n    \u003cLBRACE_T\u003e ...\n    \u003cLBRACE_TS\u003e ...\n    \"+\" ...\n    \"-\" ...\n    \"+\" ...\n    \"-\" ...\n    \"+\" ...\n    \"-\" ...\n    \"+\" ...\n    \"-\" ...\n    \u003cUNSIGNED_INTEGER_LITERAL\u003e ...\n    \u003cDECIMAL_NUMERIC_LITERAL\u003e ...\n    \u003cAPPROX_NUMERIC_LITERAL\u003e ...\n    \u003cBINARY_STRING_LITERAL\u003e ...\n    \u003cPREFIXED_STRING_LITERAL\u003e ...\n    \u003cQUOTED_STRING\u003e ...\n    \u003cUNICODE_STRING_LITERAL\u003e ...\n    \"TRUE\" ...\n    \"FALSE\" ...\n    \"UNKNOWN\" ...\n    \"NULL\" ...\n    \u003cLBRACE_D\u003e ...\n    \u003cLBRACE_T\u003e ...\n    \u003cLBRACE_TS\u003e ...\n    \"DATE\" ...\n    \"TIME\" ...\n    \"TIMESTAMP\" ...\n    \"INTERVAL\" ...\n    \"+\" ...\n    \"-\" ...\n    \"+\" ...\n    \"-\" ...\n    \u003cUNSIGNED_INTEGER_LITERAL\u003e ...\n    \u003cDECIMAL_NUMERIC_LITERAL\u003e ...\n    \u003cAPPROX_NUMERIC_LITERAL\u003e ...\n    \u003cBINARY_STRING_LITERAL\u003e ...\n    \u003cPREFIXED_STRING_LITERAL\u003e ...\n    \u003cQUOTED_STRING\u003e ...\n    \u003cUNICODE_STRING_LITERAL\u003e ...\n    \"TRUE\" ...\n    \"FALSE\" ...\n    \"UNKNOWN\" ...\n    \"NULL\" ...\n    \u003cLBRACE_D\u003e ...\n    \u003cLBRACE_T\u003e ...\n    \u003cLBRACE_TS\u003e ...\n    \"DATE\" ...\n    \"TIME\" ...\n    \"TIMESTAMP\" ...\n    \"INTERVAL\" ...\n    \"+\" ...\n    \"-\" ...\n    \u003cUNSIGNED_INTEGER_LITERAL\u003e ...\n    \u003cDECIMAL_NUMERIC_LITERAL\u003e ...\n    \u003cAPPROX_NUMERIC_LITERAL\u003e ...\n    \u003cBINARY_STRING_LITERAL\u003e ...\n    \u003cPREFIXED_STRING_LITERAL\u003e ...\n    \u003cQUOTED_STRING\u003e ...\n    \u003cUNICODE_STRING_LITERAL\u003e ...\n    \"TRUE\" ...\n    \"FALSE\" ...\n    \"UNKNOWN\" ...\n    \"NULL\" ...\n    \u003cLBRACE_D\u003e ...\n    \u003cLBRACE_T\u003e ...\n    \u003cLBRACE_TS\u003e ...\n    \"DATE\" ...\n    \"TIME\" ...\n    \"TIMESTAMP\" ...\n    \"INTERVAL\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"NULLIF\\\" \\\"nullif \\\"\\\" at line 1, column 5\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \\\"DATE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"FALSE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"INTERVAL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"NULL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIME\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIMESTAMP\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TRUE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"UNKNOWN\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNSIGNED_INTEGER_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cAPPROX_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cDECIMAL_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cBINARY_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cQUOTED_STRING\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cPREFIXED_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNICODE_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_D\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_T\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_TS\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"\\\\+\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"-\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"\\\\+\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"-\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"\\\\+\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"-\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"\\\\+\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"-\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNSIGNED_INTEGER_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cDECIMAL_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cAPPROX_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cBINARY_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cPREFIXED_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cQUOTED_STRING\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNICODE_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TRUE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"FALSE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"UNKNOWN\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"NULL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_D\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_T\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_TS\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"DATE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIME\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIMESTAMP\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"INTERVAL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"\\\\+\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"-\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"\\\\+\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"-\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNSIGNED_INTEGER_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cDECIMAL_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cAPPROX_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cBINARY_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cPREFIXED_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cQUOTED_STRING\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNICODE_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TRUE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"FALSE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"UNKNOWN\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"NULL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_D\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_T\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_TS\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"DATE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIME\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIMESTAMP\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"INTERVAL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"\\\\+\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"-\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNSIGNED_INTEGER_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cDECIMAL_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cAPPROX_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cBINARY_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cPREFIXED_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cQUOTED_STRING\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNICODE_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TRUE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"FALSE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"UNKNOWN\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"NULL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_D\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_T\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_TS\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"DATE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIME\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIMESTAMP\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"INTERVAL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 5 thru line 1 col 10]; sql [1 + ^nullif^ + 3]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testHavingBeforeGroupFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select deptno from emp having count(*) \u003e 5 and deptno \u003c 4 group by deptno, emp];\n expected pattern [(?s).*Encountered \"group\" at .*];\n actual [Encountered \" \"GROUP\" \"group \"\" at line 1, column 59.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"GROUP\\\" \\\"group \\\"\\\" at line 1, column 59\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 59 thru line 1 col 63]; sql [select deptno from emp having count(*) \u003e 5 and deptno \u003c 4 ^group^ by deptno, emp]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcTest",
        "testMethod": "testSqlAdvisorNonExistingColumn",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: \"id\u003d*; names\u003d[*]; type\u003dKEYWORD\\nid\u003d; names\u003dnull; type\u003dMATCH\"\n     but: was \"id\u003d; names\u003dnull; type\u003dMATCH\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testWithNestedFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [with emp2 as (select * from emp)\nwith dept2 as (select * from dept)\nselect 1 as uno from emp, dept];\n expected pattern [(?s)Encountered \"with\" at .*];\n actual [Encountered \"\" at line 2, column 1.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 2, column 1\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [2 col 1 thru line 2 col 4]; sql [with emp2 as (select * from emp)\n^with^ dept2 as (select * from dept)\nselect 1 as uno from emp, dept]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testGroupByRollup",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select deptno from emp\ngroup by rollup (deptno, rollup(e, d))];\n expected pattern [(?s)Encountered \", rollup\" at .*];\n actual [Encountered \" \",\" \", \"\" at line 2, column 24.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\",\\\" \\\", \\\"\\\" at line 2, column 24\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [2 col 24 thru line 2 col 24]; sql [select deptno from emp\ngroup by rollup (deptno^,^ rollup(e, d))]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "testMethod": "testWhereList",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c[KEYWORD(()\nKEYWORD(+)\nKEYWORD(-)\nKEYWORD(?)\nKEYWORD(ABS)\nKEYWORD(ARRAY)\nKEYWORD(AVG)\nKEYWORD(CARDINALITY)\nKEYWORD(CASE)\nKEYWORD(CAST)\nKEYWORD(CEIL)\nKEYWORD(CEILING)\nKEYWORD(CHARACTER_LENGTH)\nKEYWORD(CHAR_LENGTH)\nKEYWORD(CLASSIFIER)\nKEYWORD(COALESCE)\nKEYWORD(COLLECT)\nKEYWORD(CONVERT)\nKEYWORD(COUNT)\nKEYWORD(COVAR_POP)\nKEYWORD(COVAR_SAMP)\nKEYWORD(CUME_DIST)\nKEYWORD(CURRENT)\nKEYWORD(CURRENT_CATALOG)\nKEYWORD(CURRENT_DATE)\nKEYWORD(CURRENT_DEFAULT_TRANSFORM_GROUP)\nKEYWORD(CURRENT_PATH)\nKEYWORD(CURRENT_ROLE)\nKEYWORD(CURRENT_SCHEMA)\nKEYWORD(CURRENT_TIME)\nKEYWORD(CURRENT_TIMESTAMP)\nKEYWORD(CURRENT_USER)\nKEYWORD(CURSOR)\nKEYWORD(DATE)\nKEYWORD(DENSE_RANK)\nKEYWORD(ELEMENT)\nKEYWORD(EXISTS)\nKEYWORD(EXP)\nKEYWORD(EXTRACT)\nKEYWORD(FALSE)\nKEYWORD(FIRST_VALUE)\nKEYWORD(FLOOR)\nKEYWORD(FUSION)\nKEYWORD(GROUPING)\nKEYWORD(HOUR)\nKEYWORD(INTERVAL)\nKEYWORD(LAG)\nKEYWORD(LAST_VALUE)\nKEYWORD(LEAD)\nKEYWORD(LN)\nKEYWORD(LOCALTIME)\nKEYWORD(LOCALTIMESTAMP)\nKEYWORD(LOWER)\nKEYWORD(MATCH_NUMBER)\nKEYWORD(MAX)\nKEYWORD(MIN)\nKEYWORD(MINUTE)\nKEYWORD(MOD)\nKEYWORD(MONTH)\nKEYWORD(MULTISET)\nKEYWORD(NEW)\nKEYWORD(NEXT)\nKEYWORD(NOT)\nKEYWORD(NTH_VALUE)\nKEYWORD(NTILE)\nKEYWORD(NULL)\nKEYWORD(NULLIF)\nKEYWORD(OCTET_LENGTH)\nKEYWORD(OVERLAY)\nKEYWORD(PERCENT_RANK)\nKEYWORD(PERIOD)\nKEYWORD(POSITION)\nKEYWORD(POWER)\nKEYWORD(PREV)\nKEYWORD(RANK)\nKEYWORD(REGR_COUNT)\nKEYWORD(REGR_SXX)\nKEYWORD(REGR_SYY)\nKEYWORD(ROW)\nKEYWORD(ROW_NUMBER)\nKEYWORD(RUNNING)\nKEYWORD(SECOND)\nKEYWORD(SESSION_USER)\nKEYWORD(SPECIFIC)\nKEYWORD(SQRT)\nKEYWORD(STDDEV_POP)\nKEYWORD(STDDEV_SAMP)\nKEYWORD(SUBSTRING)\nKEYWORD(SUM)\nKEYWORD(SYSTEM_USER)\nKEYWORD(TIME)\nKEYWORD(TIMESTAMP)\nKEYWORD(TRANSLATE)\nKEYWORD(TRIM)\nKEYWORD(TRUE)\nKEYWORD(TRUNCATE)\nKEYWORD(UNKNOWN)\nKEYWORD(UPPER)\nKEYWORD(USER)\nKEYWORD(VAR_POP)\nKEYWORD(VAR_SAMP)\nKEYWORD(YEAR)\n]TABLE(A)\nTABLE(B)\n\u003e but was:\u003c[]TABLE(A)\nTABLE(B)\n\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testInListEmptyFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from emp where deptno in () and gender \u003d \u0027F\u0027];\n expected pattern [(?s).*Encountered \"\\)\" at line 1, column 36\\..*];\n actual [Encountered \"\" at line 1, column 36.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 36\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 36 thru line 1 col 36]; sql [select * from emp where deptno in (^)^ and gender \u003d \u0027F\u0027]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testWindowSpec",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select count(z) over w as foo \nfrom Bids window w as (partition by y order by x partition by y)];\n expected pattern [(?s).*Encountered \"partition\".*];\n actual [Encountered \" \"PARTITION\" \"partition \"\" at line 2, column 50.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"PARTITION\\\" \\\"partition \\\"\\\" at line 2, column 50\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [2 col 50 thru line 2 col 58]; sql [select count(z) over w as foo \nfrom Bids window w as (partition by y order by x ^partition^ by y)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.SqlValidatorTest",
        "testMethod": "testQuotedFunction",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error did not match expected [(?s).*Encountered \"FROM\" at .*] while parsing query [values (\"TRIM\"(\u0027b\u0027 FROM \u0027a\u0027))]",
        "isError": true
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "testMethod": "testSubQueryInWhere",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c...OLUMN(NAME)\nKEYWORD([()\nKEYWORD(+)\nKEYWORD(-)\nKEYWORD(?)\nKEYWORD(ABS)\nKEYWORD(ARRAY)\nKEYWORD(AVG)\nKEYWORD(CARDINALITY)\nKEYWORD(CASE)\nKEYWORD(CAST)\nKEYWORD(CEIL)\nKEYWORD(CEILING)\nKEYWORD(CHARACTER_LENGTH)\nKEYWORD(CHAR_LENGTH)\nKEYWORD(CLASSIFIER)\nKEYWORD(COALESCE)\nKEYWORD(COLLECT)\nKEYWORD(CONVERT)\nKEYWORD(COUNT)\nKEYWORD(COVAR_POP)\nKEYWORD(COVAR_SAMP)\nKEYWORD(CUME_DIST)\nKEYWORD(CURRENT)\nKEYWORD(CURRENT_CATALOG)\nKEYWORD(CURRENT_DATE)\nKEYWORD(CURRENT_DEFAULT_TRANSFORM_GROUP)\nKEYWORD(CURRENT_PATH)\nKEYWORD(CURRENT_ROLE)\nKEYWORD(CURRENT_SCHEMA)\nKEYWORD(CURRENT_TIME)\nKEYWORD(CURRENT_TIMESTAMP)\nKEYWORD(CURRENT_USER)\nKEYWORD(CURSOR)\nKEYWORD(DATE)\nKEYWORD(DENSE_RANK)\nKEYWORD(ELEMENT)\nKEYWORD(EXISTS)\nKEYWORD(EXP)\nKEYWORD(EXTRACT)\nKEYWORD(FALSE)\nKEYWORD(FIRST_VALUE)\nKEYWORD(FLOOR)\nKEYWORD(FUSION)\nKEYWORD(GROUPING)\nKEYWORD(HOUR)\nKEYWORD(INTERVAL)\nKEYWORD(LAG)\nKEYWORD(LAST_VALUE)\nKEYWORD(LEAD)\nKEYWORD(LN)\nKEYWORD(LOCALTIME)\nKEYWORD(LOCALTIMESTAMP)\nKEYWORD(LOWER)\nKEYWORD(MATCH_NUMBER)\nKEYWORD(MAX)\nKEYWORD(MIN)\nKEYWORD(MINUTE)\nKEYWORD(MOD)\nKEYWORD(MONTH)\nKEYWORD(MULTISET)\nKEYWORD(NEW)\nKEYWORD(NEXT)\nKEYWORD(NOT)\nKEYWORD(NTH_VALUE)\nKEYWORD(NTILE)\nKEYWORD(NULL)\nKEYWORD(NULLIF)\nKEYWORD(OCTET_LENGTH)\nKEYWORD(OVERLAY)\nKEYWORD(PERCENT_RANK)\nKEYWORD(PERIOD)\nKEYWORD(POSITION)\nKEYWORD(POWER)\nKEYWORD(PREV)\nKEYWORD(RANK)\nKEYWORD(REGR_COUNT)\nKEYWORD(REGR_SXX)\nKEYWORD(REGR_SYY)\nKEYWORD(ROW)\nKEYWORD(ROW_NUMBER)\nKEYWORD(RUNNING)\nKEYWORD(SECOND)\nKEYWORD(SESSION_USER)\nKEYWORD(SPECIFIC)\nKEYWORD(SQRT)\nKEYWORD(STDDEV_POP)\nKEYWORD(STDDEV_SAMP)\nKEYWORD(SUBSTRING)\nKEYWORD(SUM)\nKEYWORD(SYSTEM_USER)\nKEYWORD(TIME)\nKEYWORD(TIMESTAMP)\nKEYWORD(TRANSLATE)\nKEYWORD(TRIM)\nKEYWORD(TRUE)\nKEYWORD(TRUNCATE)\nKEYWORD(UNKNOWN)\nKEYWORD(UPPER)\nKEYWORD(USER)\nKEYWORD(VAR_POP)\nKEYWORD(VAR_SAMP)\nKEYWORD(YEAR])\nTABLE(A)\nTABLE(B)\n\u003e but was:\u003c...OLUMN(NAME)\nKEYWORD([)])\nTABLE(A)\nTABLE(B)\n\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testNullIf",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [1 + nullif + 3];\n expected pattern [(?s)Encountered \"nullif \\+\" at line 1, column 5.*];\n actual [Encountered \" \"NULLIF\" \"nullif \"\" at line 1, column 5.\nWas expecting one of:\n    \"DATE\" ...\n    \"FALSE\" ...\n    \"INTERVAL\" ...\n    \"NULL\" ...\n    \"TIME\" ...\n    \"TIMESTAMP\" ...\n    \"TRUE\" ...\n    \"UNKNOWN\" ...\n    \u003cUNSIGNED_INTEGER_LITERAL\u003e ...\n    \u003cAPPROX_NUMERIC_LITERAL\u003e ...\n    \u003cDECIMAL_NUMERIC_LITERAL\u003e ...\n    \u003cBINARY_STRING_LITERAL\u003e ...\n    \u003cQUOTED_STRING\u003e ...\n    \u003cPREFIXED_STRING_LITERAL\u003e ...\n    \u003cUNICODE_STRING_LITERAL\u003e ...\n    \u003cLBRACE_D\u003e ...\n    \u003cLBRACE_T\u003e ...\n    \u003cLBRACE_TS\u003e ...\n    \"+\" ...\n    \"-\" ...\n    \"+\" ...\n    \"-\" ...\n    \"+\" ...\n    \"-\" ...\n    \"+\" ...\n    \"-\" ...\n    \u003cUNSIGNED_INTEGER_LITERAL\u003e ...\n    \u003cDECIMAL_NUMERIC_LITERAL\u003e ...\n    \u003cAPPROX_NUMERIC_LITERAL\u003e ...\n    \u003cBINARY_STRING_LITERAL\u003e ...\n    \u003cPREFIXED_STRING_LITERAL\u003e ...\n    \u003cQUOTED_STRING\u003e ...\n    \u003cUNICODE_STRING_LITERAL\u003e ...\n    \"TRUE\" ...\n    \"FALSE\" ...\n    \"UNKNOWN\" ...\n    \"NULL\" ...\n    \u003cLBRACE_D\u003e ...\n    \u003cLBRACE_T\u003e ...\n    \u003cLBRACE_TS\u003e ...\n    \"DATE\" ...\n    \"TIME\" ...\n    \"TIMESTAMP\" ...\n    \"INTERVAL\" ...\n    \"+\" ...\n    \"-\" ...\n    \"+\" ...\n    \"-\" ...\n    \u003cUNSIGNED_INTEGER_LITERAL\u003e ...\n    \u003cDECIMAL_NUMERIC_LITERAL\u003e ...\n    \u003cAPPROX_NUMERIC_LITERAL\u003e ...\n    \u003cBINARY_STRING_LITERAL\u003e ...\n    \u003cPREFIXED_STRING_LITERAL\u003e ...\n    \u003cQUOTED_STRING\u003e ...\n    \u003cUNICODE_STRING_LITERAL\u003e ...\n    \"TRUE\" ...\n    \"FALSE\" ...\n    \"UNKNOWN\" ...\n    \"NULL\" ...\n    \u003cLBRACE_D\u003e ...\n    \u003cLBRACE_T\u003e ...\n    \u003cLBRACE_TS\u003e ...\n    \"DATE\" ...\n    \"TIME\" ...\n    \"TIMESTAMP\" ...\n    \"INTERVAL\" ...\n    \"+\" ...\n    \"-\" ...\n    \u003cUNSIGNED_INTEGER_LITERAL\u003e ...\n    \u003cDECIMAL_NUMERIC_LITERAL\u003e ...\n    \u003cAPPROX_NUMERIC_LITERAL\u003e ...\n    \u003cBINARY_STRING_LITERAL\u003e ...\n    \u003cPREFIXED_STRING_LITERAL\u003e ...\n    \u003cQUOTED_STRING\u003e ...\n    \u003cUNICODE_STRING_LITERAL\u003e ...\n    \"TRUE\" ...\n    \"FALSE\" ...\n    \"UNKNOWN\" ...\n    \"NULL\" ...\n    \u003cLBRACE_D\u003e ...\n    \u003cLBRACE_T\u003e ...\n    \u003cLBRACE_TS\u003e ...\n    \"DATE\" ...\n    \"TIME\" ...\n    \"TIMESTAMP\" ...\n    \"INTERVAL\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"NULLIF\\\" \\\"nullif \\\"\\\" at line 1, column 5\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \\\"DATE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"FALSE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"INTERVAL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"NULL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIME\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIMESTAMP\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TRUE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"UNKNOWN\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNSIGNED_INTEGER_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cAPPROX_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cDECIMAL_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cBINARY_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cQUOTED_STRING\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cPREFIXED_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNICODE_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_D\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_T\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_TS\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"\\\\+\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"-\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"\\\\+\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"-\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"\\\\+\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"-\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"\\\\+\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"-\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNSIGNED_INTEGER_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cDECIMAL_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cAPPROX_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cBINARY_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cPREFIXED_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cQUOTED_STRING\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNICODE_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TRUE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"FALSE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"UNKNOWN\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"NULL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_D\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_T\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_TS\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"DATE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIME\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIMESTAMP\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"INTERVAL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"\\\\+\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"-\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"\\\\+\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"-\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNSIGNED_INTEGER_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cDECIMAL_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cAPPROX_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cBINARY_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cPREFIXED_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cQUOTED_STRING\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNICODE_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TRUE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"FALSE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"UNKNOWN\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"NULL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_D\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_T\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_TS\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"DATE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIME\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIMESTAMP\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"INTERVAL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"\\\\+\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"-\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNSIGNED_INTEGER_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cDECIMAL_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cAPPROX_NUMERIC_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cBINARY_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cPREFIXED_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cQUOTED_STRING\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cUNICODE_STRING_LITERAL\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TRUE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"FALSE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"UNKNOWN\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"NULL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_D\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_T\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \u003cLBRACE_TS\u003e \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"DATE\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIME\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"TIMESTAMP\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \\\"INTERVAL\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 5 thru line 1 col 10]; sql [1 + ^nullif^ + 3]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.SqlValidatorTest",
        "testMethod": "testCountCompositeFunction",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error did not match expected [(?s).*Encountered \", \\*\" at .*] while parsing query [select count(deptno, *) from emp]",
        "isError": true
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testExplicitTable",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [table 123];\n expected pattern [(?s)Encountered \"table 123\" at line 1, column 1\\.\n.*];\n actual [Encountered \"\" at line 1, column 1.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 1\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 1 thru line 1 col 5]; sql [^table^ 123]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testHexAndBinaryStringFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select x\u00271\u0027 x\u00272\u0027 from t];\n expected pattern [(?s).*Encountered .x.*2.* at line 1, column 13.*];\n actual [Encountered \" \u003cBINARY_STRING_LITERAL\u003e \"x\\\u00272\\\u0027 \"\" at line 1, column 13.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \u003cBINARY_STRING_LITERAL\u003e \\\"x\\\\\u00272\\\\\u0027 \\\"\\\" at line 1, column 13\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 13 thru line 1 col 16]; sql [select x\u00271\u0027 ^x\u00272\u0027^ from t]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlUnParserTest",
        "testMethod": "testMetadata",
        "failureName": "java.lang.AssertionError",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testCaseExpression",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [case x when 2, 4 then 3 when then 5 else 4 end];\n expected pattern [(?s)Encountered \"when then\" at .*];\n actual [Encountered \" \"WHEN\" \"when \"\" at line 1, column 25.\nWas expecting:\n    \"END\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"WHEN\\\" \\\"when \\\"\\\" at line 1, column 25\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"END\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 25 thru line 1 col 28]; sql [case x when 2, 4 then 3 ^when^ then 5 else 4 end]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testDescribeStatement",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [describe explain plan for select * from emps];\n expected pattern [(?s).*Encountered \"describe explain\" at .*];\n actual [Encountered \"\" at line 1, column 1.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 1\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 1 thru line 1 col 8]; sql [^describe^ explain plan for select * from emps]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testSelectWithoutFromGroupByFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select 2+2 as x group by 1, 2];\n expected pattern [(?s).*Encountered \"group\" at line .*];\n actual [Encountered \" \"GROUP\" \"group \"\" at line 1, column 17.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"GROUP\\\" \\\"group \\\"\\\" at line 1, column 17\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 17 thru line 1 col 21]; sql [select 2+2 as x ^group^ by 1, 2]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testWindowReference",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [sum(sal) over (w w1 partition by deptno)];\n expected pattern [(?s)Encountered \"w1\" at.*];\n actual [Encountered \" \u003cIDENTIFIER\u003e \"w1 \"\" at line 1, column 18.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \u003cIDENTIFIER\u003e \\\"w1 \\\"\\\" at line 1, column 18\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 18 thru line 1 col 19]; sql [sum(sal) over (w ^w1^ partition by deptno)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testFunctionNamedArgument",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [foo(x.y \u003d\u003e 1)];\n expected pattern [(?s).*Encountered \"\u003d\u003e\" at .*];\n actual [Encountered \" \"\u003d\u003e\" \"\u003d\u003e \"\" at line 1, column 9.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"\u003d\u003e\\\" \\\"\u003d\u003e \\\"\\\" at line 1, column 9\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 9 thru line 1 col 10]; sql [foo(x.y ^\u003d\u003e^ 1)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testExtract",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [extract(day to second from x)];\n expected pattern [(?s)Encountered \"to\".*];\n actual [Encountered \" \"TO\" \"to \"\" at line 1, column 13.\nWas expecting:\n    \"FROM\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"TO\\\" \\\"to \\\"\\\" at line 1, column 13\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"FROM\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 13 thru line 1 col 14]; sql [extract(day ^to^ second from x)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testWindowReference",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [sum(sal) over (w w1 partition by deptno)];\n expected pattern [(?s)Encountered \"w1\" at.*];\n actual [Encountered \" \u003cIDENTIFIER\u003e \"w1 \"\" at line 1, column 18.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \u003cIDENTIFIER\u003e \\\"w1 \\\"\\\" at line 1, column 18\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 18 thru line 1 col 19]; sql [sum(sal) over (w ^w1^ partition by deptno)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testWindowSpec",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select count(z) over w as foo \nfrom Bids window w as (partition by y order by x partition by y)];\n expected pattern [(?s).*Encountered \"partition\".*];\n actual [Encountered \" \"PARTITION\" \"partition \"\" at line 2, column 50.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"PARTITION\\\" \\\"partition \\\"\\\" at line 2, column 50\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [2 col 50 thru line 2 col 58]; sql [select count(z) over w as foo \nfrom Bids window w as (partition by y order by x ^partition^ by y)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testLimitUnion",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select a from t limit 10\nunion all\nselect b from t order by b];\n expected pattern [(?s).*Encountered \"union\" at .*];\n actual [Encountered \" \"UNION\" \"union \"\" at line 2, column 1.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"UNION\\\" \\\"union \\\"\\\" at line 2, column 1\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [2 col 1 thru line 2 col 5]; sql [select a from t limit 10\n^union^ all\nselect b from t order by b]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testMetadata",
        "failureName": "java.lang.AssertionError",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testFromValuesWithoutParens",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select 1 from values(\u0027x\u0027)];\n expected pattern [(?s)Encountered \"from values\" at line 1, column 10\\.\nWas expecting one of:\n    \u003cEOF\u003e \n    \"ORDER\" \\.\\.\\.\n    \"LIMIT\" \\.\\.\\.\n.*    \"FROM\" \u003cIDENTIFIER\u003e \\.\\.\\.\n    \"FROM\" \u003cQUOTED_IDENTIFIER\u003e \\.\\.\\.\n.*];\n actual [Encountered \" \"FROM\" \"from \"\" at line 1, column 10.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"FROM\\\" \\\"from \\\"\\\" at line 1, column 10\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 10 thru line 1 col 13]; sql [select 1 ^from^ values(\u0027x\u0027)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.SqlValidatorTest",
        "testMethod": "testStarDotIdFails",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error did not match expected [(?s).*Encountered \".\" at .*] while parsing query [select emp.*.foo from emp]",
        "isError": true
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testUnparseableIntervalQualifiers",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [interval \u00271\u0027];\n expected pattern [Encountered \"\u003cEOF\u003e\" at line 1, column 12\\.\nWas expecting one of:\n    \"YEAR\" \\.\\.\\.\n    \"MONTH\" \\.\\.\\.\n    \"DAY\" \\.\\.\\.\n    \"HOUR\" \\.\\.\\.\n    \"MINUTE\" \\.\\.\\.\n    \"SECOND\" \\.\\.\\.\n    ];\n actual [Encountered \"\" at line 1, column 12.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 12\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 12 thru line 1 col 12]; sql [interval \u00271^\u0027^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testIntervalOperators",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [interval \u0027wael was here\u0027];\n expected pattern [(?s)Encountered \"\u003cEOF\u003e\".*];\n actual [Encountered \"\" at line 1, column 24.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 24\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 24 thru line 1 col 24]; sql [interval \u0027wael was here^\u0027^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testSelectFromBareExplicitTableFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from table emp];\n expected pattern [(?s).*Encountered \"table emp\" at .*];\n actual [Encountered \"\" at line 1, column 15.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 15\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 15 thru line 1 col 19]; sql [select * from ^table^ emp]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testInnerOuterJoinFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from a inner outer join b];\n expected pattern [(?s).*Encountered \"inner outer\" at line 1, column 17.*];\n actual [Encountered \" \"INNER\" \"inner \"\" at line 1, column 17.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"INNER\\\" \\\"inner \\\"\\\" at line 1, column 17\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 17 thru line 1 col 21]; sql [select * from a ^inner^ outer join b]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testGenerateKeyWords",
        "failureName": "java.lang.AssertionError",
        "detail": "Mismatch between /root/workspace/risdenk/calcite/423386498/core/target/surefire/reference.md and /root/workspace/risdenk/calcite/423386498/site/_docs/reference.md:\n299c299\n\u003c **A**,\n---\n\u003e A,\n301,306c301,306\n\u003c **ABSOLUTE**,\n\u003c **ACTION**,\n\u003c **ADA**,\n\u003c **ADD**,\n\u003c **ADMIN**,\n\u003c **AFTER**,\n---\n\u003e ABSOLUTE,\n\u003e ACTION,\n\u003e ADA,\n\u003e ADD,\n\u003e ADMIN,\n\u003e AFTER,\n311c311\n\u003c **ALWAYS**,\n---\n\u003e ALWAYS,\n314c314\n\u003c **APPLY**,\n---\n\u003e APPLY,\n319c319\n\u003c **ASC**,\n---\n\u003e ASC,\n321,322c321,322\n\u003c **ASSERTION**,\n\u003c **ASSIGNMENT**,\n---\n\u003e ASSERTION,\n\u003e ASSIGNMENT,\n326,327c326,327\n\u003c **ATTRIBUTE**,\n\u003c **ATTRIBUTES**,\n---\n\u003e ATTRIBUTE,\n\u003e ATTRIBUTES,\n330c330\n\u003c **BEFORE**,\n---\n\u003e BEFORE,\n334c334\n\u003c **BERNOULLI**,\n---\n\u003e BERNOULLI,\n342c342\n\u003c **BREADTH**,\n---\n\u003e BREADTH,\n344c344\n\u003c **C**,\n---\n\u003e C,\n348c348\n\u003c **CASCADE**,\n---\n\u003e CASCADE,\n352,353c352,353\n\u003c **CATALOG**,\n\u003c **CATALOG_NAME**,\n---\n\u003e CATALOG,\n\u003e CATALOG_NAME,\n356,357c356,357\n\u003c **CENTURY**,\n\u003c **CHAIN**,\n---\n\u003e CENTURY,\n\u003e CHAIN,\n360,361c360,361\n\u003c **CHARACTERISTICS**,\n\u003c **CHARACTERS**,\n---\n\u003e CHARACTERISTICS,\n\u003e CHARACTERS,\n363,365c363,365\n\u003c **CHARACTER_SET_CATALOG**,\n\u003c **CHARACTER_SET_NAME**,\n\u003c **CHARACTER_SET_SCHEMA**,\n---\n\u003e CHARACTER_SET_CATALOG,\n\u003e CHARACTER_SET_NAME,\n\u003e CHARACTER_SET_SCHEMA,\n369c369\n\u003c **CLASS_ORIGIN**,\n---\n\u003e CLASS_ORIGIN,\n373c373\n\u003c **COBOL**,\n---\n\u003e COBOL,\n375,378c375,378\n\u003c **COLLATION**,\n\u003c **COLLATION_CATALOG**,\n\u003c **COLLATION_NAME**,\n\u003c **COLLATION_SCHEMA**,\n---\n\u003e COLLATION,\n\u003e COLLATION_CATALOG,\n\u003e COLLATION_NAME,\n\u003e COLLATION_SCHEMA,\n381,383c381,383\n\u003c **COLUMN_NAME**,\n\u003c **COMMAND_FUNCTION**,\n\u003c **COMMAND_FUNCTION_CODE**,\n---\n\u003e COLUMN_NAME,\n\u003e COMMAND_FUNCTION,\n\u003e COMMAND_FUNCTION_CODE,\n385c385\n\u003c **COMMITTED**,\n---\n\u003e COMMITTED,\n387c387\n\u003c **CONDITION_NUMBER**,\n---\n\u003e CONDITION_NUMBER,\n389,390c389,390\n\u003c **CONNECTION**,\n\u003c **CONNECTION_NAME**,\n---\n\u003e CONNECTION,\n\u003e CONNECTION_NAME,\n392,396c392,396\n\u003c **CONSTRAINTS**,\n\u003c **CONSTRAINT_CATALOG**,\n\u003c **CONSTRAINT_NAME**,\n\u003c **CONSTRAINT_SCHEMA**,\n\u003c **CONSTRUCTOR**,\n---\n\u003e CONSTRAINTS,\n\u003e CONSTRAINT_CATALOG,\n\u003e CONSTRAINT_NAME,\n\u003e CONSTRAINT_SCHEMA,\n\u003e CONSTRUCTOR,\n398c398\n\u003c **CONTINUE**,\n---\n\u003e CONTINUE,\n422c422\n\u003c **CURSOR_NAME**,\n---\n\u003e CURSOR_NAME,\n424,425c424,425\n\u003c **DATA**,\n\u003c **DATABASE**,\n---\n\u003e DATA,\n\u003e DATABASE,\n427,428c427,428\n\u003c **DATETIME_INTERVAL_CODE**,\n\u003c **DATETIME_INTERVAL_PRECISION**,\n---\n\u003e DATETIME_INTERVAL_CODE,\n\u003e DATETIME_INTERVAL_PRECISION,\n432c432\n\u003c **DECADE**,\n---\n\u003e DECADE,\n436,438c436,438\n\u003c **DEFAULTS**,\n\u003c **DEFERRABLE**,\n\u003c **DEFERRED**,\n---\n\u003e DEFAULTS,\n\u003e DEFERRABLE,\n\u003e DEFERRED,\n440,442c440,442\n\u003c **DEFINED**,\n\u003c **DEFINER**,\n\u003c **DEGREE**,\n---\n\u003e DEFINED,\n\u003e DEFINER,\n\u003e DEGREE,\n445c445\n\u003c **DEPTH**,\n---\n\u003e DEPTH,\n447,448c447,448\n\u003c **DERIVED**,\n\u003c **DESC**,\n---\n\u003e DERIVED,\n\u003e DESC,\n450,451c450,451\n\u003c **DESCRIPTION**,\n\u003c **DESCRIPTOR**,\n---\n\u003e DESCRIPTION,\n\u003e DESCRIPTOR,\n453c453\n\u003c **DIAGNOSTICS**,\n---\n\u003e DIAGNOSTICS,\n456c456\n\u003c **DISPATCH**,\n---\n\u003e DISPATCH,\n458c458\n\u003c **DOMAIN**,\n---\n\u003e DOMAIN,\n460,461c460,461\n\u003c **DOW**,\n\u003c **DOY**,\n---\n\u003e DOW,\n\u003e DOY,\n464,465c464,465\n\u003c **DYNAMIC_FUNCTION**,\n\u003c **DYNAMIC_FUNCTION_CODE**,\n---\n\u003e DYNAMIC_FUNCTION,\n\u003e DYNAMIC_FUNCTION_CODE,\n474c474\n\u003c **EPOCH**,\n---\n\u003e EPOCH,\n479,481c479,481\n\u003c **EXCEPTION**,\n\u003c **EXCLUDE**,\n\u003c **EXCLUDING**,\n---\n\u003e EXCEPTION,\n\u003e EXCLUDE,\n\u003e EXCLUDING,\n493,494c493,494\n\u003c **FINAL**,\n\u003c **FIRST**,\n---\n\u003e FINAL,\n\u003e FIRST,\n498c498\n\u003c **FOLLOWING**,\n---\n\u003e FOLLOWING,\n501,503c501,503\n\u003c **FORTRAN**,\n\u003c **FOUND**,\n\u003c **FRAC_SECOND**,\n---\n\u003e FORTRAN,\n\u003e FOUND,\n\u003e FRAC_SECOND,\n510,513c510,513\n\u003c **G**,\n\u003c **GENERAL**,\n\u003c **GENERATED**,\n\u003c **GEOMETRY**,\n---\n\u003e G,\n\u003e GENERAL,\n\u003e GENERATED,\n\u003e GEOMETRY,\n516,517c516,517\n\u003c **GO**,\n\u003c **GOTO**,\n---\n\u003e GO,\n\u003e GOTO,\n519c519\n\u003c **GRANTED**,\n---\n\u003e GRANTED,\n524c524\n\u003c **HIERARCHY**,\n---\n\u003e HIERARCHY,\n528,530c528,530\n\u003c **IMMEDIATE**,\n\u003c **IMMEDIATELY**,\n\u003c **IMPLEMENTATION**,\n---\n\u003e IMMEDIATE,\n\u003e IMMEDIATELY,\n\u003e IMPLEMENTATION,\n533,534c533,534\n\u003c **INCLUDING**,\n\u003c **INCREMENT**,\n---\n\u003e INCLUDING,\n\u003e INCREMENT,\n537c537\n\u003c **INITIALLY**,\n---\n\u003e INITIALLY,\n540c540\n\u003c **INPUT**,\n---\n\u003e INPUT,\n543,544c543,544\n\u003c **INSTANCE**,\n\u003c **INSTANTIABLE**,\n---\n\u003e INSTANCE,\n\u003e INSTANTIABLE,\n551c551\n\u003c **INVOKER**,\n---\n\u003e INVOKER,\n553,556c553,556\n\u003c **ISODOW**,\n\u003c **ISOLATION**,\n\u003c **ISOYEAR**,\n\u003c **JAVA**,\n---\n\u003e ISODOW,\n\u003e ISOLATION,\n\u003e ISOYEAR,\n\u003e JAVA,\n558,563c558,563\n\u003c **JSON**,\n\u003c **K**,\n\u003c **KEY**,\n\u003c **KEY_MEMBER**,\n\u003c **KEY_TYPE**,\n\u003c **LABEL**,\n---\n\u003e JSON,\n\u003e K,\n\u003e KEY,\n\u003e KEY_MEMBER,\n\u003e KEY_TYPE,\n\u003e LABEL,\n567c567\n\u003c **LAST**,\n---\n\u003e LAST,\n573,575c573,575\n\u003c **LENGTH**,\n\u003c **LEVEL**,\n\u003c **LIBRARY**,\n---\n\u003e LENGTH,\n\u003e LEVEL,\n\u003e LIBRARY,\n583c583\n\u003c **LOCATOR**,\n---\n\u003e LOCATOR,\n585,586c585,586\n\u003c **M**,\n\u003c **MAP**,\n---\n\u003e M,\n\u003e MAP,\n588c588\n\u003c **MATCHED**,\n---\n\u003e MATCHED,\n593c593\n\u003c **MAXVALUE**,\n---\n\u003e MAXVALUE,\n597,599c597,599\n\u003c **MESSAGE_LENGTH**,\n\u003c **MESSAGE_OCTET_LENGTH**,\n\u003c **MESSAGE_TEXT**,\n---\n\u003e MESSAGE_LENGTH,\n\u003e MESSAGE_OCTET_LENGTH,\n\u003e MESSAGE_TEXT,\n601,603c601,603\n\u003c **MICROSECOND**,\n\u003c **MILLENNIUM**,\n\u003c **MILLISECOND**,\n---\n\u003e MICROSECOND,\n\u003e MILLENNIUM,\n\u003e MILLISECOND,\n607c607\n\u003c **MINVALUE**,\n---\n\u003e MINVALUE,\n612c612\n\u003c **MORE**,\n---\n\u003e MORE,\n614,617c614,617\n\u003c **MUMPS**,\n\u003c **NAME**,\n\u003c **NAMES**,\n\u003c **NANOSECOND**,\n---\n\u003e MUMPS,\n\u003e NAME,\n\u003e NAMES,\n\u003e NANOSECOND,\n622c622\n\u003c **NESTING**,\n---\n\u003e NESTING,\n628c628\n\u003c **NORMALIZED**,\n---\n\u003e NORMALIZED,\n633c633\n\u003c **NULLABLE**,\n---\n\u003e NULLABLE,\n635,636c635,636\n\u003c **NULLS**,\n\u003c **NUMBER**,\n---\n\u003e NULLS,\n\u003e NUMBER,\n638c638\n\u003c **OBJECT**,\n---\n\u003e OBJECT,\n640c640\n\u003c **OCTETS**,\n---\n\u003e OCTETS,\n650,651c650,651\n\u003c **OPTION**,\n\u003c **OPTIONS**,\n---\n\u003e OPTION,\n\u003e OPTIONS,\n654,656c654,656\n\u003c **ORDERING**,\n\u003c **ORDINALITY**,\n\u003c **OTHERS**,\n---\n\u003e ORDERING,\n\u003e ORDINALITY,\n\u003e OTHERS,\n659c659\n\u003c **OUTPUT**,\n---\n\u003e OUTPUT,\n663,664c663,664\n\u003c **OVERRIDING**,\n\u003c **PAD**,\n---\n\u003e OVERRIDING,\n\u003e PAD,\n666,672c666,672\n\u003c **PARAMETER_MODE**,\n\u003c **PARAMETER_NAME**,\n\u003c **PARAMETER_ORDINAL_POSITION**,\n\u003c **PARAMETER_SPECIFIC_CATALOG**,\n\u003c **PARAMETER_SPECIFIC_NAME**,\n\u003c **PARAMETER_SPECIFIC_SCHEMA**,\n\u003c **PARTIAL**,\n---\n\u003e PARAMETER_MODE,\n\u003e PARAMETER_NAME,\n\u003e PARAMETER_ORDINAL_POSITION,\n\u003e PARAMETER_SPECIFIC_CATALOG,\n\u003e PARAMETER_SPECIFIC_NAME,\n\u003e PARAMETER_SPECIFIC_SCHEMA,\n\u003e PARTIAL,\n674,677c674,677\n\u003c **PASCAL**,\n\u003c **PASSTHROUGH**,\n\u003c **PAST**,\n\u003c **PATH**,\n---\n\u003e PASCAL,\n\u003e PASSTHROUGH,\n\u003e PAST,\n\u003e PATH,\n686,688c686,688\n\u003c **PLACING**,\n\u003c **PLAN**,\n\u003c **PLI**,\n---\n\u003e PLACING,\n\u003e PLAN,\n\u003e PLI,\n694c694\n\u003c **PRECEDING**,\n---\n\u003e PRECEDING,\n697c697\n\u003c **PRESERVE**,\n---\n\u003e PRESERVE,\n700,701c700,701\n\u003c **PRIOR**,\n\u003c **PRIVILEGES**,\n---\n\u003e PRIOR,\n\u003e PRIVILEGES,\n703,704c703,704\n\u003c **PUBLIC**,\n\u003c **QUARTER**,\n---\n\u003e PUBLIC,\n\u003e QUARTER,\n707c707\n\u003c **READ**,\n---\n\u003e READ,\n723c723\n\u003c **RELATIVE**,\n---\n\u003e RELATIVE,\n725,726c725,726\n\u003c **REPEATABLE**,\n\u003c **REPLACE**,\n---\n\u003e REPEATABLE,\n\u003e REPLACE,\n728,729c728,729\n\u003c **RESTART**,\n\u003c **RESTRICT**,\n---\n\u003e RESTART,\n\u003e RESTRICT,\n732,735c732,735\n\u003c **RETURNED_CARDINALITY**,\n\u003c **RETURNED_LENGTH**,\n\u003c **RETURNED_OCTET_LENGTH**,\n\u003c **RETURNED_SQLSTATE**,\n---\n\u003e RETURNED_CARDINALITY,\n\u003e RETURNED_LENGTH,\n\u003e RETURNED_OCTET_LENGTH,\n\u003e RETURNED_SQLSTATE,\n739c739\n\u003c **ROLE**,\n---\n\u003e ROLE,\n742,745c742,745\n\u003c **ROUTINE**,\n\u003c **ROUTINE_CATALOG**,\n\u003c **ROUTINE_NAME**,\n\u003c **ROUTINE_SCHEMA**,\n---\n\u003e ROUTINE,\n\u003e ROUTINE_CATALOG,\n\u003e ROUTINE_NAME,\n\u003e ROUTINE_SCHEMA,\n748c748\n\u003c **ROW_COUNT**,\n---\n\u003e ROW_COUNT,\n752,754c752,754\n\u003c **SCALE**,\n\u003c **SCHEMA**,\n\u003c **SCHEMA_NAME**,\n---\n\u003e SCALE,\n\u003e SCHEMA,\n\u003e SCHEMA_NAME,\n756,758c756,758\n\u003c **SCOPE_CATALOGS**,\n\u003c **SCOPE_NAME**,\n\u003c **SCOPE_SCHEMA**,\n---\n\u003e SCOPE_CATALOGS,\n\u003e SCOPE_NAME,\n\u003e SCOPE_SCHEMA,\n762,763c762,763\n\u003c **SECTION**,\n\u003c **SECURITY**,\n---\n\u003e SECTION,\n\u003e SECURITY,\n766c766\n\u003c **SELF**,\n---\n\u003e SELF,\n768,772c768,772\n\u003c **SEQUENCE**,\n\u003c **SERIALIZABLE**,\n\u003c **SERVER**,\n\u003c **SERVER_NAME**,\n\u003c **SESSION**,\n---\n\u003e SEQUENCE,\n\u003e SERIALIZABLE,\n\u003e SERVER,\n\u003e SERVER_NAME,\n\u003e SESSION,\n775c775\n\u003c **SETS**,\n---\n\u003e SETS,\n778,779c778,779\n\u003c **SIMPLE**,\n\u003c **SIZE**,\n---\n\u003e SIMPLE,\n\u003e SIZE,\n783,784c783,784\n\u003c **SOURCE**,\n\u003c **SPACE**,\n---\n\u003e SOURCE,\n\u003e SPACE,\n787c787\n\u003c **SPECIFIC_NAME**,\n---\n\u003e SPECIFIC_NAME,\n792,840c792,840\n\u003c **SQL_BIGINT**,\n\u003c **SQL_BINARY**,\n\u003c **SQL_BIT**,\n\u003c **SQL_BLOB**,\n\u003c **SQL_BOOLEAN**,\n\u003c **SQL_CHAR**,\n\u003c **SQL_CLOB**,\n\u003c **SQL_DATE**,\n\u003c **SQL_DECIMAL**,\n\u003c **SQL_DOUBLE**,\n\u003c **SQL_FLOAT**,\n\u003c **SQL_INTEGER**,\n\u003c **SQL_INTERVAL_DAY**,\n\u003c **SQL_INTERVAL_DAY_TO_HOUR**,\n\u003c **SQL_INTERVAL_DAY_TO_MINUTE**,\n\u003c **SQL_INTERVAL_DAY_TO_SECOND**,\n\u003c **SQL_INTERVAL_HOUR**,\n\u003c **SQL_INTERVAL_HOUR_TO_MINUTE**,\n\u003c **SQL_INTERVAL_HOUR_TO_SECOND**,\n\u003c **SQL_INTERVAL_MINUTE**,\n\u003c **SQL_INTERVAL_MINUTE_TO_SECOND**,\n\u003c **SQL_INTERVAL_MONTH**,\n\u003c **SQL_INTERVAL_SECOND**,\n\u003c **SQL_INTERVAL_YEAR**,\n\u003c **SQL_INTERVAL_YEAR_TO_MONTH**,\n\u003c **SQL_LONGVARBINARY**,\n\u003c **SQL_LONGVARCHAR**,\n\u003c **SQL_LONGVARNCHAR**,\n\u003c **SQL_NCHAR**,\n\u003c **SQL_NCLOB**,\n\u003c **SQL_NUMERIC**,\n\u003c **SQL_NVARCHAR**,\n\u003c **SQL_REAL**,\n\u003c **SQL_SMALLINT**,\n\u003c **SQL_TIME**,\n\u003c **SQL_TIMESTAMP**,\n\u003c **SQL_TINYINT**,\n\u003c **SQL_TSI_DAY**,\n\u003c **SQL_TSI_FRAC_SECOND**,\n\u003c **SQL_TSI_HOUR**,\n\u003c **SQL_TSI_MICROSECOND**,\n\u003c **SQL_TSI_MINUTE**,\n\u003c **SQL_TSI_MONTH**,\n\u003c **SQL_TSI_QUARTER**,\n\u003c **SQL_TSI_SECOND**,\n\u003c **SQL_TSI_WEEK**,\n\u003c **SQL_TSI_YEAR**,\n\u003c **SQL_VARBINARY**,\n\u003c **SQL_VARCHAR**,\n---\n\u003e SQL_BIGINT,\n\u003e SQL_BINARY,\n\u003e SQL_BIT,\n\u003e SQL_BLOB,\n\u003e SQL_BOOLEAN,\n\u003e SQL_CHAR,\n\u003e SQL_CLOB,\n\u003e SQL_DATE,\n\u003e SQL_DECIMAL,\n\u003e SQL_DOUBLE,\n\u003e SQL_FLOAT,\n\u003e SQL_INTEGER,\n\u003e SQL_INTERVAL_DAY,\n\u003e SQL_INTERVAL_DAY_TO_HOUR,\n\u003e SQL_INTERVAL_DAY_TO_MINUTE,\n\u003e SQL_INTERVAL_DAY_TO_SECOND,\n\u003e SQL_INTERVAL_HOUR,\n\u003e SQL_INTERVAL_HOUR_TO_MINUTE,\n\u003e SQL_INTERVAL_HOUR_TO_SECOND,\n\u003e SQL_INTERVAL_MINUTE,\n\u003e SQL_INTERVAL_MINUTE_TO_SECOND,\n\u003e SQL_INTERVAL_MONTH,\n\u003e SQL_INTERVAL_SECOND,\n\u003e SQL_INTERVAL_YEAR,\n\u003e SQL_INTERVAL_YEAR_TO_MONTH,\n\u003e SQL_LONGVARBINARY,\n\u003e SQL_LONGVARCHAR,\n\u003e SQL_LONGVARNCHAR,\n\u003e SQL_NCHAR,\n\u003e SQL_NCLOB,\n\u003e SQL_NUMERIC,\n\u003e SQL_NVARCHAR,\n\u003e SQL_REAL,\n\u003e SQL_SMALLINT,\n\u003e SQL_TIME,\n\u003e SQL_TIMESTAMP,\n\u003e SQL_TINYINT,\n\u003e SQL_TSI_DAY,\n\u003e SQL_TSI_FRAC_SECOND,\n\u003e SQL_TSI_HOUR,\n\u003e SQL_TSI_MICROSECOND,\n\u003e SQL_TSI_MINUTE,\n\u003e SQL_TSI_MONTH,\n\u003e SQL_TSI_QUARTER,\n\u003e SQL_TSI_SECOND,\n\u003e SQL_TSI_WEEK,\n\u003e SQL_TSI_YEAR,\n\u003e SQL_VARBINARY,\n\u003e SQL_VARCHAR,\n843,844c843,844\n\u003c **STATE**,\n\u003c **STATEMENT**,\n---\n\u003e STATE,\n\u003e STATEMENT,\n849,851c849,851\n\u003c **STRUCTURE**,\n\u003c **STYLE**,\n\u003c **SUBCLASS_ORIGIN**,\n---\n\u003e STRUCTURE,\n\u003e STYLE,\n\u003e SUBCLASS_ORIGIN,\n854c854\n\u003c **SUBSTITUTE**,\n---\n\u003e SUBSTITUTE,\n865,866c865,866\n\u003c **TABLE_NAME**,\n\u003c **TEMPORARY**,\n---\n\u003e TABLE_NAME,\n\u003e TEMPORARY,\n868c868\n\u003c **TIES**,\n---\n\u003e TIES,\n871,872c871,872\n\u003c **TIMESTAMPADD**,\n\u003c **TIMESTAMPDIFF**,\n---\n\u003e TIMESTAMPADD,\n\u003e TIMESTAMPDIFF,\n877c877\n\u003c **TOP_LEVEL_COUNT**,\n---\n\u003e TOP_LEVEL_COUNT,\n879,884c879,884\n\u003c **TRANSACTION**,\n\u003c **TRANSACTIONS_ACTIVE**,\n\u003c **TRANSACTIONS_COMMITTED**,\n\u003c **TRANSACTIONS_ROLLED_BACK**,\n\u003c **TRANSFORM**,\n\u003c **TRANSFORMS**,\n---\n\u003e TRANSACTION,\n\u003e TRANSACTIONS_ACTIVE,\n\u003e TRANSACTIONS_COMMITTED,\n\u003e TRANSACTIONS_ROLLED_BACK,\n\u003e TRANSFORM,\n\u003e TRANSFORMS,\n890,892c890,892\n\u003c **TRIGGER_CATALOG**,\n\u003c **TRIGGER_NAME**,\n\u003c **TRIGGER_SCHEMA**,\n---\n\u003e TRIGGER_CATALOG,\n\u003e TRIGGER_NAME,\n\u003e TRIGGER_SCHEMA,\n897c897\n\u003c **TYPE**,\n---\n\u003e TYPE,\n899,901c899,901\n\u003c **UNBOUNDED**,\n\u003c **UNCOMMITTED**,\n\u003c **UNDER**,\n---\n\u003e UNBOUNDED,\n\u003e UNCOMMITTED,\n\u003e UNDER,\n905c905\n\u003c **UNNAMED**,\n---\n\u003e UNNAMED,\n910c910\n\u003c **USAGE**,\n---\n\u003e USAGE,\n912,915c912,915\n\u003c **USER_DEFINED_TYPE_CATALOG**,\n\u003c **USER_DEFINED_TYPE_CODE**,\n\u003c **USER_DEFINED_TYPE_NAME**,\n\u003c **USER_DEFINED_TYPE_SCHEMA**,\n---\n\u003e USER_DEFINED_TYPE_CATALOG,\n\u003e USER_DEFINED_TYPE_CODE,\n\u003e USER_DEFINED_TYPE_NAME,\n\u003e USER_DEFINED_TYPE_SCHEMA,\n925c925\n\u003c **VERSION**,\n---\n\u003e VERSION,\n927,928c927,928\n\u003c **VIEW**,\n\u003c **WEEK**,\n---\n\u003e VIEW,\n\u003e WEEK,\n937,940c937,940\n\u003c **WORK**,\n\u003c **WRAPPER**,\n\u003c **WRITE**,\n\u003c **XML**,\n---\n\u003e WORK,\n\u003e WRAPPER,\n\u003e WRITE,\n\u003e XML,\n942c942\n\u003c **ZONE**.\n---\n\u003e ZONE.\n",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testInnerOuterJoinFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from a inner outer join b];\n expected pattern [(?s).*Encountered \"inner outer\" at line 1, column 17.*];\n actual [Encountered \" \"INNER\" \"inner \"\" at line 1, column 17.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"INNER\\\" \\\"inner \\\"\\\" at line 1, column 17\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 17 thru line 1 col 21]; sql [select * from a ^inner^ outer join b]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testDescribeTable",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [describe emps \u0027col_\u0027];\n expected pattern [(?s).*Encountered \"\\\\\u0027col_\\\\\u0027\" at .*];\n actual [Encountered \" \u003cQUOTED_STRING\u003e \"\\\u0027col_\\\u0027 \"\" at line 1, column 15.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \u003cQUOTED_STRING\u003e \\\"\\\\\u0027col_\\\\\u0027 \\\"\\\" at line 1, column 15\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 15 thru line 1 col 20]; sql [describe emps ^\u0027col_\u0027^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testInsertValuesRawDefault",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [insert into emps values default];\n expected pattern [(?s).*Encountered \"values default\" at .*];\n actual [Encountered \"\" at line 1, column 18.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 18\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 18 thru line 1 col 23]; sql [insert into emps ^values^ default]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testQuotedFunction",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [\"CAST\"(1 as double)];\n expected pattern [(?s).*Encountered \"as\" at .*];\n actual [Encountered \" \"AS\" \"as \"\" at line 1, column 10.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"AS\\\" \\\"as \\\"\\\" at line 1, column 10\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 10 thru line 1 col 11]; sql [\"CAST\"(1 ^as^ double)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testBetween",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [values a between];\n expected pattern [(?s).*Encountered \"between \u003cEOF\u003e\" at line 1, column 10.*];\n actual [Encountered \" \"BETWEEN\" \"between \"\" at line 1, column 10.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"BETWEEN\\\" \\\"between \\\"\\\" at line 1, column 10\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 10 thru line 1 col 16]; sql [values a ^between^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testUnnestWithOrdinality",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select*from unnest(x) as T with ordinality];\n expected pattern [(?s)Encountered \"with\" at .*];\n actual [Encountered \" \"WITH\" \"with \"\" at line 1, column 28.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"WITH\\\" \\\"with \\\"\\\" at line 1, column 28\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 28 thru line 1 col 31]; sql [select*from unnest(x) as T ^with^ ordinality]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.SqlValidatorMatchTest",
        "testMethod": "testMatchRecognizeSkipTo1",
        "failureName": "java.lang.RuntimeException",
        "detail": "Error did not match expected [(?s).*Encountered \"to null\" at .*] while parsing query [select *\n  from emp match_recognize (\n    after match skip to null\n    measures\n      STRT.sal as start_sal,\n      LAST(up.ts) as end_sal\n    pattern (strt down+ up+)\n    define\n      down as down.sal \u003c PREV(down.sal),\n      up as up.sal \u003e prev(up.sal)\n  ) mr]",
        "isError": true
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testDateTimeCast",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [CAST(\u00272000-12-21\u0027 AS DATE NOT NULL)];\n expected pattern [(?s).*Encountered \"NOT\" at line 1, column 27.*];\n actual [Encountered \" \"NOT\" \"NOT \"\" at line 1, column 27.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"NOT\\\" \\\"NOT \\\"\\\" at line 1, column 27\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 27 thru line 1 col 29]; sql [CAST(\u00272000-12-21\u0027 AS DATE ^NOT^ NULL)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testAsAliases",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select x from (values (1, 2), (3, 4)) as t1 ()];\n expected pattern [(?s).*Encountered \"\\( \\)\" at .*];\n actual [Encountered \" \"(\" \"( \"\" at line 1, column 45.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"\\\\(\\\" \\\"\\\\( \\\"\\\" at line 1, column 45\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 45 thru line 1 col 45]; sql [select x from (values (1, 2), (3, 4)) as t1 ^(^)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testUnnest",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [unnest(x)];\n expected pattern [(?s)Encountered \"unnest\" at.*];\n actual [Encountered \"\" at line 1, column 1.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 1\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 1 thru line 1 col 6]; sql [^unnest^(x)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testSelectWithoutFromWhereFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select 2+2 as x where 1 \u003e 2];\n expected pattern [(?s).*Encountered \"where\" at line .*];\n actual [Encountered \" \"WHERE\" \"where \"\" at line 1, column 17.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"WHERE\\\" \\\"where \\\"\\\" at line 1, column 17\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 17 thru line 1 col 21]; sql [select 2+2 as x ^where^ 1 \u003e 2]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.JdbcTest",
        "testMethod": "testSqlAdvisorNonStructColumn",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: \"id\u003d*; names\u003d[*]; type\u003dKEYWORD\\nid\u003d; names\u003dnull; type\u003dMATCH\"\n     but: was \"id\u003d; names\u003dnull; type\u003dMATCH\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "testMethod": "testUnion",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c...EPTNO)\nCOLUMN(NAME)\n[KEYWORD(()\nKEYWORD(+)\nKEYWORD(-)\nKEYWORD(?)\nKEYWORD(ABS)\nKEYWORD(ARRAY)\nKEYWORD(AVG)\nKEYWORD(CARDINALITY)\nKEYWORD(CASE)\nKEYWORD(CAST)\nKEYWORD(CEIL)\nKEYWORD(CEILING)\nKEYWORD(CHARACTER_LENGTH)\nKEYWORD(CHAR_LENGTH)\nKEYWORD(CLASSIFIER)\nKEYWORD(COALESCE)\nKEYWORD(COLLECT)\nKEYWORD(CONVERT)\nKEYWORD(COUNT)\nKEYWORD(COVAR_POP)\nKEYWORD(COVAR_SAMP)\nKEYWORD(CUME_DIST)\nKEYWORD(CURRENT)\nKEYWORD(CURRENT_CATALOG)\nKEYWORD(CURRENT_DATE)\nKEYWORD(CURRENT_DEFAULT_TRANSFORM_GROUP)\nKEYWORD(CURRENT_PATH)\nKEYWORD(CURRENT_ROLE)\nKEYWORD(CURRENT_SCHEMA)\nKEYWORD(CURRENT_TIME)\nKEYWORD(CURRENT_TIMESTAMP)\nKEYWORD(CURRENT_USER)\nKEYWORD(CURSOR)\nKEYWORD(DATE)\nKEYWORD(DENSE_RANK)\nKEYWORD(ELEMENT)\nKEYWORD(EXISTS)\nKEYWORD(EXP)\nKEYWORD(EXTRACT)\nKEYWORD(FALSE)\nKEYWORD(FIRST_VALUE)\nKEYWORD(FLOOR)\nKEYWORD(FUSION)\nKEYWORD(GROUPING)\nKEYWORD(HOUR)\nKEYWORD(INTERVAL)\nKEYWORD(LAG)\nKEYWORD(LAST_VALUE)\nKEYWORD(LEAD)\nKEYWORD(LN)\nKEYWORD(LOCALTIME)\nKEYWORD(LOCALTIMESTAMP)\nKEYWORD(LOWER)\nKEYWORD(MATCH_NUMBER)\nKEYWORD(MAX)\nKEYWORD(MIN)\nKEYWORD(MINUTE)\nKEYWORD(MOD)\nKEYWORD(MONTH)\nKEYWORD(MULTISET)\nKEYWORD(NEW)\nKEYWORD(NEXT)\nKEYWORD(NOT)\nKEYWORD(NTH_VALUE)\nKEYWORD(NTILE)\nKEYWORD(NULL)\nKEYWORD(NULLIF)\nKEYWORD(OCTET_LENGTH)\nKEYWORD(OVERLAY)\nKEYWORD(PERCENT_RANK)\nKEYWORD(PERIOD)\nKEYWORD(POSITION)\nKEYWORD(POWER)\nKEYWORD(PREV)\nKEYWORD(RANK)\nKEYWORD(REGR_COUNT)\nKEYWORD(REGR_SXX)\nKEYWORD(REGR_SYY)\nKEYWORD(ROW)\nKEYWORD(ROW_NUMBER)\nKEYWORD(RUNNING)\nKEYWORD(SECOND)\nKEYWORD(SESSION_USER)\nKEYWORD(SPECIFIC)\nKEYWORD(SQRT)\nKEYWORD(STDDEV_POP)\nKEYWORD(STDDEV_SAMP)\nKEYWORD(SUBSTRING)\nKEYWORD(SUM)\nKEYWORD(SYSTEM_USER)\nKEYWORD(TIME)\nKEYWORD(TIMESTAMP)\nKEYWORD(TRANSLATE)\nKEYWORD(TRIM)\nKEYWORD(TRUE)\nKEYWORD(TRUNCATE)\nKEYWORD(UNKNOWN)\nKEYWORD(UPPER)\nKEYWORD(USER)\nKEYWORD(VAR_POP)\nKEYWORD(VAR_SAMP)\nKEYWORD(YEAR)\n]TABLE(A)\n\u003e but was:\u003c...EPTNO)\nCOLUMN(NAME)\n[]TABLE(A)\n\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testLateral",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from lateral emp];\n expected pattern [(?s)Encountered \"lateral emp\" at .*];\n actual [Encountered \"\" at line 1, column 15.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 15\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 15 thru line 1 col 21]; sql [select * from ^lateral^ emp]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testDefault",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select DEFAULT from emp];\n expected pattern [(?s)Encountered \"DEFAULT\" at .*];\n actual [Encountered \"\" at line 1, column 8.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 8\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 8 thru line 1 col 14]; sql [select ^DEFAULT^ from emp]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testExtract",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [extract(day to second from x)];\n expected pattern [(?s)Encountered \"to\".*];\n actual [Encountered \" \"TO\" \"to \"\" at line 1, column 13.\nWas expecting:\n    \"FROM\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"TO\\\" \\\"to \\\"\\\" at line 1, column 13\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"FROM\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 13 thru line 1 col 14]; sql [extract(day ^to^ second from x)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testJoinUsing",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from a join b using () where c \u003d d];\n expected pattern [(?s).*Encountered \"[)]\" at line 1, column 31.*];\n actual [Encountered \"\" at line 1, column 31.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 31\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 31 thru line 1 col 31]; sql [select * from a join b using (^)^ where c \u003d d]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testGroupByCube2",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select deptno from emp\ngroup by cube ()];\n expected pattern [(?s)Encountered \"\\)\" at .*];\n actual [Encountered \"\" at line 2, column 16.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 2, column 16\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [2 col 16 thru line 2 col 16]; sql [select deptno from emp\ngroup by cube (^)^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testAlterSystemExtensionWithoutAlter",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [upload jar \u0027/path/to/jar\u0027];\n expected pattern [(?s).*Encountered \"upload\" at .*];\n actual [Encountered \"\" at line 1, column 1.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 1\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 1 thru line 1 col 6]; sql [^upload^ jar \u0027/path/to/jar\u0027]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testDateTimeCast",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [CAST(\u00272000-12-21\u0027 AS DATE NOT NULL)];\n expected pattern [(?s).*Encountered \"NOT\" at line 1, column 27.*];\n actual [Encountered \" \"NOT\" \"NOT \"\" at line 1, column 27.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"NOT\\\" \\\"NOT \\\"\\\" at line 1, column 27\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 27 thru line 1 col 29]; sql [CAST(\u00272000-12-21\u0027 AS DATE ^NOT^ NULL)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testTableStarColumnFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select emp.*.xx from emp];\n expected pattern [(?s).*Encountered \".\" .*];\n actual [Encountered \" \".\" \". \"\" at line 1, column 13.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"\\\\.\\\" \\\"\\\\. \\\"\\\" at line 1, column 13\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 13 thru line 1 col 13]; sql [select emp.*^.^xx from emp]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.test.SqlAdvisorTest",
        "testMethod": "testOrderByList",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "expected:\u003c...AL)\nCOLUMN(SLACKER)\n[KEYWORD(()\nKEYWORD(+)\nKEYWORD(-)\nKEYWORD(?)\nKEYWORD(ABS)\nKEYWORD(ARRAY)\nKEYWORD(AVG)\nKEYWORD(CARDINALITY)\nKEYWORD(CASE)\nKEYWORD(CAST)\nKEYWORD(CEIL)\nKEYWORD(CEILING)\nKEYWORD(CHARACTER_LENGTH)\nKEYWORD(CHAR_LENGTH)\nKEYWORD(CLASSIFIER)\nKEYWORD(COALESCE)\nKEYWORD(COLLECT)\nKEYWORD(CONVERT)\nKEYWORD(COUNT)\nKEYWORD(COVAR_POP)\nKEYWORD(COVAR_SAMP)\nKEYWORD(CUME_DIST)\nKEYWORD(CURRENT)\nKEYWORD(CURRENT_CATALOG)\nKEYWORD(CURRENT_DATE)\nKEYWORD(CURRENT_DEFAULT_TRANSFORM_GROUP)\nKEYWORD(CURRENT_PATH)\nKEYWORD(CURRENT_ROLE)\nKEYWORD(CURRENT_SCHEMA)\nKEYWORD(CURRENT_TIME)\nKEYWORD(CURRENT_TIMESTAMP)\nKEYWORD(CURRENT_USER)\nKEYWORD(CURSOR)\nKEYWORD(DATE)\nKEYWORD(DENSE_RANK)\nKEYWORD(ELEMENT)\nKEYWORD(EXISTS)\nKEYWORD(EXP)\nKEYWORD(EXTRACT)\nKEYWORD(FALSE)\nKEYWORD(FIRST_VALUE)\nKEYWORD(FLOOR)\nKEYWORD(FUSION)\nKEYWORD(GROUPING)\nKEYWORD(HOUR)\nKEYWORD(INTERVAL)\nKEYWORD(LAG)\nKEYWORD(LAST_VALUE)\nKEYWORD(LEAD)\nKEYWORD(LN)\nKEYWORD(LOCALTIME)\nKEYWORD(LOCALTIMESTAMP)\nKEYWORD(LOWER)\nKEYWORD(MATCH_NUMBER)\nKEYWORD(MAX)\nKEYWORD(MIN)\nKEYWORD(MINUTE)\nKEYWORD(MOD)\nKEYWORD(MONTH)\nKEYWORD(MULTISET)\nKEYWORD(NEW)\nKEYWORD(NEXT)\nKEYWORD(NOT)\nKEYWORD(NTH_VALUE)\nKEYWORD(NTILE)\nKEYWORD(NULL)\nKEYWORD(NULLIF)\nKEYWORD(OCTET_LENGTH)\nKEYWORD(OVERLAY)\nKEYWORD(PERCENT_RANK)\nKEYWORD(PERIOD)\nKEYWORD(POSITION)\nKEYWORD(POWER)\nKEYWORD(PREV)\nKEYWORD(RANK)\nKEYWORD(REGR_COUNT)\nKEYWORD(REGR_SXX)\nKEYWORD(REGR_SYY)\nKEYWORD(ROW)\nKEYWORD(ROW_NUMBER)\nKEYWORD(RUNNING)\nKEYWORD(SECOND)\nKEYWORD(SESSION_USER)\nKEYWORD(SPECIFIC)\nKEYWORD(SQRT)\nKEYWORD(STDDEV_POP)\nKEYWORD(STDDEV_SAMP)\nKEYWORD(SUBSTRING)\nKEYWORD(SUM)\nKEYWORD(SYSTEM_USER)\nKEYWORD(TIME)\nKEYWORD(TIMESTAMP)\nKEYWORD(TRANSLATE)\nKEYWORD(TRIM)\nKEYWORD(TRUE)\nKEYWORD(TRUNCATE)\nKEYWORD(UNKNOWN)\nKEYWORD(UPPER)\nKEYWORD(USER)\nKEYWORD(VAR_POP)\nKEYWORD(VAR_SAMP)\nKEYWORD(YEAR)\n]TABLE(EMP)\n\u003e but was:\u003c...AL)\nCOLUMN(SLACKER)\n[]TABLE(EMP)\n\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testBetween",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [values a between];\n expected pattern [(?s).*Encountered \"between \u003cEOF\u003e\" at line 1, column 10.*];\n actual [Encountered \" \"BETWEEN\" \"between \"\" at line 1, column 10.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"BETWEEN\\\" \\\"between \\\"\\\" at line 1, column 10\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 10 thru line 1 col 16]; sql [values a ^between^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testOrderOffsetFetch",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select a from foo offset 1 fetch next 3 only];\n expected pattern [(?s).*Encountered \"only\" at .*];\n actual [Encountered \"\" at line 1, column 41.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 41\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 41 thru line 1 col 44]; sql [select a from foo offset 1 fetch next 3 ^only^]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest",
        "testMethod": "testEmptyValues",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from (values())];\n expected pattern [(?s).*Encountered \"\\( \\)\" at .*];\n actual [Encountered \"\" at line 1, column 22.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 22\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 22 thru line 1 col 22]; sql [select * from (values^(^))]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testSelectWithoutFromHavingFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select 2+2 as x having 1 \u003e 2];\n expected pattern [(?s).*Encountered \"having\" at line .*];\n actual [Encountered \" \"HAVING\" \"having \"\" at line 1, column 17.\nWas expecting:\n    \u003cEOF\u003e \n    ];\n actual as java regexp [\"Encountered \\\" \\\"HAVING\\\" \\\"having \\\"\\\" at line 1, column 17\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \u003cEOF\u003e \\n\"\n + \"    \"]; pos [1 col 17 thru line 1 col 22]; sql [select 2+2 as x ^having^ 1 \u003e 2]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testQuotedFunction",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [\"CAST\"(1 as double)];\n expected pattern [(?s).*Encountered \"as\" at .*];\n actual [Encountered \" \"AS\" \"as \"\" at line 1, column 10.\nWas expecting:\n    \")\" ...\n    ];\n actual as java regexp [\"Encountered \\\" \\\"AS\\\" \\\"as \\\"\\\" at line 1, column 10\\\\.\\n\"\n + \"Was expecting:\\n\"\n + \"    \\\"\\\\)\\\" \\\\.\\\\.\\\\.\\n\"\n + \"    \"]; pos [1 col 10 thru line 1 col 11]; sql [\"CAST\"(1 ^as^ double)]",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testNoUnintendedNewReservedKeywords",
        "failureName": "java.lang.AssertionError",
        "detail": "The parser has at least one new reserved keyword. Are you sure it should be reserved? Difference:\n0a1\n\u003e A\n1a3,8\n\u003e ABSOLUTE\n\u003e ACTION\n\u003e ADA\n\u003e ADD\n\u003e ADMIN\n\u003e AFTER\n5a13\n\u003e ALWAYS\n7a16\n\u003e APPLY\n11a21\n\u003e ASC\n12a23,24\n\u003e ASSERTION\n\u003e ASSIGNMENT\n15a28,29\n\u003e ATTRIBUTE\n\u003e ATTRIBUTES\n17a32\n\u003e BEFORE\n20a36\n\u003e BERNOULLI\n27a44\n\u003e BREADTH\n28a46\n\u003e C\n31a50\n\u003e CASCADE\n34a54,55\n\u003e CATALOG\n\u003e CATALOG_NAME\n36a58,59\n\u003e CENTURY\n\u003e CHAIN\n38a62,63\n\u003e CHARACTERISTICS\n\u003e CHARACTERS\n39a65,67\n\u003e CHARACTER_SET_CATALOG\n\u003e CHARACTER_SET_NAME\n\u003e CHARACTER_SET_SCHEMA\n42a71\n\u003e CLASS_ORIGIN\n45a75\n\u003e COBOL\n46a77,80\n\u003e COLLATION\n\u003e COLLATION_CATALOG\n\u003e COLLATION_NAME\n\u003e COLLATION_SCHEMA\n48a83,85\n\u003e COLUMN_NAME\n\u003e COMMAND_FUNCTION\n\u003e COMMAND_FUNCTION_CODE\n49a87\n\u003e COMMITTED\n50a89\n\u003e CONDITION_NUMBER\n51a91,92\n\u003e CONNECTION\n\u003e CONNECTION_NAME\n52a94,98\n\u003e CONSTRAINTS\n\u003e CONSTRAINT_CATALOG\n\u003e CONSTRAINT_NAME\n\u003e CONSTRAINT_SCHEMA\n\u003e CONSTRUCTOR\n53a100\n\u003e CONTINUE\n76a124\n\u003e CURSOR_NAME\n77a126,127\n\u003e DATA\n\u003e DATABASE\n78a129,130\n\u003e DATETIME_INTERVAL_CODE\n\u003e DATETIME_INTERVAL_PRECISION\n81a134\n\u003e DECADE\n84a138,140\n\u003e DEFAULTS\n\u003e DEFERRABLE\n\u003e DEFERRED\n85a142,144\n\u003e DEFINED\n\u003e DEFINER\n\u003e DEGREE\n87a147\n\u003e DEPTH\n88a149,150\n\u003e DERIVED\n\u003e DESC\n89a152,153\n\u003e DESCRIPTION\n\u003e DESCRIPTOR\n90a155\n\u003e DIAGNOSTICS\n92a158\n\u003e DISPATCH\n93a160\n\u003e DOMAIN\n94a162,163\n\u003e DOW\n\u003e DOY\n96a166,167\n\u003e DYNAMIC_FUNCTION\n\u003e DYNAMIC_FUNCTION_CODE\n104a176\n\u003e EPOCH\n108a181,183\n\u003e EXCEPTION\n\u003e EXCLUDE\n\u003e EXCLUDING\n119a195,196\n\u003e FINAL\n\u003e FIRST\n122a200\n\u003e FOLLOWING\n124a203,205\n\u003e FORTRAN\n\u003e FOUND\n\u003e FRAC_SECOND\n130a212,215\n\u003e G\n\u003e GENERAL\n\u003e GENERATED\n\u003e GEOMETRY\n132a218,219\n\u003e GO\n\u003e GOTO\n133a221\n\u003e GRANTED\n137a226\n\u003e HIERARCHY\n140a230,232\n\u003e IMMEDIATE\n\u003e IMMEDIATELY\n\u003e IMPLEMENTATION\n142a235,236\n\u003e INCLUDING\n\u003e INCREMENT\n144a239\n\u003e INITIALLY\n146a242\n\u003e INPUT\n148a245,246\n\u003e INSTANCE\n\u003e INSTANTIABLE\n154a253\n\u003e INVOKER\n155a255,258\n\u003e ISODOW\n\u003e ISOLATION\n\u003e ISOYEAR\n\u003e JAVA\n156a260,265\n\u003e JSON\n\u003e K\n\u003e KEY\n\u003e KEY_MEMBER\n\u003e KEY_TYPE\n\u003e LABEL\n159a269\n\u003e LAST\n164a275,277\n\u003e LENGTH\n\u003e LEVEL\n\u003e LIBRARY\n171a285\n\u003e LOCATOR\n172a287,288\n\u003e M\n\u003e MAP\n173a290\n\u003e MATCHED\n177a295\n\u003e MAXVALUE\n180a299,301\n\u003e MESSAGE_LENGTH\n\u003e MESSAGE_OCTET_LENGTH\n\u003e MESSAGE_TEXT\n181a303,305\n\u003e MICROSECOND\n\u003e MILLENNIUM\n\u003e MILLISECOND\n184a309\n\u003e MINVALUE\n188a314\n\u003e MORE\n189a316,319\n\u003e MUMPS\n\u003e NAME\n\u003e NAMES\n\u003e NANOSECOND\n193a324\n\u003e NESTING\n198a330\n\u003e NORMALIZED\n202a335\n\u003e NULLABLE\n203a337,338\n\u003e NULLS\n\u003e NUMBER\n204a340\n\u003e OBJECT\n205a342\n\u003e OCTETS\n214a352,353\n\u003e OPTION\n\u003e OPTIONS\n216a356,358\n\u003e ORDERING\n\u003e ORDINALITY\n\u003e OTHERS\n218a361\n\u003e OUTPUT\n221a365,366\n\u003e OVERRIDING\n\u003e PAD\n222a368,374\n\u003e PARAMETER_MODE\n\u003e PARAMETER_NAME\n\u003e PARAMETER_ORDINAL_POSITION\n\u003e PARAMETER_SPECIFIC_CATALOG\n\u003e PARAMETER_SPECIFIC_NAME\n\u003e PARAMETER_SPECIFIC_SCHEMA\n\u003e PARTIAL\n223a376,379\n\u003e PASCAL\n\u003e PASSTHROUGH\n\u003e PAST\n\u003e PATH\n231a388,390\n\u003e PLACING\n\u003e PLAN\n\u003e PLI\n236a396\n\u003e PRECEDING\n238a399\n\u003e PRESERVE\n240a402,403\n\u003e PRIOR\n\u003e PRIVILEGES\n241a405,406\n\u003e PUBLIC\n\u003e QUARTER\n243a409\n\u003e READ\n258a425\n\u003e RELATIVE\n259a427,428\n\u003e REPEATABLE\n\u003e REPLACE\n260a430,431\n\u003e RESTART\n\u003e RESTRICT\n262a434,437\n\u003e RETURNED_CARDINALITY\n\u003e RETURNED_LENGTH\n\u003e RETURNED_OCTET_LENGTH\n\u003e RETURNED_SQLSTATE\n265a441\n\u003e ROLE\n267a444,447\n\u003e ROUTINE\n\u003e ROUTINE_CATALOG\n\u003e ROUTINE_NAME\n\u003e ROUTINE_SCHEMA\n269a450\n\u003e ROW_COUNT\n272a454,456\n\u003e SCALE\n\u003e SCHEMA\n\u003e SCHEMA_NAME\n273a458,460\n\u003e SCOPE_CATALOGS\n\u003e SCOPE_NAME\n\u003e SCOPE_SCHEMA\n276a464,465\n\u003e SECTION\n\u003e SECURITY\n278a468\n\u003e SELF\n279a470,474\n\u003e SEQUENCE\n\u003e SERIALIZABLE\n\u003e SERVER\n\u003e SERVER_NAME\n\u003e SESSION\n281a477\n\u003e SETS\n283a480,481\n\u003e SIMPLE\n\u003e SIZE\n286a485,486\n\u003e SOURCE\n\u003e SPACE\n288a489\n\u003e SPECIFIC_NAME\n292a494,542\n\u003e SQL_BIGINT\n\u003e SQL_BINARY\n\u003e SQL_BIT\n\u003e SQL_BLOB\n\u003e SQL_BOOLEAN\n\u003e SQL_CHAR\n\u003e SQL_CLOB\n\u003e SQL_DATE\n\u003e SQL_DECIMAL\n\u003e SQL_DOUBLE\n\u003e SQL_FLOAT\n\u003e SQL_INTEGER\n\u003e SQL_INTERVAL_DAY\n\u003e SQL_INTERVAL_DAY_TO_HOUR\n\u003e SQL_INTERVAL_DAY_TO_MINUTE\n\u003e SQL_INTERVAL_DAY_TO_SECOND\n\u003e SQL_INTERVAL_HOUR\n\u003e SQL_INTERVAL_HOUR_TO_MINUTE\n\u003e SQL_INTERVAL_HOUR_TO_SECOND\n\u003e SQL_INTERVAL_MINUTE\n\u003e SQL_INTERVAL_MINUTE_TO_SECOND\n\u003e SQL_INTERVAL_MONTH\n\u003e SQL_INTERVAL_SECOND\n\u003e SQL_INTERVAL_YEAR\n\u003e SQL_INTERVAL_YEAR_TO_MONTH\n\u003e SQL_LONGVARBINARY\n\u003e SQL_LONGVARCHAR\n\u003e SQL_LONGVARNCHAR\n\u003e SQL_NCHAR\n\u003e SQL_NCLOB\n\u003e SQL_NUMERIC\n\u003e SQL_NVARCHAR\n\u003e SQL_REAL\n\u003e SQL_SMALLINT\n\u003e SQL_TIME\n\u003e SQL_TIMESTAMP\n\u003e SQL_TINYINT\n\u003e SQL_TSI_DAY\n\u003e SQL_TSI_FRAC_SECOND\n\u003e SQL_TSI_HOUR\n\u003e SQL_TSI_MICROSECOND\n\u003e SQL_TSI_MINUTE\n\u003e SQL_TSI_MONTH\n\u003e SQL_TSI_QUARTER\n\u003e SQL_TSI_SECOND\n\u003e SQL_TSI_WEEK\n\u003e SQL_TSI_YEAR\n\u003e SQL_VARBINARY\n\u003e SQL_VARCHAR\n294a545,546\n\u003e STATE\n\u003e STATEMENT\n298a551,553\n\u003e STRUCTURE\n\u003e STYLE\n\u003e SUBCLASS_ORIGIN\n300a556\n\u003e SUBSTITUTE\n310a567,568\n\u003e TABLE_NAME\n\u003e TEMPORARY\n311a570\n\u003e TIES\n313a573,574\n\u003e TIMESTAMPADD\n\u003e TIMESTAMPDIFF\n317a579\n\u003e TOP_LEVEL_COUNT\n318a581,586\n\u003e TRANSACTION\n\u003e TRANSACTIONS_ACTIVE\n\u003e TRANSACTIONS_COMMITTED\n\u003e TRANSACTIONS_ROLLED_BACK\n\u003e TRANSFORM\n\u003e TRANSFORMS\n323a592,594\n\u003e TRIGGER_CATALOG\n\u003e TRIGGER_NAME\n\u003e TRIGGER_SCHEMA\n327a599\n\u003e TYPE\n328a601,603\n\u003e UNBOUNDED\n\u003e UNCOMMITTED\n\u003e UNDER\n331a607\n\u003e UNNAMED\n335a612\n\u003e USAGE\n336a614,617\n\u003e USER_DEFINED_TYPE_CATALOG\n\u003e USER_DEFINED_TYPE_CODE\n\u003e USER_DEFINED_TYPE_NAME\n\u003e USER_DEFINED_TYPE_SCHEMA\n345a627\n\u003e VERSION\n346a629,630\n\u003e VIEW\n\u003e WEEK\n354a639,642\n\u003e WORK\n\u003e WRAPPER\n\u003e WRITE\n\u003e XML\n355a644\n\u003e ZONE\n\nExpected: is \u003c[ABS, ALL, ALLOCATE, ALLOW, ALTER, AND, ANY, ARE, ARRAY, ARRAY_MAX_CARDINALITY, AS, ASENSITIVE, ASYMMETRIC, AT, ATOMIC, AUTHORIZATION, AVG, BEGIN, BEGIN_FRAME, BEGIN_PARTITION, BETWEEN, BIGINT, BINARY, BIT, BLOB, BOOLEAN, BOTH, BY, CALL, CALLED, CARDINALITY, CASCADED, CASE, CAST, CEIL, CEILING, CHAR, CHARACTER, CHARACTER_LENGTH, CHAR_LENGTH, CHECK, CLASSIFIER, CLOB, CLOSE, COALESCE, COLLATE, COLLECT, COLUMN, COMMIT, CONDITION, CONNECT, CONSTRAINT, CONTAINS, CONVERT, CORR, CORRESPONDING, COUNT, COVAR_POP, COVAR_SAMP, CREATE, CROSS, CUBE, CUME_DIST, CURRENT, CURRENT_CATALOG, CURRENT_DATE, CURRENT_DEFAULT_TRANSFORM_GROUP, CURRENT_PATH, CURRENT_ROLE, CURRENT_ROW, CURRENT_SCHEMA, CURRENT_TIME, CURRENT_TIMESTAMP, CURRENT_TRANSFORM_GROUP_FOR_TYPE, CURRENT_USER, CURSOR, CYCLE, DATE, DAY, DEALLOCATE, DEC, DECIMAL, DECLARE, DEFAULT, DEFINE, DELETE, DENSE_RANK, DEREF, DESCRIBE, DETERMINISTIC, DISALLOW, DISCONNECT, DISTINCT, DOUBLE, DROP, DYNAMIC, EACH, ELEMENT, ELSE, EMPTY, END, END-EXEC, END_FRAME, END_PARTITION, EQUALS, ESCAPE, EVERY, EXCEPT, EXEC, EXECUTE, EXISTS, EXP, EXPLAIN, EXTEND, EXTERNAL, EXTRACT, FALSE, FETCH, FILTER, FIRST_VALUE, FLOAT, FLOOR, FOR, FOREIGN, FRAME_ROW, FREE, FROM, FULL, FUNCTION, FUSION, GET, GLOBAL, GRANT, GROUP, GROUPING, GROUPS, HAVING, HOLD, HOUR, IDENTITY, IMPORT, IN, INDICATOR, INITIAL, INNER, INOUT, INSENSITIVE, INSERT, INT, INTEGER, INTERSECT, INTERSECTION, INTERVAL, INTO, IS, JOIN, LAG, LANGUAGE, LARGE, LAST_VALUE, LATERAL, LEAD, LEADING, LEFT, LIKE, LIKE_REGEX, LIMIT, LN, LOCAL, LOCALTIME, LOCALTIMESTAMP, LOWER, MATCH, MATCHES, MATCH_NUMBER, MATCH_RECOGNIZE, MAX, MEASURES, MEMBER, MERGE, METHOD, MIN, MINUS, MINUTE, MOD, MODIFIES, MODULE, MONTH, MULTISET, NATIONAL, NATURAL, NCHAR, NCLOB, NEW, NEXT, NO, NONE, NORMALIZE, NOT, NTH_VALUE, NTILE, NULL, NULLIF, NUMERIC, OCCURRENCES_REGEX, OCTET_LENGTH, OF, OFFSET, OLD, OMIT, ON, ONE, ONLY, OPEN, OR, ORDER, OUT, OUTER, OVER, OVERLAPS, OVERLAY, PARAMETER, PARTITION, PATTERN, PER, PERCENT, PERCENTILE_CONT, PERCENTILE_DISC, PERCENT_RANK, PERIOD, PERMUTE, PORTION, POSITION, POSITION_REGEX, POWER, PRECEDES, PRECISION, PREPARE, PREV, PRIMARY, PROCEDURE, RANGE, RANK, READS, REAL, RECURSIVE, REF, REFERENCES, REFERENCING, REGR_AVGX, REGR_AVGY, REGR_COUNT, REGR_INTERCEPT, REGR_R2, REGR_SLOPE, REGR_SXX, REGR_SXY, REGR_SYY, RELEASE, RESET, RESULT, RETURN, RETURNS, REVOKE, RIGHT, ROLLBACK, ROLLUP, ROW, ROWS, ROW_NUMBER, RUNNING, SAVEPOINT, SCOPE, SCROLL, SEARCH, SECOND, SEEK, SELECT, SENSITIVE, SESSION_USER, SET, SHOW, SIMILAR, SKIP, SMALLINT, SOME, SPECIFIC, SPECIFICTYPE, SQL, SQLEXCEPTION, SQLSTATE, SQLWARNING, SQRT, START, STATIC, STDDEV_POP, STDDEV_SAMP, STREAM, SUBMULTISET, SUBSET, SUBSTRING, SUBSTRING_REGEX, SUCCEEDS, SUM, SYMMETRIC, SYSTEM, SYSTEM_TIME, SYSTEM_USER, TABLE, TABLESAMPLE, THEN, TIME, TIMESTAMP, TIMEZONE_HOUR, TIMEZONE_MINUTE, TINYINT, TO, TRAILING, TRANSLATE, TRANSLATE_REGEX, TRANSLATION, TREAT, TRIGGER, TRIM, TRIM_ARRAY, TRUE, TRUNCATE, UESCAPE, UNION, UNIQUE, UNKNOWN, UNNEST, UPDATE, UPPER, UPSERT, USER, USING, VALUE, VALUES, VALUE_OF, VARBINARY, VARCHAR, VARYING, VAR_POP, VAR_SAMP, VERSIONING, WHEN, WHENEVER, WHERE, WIDTH_BUCKET, WINDOW, WITH, WITHIN, WITHOUT, YEAR]\u003e\n     but: was \u003c[A, ABS, ABSOLUTE, ACTION, ADA, ADD, ADMIN, AFTER, ALL, ALLOCATE, ALLOW, ALTER, ALWAYS, AND, ANY, APPLY, ARE, ARRAY, ARRAY_MAX_CARDINALITY, AS, ASC, ASENSITIVE, ASSERTION, ASSIGNMENT, ASYMMETRIC, AT, ATOMIC, ATTRIBUTE, ATTRIBUTES, AUTHORIZATION, AVG, BEFORE, BEGIN, BEGIN_FRAME, BEGIN_PARTITION, BERNOULLI, BETWEEN, BIGINT, BINARY, BIT, BLOB, BOOLEAN, BOTH, BREADTH, BY, C, CALL, CALLED, CARDINALITY, CASCADE, CASCADED, CASE, CAST, CATALOG, CATALOG_NAME, CEIL, CEILING, CENTURY, CHAIN, CHAR, CHARACTER, CHARACTERISTICS, CHARACTERS, CHARACTER_LENGTH, CHARACTER_SET_CATALOG, CHARACTER_SET_NAME, CHARACTER_SET_SCHEMA, CHAR_LENGTH, CHECK, CLASSIFIER, CLASS_ORIGIN, CLOB, CLOSE, COALESCE, COBOL, COLLATE, COLLATION, COLLATION_CATALOG, COLLATION_NAME, COLLATION_SCHEMA, COLLECT, COLUMN, COLUMN_NAME, COMMAND_FUNCTION, COMMAND_FUNCTION_CODE, COMMIT, COMMITTED, CONDITION, CONDITION_NUMBER, CONNECT, CONNECTION, CONNECTION_NAME, CONSTRAINT, CONSTRAINTS, CONSTRAINT_CATALOG, CONSTRAINT_NAME, CONSTRAINT_SCHEMA, CONSTRUCTOR, CONTAINS, CONTINUE, CONVERT, CORR, CORRESPONDING, COUNT, COVAR_POP, COVAR_SAMP, CREATE, CROSS, CUBE, CUME_DIST, CURRENT, CURRENT_CATALOG, CURRENT_DATE, CURRENT_DEFAULT_TRANSFORM_GROUP, CURRENT_PATH, CURRENT_ROLE, CURRENT_ROW, CURRENT_SCHEMA, CURRENT_TIME, CURRENT_TIMESTAMP, CURRENT_TRANSFORM_GROUP_FOR_TYPE, CURRENT_USER, CURSOR, CURSOR_NAME, CYCLE, DATA, DATABASE, DATE, DATETIME_INTERVAL_CODE, DATETIME_INTERVAL_PRECISION, DAY, DEALLOCATE, DEC, DECADE, DECIMAL, DECLARE, DEFAULT, DEFAULTS, DEFERRABLE, DEFERRED, DEFINE, DEFINED, DEFINER, DEGREE, DELETE, DENSE_RANK, DEPTH, DEREF, DERIVED, DESC, DESCRIBE, DESCRIPTION, DESCRIPTOR, DETERMINISTIC, DIAGNOSTICS, DISALLOW, DISCONNECT, DISPATCH, DISTINCT, DOMAIN, DOUBLE, DOW, DOY, DROP, DYNAMIC, DYNAMIC_FUNCTION, DYNAMIC_FUNCTION_CODE, EACH, ELEMENT, ELSE, EMPTY, END, END-EXEC, END_FRAME, END_PARTITION, EPOCH, EQUALS, ESCAPE, EVERY, EXCEPT, EXCEPTION, EXCLUDE, EXCLUDING, EXEC, EXECUTE, EXISTS, EXP, EXPLAIN, EXTEND, EXTERNAL, EXTRACT, FALSE, FETCH, FILTER, FINAL, FIRST, FIRST_VALUE, FLOAT, FLOOR, FOLLOWING, FOR, FOREIGN, FORTRAN, FOUND, FRAC_SECOND, FRAME_ROW, FREE, FROM, FULL, FUNCTION, FUSION, G, GENERAL, GENERATED, GEOMETRY, GET, GLOBAL, GO, GOTO, GRANT, GRANTED, GROUP, GROUPING, GROUPS, HAVING, HIERARCHY, HOLD, HOUR, IDENTITY, IMMEDIATE, IMMEDIATELY, IMPLEMENTATION, IMPORT, IN, INCLUDING, INCREMENT, INDICATOR, INITIAL, INITIALLY, INNER, INOUT, INPUT, INSENSITIVE, INSERT, INSTANCE, INSTANTIABLE, INT, INTEGER, INTERSECT, INTERSECTION, INTERVAL, INTO, INVOKER, IS, ISODOW, ISOLATION, ISOYEAR, JAVA, JOIN, JSON, K, KEY, KEY_MEMBER, KEY_TYPE, LABEL, LAG, LANGUAGE, LARGE, LAST, LAST_VALUE, LATERAL, LEAD, LEADING, LEFT, LENGTH, LEVEL, LIBRARY, LIKE, LIKE_REGEX, LIMIT, LN, LOCAL, LOCALTIME, LOCALTIMESTAMP, LOCATOR, LOWER, M, MAP, MATCH, MATCHED, MATCHES, MATCH_NUMBER, MATCH_RECOGNIZE, MAX, MAXVALUE, MEASURES, MEMBER, MERGE, MESSAGE_LENGTH, MESSAGE_OCTET_LENGTH, MESSAGE_TEXT, METHOD, MICROSECOND, MILLENNIUM, MILLISECOND, MIN, MINUS, MINUTE, MINVALUE, MOD, MODIFIES, MODULE, MONTH, MORE, MULTISET, MUMPS, NAME, NAMES, NANOSECOND, NATIONAL, NATURAL, NCHAR, NCLOB, NESTING, NEW, NEXT, NO, NONE, NORMALIZE, NORMALIZED, NOT, NTH_VALUE, NTILE, NULL, NULLABLE, NULLIF, NULLS, NUMBER, NUMERIC, OBJECT, OCCURRENCES_REGEX, OCTETS, OCTET_LENGTH, OF, OFFSET, OLD, OMIT, ON, ONE, ONLY, OPEN, OPTION, OPTIONS, OR, ORDER, ORDERING, ORDINALITY, OTHERS, OUT, OUTER, OUTPUT, OVER, OVERLAPS, OVERLAY, OVERRIDING, PAD, PARAMETER, PARAMETER_MODE, PARAMETER_NAME, PARAMETER_ORDINAL_POSITION, PARAMETER_SPECIFIC_CATALOG, PARAMETER_SPECIFIC_NAME, PARAMETER_SPECIFIC_SCHEMA, PARTIAL, PARTITION, PASCAL, PASSTHROUGH, PAST, PATH, PATTERN, PER, PERCENT, PERCENTILE_CONT, PERCENTILE_DISC, PERCENT_RANK, PERIOD, PERMUTE, PLACING, PLAN, PLI, PORTION, POSITION, POSITION_REGEX, POWER, PRECEDES, PRECEDING, PRECISION, PREPARE, PRESERVE, PREV, PRIMARY, PRIOR, PRIVILEGES, PROCEDURE, PUBLIC, QUARTER, RANGE, RANK, READ, READS, REAL, RECURSIVE, REF, REFERENCES, REFERENCING, REGR_AVGX, REGR_AVGY, REGR_COUNT, REGR_INTERCEPT, REGR_R2, REGR_SLOPE, REGR_SXX, REGR_SXY, REGR_SYY, RELATIVE, RELEASE, REPEATABLE, REPLACE, RESET, RESTART, RESTRICT, RESULT, RETURN, RETURNED_CARDINALITY, RETURNED_LENGTH, RETURNED_OCTET_LENGTH, RETURNED_SQLSTATE, RETURNS, REVOKE, RIGHT, ROLE, ROLLBACK, ROLLUP, ROUTINE, ROUTINE_CATALOG, ROUTINE_NAME, ROUTINE_SCHEMA, ROW, ROWS, ROW_COUNT, ROW_NUMBER, RUNNING, SAVEPOINT, SCALE, SCHEMA, SCHEMA_NAME, SCOPE, SCOPE_CATALOGS, SCOPE_NAME, SCOPE_SCHEMA, SCROLL, SEARCH, SECOND, SECTION, SECURITY, SEEK, SELECT, SELF, SENSITIVE, SEQUENCE, SERIALIZABLE, SERVER, SERVER_NAME, SESSION, SESSION_USER, SET, SETS, SHOW, SIMILAR, SIMPLE, SIZE, SKIP, SMALLINT, SOME, SOURCE, SPACE, SPECIFIC, SPECIFICTYPE, SPECIFIC_NAME, SQL, SQLEXCEPTION, SQLSTATE, SQLWARNING, SQL_BIGINT, SQL_BINARY, SQL_BIT, SQL_BLOB, SQL_BOOLEAN, SQL_CHAR, SQL_CLOB, SQL_DATE, SQL_DECIMAL, SQL_DOUBLE, SQL_FLOAT, SQL_INTEGER, SQL_INTERVAL_DAY, SQL_INTERVAL_DAY_TO_HOUR, SQL_INTERVAL_DAY_TO_MINUTE, SQL_INTERVAL_DAY_TO_SECOND, SQL_INTERVAL_HOUR, SQL_INTERVAL_HOUR_TO_MINUTE, SQL_INTERVAL_HOUR_TO_SECOND, SQL_INTERVAL_MINUTE, SQL_INTERVAL_MINUTE_TO_SECOND, SQL_INTERVAL_MONTH, SQL_INTERVAL_SECOND, SQL_INTERVAL_YEAR, SQL_INTERVAL_YEAR_TO_MONTH, SQL_LONGVARBINARY, SQL_LONGVARCHAR, SQL_LONGVARNCHAR, SQL_NCHAR, SQL_NCLOB, SQL_NUMERIC, SQL_NVARCHAR, SQL_REAL, SQL_SMALLINT, SQL_TIME, SQL_TIMESTAMP, SQL_TINYINT, SQL_TSI_DAY, SQL_TSI_FRAC_SECOND, SQL_TSI_HOUR, SQL_TSI_MICROSECOND, SQL_TSI_MINUTE, SQL_TSI_MONTH, SQL_TSI_QUARTER, SQL_TSI_SECOND, SQL_TSI_WEEK, SQL_TSI_YEAR, SQL_VARBINARY, SQL_VARCHAR, SQRT, START, STATE, STATEMENT, STATIC, STDDEV_POP, STDDEV_SAMP, STREAM, STRUCTURE, STYLE, SUBCLASS_ORIGIN, SUBMULTISET, SUBSET, SUBSTITUTE, SUBSTRING, SUBSTRING_REGEX, SUCCEEDS, SUM, SYMMETRIC, SYSTEM, SYSTEM_TIME, SYSTEM_USER, TABLE, TABLESAMPLE, TABLE_NAME, TEMPORARY, THEN, TIES, TIME, TIMESTAMP, TIMESTAMPADD, TIMESTAMPDIFF, TIMEZONE_HOUR, TIMEZONE_MINUTE, TINYINT, TO, TOP_LEVEL_COUNT, TRAILING, TRANSACTION, TRANSACTIONS_ACTIVE, TRANSACTIONS_COMMITTED, TRANSACTIONS_ROLLED_BACK, TRANSFORM, TRANSFORMS, TRANSLATE, TRANSLATE_REGEX, TRANSLATION, TREAT, TRIGGER, TRIGGER_CATALOG, TRIGGER_NAME, TRIGGER_SCHEMA, TRIM, TRIM_ARRAY, TRUE, TRUNCATE, TYPE, UESCAPE, UNBOUNDED, UNCOMMITTED, UNDER, UNION, UNIQUE, UNKNOWN, UNNAMED, UNNEST, UPDATE, UPPER, UPSERT, USAGE, USER, USER_DEFINED_TYPE_CATALOG, USER_DEFINED_TYPE_CODE, USER_DEFINED_TYPE_NAME, USER_DEFINED_TYPE_SCHEMA, USING, VALUE, VALUES, VALUE_OF, VARBINARY, VARCHAR, VARYING, VAR_POP, VAR_SAMP, VERSION, VERSIONING, VIEW, WEEK, WHEN, WHENEVER, WHERE, WIDTH_BUCKET, WINDOW, WITH, WITHIN, WITHOUT, WORK, WRAPPER, WRITE, XML, YEAR, ZONE]\u003e",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.sql.parser.SqlParserTest",
        "testMethod": "testSelectFromBareExplicitTableFails",
        "failureName": "java.lang.AssertionError",
        "detail": "Validator threw different exception than expected; query [select * from table emp];\n expected pattern [(?s).*Encountered \"table emp\" at .*];\n actual [Encountered \"\" at line 1, column 15.\nWas expecting one of:\n    ];\n actual as java regexp [\"Encountered \\\"\\\" at line 1, column 15\\\\.\\n\"\n + \"Was expecting one of:\\n\"\n + \"    \"]; pos [1 col 15 thru line 1 col 19]; sql [select * from ^table^ emp]",
        "isError": false
      }
    ]
  },
  "commits": {
    "buggyBuild": {
      "repoName": "risdenk/calcite",
      "branchName": "master",
      "sha": "dfffda407a8808f4b55f15ececbeddbad7666bfb",
      "url": "http://github.com/risdenk/calcite/commit/dfffda407a8808f4b55f15ececbeddbad7666bfb",
      "date": "Sep 1, 2018 4:52:17 PM"
    },
    "buggyBuildForkRepo": {
      "repoName": "risdenk/calcite",
      "branchName": "dependabot/maven/org.codehaus.mojo-javacc-maven-plugin-2.6",
      "sha": "9484015698c207942bdb68111c81a36bf6f0efe0",
      "url": "https://github.com/risdenk/calcite/commit/9484015698c207942bdb68111c81a36bf6f0efe0",
      "date": "Sep 1, 2018 4:52:17 PM"
    },
    "buggyBuildBaseRepo": {
      "repoName": "risdenk/calcite",
      "branchName": "master",
      "sha": "6a22cc25f9f7d083f30ff361d8c907f4d6173737",
      "url": "https://github.com/risdenk/calcite/commit/6a22cc25f9f7d083f30ff361d8c907f4d6173737",
      "date": "Aug 29, 2018 9:52:44 PM"
    }
  },
  "projectMetrics": {
    "numberModules": 19,
    "numberSourceFiles": 1511,
    "numberTestFiles": 215,
    "numberLibrariesFailingModule": 46
  },
  "repository": {
    "name": "risdenk/calcite",
    "githubId": 54138412,
    "url": "https://github.com/risdenk/calcite",
    "isFork": true,
    "original": {
      "name": "apache/calcite",
      "githubId": 21193524,
      "url": "https://github.com/apache/calcite"
    },
    "isPullRequest": true,
    "pullRequestId": 6
  },
  "builds": {
    "buggyBuild": {
      "id": 423386498,
      "url": "http://travis-ci.org/risdenk/calcite/builds/423386498",
      "date": "Sep 1, 2018 5:46:20 PM"
    }
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Sep 1, 2018 5:46:32 PM",
    "reproductionDateEnd": "Sep 1, 2018 5:56:33 PM",
    "totalDuration": 597,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 17,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          17
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 128,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          2,
          126
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 366,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          366
        ]
      }
    },
    "projectRootPomPath": "./workspace/risdenk/calcite/423386498/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "type": "only_fail"
}