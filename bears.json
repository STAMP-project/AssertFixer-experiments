{
  "projectMetrics": {
    "numberModules": 1,
    "numberSourceFiles": 638,
    "numberTestFiles": 702,
    "numberLibrariesFailingModule": 33
  },
  "tests": {
    "failingModule": "/root/workspace/INRIA/spoon/430231690",
    "overallMetrics": {
      "numberRunning": 1557,
      "numberPassing": 1555,
      "numberFailing": 2,
      "numberErroring": 0,
      "numberSkipping": 5,
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 2
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "spoon.test.api.MetamodelTest",
        "numberRunning": 14,
        "numberPassing": 13,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.test.imports.ImportScannerTest",
        "numberRunning": 6,
        "numberPassing": 5,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "spoon.test.imports.ImportScannerTest",
        "testMethod": "testImportOnSpoon",
        "failureName": "java.lang.AssertionError",
        "detail": "Import scanner missed 25 imports expected:\u003c0\u003e but was:\u003c25\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.test.api.MetamodelTest",
        "testMethod": "spoonMetaModelTest",
        "failureName": "java.lang.AssertionError",
        "detail": "[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddArgument(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetUpper(boolean), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetForUpdate(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddConstructor(spoon.reflect.declaration.CtConstructor), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetValue(java.lang.String), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetOpenedPackage(boolean), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetSimpleName(java.lang.String), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddImplementationType(spoon.reflect.reference.CtTypeReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dinsertBegin(spoon.reflect.code.CtStatement), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetAnnotationType(spoon.reflect.reference.CtTypeReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetParameter(spoon.reflect.code.CtCatchVariable), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetConstructors(java.util.Set), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetFields(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddMethod(spoon.reflect.declaration.CtMethod), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetFormalCtTypeParameters(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddValue(java.lang.String,spoon.reflect.code.CtLiteral), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetVariable(spoon.reflect.code.CtLocalVariable), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetLabel(java.lang.String), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetSuperclass(spoon.reflect.reference.CtTypeReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetDefaultMethod(boolean), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetContent(java.lang.String), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetExportedPackages(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddProvidedService(spoon.reflect.declaration.CtProvidedService), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddStatement(int,spoon.reflect.code.CtStatement), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetType(java.lang.String), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetThrownExpression(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddField(int,spoon.reflect.declaration.CtField), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetTypes(java.util.Set), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddDimensionExpression(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetDefaultExpression(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetExpression(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddModuleDirectiveAt(int,spoon.reflect.declaration.CtModuleDirective), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetInferred(boolean), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetAssigned(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetIndexExpression(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddStatement(spoon.reflect.code.CtStatement), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetLoopingExpression(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dgetNestedType(java.lang.String), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddMultiType(spoon.reflect.reference.CtTypeReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dinsertEnd(spoon.reflect.code.CtStatementList), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddForInit(spoon.reflect.code.CtStatement), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddTargetExport(spoon.reflect.reference.CtModuleReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetValues(java.util.Map), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetAssertExpression(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetIsOpenModule(boolean), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetReturnedExpression(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddParameter(spoon.reflect.declaration.CtParameter), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetAssignment(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetThrownTypes(java.util.Set), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetType(spoon.reflect.reference.CtTypeReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddSuperInterface(spoon.reflect.reference.CtTypeReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetVisibility(spoon.reflect.declaration.ModifierKind), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetStatic(boolean), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dremoveModuleDirective(spoon.reflect.declaration.CtModuleDirective), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddExportedPackage(spoon.reflect.declaration.CtPackageExport), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetValue(java.lang.Object), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetTypeMembers(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddTag(spoon.reflect.code.CtJavaDocTag), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetPackages(java.util.Set), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetOpenedPackages(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetCases(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddBound(spoon.reflect.reference.CtTypeReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddTypeMember(spoon.reflect.declaration.CtTypeMember), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddFormalCtTypeParameter(spoon.reflect.declaration.CtTypeParameter), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetMultiTypes(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetAnonymousExecutables(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddField(spoon.reflect.declaration.CtField), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetBounds(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetNestedTypes(java.util.Set), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dremoveExportedPackage(spoon.reflect.declaration.CtPackageExport), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddUsedService(spoon.reflect.declaration.CtUsedService), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetModifiers(java.util.Set), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddCatcher(spoon.reflect.code.CtCatch), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dgetWrappedValue(java.lang.String), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dremoveRequiredModule(spoon.reflect.declaration.CtModuleRequirement), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetArguments(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetType(spoon.reflect.code.CtJavaDocTag$TagType), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetFinal(boolean), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetFinalizer(spoon.reflect.code.CtBlock), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetLeftHandOperand(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetUsedServices(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetVarArgs(boolean), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetProvidedServices(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetRightHandOperand(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetPackageReference(spoon.reflect.reference.CtPackageReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddEnumValue(spoon.reflect.declaration.CtEnumValue), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetDeclaringType(spoon.reflect.reference.CtTypeReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dremoveTag(spoon.reflect.code.CtJavaDocTag), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetTarget(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetServiceType(spoon.reflect.reference.CtTypeReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetKind(spoon.reflect.code.BinaryOperatorKind), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dremoveOpenedPackage(spoon.reflect.declaration.CtPackageExport), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetModuleReference(spoon.reflect.reference.CtModuleReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddThrownType(spoon.reflect.reference.CtTypeReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetAnonymousClass(spoon.reflect.declaration.CtClass), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetImplementationTypes(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetTargetExport(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetForInit(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetKind(spoon.reflect.code.UnaryOperatorKind), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dinsertEnd(spoon.reflect.code.CtStatement), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetReference(spoon.reflect.reference.CtReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetSuperInterfaces(java.util.Set), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetEnumValues(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetElementValues(java.util.Map), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetElements(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetPackage(spoon.reflect.reference.CtPackageReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetVariable(spoon.reflect.reference.CtVariableReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetCaseExpression(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetTargetLabel(java.lang.String), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddValue(java.lang.String,spoon.reflect.declaration.CtAnnotation), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetRequiredModules(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddFieldAtTop(spoon.reflect.declaration.CtField), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetBlock(spoon.reflect.code.CtBlock), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dremoveUsedService(spoon.reflect.declaration.CtUsedService), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dremoveProvidedService(spoon.reflect.declaration.CtProvidedService), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddValue(java.lang.String,java.lang.Object), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetResources(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetCommentType(spoon.reflect.code.CtComment$CommentType), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetCatchers(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetMethods(java.util.Set), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dgetValue(java.lang.String), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetTags(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetBoundingType(spoon.reflect.reference.CtTypeReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetModuleDirectives(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetShadow(boolean), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddRequiredModule(spoon.reflect.declaration.CtModuleRequirement), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetStatements(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddCase(spoon.reflect.code.CtCase), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dremoveTag(int), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetRootPackage(spoon.reflect.declaration.CtPackage), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetDimensionExpressions(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddForUpdate(spoon.reflect.code.CtStatement), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddTag(int,spoon.reflect.code.CtJavaDocTag), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dinsertBegin(spoon.reflect.code.CtStatementList), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetParameters(java.util.List), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetExecutable(spoon.reflect.reference.CtExecutableReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dgetType(java.lang.String), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetRequiresModifiers(java.util.Set), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddValue(java.lang.String,spoon.reflect.code.CtNewArray), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddNestedType(spoon.reflect.declaration.CtType), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetAccessedType(spoon.reflect.reference.CtTypeReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dgetThenStatement(), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddModifier(spoon.reflect.declaration.ModifierKind), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetOperand(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetComponentType(spoon.reflect.reference.CtTypeReference), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddTypeMemberAt(int,spoon.reflect.declaration.CtTypeMember), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddModuleDirective(spoon.reflect.declaration.CtModuleDirective), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dremoveModifier(spoon.reflect.declaration.ModifierKind), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dgetElseStatement(), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddResource(spoon.reflect.code.CtLocalVariable), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetSelector(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddOpenedPackage(spoon.reflect.declaration.CtPackageExport), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetParam(java.lang.String), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dsetBody(spoon.reflect.code.CtStatement), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddPackage(spoon.reflect.declaration.CtPackage), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddElement(spoon.reflect.code.CtExpression), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddType(spoon.reflect.declaration.CtType), \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003daddValue(java.lang.String,spoon.reflect.code.CtFieldAccess)] expected:\u003c0\u003e but was:\u003c159\u003e",
        "isError": false
      }
    ]
  },
  "commits": {
    "buggyBuild": {
      "repoName": "INRIA/spoon",
      "branchName": "master",
      "sha": "17d8ef835092af273d4dee6b1f635f359a3c07d4",
      "url": "http://github.com/INRIA/spoon/commit/17d8ef835092af273d4dee6b1f635f359a3c07d4",
      "date": "Sep 18, 2018 10:15:47 PM"
    },
    "buggyBuildForkRepo": {
      "repoName": "monperrus/spoon",
      "branchName": "refactor-return-type-metamodel",
      "sha": "a2acc1fe2f9e5f1486d966095f341ea7bc18d0c2",
      "url": "https://github.com/monperrus/spoon/commit/a2acc1fe2f9e5f1486d966095f341ea7bc18d0c2",
      "date": "Sep 18, 2018 10:15:47 PM"
    },
    "buggyBuildBaseRepo": {
      "repoName": "INRIA/spoon",
      "branchName": "master",
      "sha": "e3a91e395eb54ffe0e442e411fbff4d87cf69ae7",
      "url": "https://github.com/INRIA/spoon/commit/e3a91e395eb54ffe0e442e411fbff4d87cf69ae7",
      "date": "Sep 18, 2018 5:20:29 PM"
    }
  },
  "repository": {
    "name": "INRIA/spoon",
    "githubId": 14176513,
    "url": "https://github.com/INRIA/spoon",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": true,
    "pullRequestId": 1852
  },
  "builds": {
    "buggyBuild": {
      "id": 430231690,
      "url": "http://travis-ci.org/INRIA/spoon/builds/430231690",
      "date": "Sep 18, 2018 10:41:42 PM"
    }
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Sep 18, 2018 10:41:52 PM",
    "reproductionDateEnd": "Sep 18, 2018 10:56:09 PM",
    "totalDuration": 853,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 11,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          11
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 83,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          5,
          78
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 651,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          651
        ]
      }
    },
    "projectRootPomPath": "./workspace/INRIA/spoon/430231690/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "type": "only_fail"
}