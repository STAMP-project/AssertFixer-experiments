/*
 * mzTab validation API.
 * This is an mzTab validation service.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab1_1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab1_1.model.Comment;
import de.isas.mztab1_1.model.OptColumnMapping;
import de.isas.mztab1_1.model.Parameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.jmztabm.validation.constraints.*;
/**
 * SmallMoleculeSummary
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-31T17:58:50.083+02:00")
@XmlRootElement(name = "SmallMoleculeSummary")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "SmallMoleculeSummary")
public class SmallMoleculeSummary {

  public static enum Properties {
      prefix("prefix"), 
      headerPrefix("header_prefix"), 
      smlId("sml_id"), 
      smfIdRefs("smf_id_refs"), 
      databaseIdentifier("database_identifier"), 
      chemicalFormula("chemical_formula"), 
      smiles("smiles"), 
      inchi("inchi"), 
      chemicalName("chemical_name"), 
      uri("uri"), 
      theoreticalNeutralMass("theoretical_neutral_mass"), 
      adductIons("adduct_ions"), 
      reliability("reliability"), 
      bestIdConfidenceMeasure("best_id_confidence_measure"), 
      bestIdConfidenceValue("best_id_confidence_value"), 
      abundanceAssay("abundance_assay"), 
      abundanceStudyVariable("abundance_study_variable"), 
      abundanceVariationStudyVariable("abundance_variation_study_variable"), 
      opt("opt"), 
      comment("comment");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  /**
   * Gets or Sets prefix
   */
  public enum PrefixEnum {
    SML("SML");

    private String value;

    PrefixEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PrefixEnum fromValue(String text) {
      for (PrefixEnum b : PrefixEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("prefix")
  @JacksonXmlProperty(localName = "prefix")
  @XmlElement(name = "prefix")
  private PrefixEnum prefix = PrefixEnum.SML;
  /**
   * Gets or Sets headerPrefix
   */
  public enum HeaderPrefixEnum {
    SMH("SMH");

    private String value;

    HeaderPrefixEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HeaderPrefixEnum fromValue(String text) {
      for (HeaderPrefixEnum b : HeaderPrefixEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("header_prefix")
  @JacksonXmlProperty(localName = "header_prefix")
  @XmlElement(name = "header_prefix")
  private HeaderPrefixEnum headerPrefix = HeaderPrefixEnum.SMH;
  @JsonProperty("sml_id")
  @JacksonXmlProperty(localName = "sml_id")
  @XmlElement(name = "sml_id")
  private String smlId = null;
  @JsonProperty("smf_id_refs")
  // Is a container wrapped=false
  // items.name=smfIdRefs items.baseName=smfIdRefs items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "smfIdRefs")
  private List<String> smfIdRefs = new ArrayList<>();
  @JsonProperty("database_identifier")
  // Is a container wrapped=false
  // items.name=databaseIdentifier items.baseName=databaseIdentifier items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "databaseIdentifier")
  private List<String> databaseIdentifier = null;
  @JsonProperty("chemical_formula")
  // Is a container wrapped=false
  // items.name=chemicalFormula items.baseName=chemicalFormula items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "chemicalFormula")
  private List<String> chemicalFormula = null;
  @JsonProperty("smiles")
  // Is a container wrapped=false
  // items.name=smiles items.baseName=smiles items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "smiles")
  private List<String> smiles = null;
  @JsonProperty("inchi")
  // Is a container wrapped=false
  // items.name=inchi items.baseName=inchi items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "inchi")
  private List<String> inchi = null;
  @JsonProperty("chemical_name")
  // Is a container wrapped=false
  // items.name=chemicalName items.baseName=chemicalName items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "chemicalName")
  private List<String> chemicalName = null;
  @JsonProperty("uri")
  // Is a container wrapped=false
  // items.name=uri items.baseName=uri items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "uri")
  private List<String> uri = null;
  @JsonProperty("theoretical_neutral_mass")
  // Is a container wrapped=false
  // items.name=theoreticalNeutralMass items.baseName=theoreticalNeutralMass items.xmlName= items.xmlNamespace=
  // items.example= items.type=Double
  @XmlElement(name = "theoreticalNeutralMass")
  private List<Double> theoreticalNeutralMass = null;
  @JsonProperty("adduct_ions")
  // Is a container wrapped=false
  // items.name=adductIons items.baseName=adductIons items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "adductIons")
  private List<String> adductIons = null;
  @JsonProperty("reliability")
  @JacksonXmlProperty(localName = "reliability")
  @XmlElement(name = "reliability")
  private String reliability = null;
  @JsonProperty("best_id_confidence_measure")
  @JacksonXmlProperty(localName = "best_id_confidence_measure")
  @XmlElement(name = "best_id_confidence_measure")
  private Parameter bestIdConfidenceMeasure = null;
  @JsonProperty("best_id_confidence_value")
  @JacksonXmlProperty(localName = "best_id_confidence_value")
  @XmlElement(name = "best_id_confidence_value")
  private Double bestIdConfidenceValue = null;
  @JsonProperty("abundance_assay")
  // Is a container wrapped=false
  // items.name=abundanceAssay items.baseName=abundanceAssay items.xmlName= items.xmlNamespace=
  // items.example= items.type=Double
  @XmlElement(name = "abundanceAssay")
  private List<Double> abundanceAssay = null;
  @JsonProperty("abundance_study_variable")
  // Is a container wrapped=false
  // items.name=abundanceStudyVariable items.baseName=abundanceStudyVariable items.xmlName= items.xmlNamespace=
  // items.example= items.type=Double
  @XmlElement(name = "abundanceStudyVariable")
  private List<Double> abundanceStudyVariable = null;
  @JsonProperty("abundance_variation_study_variable")
  // Is a container wrapped=false
  // items.name=abundanceVariationStudyVariable items.baseName=abundanceVariationStudyVariable items.xmlName= items.xmlNamespace=
  // items.example= items.type=Double
  @XmlElement(name = "abundanceVariationStudyVariable")
  private List<Double> abundanceVariationStudyVariable = null;
  @JsonProperty("opt")
  // Is a container wrapped=false
  // items.name=opt items.baseName=opt items.xmlName= items.xmlNamespace=
  // items.example= items.type=OptColumnMapping
  @XmlElement(name = "opt")
  private List<OptColumnMapping> opt = null;
  @JsonProperty("comment")
  // Is a container wrapped=false
  // items.name=comment items.baseName=comment items.xmlName= items.xmlNamespace=
  // items.example= items.type=Comment
  @XmlElement(name = "comment")
  private List<Comment> comment = null;
   /**
   * Get prefix
   * @return prefix
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public PrefixEnum getPrefix() {
    return prefix;
  }

   /**
   * Get headerPrefix
   * @return headerPrefix
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public HeaderPrefixEnum getHeaderPrefix() {
    return headerPrefix;
  }


  public SmallMoleculeSummary smlId(String smlId) {
   this.smlId = smlId;
   return this;
  }

   /**
   * Get smlId
   * @return smlId
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public String getSmlId() {
    return smlId;
  }

  public void setSmlId(String smlId) {
    this.smlId = smlId;
  }


  public SmallMoleculeSummary smfIdRefs(List<String> smfIdRefs) {
   this.smfIdRefs = smfIdRefs;
   return this;
  }

  public SmallMoleculeSummary addSmfIdRefsItem(String smfIdRefsItem) {
    this.smfIdRefs.add(smfIdRefsItem);
    return this;
  }

   /**
   * Get smfIdRefs
   * @return smfIdRefs
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public List<String> getSmfIdRefs() {
    return smfIdRefs;
  }

  public void setSmfIdRefs(List<String> smfIdRefs) {
    this.smfIdRefs = smfIdRefs;
  }


  public SmallMoleculeSummary databaseIdentifier(List<String> databaseIdentifier) {
   this.databaseIdentifier = databaseIdentifier;
   return this;
  }

  public SmallMoleculeSummary addDatabaseIdentifierItem(String databaseIdentifierItem) {
    if (this.databaseIdentifier == null) {
      this.databaseIdentifier = new ArrayList<>();
    }
    this.databaseIdentifier.add(databaseIdentifierItem);
    return this;
  }

   /**
   * Get databaseIdentifier
   * @return databaseIdentifier
  **/
  @ApiModelProperty(value = "")
  public List<String> getDatabaseIdentifier() {
    return databaseIdentifier;
  }

  public void setDatabaseIdentifier(List<String> databaseIdentifier) {
    this.databaseIdentifier = databaseIdentifier;
  }


  public SmallMoleculeSummary chemicalFormula(List<String> chemicalFormula) {
   this.chemicalFormula = chemicalFormula;
   return this;
  }

  public SmallMoleculeSummary addChemicalFormulaItem(String chemicalFormulaItem) {
    if (this.chemicalFormula == null) {
      this.chemicalFormula = new ArrayList<>();
    }
    this.chemicalFormula.add(chemicalFormulaItem);
    return this;
  }

   /**
   * Get chemicalFormula
   * @return chemicalFormula
  **/
  @ApiModelProperty(value = "")
  public List<String> getChemicalFormula() {
    return chemicalFormula;
  }

  public void setChemicalFormula(List<String> chemicalFormula) {
    this.chemicalFormula = chemicalFormula;
  }


  public SmallMoleculeSummary smiles(List<String> smiles) {
   this.smiles = smiles;
   return this;
  }

  public SmallMoleculeSummary addSmilesItem(String smilesItem) {
    if (this.smiles == null) {
      this.smiles = new ArrayList<>();
    }
    this.smiles.add(smilesItem);
    return this;
  }

   /**
   * Get smiles
   * @return smiles
  **/
  @ApiModelProperty(value = "")
  public List<String> getSmiles() {
    return smiles;
  }

  public void setSmiles(List<String> smiles) {
    this.smiles = smiles;
  }


  public SmallMoleculeSummary inchi(List<String> inchi) {
   this.inchi = inchi;
   return this;
  }

  public SmallMoleculeSummary addInchiItem(String inchiItem) {
    if (this.inchi == null) {
      this.inchi = new ArrayList<>();
    }
    this.inchi.add(inchiItem);
    return this;
  }

   /**
   * Get inchi
   * @return inchi
  **/
  @ApiModelProperty(value = "")
  public List<String> getInchi() {
    return inchi;
  }

  public void setInchi(List<String> inchi) {
    this.inchi = inchi;
  }


  public SmallMoleculeSummary chemicalName(List<String> chemicalName) {
   this.chemicalName = chemicalName;
   return this;
  }

  public SmallMoleculeSummary addChemicalNameItem(String chemicalNameItem) {
    if (this.chemicalName == null) {
      this.chemicalName = new ArrayList<>();
    }
    this.chemicalName.add(chemicalNameItem);
    return this;
  }

   /**
   * Get chemicalName
   * @return chemicalName
  **/
  @ApiModelProperty(value = "")
  public List<String> getChemicalName() {
    return chemicalName;
  }

  public void setChemicalName(List<String> chemicalName) {
    this.chemicalName = chemicalName;
  }


  public SmallMoleculeSummary uri(List<String> uri) {
   this.uri = uri;
   return this;
  }

  public SmallMoleculeSummary addUriItem(String uriItem) {
    if (this.uri == null) {
      this.uri = new ArrayList<>();
    }
    this.uri.add(uriItem);
    return this;
  }

   /**
   * Get uri
   * @return uri
  **/
  @ApiModelProperty(value = "")
  public List<String> getUri() {
    return uri;
  }

  public void setUri(List<String> uri) {
    this.uri = uri;
  }


  public SmallMoleculeSummary theoreticalNeutralMass(List<Double> theoreticalNeutralMass) {
   this.theoreticalNeutralMass = theoreticalNeutralMass;
   return this;
  }

  public SmallMoleculeSummary addTheoreticalNeutralMassItem(Double theoreticalNeutralMassItem) {
    if (this.theoreticalNeutralMass == null) {
      this.theoreticalNeutralMass = new ArrayList<>();
    }
    this.theoreticalNeutralMass.add(theoreticalNeutralMassItem);
    return this;
  }

   /**
   * Get theoreticalNeutralMass
   * @return theoreticalNeutralMass
  **/
  @ApiModelProperty(value = "")
  public List<Double> getTheoreticalNeutralMass() {
    return theoreticalNeutralMass;
  }

  public void setTheoreticalNeutralMass(List<Double> theoreticalNeutralMass) {
    this.theoreticalNeutralMass = theoreticalNeutralMass;
  }


  public SmallMoleculeSummary adductIons(List<String> adductIons) {
   this.adductIons = adductIons;
   return this;
  }

  public SmallMoleculeSummary addAdductIonsItem(String adductIonsItem) {
    if (this.adductIons == null) {
      this.adductIons = new ArrayList<>();
    }
    this.adductIons.add(adductIonsItem);
    return this;
  }

   /**
   * Get adductIons
   * @return adductIons
  **/
  @ApiModelProperty(value = "")
  public List<String> getAdductIons() {
    return adductIons;
  }

  public void setAdductIons(List<String> adductIons) {
    this.adductIons = adductIons;
  }


  public SmallMoleculeSummary reliability(String reliability) {
   this.reliability = reliability;
   return this;
  }

   /**
   * Get reliability
   * @return reliability
  **/
  @ApiModelProperty(value = "")
  public String getReliability() {
    return reliability;
  }

  public void setReliability(String reliability) {
    this.reliability = reliability;
  }


  public SmallMoleculeSummary bestIdConfidenceMeasure(Parameter bestIdConfidenceMeasure) {
   this.bestIdConfidenceMeasure = bestIdConfidenceMeasure;
   return this;
  }

   /**
   * Get bestIdConfidenceMeasure
   * @return bestIdConfidenceMeasure
  **/
  @Valid
  @ApiModelProperty(value = "")
  public Parameter getBestIdConfidenceMeasure() {
    return bestIdConfidenceMeasure;
  }

  public void setBestIdConfidenceMeasure(Parameter bestIdConfidenceMeasure) {
    this.bestIdConfidenceMeasure = bestIdConfidenceMeasure;
  }


  public SmallMoleculeSummary bestIdConfidenceValue(Double bestIdConfidenceValue) {
   this.bestIdConfidenceValue = bestIdConfidenceValue;
   return this;
  }

   /**
   * Get bestIdConfidenceValue
   * @return bestIdConfidenceValue
  **/
  @ApiModelProperty(value = "")
  public Double getBestIdConfidenceValue() {
    return bestIdConfidenceValue;
  }

  public void setBestIdConfidenceValue(Double bestIdConfidenceValue) {
    this.bestIdConfidenceValue = bestIdConfidenceValue;
  }


  public SmallMoleculeSummary abundanceAssay(List<Double> abundanceAssay) {
   this.abundanceAssay = abundanceAssay;
   return this;
  }

  public SmallMoleculeSummary addAbundanceAssayItem(Double abundanceAssayItem) {
    if (this.abundanceAssay == null) {
      this.abundanceAssay = new ArrayList<>();
    }
    this.abundanceAssay.add(abundanceAssayItem);
    return this;
  }

   /**
   * Get abundanceAssay
   * @return abundanceAssay
  **/
  @ApiModelProperty(value = "")
  public List<Double> getAbundanceAssay() {
    return abundanceAssay;
  }

  public void setAbundanceAssay(List<Double> abundanceAssay) {
    this.abundanceAssay = abundanceAssay;
  }


  public SmallMoleculeSummary abundanceStudyVariable(List<Double> abundanceStudyVariable) {
   this.abundanceStudyVariable = abundanceStudyVariable;
   return this;
  }

  public SmallMoleculeSummary addAbundanceStudyVariableItem(Double abundanceStudyVariableItem) {
    if (this.abundanceStudyVariable == null) {
      this.abundanceStudyVariable = new ArrayList<>();
    }
    this.abundanceStudyVariable.add(abundanceStudyVariableItem);
    return this;
  }

   /**
   * Get abundanceStudyVariable
   * @return abundanceStudyVariable
  **/
  @ApiModelProperty(value = "")
  public List<Double> getAbundanceStudyVariable() {
    return abundanceStudyVariable;
  }

  public void setAbundanceStudyVariable(List<Double> abundanceStudyVariable) {
    this.abundanceStudyVariable = abundanceStudyVariable;
  }


  public SmallMoleculeSummary abundanceVariationStudyVariable(List<Double> abundanceVariationStudyVariable) {
   this.abundanceVariationStudyVariable = abundanceVariationStudyVariable;
   return this;
  }

  public SmallMoleculeSummary addAbundanceVariationStudyVariableItem(Double abundanceVariationStudyVariableItem) {
    if (this.abundanceVariationStudyVariable == null) {
      this.abundanceVariationStudyVariable = new ArrayList<>();
    }
    this.abundanceVariationStudyVariable.add(abundanceVariationStudyVariableItem);
    return this;
  }

   /**
   * Get abundanceVariationStudyVariable
   * @return abundanceVariationStudyVariable
  **/
  @ApiModelProperty(value = "")
  public List<Double> getAbundanceVariationStudyVariable() {
    return abundanceVariationStudyVariable;
  }

  public void setAbundanceVariationStudyVariable(List<Double> abundanceVariationStudyVariable) {
    this.abundanceVariationStudyVariable = abundanceVariationStudyVariable;
  }


  public SmallMoleculeSummary opt(List<OptColumnMapping> opt) {
   this.opt = opt;
   return this;
  }

  public SmallMoleculeSummary addOptItem(OptColumnMapping optItem) {
    if (this.opt == null) {
      this.opt = new ArrayList<>();
    }
    this.opt.add(optItem);
    return this;
  }

   /**
   * Get opt
   * @return opt
  **/
  @Valid
  @ApiModelProperty(value = "")
  public List<OptColumnMapping> getOpt() {
    return opt;
  }

  public void setOpt(List<OptColumnMapping> opt) {
    this.opt = opt;
  }


  public SmallMoleculeSummary comment(List<Comment> comment) {
   this.comment = comment;
   return this;
  }

  public SmallMoleculeSummary addCommentItem(Comment commentItem) {
    if (this.comment == null) {
      this.comment = new ArrayList<>();
    }
    this.comment.add(commentItem);
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @Valid
  @ApiModelProperty(value = "")
  public List<Comment> getComment() {
    return comment;
  }

  public void setComment(List<Comment> comment) {
    this.comment = comment;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmallMoleculeSummary smallMoleculeSummary = (SmallMoleculeSummary) o;
    return Objects.equals(this.prefix, smallMoleculeSummary.prefix) &&
        Objects.equals(this.headerPrefix, smallMoleculeSummary.headerPrefix) &&
        Objects.equals(this.smlId, smallMoleculeSummary.smlId) &&
        Objects.equals(this.smfIdRefs, smallMoleculeSummary.smfIdRefs) &&
        Objects.equals(this.databaseIdentifier, smallMoleculeSummary.databaseIdentifier) &&
        Objects.equals(this.chemicalFormula, smallMoleculeSummary.chemicalFormula) &&
        Objects.equals(this.smiles, smallMoleculeSummary.smiles) &&
        Objects.equals(this.inchi, smallMoleculeSummary.inchi) &&
        Objects.equals(this.chemicalName, smallMoleculeSummary.chemicalName) &&
        Objects.equals(this.uri, smallMoleculeSummary.uri) &&
        Objects.equals(this.theoreticalNeutralMass, smallMoleculeSummary.theoreticalNeutralMass) &&
        Objects.equals(this.adductIons, smallMoleculeSummary.adductIons) &&
        Objects.equals(this.reliability, smallMoleculeSummary.reliability) &&
        Objects.equals(this.bestIdConfidenceMeasure, smallMoleculeSummary.bestIdConfidenceMeasure) &&
        Objects.equals(this.bestIdConfidenceValue, smallMoleculeSummary.bestIdConfidenceValue) &&
        Objects.equals(this.abundanceAssay, smallMoleculeSummary.abundanceAssay) &&
        Objects.equals(this.abundanceStudyVariable, smallMoleculeSummary.abundanceStudyVariable) &&
        Objects.equals(this.abundanceVariationStudyVariable, smallMoleculeSummary.abundanceVariationStudyVariable) &&
        Objects.equals(this.opt, smallMoleculeSummary.opt) &&
        Objects.equals(this.comment, smallMoleculeSummary.comment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prefix, headerPrefix, smlId, smfIdRefs, databaseIdentifier, chemicalFormula, smiles, inchi, chemicalName, uri, theoreticalNeutralMass, adductIons, reliability, bestIdConfidenceMeasure, bestIdConfidenceValue, abundanceAssay, abundanceStudyVariable, abundanceVariationStudyVariable, opt, comment);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmallMoleculeSummary {\n");
    
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    headerPrefix: ").append(toIndentedString(headerPrefix)).append("\n");
    sb.append("    smlId: ").append(toIndentedString(smlId)).append("\n");
    sb.append("    smfIdRefs: ").append(toIndentedString(smfIdRefs)).append("\n");
    sb.append("    databaseIdentifier: ").append(toIndentedString(databaseIdentifier)).append("\n");
    sb.append("    chemicalFormula: ").append(toIndentedString(chemicalFormula)).append("\n");
    sb.append("    smiles: ").append(toIndentedString(smiles)).append("\n");
    sb.append("    inchi: ").append(toIndentedString(inchi)).append("\n");
    sb.append("    chemicalName: ").append(toIndentedString(chemicalName)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    theoreticalNeutralMass: ").append(toIndentedString(theoreticalNeutralMass)).append("\n");
    sb.append("    adductIons: ").append(toIndentedString(adductIons)).append("\n");
    sb.append("    reliability: ").append(toIndentedString(reliability)).append("\n");
    sb.append("    bestIdConfidenceMeasure: ").append(toIndentedString(bestIdConfidenceMeasure)).append("\n");
    sb.append("    bestIdConfidenceValue: ").append(toIndentedString(bestIdConfidenceValue)).append("\n");
    sb.append("    abundanceAssay: ").append(toIndentedString(abundanceAssay)).append("\n");
    sb.append("    abundanceStudyVariable: ").append(toIndentedString(abundanceStudyVariable)).append("\n");
    sb.append("    abundanceVariationStudyVariable: ").append(toIndentedString(abundanceVariationStudyVariable)).append("\n");
    sb.append("    opt: ").append(toIndentedString(opt)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

