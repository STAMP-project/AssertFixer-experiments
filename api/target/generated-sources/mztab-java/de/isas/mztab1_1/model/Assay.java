/*
 * mzTab validation API.
 * This is an mzTab validation service.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab1_1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab1_1.model.IndexedElement;
import de.isas.mztab1_1.model.MsRun;
import de.isas.mztab1_1.model.Parameter;
import de.isas.mztab1_1.model.Sample;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.jmztabm.validation.constraints.*;
/**
 * Assay
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-31T17:58:50.083+02:00")
@XmlRootElement(name = "Assay")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "Assay")
public class Assay extends IndexedElement {

  public static enum Properties {
      name("name"), 
      custom("custom"), 
      externalUri("external_uri"), 
      sampleRef("sample_ref"), 
      msRunRef("ms_run_ref");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  @JsonProperty("name")
  @JacksonXmlProperty(localName = "name")
  @XmlElement(name = "name")
  private String name = null;
  @JsonProperty("custom")
  // Is a container wrapped=false
  // items.name=custom items.baseName=custom items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "custom")
  private List<Parameter> custom = null;
  @JsonProperty("external_uri")
  @JacksonXmlProperty(localName = "external_uri")
  @XmlElement(name = "external_uri")
  private String externalUri = null;
  @JsonProperty("sample_ref")
  @JacksonXmlProperty(localName = "sample_ref")
  @XmlElement(name = "sample_ref")
  private Sample sampleRef = null;
  @JsonProperty("ms_run_ref")
  @JacksonXmlProperty(localName = "ms_run_ref")
  @XmlElement(name = "ms_run_ref")
  private MsRun msRunRef = null;
  
  @Override
  public Assay id(Integer id) {
   super.setId(id);
   return this;
  }
  
  @Override
  public Assay elementType(String elementType) {
   super.setElementType(elementType);
   return this;
  }

  public Assay name(String name) {
   this.name = name;
   return this;
  }

   /**
   * Get name
   * @return name
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Assay custom(List<Parameter> custom) {
   this.custom = custom;
   return this;
  }

  public Assay addCustomItem(Parameter customItem) {
    if (this.custom == null) {
      this.custom = new ArrayList<>();
    }
    this.custom.add(customItem);
    return this;
  }

   /**
   * Get custom
   * @return custom
  **/
  @Valid
  @ApiModelProperty(value = "")
  public List<Parameter> getCustom() {
    return custom;
  }

  public void setCustom(List<Parameter> custom) {
    this.custom = custom;
  }


  public Assay externalUri(String externalUri) {
   this.externalUri = externalUri;
   return this;
  }

   /**
   * Get externalUri
   * @return externalUri
  **/
  @ApiModelProperty(value = "")
  public String getExternalUri() {
    return externalUri;
  }

  public void setExternalUri(String externalUri) {
    this.externalUri = externalUri;
  }


  public Assay sampleRef(Sample sampleRef) {
   this.sampleRef = sampleRef;
   return this;
  }

   /**
   * Get sampleRef
   * @return sampleRef
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  public Sample getSampleRef() {
    return sampleRef;
  }

  public void setSampleRef(Sample sampleRef) {
    this.sampleRef = sampleRef;
  }


  public Assay msRunRef(MsRun msRunRef) {
   this.msRunRef = msRunRef;
   return this;
  }

   /**
   * Get msRunRef
   * @return msRunRef
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  public MsRun getMsRunRef() {
    return msRunRef;
  }

  public void setMsRunRef(MsRun msRunRef) {
    this.msRunRef = msRunRef;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assay assay = (Assay) o;
    return Objects.equals(this.name, assay.name) &&
        Objects.equals(this.custom, assay.custom) &&
        Objects.equals(this.externalUri, assay.externalUri) &&
        Objects.equals(this.sampleRef, assay.sampleRef) &&
        Objects.equals(this.msRunRef, assay.msRunRef) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, custom, externalUri, sampleRef, msRunRef, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assay {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("    externalUri: ").append(toIndentedString(externalUri)).append("\n");
    sb.append("    sampleRef: ").append(toIndentedString(sampleRef)).append("\n");
    sb.append("    msRunRef: ").append(toIndentedString(msRunRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

