/*
 * mzTab validation API.
 * This is an mzTab validation service.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab1_1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab1_1.model.Comment;
import de.isas.mztab1_1.model.OptColumnMapping;
import de.isas.mztab1_1.model.Parameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.jmztabm.validation.constraints.*;
/**
 * SmallMoleculeFeature
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-31T17:58:50.083+02:00")
@XmlRootElement(name = "SmallMoleculeFeature")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "SmallMoleculeFeature")
public class SmallMoleculeFeature {

  public static enum Properties {
      prefix("prefix"), 
      headerPrefix("header_prefix"), 
      smfId("smf_id"), 
      smeIdRefs("sme_id_refs"), 
      smeIdRefAmbiguityCode("sme_id_ref_ambiguity_code"), 
      adductIon("adduct_ion"), 
      isotopomer("isotopomer"), 
      expMassToCharge("exp_mass_to_charge"), 
      charge("charge"), 
      retentionTimeInSeconds("retention_time_in_seconds"), 
      retentionTimeInSecondsStart("retention_time_in_seconds_start"), 
      retentionTimeInSecondsEnd("retention_time_in_seconds_end"), 
      abundanceAssay("abundance_assay"), 
      opt("opt"), 
      comment("comment");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  /**
   * Gets or Sets prefix
   */
  public enum PrefixEnum {
    SMF("SMF");

    private String value;

    PrefixEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PrefixEnum fromValue(String text) {
      for (PrefixEnum b : PrefixEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("prefix")
  @JacksonXmlProperty(localName = "prefix")
  @XmlElement(name = "prefix")
  private PrefixEnum prefix = PrefixEnum.SMF;
  /**
   * Gets or Sets headerPrefix
   */
  public enum HeaderPrefixEnum {
    SFH("SFH");

    private String value;

    HeaderPrefixEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HeaderPrefixEnum fromValue(String text) {
      for (HeaderPrefixEnum b : HeaderPrefixEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("header_prefix")
  @JacksonXmlProperty(localName = "header_prefix")
  @XmlElement(name = "header_prefix")
  private HeaderPrefixEnum headerPrefix = HeaderPrefixEnum.SFH;
  @JsonProperty("smf_id")
  @JacksonXmlProperty(localName = "smf_id")
  @XmlElement(name = "smf_id")
  private String smfId = null;
  @JsonProperty("sme_id_refs")
  // Is a container wrapped=false
  // items.name=smeIdRefs items.baseName=smeIdRefs items.xmlName= items.xmlNamespace=
  // items.example= items.type=String
  @XmlElement(name = "smeIdRefs")
  private List<String> smeIdRefs = new ArrayList<>();
  @JsonProperty("sme_id_ref_ambiguity_code")
  @JacksonXmlProperty(localName = "sme_id_ref_ambiguity_code")
  @XmlElement(name = "sme_id_ref_ambiguity_code")
  private Integer smeIdRefAmbiguityCode = null;
  @JsonProperty("adduct_ion")
  @JacksonXmlProperty(localName = "adduct_ion")
  @XmlElement(name = "adduct_ion")
  private String adductIon = null;
  @JsonProperty("isotopomer")
  @JacksonXmlProperty(localName = "isotopomer")
  @XmlElement(name = "isotopomer")
  private Parameter isotopomer = null;
  @JsonProperty("exp_mass_to_charge")
  @JacksonXmlProperty(localName = "exp_mass_to_charge")
  @XmlElement(name = "exp_mass_to_charge")
  private Double expMassToCharge = null;
  @JsonProperty("charge")
  @JacksonXmlProperty(localName = "charge")
  @XmlElement(name = "charge")
  private Integer charge = null;
  @JsonProperty("retention_time_in_seconds")
  @JacksonXmlProperty(localName = "retention_time_in_seconds")
  @XmlElement(name = "retention_time_in_seconds")
  private Double retentionTimeInSeconds = null;
  @JsonProperty("retention_time_in_seconds_start")
  @JacksonXmlProperty(localName = "retention_time_in_seconds_start")
  @XmlElement(name = "retention_time_in_seconds_start")
  private Double retentionTimeInSecondsStart = null;
  @JsonProperty("retention_time_in_seconds_end")
  @JacksonXmlProperty(localName = "retention_time_in_seconds_end")
  @XmlElement(name = "retention_time_in_seconds_end")
  private Double retentionTimeInSecondsEnd = null;
  @JsonProperty("abundance_assay")
  // Is a container wrapped=false
  // items.name=abundanceAssay items.baseName=abundanceAssay items.xmlName= items.xmlNamespace=
  // items.example= items.type=Double
  @XmlElement(name = "abundanceAssay")
  private List<Double> abundanceAssay = null;
  @JsonProperty("opt")
  // Is a container wrapped=false
  // items.name=opt items.baseName=opt items.xmlName= items.xmlNamespace=
  // items.example= items.type=OptColumnMapping
  @XmlElement(name = "opt")
  private List<OptColumnMapping> opt = null;
  @JsonProperty("comment")
  // Is a container wrapped=false
  // items.name=comment items.baseName=comment items.xmlName= items.xmlNamespace=
  // items.example= items.type=Comment
  @XmlElement(name = "comment")
  private List<Comment> comment = null;
   /**
   * Get prefix
   * @return prefix
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public PrefixEnum getPrefix() {
    return prefix;
  }

   /**
   * Get headerPrefix
   * @return headerPrefix
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public HeaderPrefixEnum getHeaderPrefix() {
    return headerPrefix;
  }


  public SmallMoleculeFeature smfId(String smfId) {
   this.smfId = smfId;
   return this;
  }

   /**
   * Get smfId
   * @return smfId
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public String getSmfId() {
    return smfId;
  }

  public void setSmfId(String smfId) {
    this.smfId = smfId;
  }


  public SmallMoleculeFeature smeIdRefs(List<String> smeIdRefs) {
   this.smeIdRefs = smeIdRefs;
   return this;
  }

  public SmallMoleculeFeature addSmeIdRefsItem(String smeIdRefsItem) {
    this.smeIdRefs.add(smeIdRefsItem);
    return this;
  }

   /**
   * Get smeIdRefs
   * @return smeIdRefs
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public List<String> getSmeIdRefs() {
    return smeIdRefs;
  }

  public void setSmeIdRefs(List<String> smeIdRefs) {
    this.smeIdRefs = smeIdRefs;
  }


  public SmallMoleculeFeature smeIdRefAmbiguityCode(Integer smeIdRefAmbiguityCode) {
   this.smeIdRefAmbiguityCode = smeIdRefAmbiguityCode;
   return this;
  }

   /**
   * Get smeIdRefAmbiguityCode
   * @return smeIdRefAmbiguityCode
  **/
  @ApiModelProperty(value = "")
  public Integer getSmeIdRefAmbiguityCode() {
    return smeIdRefAmbiguityCode;
  }

  public void setSmeIdRefAmbiguityCode(Integer smeIdRefAmbiguityCode) {
    this.smeIdRefAmbiguityCode = smeIdRefAmbiguityCode;
  }


  public SmallMoleculeFeature adductIon(String adductIon) {
   this.adductIon = adductIon;
   return this;
  }

   /**
   * Get adductIon
   * @return adductIon
  **/
 @Pattern(regexp="^\\[\\d*M([-][\\w]*)\\]\\d*[+-]$")  @ApiModelProperty(value = "")
  public String getAdductIon() {
    return adductIon;
  }

  public void setAdductIon(String adductIon) {
    this.adductIon = adductIon;
  }


  public SmallMoleculeFeature isotopomer(Parameter isotopomer) {
   this.isotopomer = isotopomer;
   return this;
  }

   /**
   * Get isotopomer
   * @return isotopomer
  **/
  @Valid
  @ApiModelProperty(value = "")
  public Parameter getIsotopomer() {
    return isotopomer;
  }

  public void setIsotopomer(Parameter isotopomer) {
    this.isotopomer = isotopomer;
  }


  public SmallMoleculeFeature expMassToCharge(Double expMassToCharge) {
   this.expMassToCharge = expMassToCharge;
   return this;
  }

   /**
   * Get expMassToCharge
   * @return expMassToCharge
  **/
  @ApiModelProperty(value = "")
  public Double getExpMassToCharge() {
    return expMassToCharge;
  }

  public void setExpMassToCharge(Double expMassToCharge) {
    this.expMassToCharge = expMassToCharge;
  }


  public SmallMoleculeFeature charge(Integer charge) {
   this.charge = charge;
   return this;
  }

   /**
   * Get charge
   * @return charge
  **/
  @ApiModelProperty(value = "")
  public Integer getCharge() {
    return charge;
  }

  public void setCharge(Integer charge) {
    this.charge = charge;
  }


  public SmallMoleculeFeature retentionTimeInSeconds(Double retentionTimeInSeconds) {
   this.retentionTimeInSeconds = retentionTimeInSeconds;
   return this;
  }

   /**
   * Get retentionTimeInSeconds
   * @return retentionTimeInSeconds
  **/
  @ApiModelProperty(value = "")
  public Double getRetentionTimeInSeconds() {
    return retentionTimeInSeconds;
  }

  public void setRetentionTimeInSeconds(Double retentionTimeInSeconds) {
    this.retentionTimeInSeconds = retentionTimeInSeconds;
  }


  public SmallMoleculeFeature retentionTimeInSecondsStart(Double retentionTimeInSecondsStart) {
   this.retentionTimeInSecondsStart = retentionTimeInSecondsStart;
   return this;
  }

   /**
   * Get retentionTimeInSecondsStart
   * @return retentionTimeInSecondsStart
  **/
  @ApiModelProperty(value = "")
  public Double getRetentionTimeInSecondsStart() {
    return retentionTimeInSecondsStart;
  }

  public void setRetentionTimeInSecondsStart(Double retentionTimeInSecondsStart) {
    this.retentionTimeInSecondsStart = retentionTimeInSecondsStart;
  }


  public SmallMoleculeFeature retentionTimeInSecondsEnd(Double retentionTimeInSecondsEnd) {
   this.retentionTimeInSecondsEnd = retentionTimeInSecondsEnd;
   return this;
  }

   /**
   * Get retentionTimeInSecondsEnd
   * @return retentionTimeInSecondsEnd
  **/
  @ApiModelProperty(value = "")
  public Double getRetentionTimeInSecondsEnd() {
    return retentionTimeInSecondsEnd;
  }

  public void setRetentionTimeInSecondsEnd(Double retentionTimeInSecondsEnd) {
    this.retentionTimeInSecondsEnd = retentionTimeInSecondsEnd;
  }


  public SmallMoleculeFeature abundanceAssay(List<Double> abundanceAssay) {
   this.abundanceAssay = abundanceAssay;
   return this;
  }

  public SmallMoleculeFeature addAbundanceAssayItem(Double abundanceAssayItem) {
    if (this.abundanceAssay == null) {
      this.abundanceAssay = new ArrayList<>();
    }
    this.abundanceAssay.add(abundanceAssayItem);
    return this;
  }

   /**
   * Get abundanceAssay
   * @return abundanceAssay
  **/
  @ApiModelProperty(value = "")
  public List<Double> getAbundanceAssay() {
    return abundanceAssay;
  }

  public void setAbundanceAssay(List<Double> abundanceAssay) {
    this.abundanceAssay = abundanceAssay;
  }


  public SmallMoleculeFeature opt(List<OptColumnMapping> opt) {
   this.opt = opt;
   return this;
  }

  public SmallMoleculeFeature addOptItem(OptColumnMapping optItem) {
    if (this.opt == null) {
      this.opt = new ArrayList<>();
    }
    this.opt.add(optItem);
    return this;
  }

   /**
   * Get opt
   * @return opt
  **/
  @Valid
  @ApiModelProperty(value = "")
  public List<OptColumnMapping> getOpt() {
    return opt;
  }

  public void setOpt(List<OptColumnMapping> opt) {
    this.opt = opt;
  }


  public SmallMoleculeFeature comment(List<Comment> comment) {
   this.comment = comment;
   return this;
  }

  public SmallMoleculeFeature addCommentItem(Comment commentItem) {
    if (this.comment == null) {
      this.comment = new ArrayList<>();
    }
    this.comment.add(commentItem);
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @Valid
  @ApiModelProperty(value = "")
  public List<Comment> getComment() {
    return comment;
  }

  public void setComment(List<Comment> comment) {
    this.comment = comment;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmallMoleculeFeature smallMoleculeFeature = (SmallMoleculeFeature) o;
    return Objects.equals(this.prefix, smallMoleculeFeature.prefix) &&
        Objects.equals(this.headerPrefix, smallMoleculeFeature.headerPrefix) &&
        Objects.equals(this.smfId, smallMoleculeFeature.smfId) &&
        Objects.equals(this.smeIdRefs, smallMoleculeFeature.smeIdRefs) &&
        Objects.equals(this.smeIdRefAmbiguityCode, smallMoleculeFeature.smeIdRefAmbiguityCode) &&
        Objects.equals(this.adductIon, smallMoleculeFeature.adductIon) &&
        Objects.equals(this.isotopomer, smallMoleculeFeature.isotopomer) &&
        Objects.equals(this.expMassToCharge, smallMoleculeFeature.expMassToCharge) &&
        Objects.equals(this.charge, smallMoleculeFeature.charge) &&
        Objects.equals(this.retentionTimeInSeconds, smallMoleculeFeature.retentionTimeInSeconds) &&
        Objects.equals(this.retentionTimeInSecondsStart, smallMoleculeFeature.retentionTimeInSecondsStart) &&
        Objects.equals(this.retentionTimeInSecondsEnd, smallMoleculeFeature.retentionTimeInSecondsEnd) &&
        Objects.equals(this.abundanceAssay, smallMoleculeFeature.abundanceAssay) &&
        Objects.equals(this.opt, smallMoleculeFeature.opt) &&
        Objects.equals(this.comment, smallMoleculeFeature.comment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prefix, headerPrefix, smfId, smeIdRefs, smeIdRefAmbiguityCode, adductIon, isotopomer, expMassToCharge, charge, retentionTimeInSeconds, retentionTimeInSecondsStart, retentionTimeInSecondsEnd, abundanceAssay, opt, comment);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmallMoleculeFeature {\n");
    
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    headerPrefix: ").append(toIndentedString(headerPrefix)).append("\n");
    sb.append("    smfId: ").append(toIndentedString(smfId)).append("\n");
    sb.append("    smeIdRefs: ").append(toIndentedString(smeIdRefs)).append("\n");
    sb.append("    smeIdRefAmbiguityCode: ").append(toIndentedString(smeIdRefAmbiguityCode)).append("\n");
    sb.append("    adductIon: ").append(toIndentedString(adductIon)).append("\n");
    sb.append("    isotopomer: ").append(toIndentedString(isotopomer)).append("\n");
    sb.append("    expMassToCharge: ").append(toIndentedString(expMassToCharge)).append("\n");
    sb.append("    charge: ").append(toIndentedString(charge)).append("\n");
    sb.append("    retentionTimeInSeconds: ").append(toIndentedString(retentionTimeInSeconds)).append("\n");
    sb.append("    retentionTimeInSecondsStart: ").append(toIndentedString(retentionTimeInSecondsStart)).append("\n");
    sb.append("    retentionTimeInSecondsEnd: ").append(toIndentedString(retentionTimeInSecondsEnd)).append("\n");
    sb.append("    abundanceAssay: ").append(toIndentedString(abundanceAssay)).append("\n");
    sb.append("    opt: ").append(toIndentedString(opt)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

