/*
 * mzTab validation API.
 * This is an mzTab validation service.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab1_1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab1_1.model.IndexedElement;
import de.isas.mztab1_1.model.Parameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.jmztabm.validation.constraints.*;
/**
 * Instrument
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-31T17:58:50.083+02:00")
@XmlRootElement(name = "Instrument")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "Instrument")
public class Instrument extends IndexedElement {

  public static enum Properties {
      instrumentName("instrument_name"), 
      instrumentSource("instrument_source"), 
      instrumentAnalyzer("instrument_analyzer"), 
      instrumentDetector("instrument_detector");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  @JsonProperty("instrument_name")
  @JacksonXmlProperty(localName = "instrument_name")
  @XmlElement(name = "instrument_name")
  private Parameter instrumentName = null;
  @JsonProperty("instrument_source")
  @JacksonXmlProperty(localName = "instrument_source")
  @XmlElement(name = "instrument_source")
  private Parameter instrumentSource = null;
  @JsonProperty("instrument_analyzer")
  // Is a container wrapped=false
  // items.name=instrumentAnalyzer items.baseName=instrumentAnalyzer items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "instrumentAnalyzer")
  private List<Parameter> instrumentAnalyzer = null;
  @JsonProperty("instrument_detector")
  @JacksonXmlProperty(localName = "instrument_detector")
  @XmlElement(name = "instrument_detector")
  private Parameter instrumentDetector = null;
  
  @Override
  public Instrument id(Integer id) {
   super.setId(id);
   return this;
  }
  
  @Override
  public Instrument elementType(String elementType) {
   super.setElementType(elementType);
   return this;
  }

  public Instrument instrumentName(Parameter instrumentName) {
   this.instrumentName = instrumentName;
   return this;
  }

   /**
   * Get instrumentName
   * @return instrumentName
  **/
  @Valid
  @ApiModelProperty(value = "")
  public Parameter getInstrumentName() {
    return instrumentName;
  }

  public void setInstrumentName(Parameter instrumentName) {
    this.instrumentName = instrumentName;
  }


  public Instrument instrumentSource(Parameter instrumentSource) {
   this.instrumentSource = instrumentSource;
   return this;
  }

   /**
   * Get instrumentSource
   * @return instrumentSource
  **/
  @Valid
  @ApiModelProperty(value = "")
  public Parameter getInstrumentSource() {
    return instrumentSource;
  }

  public void setInstrumentSource(Parameter instrumentSource) {
    this.instrumentSource = instrumentSource;
  }


  public Instrument instrumentAnalyzer(List<Parameter> instrumentAnalyzer) {
   this.instrumentAnalyzer = instrumentAnalyzer;
   return this;
  }

  public Instrument addInstrumentAnalyzerItem(Parameter instrumentAnalyzerItem) {
    if (this.instrumentAnalyzer == null) {
      this.instrumentAnalyzer = new ArrayList<>();
    }
    this.instrumentAnalyzer.add(instrumentAnalyzerItem);
    return this;
  }

   /**
   * Get instrumentAnalyzer
   * @return instrumentAnalyzer
  **/
  @Valid
  @ApiModelProperty(value = "")
  public List<Parameter> getInstrumentAnalyzer() {
    return instrumentAnalyzer;
  }

  public void setInstrumentAnalyzer(List<Parameter> instrumentAnalyzer) {
    this.instrumentAnalyzer = instrumentAnalyzer;
  }


  public Instrument instrumentDetector(Parameter instrumentDetector) {
   this.instrumentDetector = instrumentDetector;
   return this;
  }

   /**
   * Get instrumentDetector
   * @return instrumentDetector
  **/
  @Valid
  @ApiModelProperty(value = "")
  public Parameter getInstrumentDetector() {
    return instrumentDetector;
  }

  public void setInstrumentDetector(Parameter instrumentDetector) {
    this.instrumentDetector = instrumentDetector;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instrument instrument = (Instrument) o;
    return Objects.equals(this.instrumentName, instrument.instrumentName) &&
        Objects.equals(this.instrumentSource, instrument.instrumentSource) &&
        Objects.equals(this.instrumentAnalyzer, instrument.instrumentAnalyzer) &&
        Objects.equals(this.instrumentDetector, instrument.instrumentDetector) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentName, instrumentSource, instrumentAnalyzer, instrumentDetector, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instrument {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    instrumentName: ").append(toIndentedString(instrumentName)).append("\n");
    sb.append("    instrumentSource: ").append(toIndentedString(instrumentSource)).append("\n");
    sb.append("    instrumentAnalyzer: ").append(toIndentedString(instrumentAnalyzer)).append("\n");
    sb.append("    instrumentDetector: ").append(toIndentedString(instrumentDetector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

