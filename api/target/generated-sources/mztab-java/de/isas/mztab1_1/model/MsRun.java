/*
 * mzTab validation API.
 * This is an mzTab validation service.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nils.hoffmann@isas.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.isas.mztab1_1.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.isas.mztab1_1.model.IndexedElement;
import de.isas.mztab1_1.model.Instrument;
import de.isas.mztab1_1.model.Parameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import javax.xml.bind.annotation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import de.isas.lipidomics.jmztabm.validation.constraints.*;
/**
 * MsRun
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-31T17:58:50.083+02:00")
@XmlRootElement(name = "MsRun")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "MsRun")
public class MsRun extends IndexedElement {

  public static enum Properties {
      name("name"), 
      location("location"), 
      instrumentRef("instrument_ref"), 
      format("format"), 
      idFormat("id_format"), 
      fragmentationMethod("fragmentation_method"), 
      scanPolarity("scan_polarity"), 
      hash("hash"), 
      hashMethod("hash_method");

    private final String propertyName;

    private Properties(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public String toString() {
      return propertyName;
    }

    public String toUpper() {
      return propertyName.toUpperCase();
    }

    public static Properties of(String value) {
      if(value==null) {
        throw new NullPointerException("Argument value must not be null!");
      }
      return Arrays.asList(Properties.values()).stream().filter(m -> m.propertyName.equals(value.toLowerCase())).findAny().orElseThrow(IllegalArgumentException::new);
    }
  };
  
  @JsonProperty("name")
  @JacksonXmlProperty(localName = "name")
  @XmlElement(name = "name")
  private String name = null;
  @JsonProperty("location")
  @JacksonXmlProperty(localName = "location")
  @XmlElement(name = "location")
  private String location = null;
  @JsonProperty("instrument_ref")
  @JacksonXmlProperty(localName = "instrument_ref")
  @XmlElement(name = "instrument_ref")
  private Instrument instrumentRef = null;
  @JsonProperty("format")
  @JacksonXmlProperty(localName = "format")
  @XmlElement(name = "format")
  private Parameter format = null;
  @JsonProperty("id_format")
  @JacksonXmlProperty(localName = "id_format")
  @XmlElement(name = "id_format")
  private Parameter idFormat = null;
  @JsonProperty("fragmentation_method")
  // Is a container wrapped=false
  // items.name=fragmentationMethod items.baseName=fragmentationMethod items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "fragmentationMethod")
  private List<Parameter> fragmentationMethod = null;
  @JsonProperty("scan_polarity")
  // Is a container wrapped=false
  // items.name=scanPolarity items.baseName=scanPolarity items.xmlName= items.xmlNamespace=
  // items.example= items.type=Parameter
  @XmlElement(name = "scanPolarity")
  private List<Parameter> scanPolarity = null;
  @JsonProperty("hash")
  @JacksonXmlProperty(localName = "hash")
  @XmlElement(name = "hash")
  private String hash = null;
  @JsonProperty("hash_method")
  @JacksonXmlProperty(localName = "hash_method")
  @XmlElement(name = "hash_method")
  private Parameter hashMethod = null;
  
  @Override
  public MsRun id(Integer id) {
   super.setId(id);
   return this;
  }
  
  @Override
  public MsRun elementType(String elementType) {
   super.setElementType(elementType);
   return this;
  }

  public MsRun name(String name) {
   this.name = name;
   return this;
  }

   /**
   * Get name
   * @return name
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MsRun location(String location) {
   this.location = location;
   return this;
  }

   /**
   * Get location
   * @return location
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public MsRun instrumentRef(Instrument instrumentRef) {
   this.instrumentRef = instrumentRef;
   return this;
  }

   /**
   * Get instrumentRef
   * @return instrumentRef
  **/
  @Valid
  @ApiModelProperty(value = "")
  public Instrument getInstrumentRef() {
    return instrumentRef;
  }

  public void setInstrumentRef(Instrument instrumentRef) {
    this.instrumentRef = instrumentRef;
  }


  public MsRun format(Parameter format) {
   this.format = format;
   return this;
  }

   /**
   * Get format
   * @return format
  **/
  @Valid
  @ApiModelProperty(value = "")
  public Parameter getFormat() {
    return format;
  }

  public void setFormat(Parameter format) {
    this.format = format;
  }


  public MsRun idFormat(Parameter idFormat) {
   this.idFormat = idFormat;
   return this;
  }

   /**
   * Get idFormat
   * @return idFormat
  **/
  @Valid
  @ApiModelProperty(value = "")
  public Parameter getIdFormat() {
    return idFormat;
  }

  public void setIdFormat(Parameter idFormat) {
    this.idFormat = idFormat;
  }


  public MsRun fragmentationMethod(List<Parameter> fragmentationMethod) {
   this.fragmentationMethod = fragmentationMethod;
   return this;
  }

  public MsRun addFragmentationMethodItem(Parameter fragmentationMethodItem) {
    if (this.fragmentationMethod == null) {
      this.fragmentationMethod = new ArrayList<>();
    }
    this.fragmentationMethod.add(fragmentationMethodItem);
    return this;
  }

   /**
   * Get fragmentationMethod
   * @return fragmentationMethod
  **/
  @Valid
  @ApiModelProperty(value = "")
  public List<Parameter> getFragmentationMethod() {
    return fragmentationMethod;
  }

  public void setFragmentationMethod(List<Parameter> fragmentationMethod) {
    this.fragmentationMethod = fragmentationMethod;
  }


  public MsRun scanPolarity(List<Parameter> scanPolarity) {
   this.scanPolarity = scanPolarity;
   return this;
  }

  public MsRun addScanPolarityItem(Parameter scanPolarityItem) {
    if (this.scanPolarity == null) {
      this.scanPolarity = new ArrayList<>();
    }
    this.scanPolarity.add(scanPolarityItem);
    return this;
  }

   /**
   * Get scanPolarity
   * @return scanPolarity
  **/
  @Valid
  @ApiModelProperty(value = "")
  public List<Parameter> getScanPolarity() {
    return scanPolarity;
  }

  public void setScanPolarity(List<Parameter> scanPolarity) {
    this.scanPolarity = scanPolarity;
  }


  public MsRun hash(String hash) {
   this.hash = hash;
   return this;
  }

   /**
   * Get hash
   * @return hash
  **/
  @ApiModelProperty(value = "")
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  public MsRun hashMethod(Parameter hashMethod) {
   this.hashMethod = hashMethod;
   return this;
  }

   /**
   * Get hashMethod
   * @return hashMethod
  **/
  @Valid
  @ApiModelProperty(value = "")
  public Parameter getHashMethod() {
    return hashMethod;
  }

  public void setHashMethod(Parameter hashMethod) {
    this.hashMethod = hashMethod;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MsRun msRun = (MsRun) o;
    return Objects.equals(this.name, msRun.name) &&
        Objects.equals(this.location, msRun.location) &&
        Objects.equals(this.instrumentRef, msRun.instrumentRef) &&
        Objects.equals(this.format, msRun.format) &&
        Objects.equals(this.idFormat, msRun.idFormat) &&
        Objects.equals(this.fragmentationMethod, msRun.fragmentationMethod) &&
        Objects.equals(this.scanPolarity, msRun.scanPolarity) &&
        Objects.equals(this.hash, msRun.hash) &&
        Objects.equals(this.hashMethod, msRun.hashMethod) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, location, instrumentRef, format, idFormat, fragmentationMethod, scanPolarity, hash, hashMethod, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MsRun {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    instrumentRef: ").append(toIndentedString(instrumentRef)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    idFormat: ").append(toIndentedString(idFormat)).append("\n");
    sb.append("    fragmentationMethod: ").append(toIndentedString(fragmentationMethod)).append("\n");
    sb.append("    scanPolarity: ").append(toIndentedString(scanPolarity)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    hashMethod: ").append(toIndentedString(hashMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

