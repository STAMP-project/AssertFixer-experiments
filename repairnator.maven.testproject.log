[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Calcite
[INFO] Calcite Linq4j
[INFO] Calcite Core
[INFO] Calcite Babel
[INFO] Calcite Cassandra
[INFO] Calcite Druid
[INFO] Calcite Elasticsearch
[INFO] Calcite Examples
[INFO] Calcite Example CSV
[INFO] Calcite Example Function
[INFO] Calcite File
[INFO] Calcite Geode
[INFO] Calcite MongoDB
[INFO] Calcite Pig
[INFO] Calcite Piglet
[INFO] Calcite Plus
[INFO] Calcite Server
[INFO] Calcite Spark
[INFO] Calcite Splunk
[INFO] Calcite Ubenchmark
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Calcite 1.18.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-checkstyle-plugin:3.0.0:check (validate) @ calcite ---
[INFO] 
[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (enforce-java) @ calcite ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (enforce-maven-version) @ calcite ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-resource (add-resource) @ calcite ---
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-test-resource (add-resource) @ calcite ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.5:process (process-resource-bundles) @ calcite ---
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-test-source (add-test-sources) @ calcite ---
[INFO] Test Source directory: /root/workspace/apache/calcite/424535393/target/generated-test-sources/javacc added.
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Calcite Linq4j 1.18.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-checkstyle-plugin:3.0.0:check (validate) @ calcite-linq4j ---
[INFO] 
[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (enforce-java) @ calcite-linq4j ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (enforce-maven-version) @ calcite-linq4j ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-resource (add-resource) @ calcite-linq4j ---
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-test-resource (add-resource) @ calcite-linq4j ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.5:process (process-resource-bundles) @ calcite-linq4j ---
[INFO] 
[INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ calcite-linq4j ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/apache/calcite/424535393/linq4j/src/main/resources
[INFO] Copying 2 resources to META-INF
[INFO] Copying 1 resource to META-INF
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ calcite-linq4j ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-test-source (add-test-sources) @ calcite-linq4j ---
[INFO] Test Source directory: /root/workspace/apache/calcite/424535393/linq4j/target/generated-test-sources/javacc added.
[INFO] 
[INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ calcite-linq4j ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/apache/calcite/424535393/linq4j/src/test/resources
[INFO] Copying 2 resources to META-INF
[INFO] Copying 1 resource to META-INF
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ calcite-linq4j ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.0:test (default-test) @ calcite-linq4j ---
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit47/2.22.0/surefire-junit47-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit47/2.22.0/surefire-junit47-2.22.0.pom (7 KB at 16.1 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.22.0/surefire-providers-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.22.0/surefire-providers-2.22.0.pom (3 KB at 105.6 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit48/2.22.0/common-junit48-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit48/2.22.0/common-junit48-2.22.0.pom (4 KB at 143.8 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit4/2.22.0/common-junit4-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit4/2.22.0/common-junit4-2.22.0.pom (3 KB at 99.2 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit3/2.22.0/common-junit3-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit3/2.22.0/common-junit3-2.22.0.pom (2 KB at 48.2 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/2.22.0/common-java5-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/2.22.0/common-java5-2.22.0.pom (3 KB at 124.5 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/0.9/maven-shared-utils-0.9.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/0.9/maven-shared-utils-0.9.pom (7 KB at 276.3 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-grouper/2.22.0/surefire-grouper-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-grouper/2.22.0/surefire-grouper-2.22.0.pom (3 KB at 128.6 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit47/2.22.0/surefire-junit47-2.22.0.jar
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/2.22.0/common-java5-2.22.0.jar
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit4/2.22.0/common-junit4-2.22.0.jar
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit3/2.22.0/common-junit3-2.22.0.jar
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit48/2.22.0/common-junit48-2.22.0.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit3/2.22.0/common-junit3-2.22.0.jar (12 KB at 406.1 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/0.9/maven-shared-utils-0.9.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit48/2.22.0/common-junit48-2.22.0.jar (22 KB at 446.5 KB/sec)
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit4/2.22.0/common-junit4-2.22.0.jar (28 KB at 490.3 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-grouper/2.22.0/surefire-grouper-2.22.0.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/2.22.0/common-java5-2.22.0.jar (50 KB at 781.2 KB/sec)
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-grouper/2.22.0/surefire-grouper-2.22.0.jar (40 KB at 1501.7 KB/sec)
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit47/2.22.0/surefire-junit47-2.22.0.jar (157 KB at 1758.4 KB/sec)
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/0.9/maven-shared-utils-0.9.jar (168 KB at 2704.0 KB/sec)
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running org.apache.calcite.linq4j.test.OptimizerTest
[INFO] Tests run: 80, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.022 s - in org.apache.calcite.linq4j.test.OptimizerTest
[INFO] Running org.apache.calcite.linq4j.test.PrimitiveTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.102 s - in org.apache.calcite.linq4j.test.PrimitiveTest
[INFO] Running org.apache.calcite.linq4j.test.ExpressionTest
[INFO] Tests run: 32, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.138 s - in org.apache.calcite.linq4j.test.ExpressionTest
[INFO] Running org.apache.calcite.linq4j.test.Linq4jTest
[INFO] Tests run: 115, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.158 s - in org.apache.calcite.linq4j.test.Linq4jTest
[INFO] Running org.apache.calcite.linq4j.test.LookupImplTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in org.apache.calcite.linq4j.test.LookupImplTest
[INFO] Running org.apache.calcite.linq4j.test.InlinerTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 s - in org.apache.calcite.linq4j.test.InlinerTest
[INFO] Running org.apache.calcite.linq4j.test.DeterministicTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.024 s - in org.apache.calcite.linq4j.test.DeterministicTest
[INFO] Running org.apache.calcite.linq4j.function.FunctionTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in org.apache.calcite.linq4j.function.FunctionTest
[INFO] Running org.apache.calcite.linq4j.test.BlockBuilderTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 s - in org.apache.calcite.linq4j.test.BlockBuilderTest
[INFO] Running org.apache.calcite.linq4j.tree.TypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in org.apache.calcite.linq4j.tree.TypeTest
[INFO] Running org.apache.calcite.linq4j.test.CorrelateJoinTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in org.apache.calcite.linq4j.test.CorrelateJoinTest
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 276, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Calcite Core 1.18.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-checkstyle-plugin:3.0.0:check (validate) @ calcite-core ---
[INFO] 
[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (enforce-java) @ calcite-core ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (enforce-maven-version) @ calcite-core ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- fmpp-maven-plugin:1.0:generate (generate-fmpp-sources) @ calcite-core ---
- Executing: Parser.jj
[INFO] Done
[INFO] 
[INFO] --- fmpp-maven-plugin:1.0:generate (generate-fmpp-test-sources) @ calcite-core ---
- Executing: Parser.jj
[INFO] Done
[INFO] 
[INFO] --- javacc-maven-plugin:2.4:javacc (javacc) @ calcite-core ---
Java Compiler Compiler Version 4.0 (Parser Generator)
(type "javacc" with no arguments for help)
Reading from file /root/workspace/apache/calcite/424535393/core/target/generated-sources/fmpp/javacc/Parser.jj . . .
Note: UNICODE_INPUT option is specified. Please make sure you create the parser/lexer using a Reader with the correct character encoding.
Parser generated with 0 errors and 1 warnings.
[INFO] Processed 1 grammar
[INFO] 
[INFO] --- hydromatic-resource-maven-plugin:0.6:generate-sources (default) @ calcite-core ---
[INFO] /root/workspace/apache/calcite/424535393/core/target/generated-sources/resgen/org/apache/calcite/runtime/Resources.java is up to date
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-resource (add-resource) @ calcite-core ---
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-test-resource (add-resource) @ calcite-core ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.5:process (process-resource-bundles) @ calcite-core ---
[INFO] 
[INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ calcite-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] Copying 4 resources to codegen
[INFO] Copying 1 resource
[INFO] Copying 2 resources to META-INF
[INFO] Copying 1 resource to META-INF
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ calcite-core ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 1153 source files to /root/workspace/apache/calcite/424535393/core/target/classes
[INFO] /root/workspace/apache/calcite/424535393/core/src/main/java/org/apache/calcite/sql/SqlNode.java: Some input files use unchecked or unsafe operations.
[INFO] /root/workspace/apache/calcite/424535393/core/src/main/java/org/apache/calcite/sql/SqlNode.java: Recompile with -Xlint:unchecked for details.
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-test-source (add-test-sources) @ calcite-core ---
[INFO] Test Source directory: /root/workspace/apache/calcite/424535393/core/target/generated-test-sources/javacc added.
[INFO] 
[INFO] --- javacc-maven-plugin:2.4:javacc (javacc-test) @ calcite-core ---
Java Compiler Compiler Version 4.0 (Parser Generator)
(type "javacc" with no arguments for help)
Reading from file /root/workspace/apache/calcite/424535393/core/target/generated-test-sources/fmpp/javacc/Parser.jj . . .
Note: UNICODE_INPUT option is specified. Please make sure you create the parser/lexer using a Reader with the correct character encoding.
Parser generated with 0 errors and 1 warnings.
[INFO] Processed 1 grammar
[INFO] 
[INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ calcite-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 27 resources
[INFO] Copying 2 resources to META-INF
[INFO] Copying 1 resource to META-INF
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ calcite-core ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 148 source files to /root/workspace/apache/calcite/424535393/core/target/test-classes
[INFO] /root/workspace/apache/calcite/424535393/core/src/test/java/org/apache/calcite/test/CalciteAssert.java: Some input files use unchecked or unsafe operations.
[INFO] /root/workspace/apache/calcite/424535393/core/src/test/java/org/apache/calcite/test/CalciteAssert.java: Recompile with -Xlint:unchecked for details.
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.0:test (default-test) @ calcite-core ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running org.apache.calcite.util.BitSetsTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.112 s - in org.apache.calcite.util.BitSetsTest
[INFO] Running org.apache.calcite.util.graph.DirectedGraphTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.099 s - in org.apache.calcite.util.graph.DirectedGraphTest
2018-09-05 00:30:22,225 [pool-1-thread-6] INFO  - open start - state modified
2018-09-05 00:30:22,264 [pool-1-thread-6] INFO  - Checkpoint start
2018-09-05 00:30:22,265 [pool-1-thread-6] INFO  - Checkpoint end - txts: 25
[INFO] Running org.apache.calcite.util.ReflectVisitorTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.011 s - in org.apache.calcite.util.ReflectVisitorTest
[INFO] Running org.apache.calcite.adapter.clone.ArrayTableTest
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.314 s - in org.apache.calcite.adapter.clone.ArrayTableTest
[INFO] Running org.apache.calcite.rel.RelCollationTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 s - in org.apache.calcite.rel.RelCollationTest
[INFO] Running org.apache.calcite.util.ImmutableBitSetTest
[INFO] Tests run: 26, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.541 s - in org.apache.calcite.util.ImmutableBitSetTest
[INFO] Running org.apache.calcite.plan.RelOptUtilTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.019 s - in org.apache.calcite.plan.RelOptUtilTest
[INFO] Running org.apache.calcite.util.SourceTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.017 s - in org.apache.calcite.util.SourceTest
[INFO] Running org.apache.calcite.util.PrecedenceClimbingParserTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 s - in org.apache.calcite.util.PrecedenceClimbingParserTest
[INFO] Running org.apache.calcite.test.CalciteResourceTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in org.apache.calcite.test.CalciteResourceTest
[INFO] Running org.apache.calcite.util.mapping.MappingTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 s - in org.apache.calcite.util.mapping.MappingTest
[INFO] Running org.apache.calcite.test.FilteratorTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in org.apache.calcite.test.FilteratorTest
[INFO] Running org.apache.calcite.test.SqlFunctionsTest
[INFO] Tests run: 34, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.021 s - in org.apache.calcite.test.SqlFunctionsTest
[INFO] Running org.apache.calcite.sql.test.SqlTypeNameTest
[INFO] Tests run: 36, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.539 s - in org.apache.calcite.sql.test.SqlTypeNameTest
[INFO] Running org.apache.calcite.util.PermutationTestCase
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 s - in org.apache.calcite.util.PermutationTestCase
[INFO] Running org.apache.calcite.plan.volcano.VolcanoPlannerTraitTest
[WARNING] Tests run: 3, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.326 s - in org.apache.calcite.plan.volcano.VolcanoPlannerTraitTest
[INFO] Running org.apache.calcite.test.SqlValidatorFeatureTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.193 s - in org.apache.calcite.test.SqlValidatorFeatureTest
[INFO] Running org.apache.calcite.util.TestUtilTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in org.apache.calcite.util.TestUtilTest
[INFO] Running org.apache.calcite.test.ModelTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.95 s - in org.apache.calcite.test.ModelTest
[INFO] Running org.apache.calcite.test.InterpreterTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.46 s - in org.apache.calcite.test.InterpreterTest
[INFO] Running org.apache.calcite.plan.volcano.VolcanoPlannerTest
[WARNING] Tests run: 9, Failures: 0, Errors: 0, Skipped: 3, Time elapsed: 0.178 s - in org.apache.calcite.plan.volcano.VolcanoPlannerTest
[INFO] Running org.apache.calcite.plan.RelWriterTest
LogicalAggregate#477
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.028 s - in org.apache.calcite.plan.RelWriterTest
[INFO] Running org.apache.calcite.plan.volcano.TraitPropagationTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.229 s - in org.apache.calcite.plan.volcano.TraitPropagationTest
[INFO] Running org.apache.calcite.test.SqlOperatorBindingTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in org.apache.calcite.test.SqlOperatorBindingTest
[INFO] Running org.apache.calcite.test.RexTransformerTest
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.026 s - in org.apache.calcite.test.RexTransformerTest
[INFO] Running org.apache.calcite.runtime.BinarySearchTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 s - in org.apache.calcite.runtime.BinarySearchTest
[INFO] Running org.apache.calcite.test.RexProgramTest
[WARNING] Tests run: 41, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.393 s - in org.apache.calcite.test.RexProgramTest
[INFO] Running org.apache.calcite.rel.RelDistributionTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in org.apache.calcite.rel.RelDistributionTest
[INFO] Running org.apache.calcite.runtime.EnumerablesTest
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.041 s - in org.apache.calcite.runtime.EnumerablesTest
[INFO] Running org.apache.calcite.test.ExceptionMessageTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.265 s - in org.apache.calcite.test.ExceptionMessageTest
[INFO] Running org.apache.calcite.plan.RelOptPlanReaderTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in org.apache.calcite.plan.RelOptPlanReaderTest
[INFO] Running org.apache.calcite.test.InduceGroupingTypeTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in org.apache.calcite.test.InduceGroupingTypeTest
[INFO] Running org.apache.calcite.sql.type.SqlTypeFactoryTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 s - in org.apache.calcite.sql.type.SqlTypeFactoryTest
[INFO] Running org.apache.calcite.rex.RexBuilderTest
[INFO] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.016 s - in org.apache.calcite.rex.RexBuilderTest
[INFO] Running org.apache.calcite.sql.type.SqlTypeUtilTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 s - in org.apache.calcite.sql.type.SqlTypeUtilTest
[INFO] Running org.apache.calcite.sql.validate.SqlValidatorUtilTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.015 s - in org.apache.calcite.sql.validate.SqlValidatorUtilTest
[INFO] Running org.apache.calcite.sql.parser.SqlParserTest
[WARNING] Tests run: 315, Failures: 0, Errors: 0, Skipped: 4, Time elapsed: 0.765 s - in org.apache.calcite.sql.parser.SqlParserTest
[INFO] Running org.apache.calcite.util.UtilTest
[INFO] Tests run: 69, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.154 s - in org.apache.calcite.util.UtilTest
[INFO] Running org.apache.calcite.sql.SqlSetOptionOperatorTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in org.apache.calcite.sql.SqlSetOptionOperatorTest
[INFO] Running org.apache.calcite.sql.test.SqlPrettyWriterTest
[WARNING] Tests run: 21, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.059 s - in org.apache.calcite.sql.test.SqlPrettyWriterTest
[INFO] Running org.apache.calcite.test.SqlValidatorMatchTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.08 s - in org.apache.calcite.test.SqlValidatorMatchTest
[INFO] Running org.apache.calcite.sql.test.SqlAdvisorTest
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.323 s - in org.apache.calcite.sql.test.SqlAdvisorTest
[INFO] Running org.apache.calcite.test.SqlValidatorTest
[WARNING] Tests run: 390, Failures: 0, Errors: 0, Skipped: 5, Time elapsed: 2.894 s - in org.apache.calcite.test.SqlValidatorTest
[INFO] Running org.apache.calcite.rel.rules.DateRangeRulesTest
[INFO] Tests run: 27, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.218 s - in org.apache.calcite.rel.rules.DateRangeRulesTest
[INFO] Running org.apache.calcite.test.RelOptRulesTest
[WARNING] Tests run: 305, Failures: 0, Errors: 0, Skipped: 8, Time elapsed: 16.886 s - in org.apache.calcite.test.RelOptRulesTest
[INFO] Running org.apache.calcite.test.ScannableTableTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.752 s - in org.apache.calcite.test.ScannableTableTest
[INFO] Running org.apache.calcite.rex.RexExecutorTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.72 s - in org.apache.calcite.rex.RexExecutorTest
[INFO] Running org.apache.calcite.test.JdbcFrontLinqBackTest
[WARNING] Tests run: 19, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 2.434 s - in org.apache.calcite.test.JdbcFrontLinqBackTest
[INFO] Running org.apache.calcite.test.SqlLimitsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.071 s - in org.apache.calcite.test.SqlLimitsTest
[INFO] Running org.apache.calcite.test.RelMetadataTest
[WARNING] Tests run: 140, Failures: 0, Errors: 0, Skipped: 6, Time elapsed: 38.804 s - in org.apache.calcite.test.RelMetadataTest
[INFO] Running org.apache.calcite.test.JdbcFrontJdbcBackTest
2018-09-05 00:30:54,372 [pool-1-thread-2] INFO  - open start - state modified
2018-09-05 00:31:17,875 [pool-1-thread-2] INFO  - Checkpoint start
2018-09-05 00:31:17,876 [pool-1-thread-2] INFO  - Checkpoint end - txts: 279
[WARNING] Tests run: 6, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 24.029 s - in org.apache.calcite.test.JdbcFrontJdbcBackTest
[INFO] Running org.apache.calcite.test.SqlToRelConverterTest
[WARNING] Tests run: 339, Failures: 0, Errors: 0, Skipped: 4, Time elapsed: 15.89 s - in org.apache.calcite.test.SqlToRelConverterTest
[INFO] Running org.apache.calcite.rel.rel2sql.RelToSqlConverterTest
[INFO] Tests run: 138, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.001 s - in org.apache.calcite.rel.rel2sql.RelToSqlConverterTest
[INFO] Running org.apache.calcite.sql.test.SqlOperatorTest
[WARNING] Tests run: 227, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 4.214 s - in org.apache.calcite.sql.test.SqlOperatorTest
[INFO] Running org.apache.calcite.tools.FrameworksTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.313 s - in org.apache.calcite.tools.FrameworksTest
[INFO] Running org.apache.calcite.test.enumerable.EnumerableCorrelateTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.444 s - in org.apache.calcite.test.enumerable.EnumerableCorrelateTest
[INFO] Running org.apache.calcite.plan.volcano.CollationConversionTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.105 s - in org.apache.calcite.plan.volcano.CollationConversionTest
[INFO] Running org.apache.calcite.plan.volcano.TraitConversionTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.096 s - in org.apache.calcite.plan.volcano.TraitConversionTest
[INFO] Running org.apache.calcite.sql.validate.LexCaseSensitiveTest
[INFO] Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.548 s - in org.apache.calcite.sql.validate.LexCaseSensitiveTest
[INFO] Running org.apache.calcite.prepare.LookupOperatorOverloadsTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 s - in org.apache.calcite.prepare.LookupOperatorOverloadsTest
[INFO] Running org.apache.calcite.test.MutableRelTest
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.196 s - in org.apache.calcite.test.MutableRelTest
[INFO] Running org.apache.calcite.plan.volcano.ComboRuleTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.084 s - in org.apache.calcite.plan.volcano.ComboRuleTest
[INFO] Running org.apache.calcite.test.UdfTest
[WARNING] Tests run: 25, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 2.907 s - in org.apache.calcite.test.UdfTest
[INFO] Running org.apache.calcite.test.UdtTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.026 s - in org.apache.calcite.test.UdtTest
[INFO] Running org.apache.calcite.test.TableFunctionTest
[WARNING] Tests run: 18, Failures: 0, Errors: 0, Skipped: 3, Time elapsed: 0.417 s - in org.apache.calcite.test.TableFunctionTest
[INFO] Running org.apache.calcite.util.ChunkListTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.447 s - in org.apache.calcite.util.ChunkListTest
[INFO] Running org.apache.calcite.test.RelBuilderTest
[WARNING] Tests run: 98, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 2.273 s - in org.apache.calcite.test.RelBuilderTest
[INFO] Running org.apache.calcite.test.PigRelBuilderTest
[INFO] Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.204 s - in org.apache.calcite.test.PigRelBuilderTest
[INFO] Running org.apache.calcite.test.RexImplicationCheckerTest
2018-09-05 00:31:51,271 [pool-1-thread-1] WARN  - BOOLEAN for value of class class java.lang.Boolean is being handled in default way
2018-09-05 00:31:51,284 [pool-1-thread-3] WARN  - $11 is not handled for null for checking implication
2018-09-05 00:31:51,373 [pool-1-thread-3] WARN  - $11 is not handled for null for checking implication
2018-09-05 00:31:51,376 [pool-1-thread-3] WARN  - $11 is not handled for null for checking implication
2018-09-05 00:31:51,376 [pool-1-thread-3] WARN  - $11 is not handled for null for checking implication
2018-09-05 00:31:51,377 [pool-1-thread-3] WARN  - $11 is not handled for null for checking implication
[INFO] Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.341 s - in org.apache.calcite.test.RexImplicationCheckerTest
[INFO] Running org.apache.calcite.tools.PlannerTest
[WARNING] Tests run: 39, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 10.594 s - in org.apache.calcite.tools.PlannerTest
[INFO] Running org.apache.calcite.test.HepPlannerTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 118.768 s - in org.apache.calcite.test.HepPlannerTest
[INFO] Running org.apache.calcite.test.JdbcAdapterTest
[INFO] Tests run: 34, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.678 s - in org.apache.calcite.test.JdbcAdapterTest
[INFO] Running org.apache.calcite.test.LinqFrontJdbcBackTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.091 s - in org.apache.calcite.test.LinqFrontJdbcBackTest
[INFO] Running org.apache.calcite.test.JdbcFrontJdbcBackLinqMiddleTest
[WARNING] Tests run: 14, Failures: 0, Errors: 0, Skipped: 4, Time elapsed: 1.002 s - in org.apache.calcite.test.JdbcFrontJdbcBackLinqMiddleTest
[INFO] Running org.apache.calcite.profile.ProfilerTest
[WARNING] Tests run: 10, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.682 s - in org.apache.calcite.profile.ProfilerTest
[INFO] Running org.apache.calcite.test.MaterializationTest
[WARNING] Tests run: 130, Failures: 0, Errors: 0, Skipped: 17, Time elapsed: 110.925 s - in org.apache.calcite.test.MaterializationTest
2018-09-05 00:34:42,663 [pool-1-thread-8] INFO  - Logging initialized @262837ms
2018-09-05 00:34:42,731 [pool-1-thread-8] INFO  - jetty-9.2.19.v20160908
2018-09-05 00:34:42,964 [pool-1-thread-8] INFO  - Started ServerConnector@19775809{HTTP/1.1}{0.0.0.0:33343}
2018-09-05 00:34:42,964 [pool-1-thread-8] INFO  - Started @263138ms
2018-09-05 00:34:42,964 [pool-1-thread-8] INFO  - Service listening on port 33343.
[INFO] Running org.apache.calcite.test.ReflectiveSchemaTest
[WARNING] Tests run: 31, Failures: 0, Errors: 0, Skipped: 5, Time elapsed: 14.716 s - in org.apache.calcite.test.ReflectiveSchemaTest
[INFO] Running org.apache.calcite.test.JdbcTest
[WARNING] Tests run: 285, Failures: 0, Errors: 0, Skipped: 18, Time elapsed: 50.578 s - in org.apache.calcite.test.JdbcTest
2018-09-05 00:34:52,157 [pool-1-thread-8] INFO  - Service terminating.
2018-09-05 00:34:52,196 [pool-1-thread-8] INFO  - Stopped ServerConnector@19775809{HTTP/1.1}{0.0.0.0:0}
[INFO] Running org.apache.calcite.jdbc.CalciteRemoteDriverTest
[INFO] Tests run: 28, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.465 s - in org.apache.calcite.jdbc.CalciteRemoteDriverTest
[INFO] Running org.apache.calcite.test.StreamTest
[WARNING] Tests run: 9, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.445 s - in org.apache.calcite.test.StreamTest
[INFO] Running org.apache.calcite.test.TableInRootSchemaTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.016 s - in org.apache.calcite.test.TableInRootSchemaTest
[INFO] Running org.apache.calcite.test.MultiJdbcSchemaJoinTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.748 s - in org.apache.calcite.test.MultiJdbcSchemaJoinTest
[INFO] Running org.apache.calcite.test.RelMdColumnOriginsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.037 s - in org.apache.calcite.test.RelMdColumnOriginsTest
[INFO] Running org.apache.calcite.test.SqlLineTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.248 s - in org.apache.calcite.test.SqlLineTest
[INFO] Running org.apache.calcite.test.CollectionTypeTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.31 s - in org.apache.calcite.test.CollectionTypeTest
[INFO] Running org.apache.calcite.test.SqlToRelConverterExtendedTest
[WARNING] Tests run: 339, Failures: 0, Errors: 0, Skipped: 4, Time elapsed: 13.947 s - in org.apache.calcite.test.SqlToRelConverterExtendedTest
[INFO] Running org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest
[WARNING] Tests run: 319, Failures: 0, Errors: 0, Skipped: 6, Time elapsed: 1.545 s - in org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest
[INFO] Running org.apache.calcite.test.CoreQuidemTest
Warning: JDBC driver threw non-SQLException
Warning: JDBC driver threw non-SQLException
Warning: JDBC driver threw non-SQLException
Warning: JDBC driver threw non-SQLException
Warning: JDBC driver threw non-SQLException
Warning: JDBC driver threw non-SQLException
Warning: JDBC driver threw non-SQLException
Warning: JDBC driver threw non-SQLException
Warning: JDBC driver threw non-SQLException
Warning: JDBC driver threw non-SQLException
Warning: JDBC driver threw non-SQLException
Warning: JDBC driver threw non-SQLException
Now, do something with table org.apache.calcite.prepare.RelOptTableImpl@6217bf8b
Now, do something with table org.apache.calcite.prepare.RelOptTableImpl@6217bf8b
Now, do something with table org.apache.calcite.prepare.RelOptTableImpl@6217bf8b
Now, do something with table org.apache.calcite.prepare.RelOptTableImpl@6217bf8b
Warning: JDBC driver threw non-SQLException
Warning: JDBC driver threw non-SQLException
[ERROR] Tests run: 16, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 40.724 s <<< FAILURE! - in org.apache.calcite.test.CoreQuidemTest
[ERROR] test[3: quidem(sql/agg.iq)](org.apache.calcite.test.CoreQuidemTest)  Time elapsed: 7.876 s  <<< FAILURE!
java.lang.AssertionError: 
Files differ: /root/workspace/apache/calcite/424535393/core/target/test-classes/sql/surefire/sql/agg.iq /root/workspace/apache/calcite/424535393/core/target/test-classes/sql/agg.iq
192,198c192,218
< +--------+----+----+----+---+
< | GENDER | P  | S  | SS | C |
< +--------+----+----+----+---+
< | F      | 17 | 19 | 19 | 5 |
< | M      | 17 | 20 | 20 | 3 |
< +--------+----+----+----+---+
< (2 rows)
---
> java.sql.SQLException: Error while executing SQL "select gender,
>   stddev_pop(deptno) as p,
>   stddev_samp(deptno) as s,
>   stddev(deptno) as ss,
>   count(deptno) as c
> from emp
> group by gender": Error while compiling generated Java code:
> public static class Record9_2 implements java.io.Serializable {
>   public int f0;
>   public boolean f1;
>   public int f2;
>   public boolean f3;
>   public long f4;
>   public int f5;
>   public boolean f6;
>   public int f7;
>   public boolean f8;
>   public Record9_2() {}
>   public boolean equals(Object o) {
>     if (this == o) {
>       return true;
>     }
>     if (!(o instanceof Record9_2)) {
>       return false;
>     }
>     return this.f0 == ((Record9_2) o).f0 && this.f1 == ((Record9_2) o).f1 && this.f2 == ((Record9_2) o).f2 && this.f3 == ((Record9_2) o).f3 && this.f4 == ((Record9_2) o).f4 && this.f5 == ((Record9_2) o).f5 && this.f6 == ((Record9_2) o).f6 && this.f7 == ((Record9_2) o).f7 && this.f8 == ((Record9_2) o).f8;
>   }
199a220,690
>   public int hashCode() {
>     int h = 0;
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f3);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f4);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f5);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f6);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f7);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f8);
>     return h;
>   }
> 
>   public int compareTo(Record9_2 that) {
>     int c;
>     c = org.apache.calcite.runtime.Utilities.compare(this.f0, that.f0);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f3, that.f3);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f4, that.f4);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f5, that.f5);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f6, that.f6);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f7, that.f7);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f8, that.f8);
>     if (c != 0) {
>       return c;
>     }
>     return 0;
>   }
> 
>   public String toString() {
>     return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + ", f3=" + this.f3 + ", f4=" + this.f4 + ", f5=" + this.f5 + ", f6=" + this.f6 + ", f7=" + this.f7 + ", f8=" + this.f8 + "}";
>   }
> 
> }
> 
> org.apache.calcite.DataContext root;
> 
> public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
>   root = root0;
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 10,
>                 "F"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child1 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 10,
>                 "M"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable1 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child2 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable1.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 "M"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable2 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child3 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable2.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 30,
>                 "F"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable3 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child4 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable3.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 30,
>                 "F"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable4 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child5 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable4.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 50,
>                 "M"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable5 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child6 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable5.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 50,
>                 "F"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable6 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child7 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable6.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 60,
>                 "F"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable7 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child8 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable7.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 null,
>                 "F"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable8 = child0.concat(child1).concat(child2).concat(child3).concat(child4).concat(child5).concat(child6).concat(child7).concat(child8);
>   final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable8.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             final Object[] current = (Object[]) inputEnumerator.current();
>             final Integer inp0_0 = (Integer) current[0];
>             return new Object[] {
>                 current[0],
>                 current[1],
>                 inp0_0 == null ? (Integer) null : Integer.valueOf(inp0_0.intValue() * inp0_0.intValue()),
>                 inp0_0 == null ? (Integer) null : Integer.valueOf(inp0_0.intValue() * inp0_0.intValue()),
>                 inp0_0 == null ? (Integer) null : Integer.valueOf(inp0_0.intValue() * inp0_0.intValue())};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable9 = child.groupBy(new org.apache.calcite.linq4j.function.Function1() {
>     public String apply(Object[] a0) {
>       return a0[1] == null ? (String) null : a0[1].toString();
>     }
>     public Object apply(Object a0) {
>       return apply(
>         (Object[]) a0);
>     }
>   }
>   , new org.apache.calcite.linq4j.function.Function0() {
>     public Object apply() {
>       int a0s0;
>       boolean a0s1;
>       a0s1 = false;
>       a0s0 = 0;
>       int a1s0;
>       boolean a1s1;
>       a1s1 = false;
>       a1s0 = 0;
>       long a2s0;
>       a2s0 = 0L;
>       int a3s0;
>       boolean a3s1;
>       a3s1 = false;
>       a3s0 = 0;
>       int a4s0;
>       boolean a4s1;
>       a4s1 = false;
>       a4s0 = 0;
>       Record9_2 record0;
>       record0 = new Record9_2();
>       record0.f0 = a0s0;
>       record0.f1 = a0s1;
>       record0.f2 = a1s0;
>       record0.f3 = a1s1;
>       record0.f4 = a2s0;
>       record0.f5 = a3s0;
>       record0.f6 = a3s1;
>       record0.f7 = a4s0;
>       record0.f8 = a4s1;
>       return record0;
>     }
>   }
>   , new org.apache.calcite.linq4j.function.Function2() {
>     public Record9_2 apply(Record9_2 acc, Object[] in) {
>       final Integer inp2_ = (Integer) in[2];
>       if (inp2_ != null) {
>         acc.f1 = true;
>         acc.f0 = acc.f0 + inp2_.intValue();
>       }
>       final Integer inp0_ = (Integer) in[0];
>       if (inp0_ != null) {
>         acc.f3 = true;
>         acc.f2 = acc.f2 + inp0_.intValue();
>       }
>       if (inp0_ != null) {
>         acc.f4++;
>       }
>       final Integer inp3_ = (Integer) in[3];
>       if (inp3_ != null) {
>         acc.f6 = true;
>         acc.f5 = acc.f5 + inp3_.intValue();
>       }
>       final Integer inp4_ = (Integer) in[4];
>       if (inp4_ != null) {
>         acc.f8 = true;
>         acc.f7 = acc.f7 + inp4_.intValue();
>       }
>       return acc;
>     }
>     public Record9_2 apply(Object acc, Object in) {
>       return apply(
>         (Record9_2) acc,
>         (Object[]) in);
>     }
>   }
>   , new org.apache.calcite.linq4j.function.Function2() {
>     public Object[] apply(String key, Record9_2 acc) {
>       return new Object[] {
>           key,
>           acc.f1 ? Integer.valueOf(acc.f0) : (Integer) null,
>           acc.f3 ? Integer.valueOf(acc.f2) : (Integer) null,
>           acc.f4,
>           acc.f6 ? Integer.valueOf(acc.f5) : (Integer) null,
>           acc.f8 ? Integer.valueOf(acc.f7) : (Integer) null};
>     }
>     public Object[] apply(Object key, Object acc) {
>       return apply(
>         (String) key,
>         (Record9_2) acc);
>     }
>   }
>   );
>   return new org.apache.calcite.linq4j.AbstractEnumerable(){
>       public org.apache.calcite.linq4j.Enumerator enumerator() {
>         return new org.apache.calcite.linq4j.Enumerator(){
>             public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable9.enumerator();
>             public void reset() {
>               inputEnumerator.reset();
>             }
> 
>             public boolean moveNext() {
>               return inputEnumerator.moveNext();
>             }
> 
>             public void close() {
>               inputEnumerator.close();
>             }
> 
>             public Object current() {
>               final Object[] current = (Object[]) inputEnumerator.current();
>               final Integer inp1_ = (Integer) current[1];
>               final Integer inp2_ = (Integer) current[2];
>               final long inp3_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[3]);
>               final java.math.BigDecimal v5 = $L4J$C$new_java_math_BigDecimal_0_5_;
>               final Integer inp4_ = (Integer) current[4];
>               final Object v11 = inp3_ == 1L;
>               final long v16 = inp3_ - 1L;
>               final Integer inp5_ = (Integer) current[5];
>               return new Object[] {
>                   current[0],
>                   inp1_ == null || inp2_ == null ? (Integer) null : Integer.valueOf((int) org.apache.calcite.runtime.SqlFunctions.power(((long) inp1_ (stack truncated)


[ERROR] test[7: quidem(sql/winagg.iq)](org.apache.calcite.test.CoreQuidemTest)  Time elapsed: 2.878 s  <<< FAILURE!
java.lang.AssertionError: 
Files differ: /root/workspace/apache/calcite/424535393/core/target/test-classes/sql/surefire/sql/winagg.iq /root/workspace/apache/calcite/424535393/core/target/test-classes/sql/winagg.iq
577,586c577,582
< +-----+--------+--------+----------+------------+------------------------+
< | AGE | DEPTNO | GENDER | var_samp | covar_samp | covar_samp partitioned |
< +-----+--------+--------+----------+------------+------------------------+
< |   5 |     20 | F      |     1508 |         58 |                      0 |
< |  25 |     10 |        |     1508 |         58 |                     50 |
< |  80 |     20 | M      |     1508 |         58 |                     50 |
< |     |     40 | M      |     1508 |         58 |                      0 |
< |     |     40 | F      |     1508 |         58 |                      0 |
< +-----+--------+--------+----------+------------+------------------------+
< (5 rows)
---
> java.sql.SQLException: Error while executing SQL "select emps."AGE", emps."DEPTNO", emps."GENDER",
>  covar_samp(emps."AGE", emps."AGE") over() as "var_samp",
>  covar_samp(emps."DEPTNO", emps."AGE") over() as "covar_samp",
>  covar_samp(emps."EMPNO", emps."DEPTNO") over(partition by emps."MANAGER") as "covar_samp partitioned"
> from emps order by emps."AGE"": Error while compiling generated Java code:
> org.apache.calcite.DataContext root;
587a584,1083
> public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
>   root = root0;
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 100,
>                 10,
>                 null,
>                 25,
>                 false};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child1 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 110,
>                 20,
>                 "M",
>                 80,
>                 false};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable1 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child2 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable1.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 110,
>                 40,
>                 "M",
>                 null,
>                 true};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable2 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child3 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable2.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 120,
>                 20,
>                 "F",
>                 5,
>                 true};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable3 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child4 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable3.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 130,
>                 40,
>                 "F",
>                 null,
>                 true};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable4 = child0.concat(child1).concat(child2).concat(child3).concat(child4);
>   final org.apache.calcite.linq4j.AbstractEnumerable source = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable4.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             final Object[] current = (Object[]) inputEnumerator.current();
>             final Integer inp3_0 = (Integer) current[3];
>             final int inp1_0 = org.apache.calcite.runtime.SqlFunctions.toInt(current[1]);
>             return new Object[] {
>                 current[0],
>                 current[1],
>                 current[2],
>                 current[3],
>                 current[4],
>                 inp3_0 == null ? (Integer) null : Integer.valueOf(inp3_0.intValue() * inp3_0.intValue()),
>                 inp3_0,
>                 inp3_0 == null ? (Integer) null : Integer.valueOf(inp1_0 * inp3_0.intValue()),
>                 org.apache.calcite.runtime.SqlFunctions.toInt(current[0]) * inp1_0};
>           }
> 
>         };
>     }
> 
>   };
>   int prevStart;
>   int prevEnd;
>   final java.util.Comparator comparator = new java.util.Comparator(){
>     public int compare(Object[] v0, Object[] v1) {
>       int c;
>       return 0;
>     }
> 
>     public int compare(Object o0, Object o1) {
>       return this.compare((Object[]) o0, (Object[]) o1);
>     }
> 
>   };
>   final java.util.List tempList = (java.util.List) source.into(new java.util.ArrayList());
>   final java.util.Iterator iterator = org.apache.calcite.runtime.SortedMultiMap.singletonArrayIterator(comparator, tempList);
>   final java.util.ArrayList _list = new java.util.ArrayList(
>     tempList.size());
>   long a0s0w0;
>   Long a0w0 = (Long) null;
>   a0s0w0 = 0L;
>   int a1s0w0;
>   Integer a1w0 = (Integer) null;
>   a1s0w0 = 0;
>   long a2s0w0;
>   Long a2w0 = (Long) null;
>   a2s0w0 = 0L;
>   int a3s0w0;
>   Integer a3w0 = (Integer) null;
>   a3s0w0 = 0;
>   long a4s0w0;
>   Long a4w0 = (Long) null;
>   a4s0w0 = 0L;
>   long a5s0w0;
>   Long a5w0 = (Long) null;
>   a5s0w0 = 0L;
>   int a6s0w0;
>   Integer a6w0 = (Integer) null;
>   a6s0w0 = 0;
>   int a7s0w0;
>   Integer a7w0 = (Integer) null;
>   a7s0w0 = 0;
>   long a8s0w0;
>   Long a8w0 = (Long) null;
>   a8s0w0 = 0L;
>   int a9s0w0;
>   Integer a9w0 = (Integer) null;
>   a9s0w0 = 0;
>   long a10s0w0;
>   Long a10w0 = (Long) null;
>   a10s0w0 = 0L;
>   while (iterator.hasNext()) {
>     final Object[] _rows = (Object[]) iterator.next();
>     prevStart = -1;
>     prevEnd = 2147483647;
>     final int maxX = _rows.length - 1;
>     for (int i = 0; i < _rows.length; ++i) {
>       final Object[] row = (Object[]) _rows[i];
>       if (maxX != prevEnd) {
>         int actualStart;
>         if (maxX < prevEnd) {
>           actualStart = 0;
>           a0s0w0 = 0L;
>           a1s0w0 = 0;
>           a2s0w0 = 0L;
>           a3s0w0 = 0;
>           a4s0w0 = 0L;
>           a5s0w0 = 0L;
>           a6s0w0 = 0;
>           a7s0w0 = 0;
>           a8s0w0 = 0L;
>           a9s0w0 = 0;
>           a10s0w0 = 0L;
>         } else {
>           actualStart = prevEnd + 1;
>         }
>         prevEnd = maxX;
>         for (int j = actualStart; j <= maxX; ++j) {
>           final Object[] jRow = (Object[]) _rows[j];
>           final Integer inp5_ = (Integer) jRow[5];
>           if (inp5_ != null) {
>             a0s0w0++;
>           }
>           if (inp5_ != null) {
>             a1s0w0 = a1s0w0 + inp5_.intValue();
>           }
>           final Integer inp3_ = (Integer) jRow[3];
>           if (inp3_ != null) {
>             a2s0w0++;
>           }
>           if (inp3_ != null) {
>             a3s0w0 = a3s0w0 + inp3_.intValue();
>           }
>           if (inp3_ != null) {
>             a4s0w0++;
>           }
>           final Integer inp7_ = (Integer) jRow[7];
>           if (inp7_ != null) {
>             a5s0w0++;
>           }
>           if (inp7_ != null) {
>             a6s0w0 = a6s0w0 + inp7_.intValue();
>           }
>           final Integer inp6_ = (Integer) jRow[6];
>           if (inp6_ != null) {
>             a7s0w0 = a7s0w0 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[1]);
>           }
>           if (inp6_ != null) {
>             a8s0w0++;
>           }
>           if (inp6_ != null) {
>             a9s0w0 = a9s0w0 + inp6_.intValue();
>           }
>           if (inp6_ != null) {
>             a10s0w0++;
>           }
>         }
>         a0w0 = Long.valueOf(a0s0w0);
>         a1w0 = Integer.valueOf(a1s0w0);
>         a2w0 = Long.valueOf(a2s0w0);
>         a3w0 = Integer.valueOf(a3s0w0);
>         a4w0 = Long.valueOf(a4s0w0);
>         a5w0 = Long.valueOf(a5s0w0);
>         a6w0 = Integer.valueOf(a6s0w0);
>         a7w0 = Integer.valueOf(a7s0w0);
>         a8w0 = Long.valueOf(a8s0w0);
>         a9w0 = Integer.valueOf(a9s0w0);
>         a10w0 = Long.valueOf(a10s0w0);
>       }
>       _list.add(new Object[] {
>         row[0],
>         row[1],
>         row[2],
>         row[3],
>         row[4],
>         row[5],
>         row[6],
>         row[7],
>         row[8],
>         a0w0,
>         a1w0,
>         a2w0,
>         a3w0,
>         a4w0,
>         a5w0,
>         a6w0,
>         a7w0,
>         a8w0,
>         a9w0,
>         a10w0});
>     }
>   }
>   tempList.clear();
>   final java.util.Comparator comparator0 = new java.util.Comparator(){
>     public int compare(Object[] v0, Object[] v1) {
>       int c;
>       return 0;
>     }
> 
>     public int compare(Object o0, Object o1) {
>       return this.compare((Object[]) o0, (Object[]) o1);
>     }
> 
>   };
>   final org.apache.calcite.runtime.SortedMultiMap multiMap = new org.apache.calcite.runtime.SortedMultiMap();
>   org.apache.calcite.linq4j.Linq4j.asEnumerable(_list).foreach(new org.apache.calcite.linq4j.function.Function1() {
>     public Object apply(Object[] v) {
>       boolean key = org.apache.calcite.runtime.SqlFunctions.toBoolean(v[4]);
>       multiMap.putMulti(key, v);
>       return null;
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   );
>   final java.util.Iterator iterator0 = multiMap.arrays(comparator0);
>   final java.util.ArrayList _list0 = new java.util.ArrayList(
>     multiMap.size());
>   int a0s0w1;
>   Integer a0w1 = (Integer) null;
>   a0s0w1 = 0;
>   int a1s0w1;
>   Integer a1w1 = (Integer) null;
>   a1s0w1 = 0;
>   int a2s0w1;
>   Integer a2w1 = (Integer) null;
>   a2s0w1 = 0;
>   Long a3w1 = (Long) null;
>   while (iterator0.hasNext()) {
>     final Object[] _rows = (Object[]) iterator0.next();
>     prevStart = -1;
>     prevEnd = 2147483647;
>     final int maxX = _rows.length - 1;
>     for (int i = 0; i < _rows.length; ++i) {
>       final Object[] row = (Object[]) _rows[i];
>       if (maxX != prevEnd) {
>         int actualStart;
>         if (maxX < prevEnd) {
>           actualStart = 0;
>           a0s0w1 = 0;
>           a1s0w1 = 0;
>           a2s0w1 = 0;
>         } else {
>           actualStart = prevEnd + 1;
>         }
>         prevEnd = maxX;
>         for (int j = actualStart; j <= maxX; ++j) {
>           final Object[] jRow = (Object[]) _rows[j];
>           a0s0w1 = a0s0w1 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[8]);
>           a1s0w1 = a1s0w1 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[0]);
>           a2s0w1 = a2s0w1 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[1]);
>         }
>         a0w1 = Integer.valueOf(a0s0w1);
>         a1w1 = Integer.valueOf(a1s0w1);
>         a2w1 = Integer.valueOf(a2s0w1);
>         a3w1 = Long.valueOf(maxX + 1);
>       }
>       _list0.add(new Object[] {
>         row[0],
>         row[1],
>         row[2],
>         row[3],
>         row[4],
>         row[5],
>         row[6],
>         row[7],
>         row[8],
>         row[9],
>         row[10],
>         row[11],
>         row[12],
>         row[13],
>         row[14],
>         row[15],
>         row[16],
>         row[17],
>         row[18],
>         row[19],
>         a0w1,
>         a1w1,
>         a2w1,
>         a3w1});
>     }
>   }
>   multiMap.clear();
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable5 = org.apache.calcite.linq4j.Linq4j.asEnumerable(_list0).orderBy(new org.apache.calcite.linq4j.function.Function1() {
>     public Integer apply(Object[] v) {
>       return (Integer) v[3];
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   , org.apache.calcite.linq4j.function.Functions.nullsComparator(false, false));
>   return new org.apache.calcite.linq4j.AbstractEnumerable(){
>       public org.apache.calcite.linq4j.Enumerator enumerator() {
>         return new org.apache.calcite.linq4j.Enumerator(){
>             public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable5.enumerator();
>             public void reset() {
>               inputEnumerator.reset();
>             }
> 
>             public boolean moveNext() {
>               return inputEnumerator.moveNext();
>             }
> 
>             public void close() {
>               inputEnumerator.close();
>             }
> 
>             public Object current() {
>               final Object[] current = (Object[]) inputEnumerator.current();
>               final int inp12_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[12]);
>               final long inp13_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[13]);
>               final long inp19_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[19]);
>               final long inp23_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[23]);
>               return new Object[] {
>                   current[3],
>                   current[1],
>                   current[2],
>                   org.apache.calcite.runtime.SqlFunctions.toLong(current[9]) <= 0L || (Object) (org.apache.calcite.runtime.SqlFunctions.toLong(current[11]) <= 0L) || (int) inp13_ == 1 ? (Integer) null : Integer.valueOf((org.apache.calcite.runtime.SqlFunctions.toInt(current[10]) - inp12_ * inp12_ / (int) inp13_) / ((int) inp13_ - 1)),
> (                  org.apache.calcite.runtime.SqlFunctions.toInt(current[15]) - org.apache.calcite.runtime.SqlFunctions.toInt(current[16]) * org.apache.calcite.runtime.SqlFunctions.toInt(current[18]) / (int) inp19_) / ((int) inp19_ - 1),
> (                  org.apache.calcite.runtime.SqlFunctions.toInt(current[20]) - org.apache.calcite.runtime.SqlFunctions.toInt(current[21]) * org.apache.calcite.runtime.SqlFunctions.toInt(current[22]) / (int) inp23_) / ((int) inp23_ - 1)};
>             }
> 
>           };
>       }
> 
>     };
> }
> 
> 
> public Class getElementType() {
>   return java.lang.Object[].class;
> }
> 
> 
> 
> 	at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
> 	at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
> 	at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:163)
> 	at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:227)
> 	at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:322)
> 	at net. (stack truncated)
599,608c1095,1101
< +-----+--------+--------+---------+----------------+----------+--------------------+
< | AGE | DEPTNO | GENDER | var_pop | var_pop by age | var_samp | var_samp by gender |
< +-----+--------+--------+---------+----------------+----------+--------------------+
< |   5 |     20 | F      |    1005 |              0 |     1508 |                    |
< |  25 |     10 |        |    1005 |              0 |     1508 |                    |
< |  80 |     20 | M      |    1005 |              0 |     1508 |                    |
< |     |     40 | F      |    1005 |                |     1508 |                    |
< |     |     40 | M      |    1005 |                |     1508 |                    |
< +-----+--------+--------+---------+----------------+----------+--------------------+
< (5 rows)
---
> java.sql.SQLException: Error while executing SQL "select emps."AGE", emps."DEPTNO", emps."GENDER",
>  var_pop(emps."AGE") over() as "var_pop",
>  var_pop(emps."AGE") over(partition by emps."AGE") as "var_pop by age",
>  var_samp(emps."AGE") over() as "var_samp",
>  var_samp(emps."AGE") over(partition by emps."GENDER") as "var_samp by gender"
> from emps order by emps."AGE"": Error while compiling generated Java code:
> org.apache.calcite.DataContext root;
609a1103,1601
> public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
>   root = root0;
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 10,
>                 null,
>                 25};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child1 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 "M",
>                 80};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable1 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child2 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable1.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 40,
>                 "M",
>                 null};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable2 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child3 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable2.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 "F",
>                 5};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable3 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child4 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable3.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 40,
>                 "F",
>                 null};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable4 = child0.concat(child1).concat(child2).concat(child3).concat(child4);
>   final org.apache.calcite.linq4j.AbstractEnumerable source = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable4.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             final Object[] current = (Object[]) inputEnumerator.current();
>             final Integer inp2_0 = (Integer) current[2];
>             return new Object[] {
>                 current[0],
>                 current[1],
>                 current[2],
>                 inp2_0 == null ? (Integer) null : Integer.valueOf(inp2_0.intValue() * inp2_0.intValue())};
>           }
> 
>         };
>     }
> 
>   };
>   int prevStart;
>   int prevEnd;
>   final java.util.Comparator comparator = new java.util.Comparator(){
>     public int compare(Object[] v0, Object[] v1) {
>       int c;
>       return 0;
>     }
> 
>     public int compare(Object o0, Object o1) {
>       return this.compare((Object[]) o0, (Object[]) o1);
>     }
> 
>   };
>   final java.util.List tempList = (java.util.List) source.into(new java.util.ArrayList());
>   final java.util.Iterator iterator = org.apache.calcite.runtime.SortedMultiMap.singletonArrayIterator(comparator, tempList);
>   final java.util.ArrayList _list = new java.util.ArrayList(
>     tempList.size());
>   long a0s0w0;
>   Long a0w0 = (Long) null;
>   a0s0w0 = 0L;
>   int a1s0w0;
>   Integer a1w0 = (Integer) null;
>   a1s0w0 = 0;
>   long a2s0w0;
>   Long a2w0 = (Long) null;
>   a2s0w0 = 0L;
>   int a3s0w0;
>   Integer a3w0 = (Integer) null;
>   a3s0w0 = 0;
>   while (iterator.hasNext()) {
>     final Object[] _rows = (Object[]) iterator.next();
>     prevStart = -1;
>     prevEnd = 2147483647;
>     final int maxX = _rows.length - 1;
>     for (int i = 0; i < _rows.length; ++i) {
>       final Object[] row = (Object[]) _rows[i];
>       if (maxX != prevEnd) {
>         int actualStart;
>         if (maxX < prevEnd) {
>           actualStart = 0;
>           a0s0w0 = 0L;
>           a1s0w0 = 0;
>           a2s0w0 = 0L;
>           a3s0w0 = 0;
>         } else {
>           actualStart = prevEnd + 1;
>         }
>         prevEnd = maxX;
>         for (int j = actualStart; j <= maxX; ++j) {
>           final Object[] jRow = (Object[]) _rows[j];
>           final Integer inp3_ = (Integer) jRow[3];
>           if (inp3_ != null) {
>             a0s0w0++;
>           }
>           if (inp3_ != null) {
>             a1s0w0 = a1s0w0 + inp3_.intValue();
>           }
>           final Integer inp2_ = (Integer) jRow[2];
>           if (inp2_ != null) {
>             a2s0w0++;
>           }
>           if (inp2_ != null) {
>             a3s0w0 = a3s0w0 + inp2_.intValue();
>           }
>         }
>         a0w0 = Long.valueOf(a0s0w0);
>         a1w0 = Integer.valueOf(a1s0w0);
>         a2w0 = Long.valueOf(a2s0w0);
>         a3w0 = Integer.valueOf(a3s0w0);
>       }
>       _list.add(new Object[] {
>         row[0],
>         row[1],
>         row[2],
>         row[3],
>         a0w0,
>         a1w0,
>         a2w0,
>         a3w0});
>     }
>   }
>   tempList.clear();
>   final java.util.Comparator comparator0 = new java.util.Comparator(){
>     public int compare(Object[] v0, Object[] v1) {
>       int c;
>       return 0;
>     }
> 
>     public int compare(Object o0, Object o1) {
>       return this.compare((Object[]) o0, (Object[]) o1);
>     }
> 
>   };
>   final org.apache.calcite.runtime.SortedMultiMap multiMap = new org.apache.calcite.runtime.SortedMultiMap();
>   org.apache.calcite.linq4j.Linq4j.asEnumerable(_list).foreach(new org.apache.calcite.linq4j.function.Function1() {
>     public Object apply(Object[] v) {
>       Integer key = (Integer) v[2];
>       multiMap.putMulti(key, v);
>       return null;
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   );
>   final java.util.Iterator iterator0 = multiMap.arrays(comparator0);
>   final java.util.ArrayList _list0 = new java.util.ArrayList(
>     multiMap.size());
>   long a0s0w1;
>   Long a0w1 = (Long) null;
>   a0s0w1 = 0L;
>   int a1s0w1;
>   Integer a1w1 = (Integer) null;
>   a1s0w1 = 0;
>   long a2s0w1;
>   Long a2w1 = (Long) null;
>   a2s0w1 = 0L;
>   int a3s0w1;
>   Integer a3w1 = (Integer) null;
>   a3s0w1 = 0;
>   while (iterator0.hasNext()) {
>     final Object[] _rows = (Object[]) iterator0.next();
>     prevStart = -1;
>     prevEnd = 2147483647;
>     final int maxX = _rows.length - 1;
>     for (int i = 0; i < _rows.length; ++i) {
>       final Object[] row = (Object[]) _rows[i];
>       if (maxX != prevEnd) {
>         int actualStart;
>         if (maxX < prevEnd) {
>           actualStart = 0;
>           a0s0w1 = 0L;
>           a1s0w1 = 0;
>           a2s0w1 = 0L;
>           a3s0w1 = 0;
>         } else {
>           actualStart = prevEnd + 1;
>         }
>         prevEnd = maxX;
>         for (int j = actualStart; j <= maxX; ++j) {
>           final Object[] jRow = (Object[]) _rows[j];
>           final Integer inp3_ = (Integer) jRow[3];
>           if (inp3_ != null) {
>             a0s0w1++;
>           }
>           if (inp3_ != null) {
>             a1s0w1 = a1s0w1 + inp3_.intValue();
>           }
>           final Integer inp2_ = (Integer) jRow[2];
>           if (inp2_ != null) {
>             a2s0w1++;
>           }
>           if (inp2_ != null) {
>             a3s0w1 = a3s0w1 + inp2_.intValue();
>           }
>         }
>         a0w1 = Long.valueOf(a0s0w1);
>         a1w1 = Integer.valueOf(a1s0w1);
>         a2w1 = Long.valueOf(a2s0w1);
>         a3w1 = Integer.valueOf(a3s0w1);
>       }
>       _list0.add(new Object[] {
>         row[0],
>         row[1],
>         row[2],
>         row[3],
>         row[4],
>         row[5],
>         row[6],
>         row[7],
>         a0w1,
>         a1w1,
>         a2w1,
>         a3w1});
>     }
>   }
>   multiMap.clear();
>   final java.util.Comparator comparator1 = new java.util.Comparator(){
>     public int compare(Object[] v0, Object[] v1) {
>       int c;
>       return 0;
>     }
> 
>     public int compare(Object o0, Object o1) {
>       return this.compare((Object[]) o0, (Object[]) o1);
>     }
> 
>   };
>   org.apache.calcite.linq4j.Linq4j.asEnumerable(_list0).foreach(new org.apache.calcite.linq4j.function.Function1() {
>     public Object apply(Object[] v) {
>       String key = v[1] == null ? (String) null : v[1].toString();
>       multiMap.putMulti(key, v);
>       return null;
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   );
>   final java.util.Iterator iterator1 = multiMap.arrays(comparator1);
>   final java.util.ArrayList _list1 = new java.util.ArrayList(
>     multiMap.size());
>   long a0s0w2;
>   Long a0w2 = (Long) null;
>   a0s0w2 = 0L;
>   int a1s0w2;
>   Integer a1w2 = (Integer) null;
>   a1s0w2 = 0;
>   long a2s0w2;
>   Long a2w2 = (Long) null;
>   a2s0w2 = 0L;
>   int a3s0w2;
>   Integer a3w2 = (Integer) null;
>   a3s0w2 = 0;
>   while (iterator1.hasNext()) {
>     final Object[] _rows = (Object[]) iterator1.next();
>     prevStart = -1;
>     prevEnd = 2147483647;
>     final int maxX = _rows.length - 1;
>     for (int i = 0; i < _rows.length; ++i) {
>       final Object[] row = (Object[]) _rows[i];
>       if (maxX != prevEnd) {
>         int actualStart;
>         if (maxX < prevEnd) {
>           actualStart = 0;
>           a0s0w2 = 0L;
>           a1s0w2 = 0;
>           a2s0w2 = 0L;
>           a3s0w2 = 0;
>         } else {
>           actualStart = prevEnd + 1;
>         }
>         prevEnd = maxX;
>         for (int j = actualStart; j <= maxX; ++j) {
>           final Object[] jRow = (Object[]) _rows[j];
>           final Integer inp3_ = (Integer) jRow[3];
>           if (inp3_ != null) {
>             a0s0w2++;
>           }
>           if (inp3_ != null) {
>             a1s0w2 = a1s0w2 + inp3_.intValue();
>           }
>           final Integer inp2_ = (Integer) jRow[2];
>           if (inp2_ != null) {
>             a2s0w2++;
>           }
>           if (inp2_ != null) {
>             a3s0w2 = a3s0w2 + inp2_.intValue();
>           }
>         }
>         a0w2 = Long.valueOf(a0s0w2);
>         a1w2 = Integer.valueOf(a1s0w2);
>         a2w2 = Long.valueOf(a2s0w2);
>         a3w2 = Integer.valueOf(a3s0w2);
>       }
>       _list1.add(new Object[] {
>         row[0],
>         row[1],
>         row[2],
>         row[3],
>         row[4],
>         row[5],
>         row[6],
>         row[7],
>         row[8],
>         row[9],
>         row[10],
>         row[11],
>         a0w2,
>         a1w2,
>         a2w2,
>         a3w2});
>     }
>   }
>   multiMap.clear();
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable5 = org.apache.calcite.linq4j.Linq4j.asEnumerable(_list1).orderBy(new org.apache.calcite.linq4j.function.Function1() {
>     public Integer apply(Object[] v) {
>       return (Integer) v[2];
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   , org.apache.calcite.linq4j.function.Functions.nullsComparator(false, false));
>   return new org.apache.calcite.linq4j.AbstractEnumerable(){
>       public org.apache.calcite.linq4j.Enumerator enumerator() {
>         return new org.apache.calcite.linq4j.Enumerator(){
>             public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable5.enumerator();
>             public void reset() {
>               inputEnumerator.reset();
>             }
> 
>             public boolean moveNext() {
>               return inputEnumerator.moveNext();
>             }
> 
>             public void close() {
>               inputEnumerator.close();
>             }
> 
>             public Object current() {
>               final Object[] current = (Object[]) inputEnumerator.current();
>               final int inp7_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[7]);
>               final long inp6_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[6]);
>               final boolean v4 = org.apache.calcite.runtime.SqlFunctions.toLong(current[4]) <= 0L || (Object) (inp6_ <= 0L);
>               final int v7 = org.apache.calcite.runtime.SqlFunctions.toInt(current[5]) - inp7_ * inp7_ / (int) inp6_;
>               final int inp11_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[11]);
>               final long inp10_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[10]);
>               final int inp15_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[15]);
>               final long inp14_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[14]);
>               return new Object[] {
>                   current[2],
>                   current[0],
>                   current[1],
>                   v4 ? (Integer) null : Integer.valueOf(v7 / (int) inp6_),
>                   org.apache.calcite.runtime.SqlFunctions.toLong(current[8]) <= 0L || (Object) (inp10_ <= 0L) ? (Integer) null : Integer.valueOf((org.apache.calcite.runtime.SqlFunctions.toInt(current[9]) - inp11_ * inp11_ / (int) inp10_) / (int) inp10_),
>                   v4 || inp6_ == 1L ? (Integer) null : Integer.valueOf((int) ((long) v7 / (inp6_ - 1L))),
>                   org.apache.calcite.runtime.SqlFunctions.toLong(current[12]) <= 0L || (Object) (inp14_ <= 0L) || inp14_ == 1L ? (Integer) null : Int (stack truncated)
623,632c1615,1619
< +-----+--------+-----------------------+-----------------------+
< | AGE | DEPTNO | regr_sxx(age, deptno) | regr_syy(age, deptno) |
< +-----+--------+-----------------------+-----------------------+
< |   5 |     20 |                    66 |                  3015 |
< |  25 |     10 |                    66 |                  3015 |
< |  80 |     20 |                    66 |                  3015 |
< |     |     40 |                    66 |                  3015 |
< |     |     40 |                    66 |                  3015 |
< +-----+--------+-----------------------+-----------------------+
< (5 rows)
---
> java.sql.SQLException: Error while executing SQL "select emps."AGE", emps."DEPTNO",
>  regr_sxx(emps."AGE", emps."DEPTNO") over() as "regr_sxx(age, deptno)",
>  regr_syy(emps."AGE", emps."DEPTNO") over() as "regr_syy(age, deptno)"
> from emps order by emps."AGE"": Error while compiling generated Java code:
> org.apache.calcite.DataContext root;
633a1621,2070
> public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
>   root = root0;
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 10,
>                 25};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child1 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 80};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable1 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child2 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable1.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 40,
>                 null};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable2 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child3 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable2.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 5};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable3 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child4 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable3.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 40,
>                 null};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable4 = child0.concat(child1).concat(child2).concat(child3).concat(child4);
>   final org.apache.calcite.linq4j.AbstractEnumerable source = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable4.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             final Object[] current = (Object[]) inputEnumerator.current();
>             final int inp0_0 = org.apache.calcite.runtime.SqlFunctions.toInt(current[0]);
>             final Integer inp1_0 = (Integer) current[1];
>             return new Object[] {
>                 current[0],
>                 current[1],
>                 inp0_0,
>                 inp0_0 * inp0_0,
>                 inp1_0 == null ? (Integer) null : Integer.valueOf(inp1_0.intValue() * inp1_0.intValue())};
>           }
> 
>         };
>     }
> 
>   };
>   int prevStart;
>   int prevEnd;
>   final java.util.Comparator comparator = new java.util.Comparator(){
>     public int compare(Object[] v0, Object[] v1) {
>       int c;
>       return 0;
>     }
> 
>     public int compare(Object o0, Object o1) {
>       return this.compare((Object[]) o0, (Object[]) o1);
>     }
> 
>   };
>   final java.util.List tempList = (java.util.List) source.into(new java.util.ArrayList());
>   final java.util.Iterator iterator = org.apache.calcite.runtime.SortedMultiMap.singletonArrayIterator(comparator, tempList);
>   final java.util.ArrayList _list = new java.util.ArrayList(
>     tempList.size());
>   int a0s0w0;
>   Integer a0w0 = (Integer) null;
>   a0s0w0 = 0;
>   int a1s0w0;
>   Integer a1w0 = (Integer) null;
>   a1s0w0 = 0;
>   long a2s0w0;
>   Long a2w0 = (Long) null;
>   a2s0w0 = 0L;
>   long a3s0w0;
>   Long a3w0 = (Long) null;
>   a3s0w0 = 0L;
>   long a4s0w0;
>   Long a4w0 = (Long) null;
>   a4s0w0 = 0L;
>   int a5s0w0;
>   Integer a5w0 = (Integer) null;
>   a5s0w0 = 0;
>   long a6s0w0;
>   Long a6w0 = (Long) null;
>   a6s0w0 = 0L;
>   int a7s0w0;
>   Integer a7w0 = (Integer) null;
>   a7s0w0 = 0;
>   long a8s0w0;
>   Long a8w0 = (Long) null;
>   a8s0w0 = 0L;
>   while (iterator.hasNext()) {
>     final Object[] _rows = (Object[]) iterator.next();
>     prevStart = -1;
>     prevEnd = 2147483647;
>     final int maxX = _rows.length - 1;
>     for (int i = 0; i < _rows.length; ++i) {
>       final Object[] row = (Object[]) _rows[i];
>       if (maxX != prevEnd) {
>         int actualStart;
>         if (maxX < prevEnd) {
>           actualStart = 0;
>           a0s0w0 = 0;
>           a1s0w0 = 0;
>           a2s0w0 = 0L;
>           a3s0w0 = 0L;
>           a4s0w0 = 0L;
>           a5s0w0 = 0;
>           a6s0w0 = 0L;
>           a7s0w0 = 0;
>           a8s0w0 = 0L;
>         } else {
>           actualStart = prevEnd + 1;
>         }
>         prevEnd = maxX;
>         for (int j = actualStart; j <= maxX; ++j) {
>           final Object[] jRow = (Object[]) _rows[j];
>           final Integer inp1_ = (Integer) jRow[1];
>           if (inp1_ != null) {
>             a0s0w0 = a0s0w0 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[3]);
>           }
>           if (inp1_ != null) {
>             a1s0w0 = a1s0w0 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[2]);
>           }
>           if (inp1_ != null) {
>             a2s0w0++;
>           }
>           if (inp1_ != null) {
>             a3s0w0++;
>           }
>           final Integer inp4_ = (Integer) jRow[4];
>           if (inp4_ != null) {
>             a4s0w0++;
>           }
>           if (inp4_ != null) {
>             a5s0w0 = a5s0w0 + inp4_.intValue();
>           }
>           if (inp1_ != null) {
>             a6s0w0++;
>           }
>           if (inp1_ != null) {
>             a7s0w0 = a7s0w0 + inp1_.intValue();
>           }
>           if (inp1_ != null) {
>             a8s0w0++;
>           }
>         }
>         a0w0 = Integer.valueOf(a0s0w0);
>         a1w0 = Integer.valueOf(a1s0w0);
>         a2w0 = Long.valueOf(a2s0w0);
>         a3w0 = Long.valueOf(a3s0w0);
>         a4w0 = Long.valueOf(a4s0w0);
>         a5w0 = Integer.valueOf(a5s0w0);
>         a6w0 = Long.valueOf(a6s0w0);
>         a7w0 = Integer.valueOf(a7s0w0);
>         a8w0 = Long.valueOf(a8s0w0);
>       }
>       _list.add(new Object[] {
>         row[0],
>         row[1],
>         row[2],
>         row[3],
>         row[4],
>         a0w0,
>         a1w0,
>         a2w0,
>         a3w0,
>         a4w0,
>         a5w0,
>         a6w0,
>         a7w0,
>         a8w0});
>     }
>   }
>   tempList.clear();
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable5 = org.apache.calcite.linq4j.Linq4j.asEnumerable(_list).orderBy(new org.apache.calcite.linq4j.function.Function1() {
>     public Integer apply(Object[] v) {
>       return (Integer) v[1];
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   , org.apache.calcite.linq4j.function.Functions.nullsComparator(false, false));
>   return new org.apache.calcite.linq4j.AbstractEnumerable(){
>       public org.apache.calcite.linq4j.Enumerator enumerator() {
>         return new org.apache.calcite.linq4j.Enumerator(){
>             public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable5.enumerator();
>             public void reset() {
>               inputEnumerator.reset();
>             }
> 
>             public boolean moveNext() {
>               return inputEnumerator.moveNext();
>             }
> 
>             public void close() {
>               inputEnumerator.close();
>             }
> 
>             public Object current() {
>               final Object[] current = (Object[]) inputEnumerator.current();
>               final int inp6_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[6]);
>               final long inp7_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[7]);
>               final int inp12_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[12]);
>               final long inp13_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[13]);
>               return new Object[] {
>                   current[1],
>                   current[0],
>                   Integer.valueOf((int) ((long) ((org.apache.calcite.runtime.SqlFunctions.toInt(current[5]) - inp6_ * inp6_ / (int) inp7_) / (int) inp7_) * org.apache.calcite.runtime.SqlFunctions.toLong(current[8]))),
>                   org.apache.calcite.runtime.SqlFunctions.toLong(current[9]) <= 0L || (Object) (org.apache.calcite.runtime.SqlFunctions.toLong(current[11]) <= 0L) ? (Integer) null : Integer.valueOf((int) ((long) ((org.apache.calcite.runtime.SqlFunctions.toInt(current[10]) - inp12_ * inp12_ / (int) inp13_) / (int) inp13_) * inp13_))};
>             }
> 
>           };
>       }
> 
>     };
> }
> 
> 
> public Class getElementType() {
>   return java.lang.Object[].class;
> }
> 
> 
> 
> 	at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
> 	at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
> 	at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:163)
> 	at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:227)
> 	at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:322)
> 	at net.hydromatic.quidem.Quidem.access$2800(Quidem.java:54)
> 	at net.hydromatic.quidem.Quidem$ContextImpl.checkResult(Quidem.java:1747)
> 	at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:1078)
> 	at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1548)
> 	at net.hydromatic.quidem.Quidem.execute(Quidem.java:216)
> 	at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:160)
> 	at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:197)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
> 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
> 	at java.lang.reflect.Method.invoke(Method.java:498)
> 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
> 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
> 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
> 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
> 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
> 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
> 	at org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:410)
> 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
> 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
> 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
> 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
> 	at java.lang.Thread.run(Thread.java:745)
> Caused by: java.lang.RuntimeException: Error while compiling generated Java code:
> org.apache.calcite.DataContext root;
> 
> public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
>   root = root0;
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 10,
>                 25};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child1 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 80};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable1 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child2 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enum (stack truncated)
647,656c2084,2088
< +-----+--------+--------+-----------------------+-----------------------+
< | AGE | DEPTNO | GENDER | regr_sxx(age, deptno) | regr_syy(age, deptno) |
< +-----+--------+--------+-----------------------+-----------------------+
< |   5 |     20 | F      |                     0 |                     0 |
< |     |     40 | F      |                     0 |                     0 |
< |  80 |     20 | M      |                     0 |                     0 |
< |     |     40 | M      |                     0 |                     0 |
< |  25 |     10 |        |                     0 |                     0 |
< +-----+--------+--------+-----------------------+-----------------------+
< (5 rows)
---
> java.sql.SQLException: Error while executing SQL "select emps."AGE", emps."DEPTNO", emps."GENDER",
>  regr_sxx(emps."AGE", emps."DEPTNO") over(partition by emps."GENDER") as "regr_sxx(age, deptno)",
>  regr_syy(emps."AGE", emps."DEPTNO") over(partition by emps."GENDER") as "regr_syy(age, deptno)"
> from emps order by emps."GENDER"": Error while compiling generated Java code:
> org.apache.calcite.DataContext root;
657a2090,2540
> public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
>   root = root0;
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 10,
>                 null,
>                 25};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child1 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 "M",
>                 80};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable1 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child2 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable1.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 40,
>                 "M",
>                 null};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable2 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child3 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable2.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 "F",
>                 5};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable3 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child4 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable3.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 40,
>                 "F",
>                 null};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable4 = child0.concat(child1).concat(child2).concat(child3).concat(child4);
>   final org.apache.calcite.linq4j.AbstractEnumerable source = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable4.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             final Object[] current = (Object[]) inputEnumerator.current();
>             final int inp0_0 = org.apache.calcite.runtime.SqlFunctions.toInt(current[0]);
>             final Integer inp2_0 = (Integer) current[2];
>             return new Object[] {
>                 current[0],
>                 current[1],
>                 current[2],
>                 inp0_0,
>                 inp0_0 * inp0_0,
>                 inp2_0 == null ? (Integer) null : Integer.valueOf(inp2_0.intValue() * inp2_0.intValue())};
>           }
> 
>         };
>     }
> 
>   };
>   int prevStart;
>   int prevEnd;
>   final java.util.Comparator comparator = new java.util.Comparator(){
>     public int compare(Object[] v0, Object[] v1) {
>       int c;
>       return 0;
>     }
> 
>     public int compare(Object o0, Object o1) {
>       return this.compare((Object[]) o0, (Object[]) o1);
>     }
> 
>   };
>   final org.apache.calcite.runtime.SortedMultiMap multiMap = new org.apache.calcite.runtime.SortedMultiMap();
>   source.foreach(new org.apache.calcite.linq4j.function.Function1() {
>     public Object apply(Object[] v) {
>       String key = v[1] == null ? (String) null : v[1].toString();
>       multiMap.putMulti(key, v);
>       return null;
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   );
>   final java.util.Iterator iterator = multiMap.arrays(comparator);
>   final java.util.ArrayList _list = new java.util.ArrayList(
>     multiMap.size());
>   int a0s0w0;
>   Integer a0w0 = (Integer) null;
>   a0s0w0 = 0;
>   int a1s0w0;
>   Integer a1w0 = (Integer) null;
>   a1s0w0 = 0;
>   long a2s0w0;
>   Long a2w0 = (Long) null;
>   a2s0w0 = 0L;
>   long a3s0w0;
>   Long a3w0 = (Long) null;
>   a3s0w0 = 0L;
>   long a4s0w0;
>   Long a4w0 = (Long) null;
>   a4s0w0 = 0L;
>   int a5s0w0;
>   Integer a5w0 = (Integer) null;
>   a5s0w0 = 0;
>   long a6s0w0;
>   Long a6w0 = (Long) null;
>   a6s0w0 = 0L;
>   int a7s0w0;
>   Integer a7w0 = (Integer) null;
>   a7s0w0 = 0;
>   long a8s0w0;
>   Long a8w0 = (Long) null;
>   a8s0w0 = 0L;
>   while (iterator.hasNext()) {
>     final Object[] _rows = (Object[]) iterator.next();
>     prevStart = -1;
>     prevEnd = 2147483647;
>     final int maxX = _rows.length - 1;
>     for (int i = 0; i < _rows.length; ++i) {
>       final Object[] row = (Object[]) _rows[i];
>       if (maxX != prevEnd) {
>         int actualStart;
>         if (maxX < prevEnd) {
>           actualStart = 0;
>           a0s0w0 = 0;
>           a1s0w0 = 0;
>           a2s0w0 = 0L;
>           a3s0w0 = 0L;
>           a4s0w0 = 0L;
>           a5s0w0 = 0;
>           a6s0w0 = 0L;
>           a7s0w0 = 0;
>           a8s0w0 = 0L;
>         } else {
>           actualStart = prevEnd + 1;
>         }
>         prevEnd = maxX;
>         for (int j = actualStart; j <= maxX; ++j) {
>           final Object[] jRow = (Object[]) _rows[j];
>           final Integer inp2_ = (Integer) jRow[2];
>           if (inp2_ != null) {
>             a0s0w0 = a0s0w0 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[4]);
>           }
>           if (inp2_ != null) {
>             a1s0w0 = a1s0w0 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[3]);
>           }
>           if (inp2_ != null) {
>             a2s0w0++;
>           }
>           if (inp2_ != null) {
>             a3s0w0++;
>           }
>           final Integer inp5_ = (Integer) jRow[5];
>           if (inp5_ != null) {
>             a4s0w0++;
>           }
>           if (inp5_ != null) {
>             a5s0w0 = a5s0w0 + inp5_.intValue();
>           }
>           if (inp2_ != null) {
>             a6s0w0++;
>           }
>           if (inp2_ != null) {
>             a7s0w0 = a7s0w0 + inp2_.intValue();
>           }
>           if (inp2_ != null) {
>             a8s0w0++;
>           }
>         }
>         a0w0 = Integer.valueOf(a0s0w0);
>         a1w0 = Integer.valueOf(a1s0w0);
>         a2w0 = Long.valueOf(a2s0w0);
>         a3w0 = Long.valueOf(a3s0w0);
>         a4w0 = Long.valueOf(a4s0w0);
>         a5w0 = Integer.valueOf(a5s0w0);
>         a6w0 = Long.valueOf(a6s0w0);
>         a7w0 = Integer.valueOf(a7s0w0);
>         a8w0 = Long.valueOf(a8s0w0);
>       }
>       _list.add(new Object[] {
>         row[0],
>         row[1],
>         row[2],
>         row[3],
>         row[4],
>         row[5],
>         a0w0,
>         a1w0,
>         a2w0,
>         a3w0,
>         a4w0,
>         a5w0,
>         a6w0,
>         a7w0,
>         a8w0});
>     }
>   }
>   multiMap.clear();
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable5 = org.apache.calcite.linq4j.Linq4j.asEnumerable(_list).orderBy(new org.apache.calcite.linq4j.function.Function1() {
>     public String apply(Object[] v) {
>       return v[1] == null ? (String) null : v[1].toString();
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   , org.apache.calcite.linq4j.function.Functions.nullsComparator(false, false));
>   return new org.apache.calcite.linq4j.AbstractEnumerable(){
>       public org.apache.calcite.linq4j.Enumerator enumerator() {
>         return new org.apache.calcite.linq4j.Enumerator(){
>             public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable5.enumerator();
>             public void reset() {
>               inputEnumerator.reset();
>             }
> 
>             public boolean moveNext() {
>               return inputEnumerator.moveNext();
>             }
> 
>             public void close() {
>               inputEnumerator.close();
>             }
> 
>             public Object current() {
>               final Object[] current = (Object[]) inputEnumerator.current();
>               final int inp7_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[7]);
>               final long inp8_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[8]);
>               final int inp13_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[13]);
>               final long inp14_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[14]);
>               return new Object[] {
>                   current[2],
>                   current[0],
>                   current[1],
>                   Integer.valueOf((int) ((long) ((org.apache.calcite.runtime.SqlFunctions.toInt(current[6]) - inp7_ * inp7_ / (int) inp8_) / (int) inp8_) * org.apache.calcite.runtime.SqlFunctions.toLong(current[9]))),
>                   org.apache.calcite.runtime.SqlFunctions.toLong(current[10]) <= 0L || (Object) (org.apache.calcite.runtime.SqlFunctions.toLong(current[12]) <= 0L) ? (Integer) null : Integer.valueOf((int) ((long) ((org.apache.calcite.runtime.SqlFunctions.toInt(current[11]) - inp13_ * inp13_ / (int) inp14_) / (int) inp14_) * inp14_))};
>             }
> 
>           };
>       }
> 
>     };
> }
> 
> 
> public Class getElementType() {
>   return java.lang.Object[].class;
> }
> 
> 
> 
> 	at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
> 	at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
> 	at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:163)
> 	at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:227)
> 	at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:322)
> 	at net.hydromatic.quidem.Quidem.access$2800(Quidem.java:54)
> 	at net.hydromatic.quidem.Quidem$ContextImpl.checkResult(Quidem.java:1747)
> 	at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:1078)
> 	at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1548)
> 	at net.hydromatic.quidem.Quidem.execute(Quidem.java:216)
> 	at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:160)
> 	at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:197)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
> 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
> 	at java.lang.reflect.Method.invoke(Method.java:498)
> 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
> 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
> 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
> 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
> 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
> 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
> 	at org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:410)
> 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
> 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
> 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
> 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
> 	at java.lang.Thread.run(Thread.java:745)
> Caused by: java.lang.RuntimeException: Error while compiling generated Java code:
> org.apache.calcite.DataContext root;
> 
> public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
>   root = root0;
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 10,
>                 null,
>                 25};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child1 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>  (stack truncated)


[INFO] Running org.apache.calcite.util.PartiallyOrderedSetTest
[WARNING] Tests run: 15, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 108.026 s - in org.apache.calcite.util.PartiallyOrderedSetTest
[INFO] Running org.apache.calcite.sql.parser.SqlUnParserTest
[WARNING] Tests run: 315, Failures: 0, Errors: 0, Skipped: 6, Time elapsed: 0.391 s - in org.apache.calcite.sql.parser.SqlUnParserTest
[INFO] Running org.apache.calcite.test.CalciteSqlOperatorTest
[ERROR] Tests run: 227, Failures: 0, Errors: 4, Skipped: 1, Time elapsed: 28.563 s <<< FAILURE! - in org.apache.calcite.test.CalciteSqlOperatorTest
[ERROR] testDecodeFunc(org.apache.calcite.test.CalciteSqlOperatorTest)  Time elapsed: 0.132 s  <<< ERROR!
java.lang.RuntimeException: 
java.sql.SQLException: Error while executing SQL "select decode(p6, p5, p4, 1, p3, 1, p2, p1, p0) from (values ('c', 2, 'z', 'b', 'a', 0, 1)) as t(p0, p1, p2, p3, p4, p5, p6)": Error while compiling generated Java code:
org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Object[] {
    new Object[] {
      "c",
      2,
      "z",
      "b",
      "a",
      0,
      1}});
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final int inp6_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[6]);
              final Object v2 = inp6_ == 1;
              return inp6_ == org.apache.calcite.runtime.SqlFunctions.toInt(current[5]) ? (current[4] == null ? (String) null : current[4].toString()) : v2 ? (current[3] == null ? (String) null : current[3].toString()) : v2 ? (current[2] == null ? (String) null : current[2].toString()) : inp6_ == org.apache.calcite.runtime.SqlFunctions.toInt(current[1]) ? (current[0] == null ? (String) null : current[0].toString()) : (String) null;
            }

          };
      }

    };
}


public Class getElementType() {
  return java.lang.String.class;
}



Caused by: java.sql.SQLException: 
Error while executing SQL "select decode(p6, p5, p4, 1, p3, 1, p2, p1, p0) from (values ('c', 2, 'z', 'b', 'a', 0, 1)) as t(p0, p1, p2, p3, p4, p5, p6)": Error while compiling generated Java code:
org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Object[] {
    new Object[] {
      "c",
      2,
      "z",
      "b",
      "a",
      0,
      1}});
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final int inp6_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[6]);
              final Object v2 = inp6_ == 1;
              return inp6_ == org.apache.calcite.runtime.SqlFunctions.toInt(current[5]) ? (current[4] == null ? (String) null : current[4].toString()) : v2 ? (current[3] == null ? (String) null : current[3].toString()) : v2 ? (current[2] == null ? (String) null : current[2].toString()) : inp6_ == org.apache.calcite.runtime.SqlFunctions.toInt(current[1]) ? (current[0] == null ? (String) null : current[0].toString()) : (String) null;
            }

          };
      }

    };
}


public Class getElementType() {
  return java.lang.String.class;
}



Caused by: java.lang.RuntimeException: 
Error while compiling generated Java code:
org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Object[] {
    new Object[] {
      "c",
      2,
      "z",
      "b",
      "a",
      0,
      1}});
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final int inp6_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[6]);
              final Object v2 = inp6_ == 1;
              return inp6_ == org.apache.calcite.runtime.SqlFunctions.toInt(current[5]) ? (current[4] == null ? (String) null : current[4].toString()) : v2 ? (current[3] == null ? (String) null : current[3].toString()) : v2 ? (current[2] == null ? (String) null : current[2].toString()) : inp6_ == org.apache.calcite.runtime.SqlFunctions.toInt(current[1]) ? (current[0] == null ? (String) null : current[0].toString()) : (String) null;
            }

          };
      }

    };
}


public Class getElementType() {
  return java.lang.String.class;
}



Caused by: org.codehaus.commons.compiler.CompileException: Line 34, Column 156: Not a boolean expression

[ERROR] testStddevSampFunc(org.apache.calcite.test.CalciteSqlOperatorTest)  Time elapsed: 0.03 s  <<< ERROR!
java.lang.RuntimeException: 
java.sql.SQLException: Error while executing SQL "SELECT stddev_samp(x) FROM (SELECT 5 AS x FROM (VALUES (1)))": Error while compiling generated Java code:
public static class Record3_0 implements java.io.Serializable {
  public int f0;
  public long f1;
  public int f2;
  public Record3_0() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record3_0)) {
      return false;
    }
    return this.f0 == ((Record3_0) o).f0 && this.f1 == ((Record3_0) o).f1 && this.f2 == ((Record3_0) o).f2;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    return h;
  }

  public int compareTo(Record3_0 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compare(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
    1});
  final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
    public org.apache.calcite.linq4j.Enumerator enumerator() {
      return new org.apache.calcite.linq4j.Enumerator(){
          public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
          public void reset() {
            inputEnumerator.reset();
          }

          public boolean moveNext() {
            return inputEnumerator.moveNext();
          }

          public void close() {
            inputEnumerator.close();
          }

          public Object current() {
            return new Object[] {
                5,
                $L4J$C$5_5};
          }

          static final int $L4J$C$5_5 = 5 * 5;
        };
    }

  };
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(child.aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      int a0s0;
      a0s0 = 0;
      long a1s0;
      a1s0 = 0L;
      int a2s0;
      a2s0 = 0;
      Record3_0 record0;
      record0 = new Record3_0();
      record0.f0 = a0s0;
      record0.f1 = a1s0;
      record0.f2 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record3_0 apply(Record3_0 acc, Object[] in) {
      acc.f0 = acc.f0 + org.apache.calcite.runtime.SqlFunctions.toInt(in[1]);
      acc.f1++;
      acc.f2 = acc.f2 + org.apache.calcite.runtime.SqlFunctions.toInt(in[0]);
      return acc;
    }
    public Record3_0 apply(Object acc, Object in) {
      return apply(
        (Record3_0) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record3_0 acc) {
      return new Object[] {
          acc.f0,
          acc.f1,
          acc.f2};
    }
    public Object apply(Object acc) {
      return apply(
        (Record3_0) acc);
    }
  }
  ));
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
              final int inp2_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[2]);
              final java.math.BigDecimal v11 = $L4J$C$new_java_math_BigDecimal_0_5_;
              return (Object) (inp1_ == 0L) || inp1_ == 1L ? (Integer) null : Integer.valueOf((int) org.apache.calcite.runtime.SqlFunctions.power(((long) org.apache.calcite.runtime.SqlFunctions.toInt(current[0]) - (long) (inp2_ * inp2_) / inp1_) / (inp1_ - 1L), v11));
            }

            static final java.math.BigDecimal $L4J$C$new_java_math_BigDecimal_0_5_ = new java.math.BigDecimal(
              "0.5");
          };
      }

    };
}


public Class getElementType() {
  return java.lang.Integer.class;
}



Caused by: java.sql.SQLException: 
Error while executing SQL "SELECT stddev_samp(x) FROM (SELECT 5 AS x FROM (VALUES (1)))": Error while compiling generated Java code:
public static class Record3_0 implements java.io.Serializable {
  public int f0;
  public long f1;
  public int f2;
  public Record3_0() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record3_0)) {
      return false;
    }
    return this.f0 == ((Record3_0) o).f0 && this.f1 == ((Record3_0) o).f1 && this.f2 == ((Record3_0) o).f2;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    return h;
  }

  public int compareTo(Record3_0 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compare(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
    1});
  final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
    public org.apache.calcite.linq4j.Enumerator enumerator() {
      return new org.apache.calcite.linq4j.Enumerator(){
          public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
          public void reset() {
            inputEnumerator.reset();
          }

          public boolean moveNext() {
            return inputEnumerator.moveNext();
          }

          public void close() {
            inputEnumerator.close();
          }

          public Object current() {
            return new Object[] {
                5,
                $L4J$C$5_5};
          }

          static final int $L4J$C$5_5 = 5 * 5;
        };
    }

  };
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(child.aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      int a0s0;
      a0s0 = 0;
      long a1s0;
      a1s0 = 0L;
      int a2s0;
      a2s0 = 0;
      Record3_0 record0;
      record0 = new Record3_0();
      record0.f0 = a0s0;
      record0.f1 = a1s0;
      record0.f2 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record3_0 apply(Record3_0 acc, Object[] in) {
      acc.f0 = acc.f0 + org.apache.calcite.runtime.SqlFunctions.toInt(in[1]);
      acc.f1++;
      acc.f2 = acc.f2 + org.apache.calcite.runtime.SqlFunctions.toInt(in[0]);
      return acc;
    }
    public Record3_0 apply(Object acc, Object in) {
      return apply(
        (Record3_0) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record3_0 acc) {
      return new Object[] {
          acc.f0,
          acc.f1,
          acc.f2};
    }
    public Object apply(Object acc) {
      return apply(
        (Record3_0) acc);
    }
  }
  ));
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
              final int inp2_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[2]);
              final java.math.BigDecimal v11 = $L4J$C$new_java_math_BigDecimal_0_5_;
              return (Object) (inp1_ == 0L) || inp1_ == 1L ? (Integer) null : Integer.valueOf((int) org.apache.calcite.runtime.SqlFunctions.power(((long) org.apache.calcite.runtime.SqlFunctions.toInt(current[0]) - (long) (inp2_ * inp2_) / inp1_) / (inp1_ - 1L), v11));
            }

            static final java.math.BigDecimal $L4J$C$new_java_math_BigDecimal_0_5_ = new java.math.BigDecimal(
              "0.5");
          };
      }

    };
}


public Class getElementType() {
  return java.lang.Integer.class;
}



Caused by: java.lang.RuntimeException: 
Error while compiling generated Java code:
public static class Record3_0 implements java.io.Serializable {
  public int f0;
  public long f1;
  public int f2;
  public Record3_0() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record3_0)) {
      return false;
    }
    return this.f0 == ((Record3_0) o).f0 && this.f1 == ((Record3_0) o).f1 && this.f2 == ((Record3_0) o).f2;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    return h;
  }

  public int compareTo(Record3_0 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compare(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
    1});
  final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
    public org.apache.calcite.linq4j.Enumerator enumerator() {
      return new org.apache.calcite.linq4j.Enumerator(){
          public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
          public void reset() {
            inputEnumerator.reset();
          }

          public boolean moveNext() {
            return inputEnumerator.moveNext();
          }

          public void close() {
            inputEnumerator.close();
          }

          public Object current() {
            return new Object[] {
                5,
                $L4J$C$5_5};
          }

          static final int $L4J$C$5_5 = 5 * 5;
        };
    }

  };
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(child.aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      int a0s0;
      a0s0 = 0;
      long a1s0;
      a1s0 = 0L;
      int a2s0;
      a2s0 = 0;
      Record3_0 record0;
      record0 = new Record3_0();
      record0.f0 = a0s0;
      record0.f1 = a1s0;
      record0.f2 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record3_0 apply(Record3_0 acc, Object[] in) {
      acc.f0 = acc.f0 + org.apache.calcite.runtime.SqlFunctions.toInt(in[1]);
      acc.f1++;
      acc.f2 = acc.f2 + org.apache.calcite.runtime.SqlFunctions.toInt(in[0]);
      return acc;
    }
    public Record3_0 apply(Object acc, Object in) {
      return apply(
        (Record3_0) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record3_0 acc) {
      return new Object[] {
          acc.f0,
          acc.f1,
          acc.f2};
    }
    public Object apply(Object acc) {
      return apply(
        (Record3_0) acc);
    }
  }
  ));
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
              final int inp2_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[2]);
              final java.math.BigDecimal v11 = $L4J$C$new_java_math_BigDecimal_0_5_;
              return (Object) (inp1_ == 0L) || inp1_ == 1L ? (Integer) null : Integer.valueOf((int) org.apache.calcite.runtime.SqlFunctions.power(((long) org.apache.calcite.runtime.SqlFunctions.toInt(current[0]) - (long) (inp2_ * inp2_) / inp1_) / (inp1_ - 1L), v11));
            }

            static final java.math.BigDecimal $L4J$C$new_java_math_BigDecimal_0_5_ = new java.math.BigDecimal(
              "0.5");
          };
      }

    };
}


public Class getElementType() {
  return java.lang.Integer.class;
}



Caused by: org.codehaus.commons.compiler.CompileException: Line 143, Column 32: Not a boolean expression

[ERROR] testStddevFunc(org.apache.calcite.test.CalciteSqlOperatorTest)  Time elapsed: 0.028 s  <<< ERROR!
java.lang.RuntimeException: 
java.sql.SQLException: Error while executing SQL "SELECT stddev(x) FROM (SELECT 5 AS x FROM (VALUES (1)))": Error while compiling generated Java code:
public static class Record3_0 implements java.io.Serializable {
  public int f0;
  public long f1;
  public int f2;
  public Record3_0() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record3_0)) {
      return false;
    }
    return this.f0 == ((Record3_0) o).f0 && this.f1 == ((Record3_0) o).f1 && this.f2 == ((Record3_0) o).f2;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    return h;
  }

  public int compareTo(Record3_0 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compare(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
    1});
  final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
    public org.apache.calcite.linq4j.Enumerator enumerator() {
      return new org.apache.calcite.linq4j.Enumerator(){
          public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
          public void reset() {
            inputEnumerator.reset();
          }

          public boolean moveNext() {
            return inputEnumerator.moveNext();
          }

          public void close() {
            inputEnumerator.close();
          }

          public Object current() {
            return new Object[] {
                5,
                $L4J$C$5_5};
          }

          static final int $L4J$C$5_5 = 5 * 5;
        };
    }

  };
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(child.aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      int a0s0;
      a0s0 = 0;
      long a1s0;
      a1s0 = 0L;
      int a2s0;
      a2s0 = 0;
      Record3_0 record0;
      record0 = new Record3_0();
      record0.f0 = a0s0;
      record0.f1 = a1s0;
      record0.f2 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record3_0 apply(Record3_0 acc, Object[] in) {
      acc.f0 = acc.f0 + org.apache.calcite.runtime.SqlFunctions.toInt(in[1]);
      acc.f1++;
      acc.f2 = acc.f2 + org.apache.calcite.runtime.SqlFunctions.toInt(in[0]);
      return acc;
    }
    public Record3_0 apply(Object acc, Object in) {
      return apply(
        (Record3_0) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record3_0 acc) {
      return new Object[] {
          acc.f0,
          acc.f1,
          acc.f2};
    }
    public Object apply(Object acc) {
      return apply(
        (Record3_0) acc);
    }
  }
  ));
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
              final int inp2_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[2]);
              final java.math.BigDecimal v11 = $L4J$C$new_java_math_BigDecimal_0_5_;
              return (Object) (inp1_ == 0L) || inp1_ == 1L ? (Integer) null : Integer.valueOf((int) org.apache.calcite.runtime.SqlFunctions.power(((long) org.apache.calcite.runtime.SqlFunctions.toInt(current[0]) - (long) (inp2_ * inp2_) / inp1_) / (inp1_ - 1L), v11));
            }

            static final java.math.BigDecimal $L4J$C$new_java_math_BigDecimal_0_5_ = new java.math.BigDecimal(
              "0.5");
          };
      }

    };
}


public Class getElementType() {
  return java.lang.Integer.class;
}



Caused by: java.sql.SQLException: 
Error while executing SQL "SELECT stddev(x) FROM (SELECT 5 AS x FROM (VALUES (1)))": Error while compiling generated Java code:
public static class Record3_0 implements java.io.Serializable {
  public int f0;
  public long f1;
  public int f2;
  public Record3_0() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record3_0)) {
      return false;
    }
    return this.f0 == ((Record3_0) o).f0 && this.f1 == ((Record3_0) o).f1 && this.f2 == ((Record3_0) o).f2;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    return h;
  }

  public int compareTo(Record3_0 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compare(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
    1});
  final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
    public org.apache.calcite.linq4j.Enumerator enumerator() {
      return new org.apache.calcite.linq4j.Enumerator(){
          public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
          public void reset() {
            inputEnumerator.reset();
          }

          public boolean moveNext() {
            return inputEnumerator.moveNext();
          }

          public void close() {
            inputEnumerator.close();
          }

          public Object current() {
            return new Object[] {
                5,
                $L4J$C$5_5};
          }

          static final int $L4J$C$5_5 = 5 * 5;
        };
    }

  };
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(child.aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      int a0s0;
      a0s0 = 0;
      long a1s0;
      a1s0 = 0L;
      int a2s0;
      a2s0 = 0;
      Record3_0 record0;
      record0 = new Record3_0();
      record0.f0 = a0s0;
      record0.f1 = a1s0;
      record0.f2 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record3_0 apply(Record3_0 acc, Object[] in) {
      acc.f0 = acc.f0 + org.apache.calcite.runtime.SqlFunctions.toInt(in[1]);
      acc.f1++;
      acc.f2 = acc.f2 + org.apache.calcite.runtime.SqlFunctions.toInt(in[0]);
      return acc;
    }
    public Record3_0 apply(Object acc, Object in) {
      return apply(
        (Record3_0) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record3_0 acc) {
      return new Object[] {
          acc.f0,
          acc.f1,
          acc.f2};
    }
    public Object apply(Object acc) {
      return apply(
        (Record3_0) acc);
    }
  }
  ));
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
              final int inp2_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[2]);
              final java.math.BigDecimal v11 = $L4J$C$new_java_math_BigDecimal_0_5_;
              return (Object) (inp1_ == 0L) || inp1_ == 1L ? (Integer) null : Integer.valueOf((int) org.apache.calcite.runtime.SqlFunctions.power(((long) org.apache.calcite.runtime.SqlFunctions.toInt(current[0]) - (long) (inp2_ * inp2_) / inp1_) / (inp1_ - 1L), v11));
            }

            static final java.math.BigDecimal $L4J$C$new_java_math_BigDecimal_0_5_ = new java.math.BigDecimal(
              "0.5");
          };
      }

    };
}


public Class getElementType() {
  return java.lang.Integer.class;
}



Caused by: java.lang.RuntimeException: 
Error while compiling generated Java code:
public static class Record3_0 implements java.io.Serializable {
  public int f0;
  public long f1;
  public int f2;
  public Record3_0() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record3_0)) {
      return false;
    }
    return this.f0 == ((Record3_0) o).f0 && this.f1 == ((Record3_0) o).f1 && this.f2 == ((Record3_0) o).f2;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    return h;
  }

  public int compareTo(Record3_0 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compare(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
    1});
  final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
    public org.apache.calcite.linq4j.Enumerator enumerator() {
      return new org.apache.calcite.linq4j.Enumerator(){
          public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
          public void reset() {
            inputEnumerator.reset();
          }

          public boolean moveNext() {
            return inputEnumerator.moveNext();
          }

          public void close() {
            inputEnumerator.close();
          }

          public Object current() {
            return new Object[] {
                5,
                $L4J$C$5_5};
          }

          static final int $L4J$C$5_5 = 5 * 5;
        };
    }

  };
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(child.aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      int a0s0;
      a0s0 = 0;
      long a1s0;
      a1s0 = 0L;
      int a2s0;
      a2s0 = 0;
      Record3_0 record0;
      record0 = new Record3_0();
      record0.f0 = a0s0;
      record0.f1 = a1s0;
      record0.f2 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record3_0 apply(Record3_0 acc, Object[] in) {
      acc.f0 = acc.f0 + org.apache.calcite.runtime.SqlFunctions.toInt(in[1]);
      acc.f1++;
      acc.f2 = acc.f2 + org.apache.calcite.runtime.SqlFunctions.toInt(in[0]);
      return acc;
    }
    public Record3_0 apply(Object acc, Object in) {
      return apply(
        (Record3_0) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record3_0 acc) {
      return new Object[] {
          acc.f0,
          acc.f1,
          acc.f2};
    }
    public Object apply(Object acc) {
      return apply(
        (Record3_0) acc);
    }
  }
  ));
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
              final int inp2_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[2]);
              final java.math.BigDecimal v11 = $L4J$C$new_java_math_BigDecimal_0_5_;
              return (Object) (inp1_ == 0L) || inp1_ == 1L ? (Integer) null : Integer.valueOf((int) org.apache.calcite.runtime.SqlFunctions.power(((long) org.apache.calcite.runtime.SqlFunctions.toInt(current[0]) - (long) (inp2_ * inp2_) / inp1_) / (inp1_ - 1L), v11));
            }

            static final java.math.BigDecimal $L4J$C$new_java_math_BigDecimal_0_5_ = new java.math.BigDecimal(
              "0.5");
          };
      }

    };
}


public Class getElementType() {
  return java.lang.Integer.class;
}



Caused by: org.codehaus.commons.compiler.CompileException: Line 143, Column 32: Not a boolean expression

[ERROR] testStddevPopFunc(org.apache.calcite.test.CalciteSqlOperatorTest)  Time elapsed: 0.04 s  <<< ERROR!
java.lang.RuntimeException: 
java.sql.SQLException: Error while executing SQL "SELECT stddev_pop(x) FROM (SELECT 5 AS x FROM (VALUES (1)))": Error while compiling generated Java code:
public static class Record3_0 implements java.io.Serializable {
  public int f0;
  public long f1;
  public int f2;
  public Record3_0() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record3_0)) {
      return false;
    }
    return this.f0 == ((Record3_0) o).f0 && this.f1 == ((Record3_0) o).f1 && this.f2 == ((Record3_0) o).f2;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    return h;
  }

  public int compareTo(Record3_0 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compare(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
    1});
  final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
    public org.apache.calcite.linq4j.Enumerator enumerator() {
      return new org.apache.calcite.linq4j.Enumerator(){
          public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
          public void reset() {
            inputEnumerator.reset();
          }

          public boolean moveNext() {
            return inputEnumerator.moveNext();
          }

          public void close() {
            inputEnumerator.close();
          }

          public Object current() {
            return new Object[] {
                5,
                $L4J$C$5_5};
          }

          static final int $L4J$C$5_5 = 5 * 5;
        };
    }

  };
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(child.aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      int a0s0;
      a0s0 = 0;
      long a1s0;
      a1s0 = 0L;
      int a2s0;
      a2s0 = 0;
      Record3_0 record0;
      record0 = new Record3_0();
      record0.f0 = a0s0;
      record0.f1 = a1s0;
      record0.f2 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record3_0 apply(Record3_0 acc, Object[] in) {
      acc.f0 = acc.f0 + org.apache.calcite.runtime.SqlFunctions.toInt(in[1]);
      acc.f1++;
      acc.f2 = acc.f2 + org.apache.calcite.runtime.SqlFunctions.toInt(in[0]);
      return acc;
    }
    public Record3_0 apply(Object acc, Object in) {
      return apply(
        (Record3_0) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record3_0 acc) {
      return new Object[] {
          acc.f0,
          acc.f1,
          acc.f2};
    }
    public Object apply(Object acc) {
      return apply(
        (Record3_0) acc);
    }
  }
  ));
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
              final int inp2_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[2]);
              final java.math.BigDecimal v7 = $L4J$C$new_java_math_BigDecimal_0_5_;
              return (Object) (inp1_ == 0L) ? (Integer) null : Integer.valueOf((int) org.apache.calcite.runtime.SqlFunctions.power(((long) org.apache.calcite.runtime.SqlFunctions.toInt(current[0]) - (long) (inp2_ * inp2_) / inp1_) / inp1_, v7));
            }

            static final java.math.BigDecimal $L4J$C$new_java_math_BigDecimal_0_5_ = new java.math.BigDecimal(
              "0.5");
          };
      }

    };
}


public Class getElementType() {
  return java.lang.Integer.class;
}



Caused by: java.sql.SQLException: 
Error while executing SQL "SELECT stddev_pop(x) FROM (SELECT 5 AS x FROM (VALUES (1)))": Error while compiling generated Java code:
public static class Record3_0 implements java.io.Serializable {
  public int f0;
  public long f1;
  public int f2;
  public Record3_0() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record3_0)) {
      return false;
    }
    return this.f0 == ((Record3_0) o).f0 && this.f1 == ((Record3_0) o).f1 && this.f2 == ((Record3_0) o).f2;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    return h;
  }

  public int compareTo(Record3_0 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compare(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
    1});
  final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
    public org.apache.calcite.linq4j.Enumerator enumerator() {
      return new org.apache.calcite.linq4j.Enumerator(){
          public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
          public void reset() {
            inputEnumerator.reset();
          }

          public boolean moveNext() {
            return inputEnumerator.moveNext();
          }

          public void close() {
            inputEnumerator.close();
          }

          public Object current() {
            return new Object[] {
                5,
                $L4J$C$5_5};
          }

          static final int $L4J$C$5_5 = 5 * 5;
        };
    }

  };
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(child.aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      int a0s0;
      a0s0 = 0;
      long a1s0;
      a1s0 = 0L;
      int a2s0;
      a2s0 = 0;
      Record3_0 record0;
      record0 = new Record3_0();
      record0.f0 = a0s0;
      record0.f1 = a1s0;
      record0.f2 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record3_0 apply(Record3_0 acc, Object[] in) {
      acc.f0 = acc.f0 + org.apache.calcite.runtime.SqlFunctions.toInt(in[1]);
      acc.f1++;
      acc.f2 = acc.f2 + org.apache.calcite.runtime.SqlFunctions.toInt(in[0]);
      return acc;
    }
    public Record3_0 apply(Object acc, Object in) {
      return apply(
        (Record3_0) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record3_0 acc) {
      return new Object[] {
          acc.f0,
          acc.f1,
          acc.f2};
    }
    public Object apply(Object acc) {
      return apply(
        (Record3_0) acc);
    }
  }
  ));
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
              final int inp2_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[2]);
              final java.math.BigDecimal v7 = $L4J$C$new_java_math_BigDecimal_0_5_;
              return (Object) (inp1_ == 0L) ? (Integer) null : Integer.valueOf((int) org.apache.calcite.runtime.SqlFunctions.power(((long) org.apache.calcite.runtime.SqlFunctions.toInt(current[0]) - (long) (inp2_ * inp2_) / inp1_) / inp1_, v7));
            }

            static final java.math.BigDecimal $L4J$C$new_java_math_BigDecimal_0_5_ = new java.math.BigDecimal(
              "0.5");
          };
      }

    };
}


public Class getElementType() {
  return java.lang.Integer.class;
}



Caused by: java.lang.RuntimeException: 
Error while compiling generated Java code:
public static class Record3_0 implements java.io.Serializable {
  public int f0;
  public long f1;
  public int f2;
  public Record3_0() {}
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Record3_0)) {
      return false;
    }
    return this.f0 == ((Record3_0) o).f0 && this.f1 == ((Record3_0) o).f1 && this.f2 == ((Record3_0) o).f2;
  }

  public int hashCode() {
    int h = 0;
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
    h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
    return h;
  }

  public int compareTo(Record3_0 that) {
    int c;
    c = org.apache.calcite.runtime.Utilities.compare(this.f0, that.f0);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
    if (c != 0) {
      return c;
    }
    c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
    if (c != 0) {
      return c;
    }
    return 0;
  }

  public String toString() {
    return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + "}";
  }

}

org.apache.calcite.DataContext root;

public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
  root = root0;
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
    1});
  final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
    public org.apache.calcite.linq4j.Enumerator enumerator() {
      return new org.apache.calcite.linq4j.Enumerator(){
          public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
          public void reset() {
            inputEnumerator.reset();
          }

          public boolean moveNext() {
            return inputEnumerator.moveNext();
          }

          public void close() {
            inputEnumerator.close();
          }

          public Object current() {
            return new Object[] {
                5,
                $L4J$C$5_5};
          }

          static final int $L4J$C$5_5 = 5 * 5;
        };
    }

  };
  final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.singletonEnumerable(child.aggregate(new org.apache.calcite.linq4j.function.Function0() {
    public Object apply() {
      int a0s0;
      a0s0 = 0;
      long a1s0;
      a1s0 = 0L;
      int a2s0;
      a2s0 = 0;
      Record3_0 record0;
      record0 = new Record3_0();
      record0.f0 = a0s0;
      record0.f1 = a1s0;
      record0.f2 = a2s0;
      return record0;
    }
  }
  .apply(), new org.apache.calcite.linq4j.function.Function2() {
    public Record3_0 apply(Record3_0 acc, Object[] in) {
      acc.f0 = acc.f0 + org.apache.calcite.runtime.SqlFunctions.toInt(in[1]);
      acc.f1++;
      acc.f2 = acc.f2 + org.apache.calcite.runtime.SqlFunctions.toInt(in[0]);
      return acc;
    }
    public Record3_0 apply(Object acc, Object in) {
      return apply(
        (Record3_0) acc,
        (Object[]) in);
    }
  }
  , new org.apache.calcite.linq4j.function.Function1() {
    public Object[] apply(Record3_0 acc) {
      return new Object[] {
          acc.f0,
          acc.f1,
          acc.f2};
    }
    public Object apply(Object acc) {
      return apply(
        (Record3_0) acc);
    }
  }
  ));
  return new org.apache.calcite.linq4j.AbstractEnumerable(){
      public org.apache.calcite.linq4j.Enumerator enumerator() {
        return new org.apache.calcite.linq4j.Enumerator(){
            public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
            public void reset() {
              inputEnumerator.reset();
            }

            public boolean moveNext() {
              return inputEnumerator.moveNext();
            }

            public void close() {
              inputEnumerator.close();
            }

            public Object current() {
              final Object[] current = (Object[]) inputEnumerator.current();
              final long inp1_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[1]);
              final int inp2_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[2]);
              final java.math.BigDecimal v7 = $L4J$C$new_java_math_BigDecimal_0_5_;
              return (Object) (inp1_ == 0L) ? (Integer) null : Integer.valueOf((int) org.apache.calcite.runtime.SqlFunctions.power(((long) org.apache.calcite.runtime.SqlFunctions.toInt(current[0]) - (long) (inp2_ * inp2_) / inp1_) / inp1_, v7));
            }

            static final java.math.BigDecimal $L4J$C$new_java_math_BigDecimal_0_5_ = new java.math.BigDecimal(
              "0.5");
          };
      }

    };
}


public Class getElementType() {
  return java.lang.Integer.class;
}



Caused by: org.codehaus.commons.compiler.CompileException: Line 143, Column 32: Not a boolean expression

[INFO] Running org.apache.calcite.test.LatticeTest
2018-09-05 00:33:30,159 [pool-1-thread-1] WARN  - PoolableConnectionFactory not linked to pool. Calling setPool() to fix the configuration.
[WARNING] Tests run: 38, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 126.268 s - in org.apache.calcite.test.LatticeTest
[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   CoreQuidemTest>QuidemTest.test:197->QuidemTest.checkRun:164 Files differ: /root/workspace/apache/calcite/424535393/core/target/test-classes/sql/surefire/sql/agg.iq /root/workspace/apache/calcite/424535393/core/target/test-classes/sql/agg.iq
192,198c192,218
< +--------+----+----+----+---+
< | GENDER | P  | S  | SS | C |
< +--------+----+----+----+---+
< | F      | 17 | 19 | 19 | 5 |
< | M      | 17 | 20 | 20 | 3 |
< +--------+----+----+----+---+
< (2 rows)
---
> java.sql.SQLException: Error while executing SQL "select gender,
>   stddev_pop(deptno) as p,
>   stddev_samp(deptno) as s,
>   stddev(deptno) as ss,
>   count(deptno) as c
> from emp
> group by gender": Error while compiling generated Java code:
> public static class Record9_2 implements java.io.Serializable {
>   public int f0;
>   public boolean f1;
>   public int f2;
>   public boolean f3;
>   public long f4;
>   public int f5;
>   public boolean f6;
>   public int f7;
>   public boolean f8;
>   public Record9_2() {}
>   public boolean equals(Object o) {
>     if (this == o) {
>       return true;
>     }
>     if (!(o instanceof Record9_2)) {
>       return false;
>     }
>     return this.f0 == ((Record9_2) o).f0 && this.f1 == ((Record9_2) o).f1 && this.f2 == ((Record9_2) o).f2 && this.f3 == ((Record9_2) o).f3 && this.f4 == ((Record9_2) o).f4 && this.f5 == ((Record9_2) o).f5 && this.f6 == ((Record9_2) o).f6 && this.f7 == ((Record9_2) o).f7 && this.f8 == ((Record9_2) o).f8;
>   }
199a220,690
>   public int hashCode() {
>     int h = 0;
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f0);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f1);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f2);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f3);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f4);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f5);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f6);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f7);
>     h = org.apache.calcite.runtime.Utilities.hash(h, this.f8);
>     return h;
>   }
> 
>   public int compareTo(Record9_2 that) {
>     int c;
>     c = org.apache.calcite.runtime.Utilities.compare(this.f0, that.f0);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f1, that.f1);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f2, that.f2);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f3, that.f3);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f4, that.f4);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f5, that.f5);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f6, that.f6);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f7, that.f7);
>     if (c != 0) {
>       return c;
>     }
>     c = org.apache.calcite.runtime.Utilities.compare(this.f8, that.f8);
>     if (c != 0) {
>       return c;
>     }
>     return 0;
>   }
> 
>   public String toString() {
>     return "{f0=" + this.f0 + ", f1=" + this.f1 + ", f2=" + this.f2 + ", f3=" + this.f3 + ", f4=" + this.f4 + ", f5=" + this.f5 + ", f6=" + this.f6 + ", f7=" + this.f7 + ", f8=" + this.f8 + "}";
>   }
> 
> }
> 
> org.apache.calcite.DataContext root;
> 
> public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
>   root = root0;
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 10,
>                 "F"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child1 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 10,
>                 "M"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable1 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child2 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable1.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 "M"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable2 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child3 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable2.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 30,
>                 "F"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable3 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child4 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable3.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 30,
>                 "F"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable4 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child5 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable4.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 50,
>                 "M"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable5 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child6 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable5.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 50,
>                 "F"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable6 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child7 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable6.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 60,
>                 "F"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable7 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child8 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable7.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 null,
>                 "F"};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable8 = child0.concat(child1).concat(child2).concat(child3).concat(child4).concat(child5).concat(child6).concat(child7).concat(child8);
>   final org.apache.calcite.linq4j.AbstractEnumerable child = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable8.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             final Object[] current = (Object[]) inputEnumerator.current();
>             final Integer inp0_0 = (Integer) current[0];
>             return new Object[] {
>                 current[0],
>                 current[1],
>                 inp0_0 == null ? (Integer) null : Integer.valueOf(inp0_0.intValue() * inp0_0.intValue()),
>                 inp0_0 == null ? (Integer) null : Integer.valueOf(inp0_0.intValue() * inp0_0.intValue()),
>                 inp0_0 == null ? (Integer) null : Integer.valueOf(inp0_0.intValue() * inp0_0.intValue())};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable9 = child.groupBy(new org.apache.calcite.linq4j.function.Function1() {
>     public String apply(Object[] a0) {
>       return a0[1] == null ? (String) null : a0[1].toString();
>     }
>     public Object apply(Object a0) {
>       return apply(
>         (Object[]) a0);
>     }
>   }
>   , new org.apache.calcite.linq4j.function.Function0() {
>     public Object apply() {
>       int a0s0;
>       boolean a0s1;
>       a0s1 = false;
>       a0s0 = 0;
>       int a1s0;
>       boolean a1s1;
>       a1s1 = false;
>       a1s0 = 0;
>       long a2s0;
>       a2s0 = 0L;
>       int a3s0;
>       boolean a3s1;
>       a3s1 = false;
>       a3s0 = 0;
>       int a4s0;
>       boolean a4s1;
>       a4s1 = false;
>       a4s0 = 0;
>       Record9_2 record0;
>       record0 = new Record9_2();
>       record0.f0 = a0s0;
>       record0.f1 = a0s1;
>       record0.f2 = a1s0;
>       record0.f3 = a1s1;
>       record0.f4 = a2s0;
>       record0.f5 = a3s0;
>       record0.f6 = a3s1;
>       record0.f7 = a4s0;
>       record0.f8 = a4s1;
>       return record0;
>     }
>   }
>   , new org.apache.calcite.linq4j.function.Function2() {
>     public Record9_2 apply(Record9_2 acc, Object[] in) {
>       final Integer inp2_ = (Integer) in[2];
>       if (inp2_ != null) {
>         acc.f1 = true;
>         acc.f0 = acc.f0 + inp2_.intValue();
>       }
>       final Integer inp0_ = (Integer) in[0];
>       if (inp0_ != null) {
>         acc.f3 = true;
>         acc.f2 = acc.f2 + inp0_.intValue();
>       }
>       if (inp0_ != null) {
>         acc.f4++;
>       }
>       final Integer inp3_ = (Integer) in[3];
>       if (inp3_ != null) {
>         acc.f6 = true;
>         acc.f5 = acc.f5 + inp3_.intValue();
>       }
>       final Integer inp4_ = (Integer) in[4];
>       if (inp4_ != null) {
>         acc.f8 = true;
>         acc.f7 = acc.f7 + inp4_.intValue();
>       }
>       return acc;
>     }
>     public Record9_2 apply(Object acc, Object in) {
>       return apply(
>         (Record9_2) acc,
>         (Object[]) in);
>     }
>   }
>   , new org.apache.calcite.linq4j.function.Function2() {
>     public Object[] apply(String key, Record9_2 acc) {
>       return new Object[] {
>           key,
>           acc.f1 ? Integer.valueOf(acc.f0) : (Integer) null,
>           acc.f3 ? Integer.valueOf(acc.f2) : (Integer) null,
>           acc.f4,
>           acc.f6 ? Integer.valueOf(acc.f5) : (Integer) null,
>           acc.f8 ? Integer.valueOf(acc.f7) : (Integer) null};
>     }
>     public Object[] apply(Object key, Object acc) {
>       return apply(
>         (String) key,
>         (Record9_2) acc);
>     }
>   }
>   );
>   return new org.apache.calcite.linq4j.AbstractEnumerable(){
>       public org.apache.calcite.linq4j.Enumerator enumerator() {
>         return new org.apache.calcite.linq4j.Enumerator(){
>             public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable9.enumerator();
>             public void reset() {
>               inputEnumerator.reset();
>             }
> 
>             public boolean moveNext() {
>               return inputEnumerator.moveNext();
>             }
> 
>             public void close() {
>               inputEnumerator.close();
>             }
> 
>             public Object current() {
>               final Object[] current = (Object[]) inputEnumerator.current();
>               final Integer inp1_ = (Integer) current[1];
>               final Integer inp2_ = (Integer) current[2];
>               final long inp3_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[3]);
>               final java.math.BigDecimal v5 = $L4J$C$new_java_math_BigDecimal_0_5_;
>               final Integer inp4_ = (Integer) current[4];
>               final Object v11 = inp3_ == 1L;
>               final long v16 = inp3_ - 1L;
>               final Integer inp5_ = (Integer) current[5];
>               return new Object[] {
>                   current[0],
>                   inp1_ == null || inp2_ == null ? (Integer) null : Integer.valueOf((int) org.apache.calcite.runtime.SqlFunctions.power(((long) inp1_ (stack truncated)

[ERROR]   CoreQuidemTest>QuidemTest.test:197->QuidemTest.checkRun:164 Files differ: /root/workspace/apache/calcite/424535393/core/target/test-classes/sql/surefire/sql/winagg.iq /root/workspace/apache/calcite/424535393/core/target/test-classes/sql/winagg.iq
577,586c577,582
< +-----+--------+--------+----------+------------+------------------------+
< | AGE | DEPTNO | GENDER | var_samp | covar_samp | covar_samp partitioned |
< +-----+--------+--------+----------+------------+------------------------+
< |   5 |     20 | F      |     1508 |         58 |                      0 |
< |  25 |     10 |        |     1508 |         58 |                     50 |
< |  80 |     20 | M      |     1508 |         58 |                     50 |
< |     |     40 | M      |     1508 |         58 |                      0 |
< |     |     40 | F      |     1508 |         58 |                      0 |
< +-----+--------+--------+----------+------------+------------------------+
< (5 rows)
---
> java.sql.SQLException: Error while executing SQL "select emps."AGE", emps."DEPTNO", emps."GENDER",
>  covar_samp(emps."AGE", emps."AGE") over() as "var_samp",
>  covar_samp(emps."DEPTNO", emps."AGE") over() as "covar_samp",
>  covar_samp(emps."EMPNO", emps."DEPTNO") over(partition by emps."MANAGER") as "covar_samp partitioned"
> from emps order by emps."AGE"": Error while compiling generated Java code:
> org.apache.calcite.DataContext root;
587a584,1083
> public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
>   root = root0;
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 100,
>                 10,
>                 null,
>                 25,
>                 false};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child1 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 110,
>                 20,
>                 "M",
>                 80,
>                 false};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable1 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child2 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable1.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 110,
>                 40,
>                 "M",
>                 null,
>                 true};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable2 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child3 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable2.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 120,
>                 20,
>                 "F",
>                 5,
>                 true};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable3 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child4 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable3.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 130,
>                 40,
>                 "F",
>                 null,
>                 true};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable4 = child0.concat(child1).concat(child2).concat(child3).concat(child4);
>   final org.apache.calcite.linq4j.AbstractEnumerable source = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable4.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             final Object[] current = (Object[]) inputEnumerator.current();
>             final Integer inp3_0 = (Integer) current[3];
>             final int inp1_0 = org.apache.calcite.runtime.SqlFunctions.toInt(current[1]);
>             return new Object[] {
>                 current[0],
>                 current[1],
>                 current[2],
>                 current[3],
>                 current[4],
>                 inp3_0 == null ? (Integer) null : Integer.valueOf(inp3_0.intValue() * inp3_0.intValue()),
>                 inp3_0,
>                 inp3_0 == null ? (Integer) null : Integer.valueOf(inp1_0 * inp3_0.intValue()),
>                 org.apache.calcite.runtime.SqlFunctions.toInt(current[0]) * inp1_0};
>           }
> 
>         };
>     }
> 
>   };
>   int prevStart;
>   int prevEnd;
>   final java.util.Comparator comparator = new java.util.Comparator(){
>     public int compare(Object[] v0, Object[] v1) {
>       int c;
>       return 0;
>     }
> 
>     public int compare(Object o0, Object o1) {
>       return this.compare((Object[]) o0, (Object[]) o1);
>     }
> 
>   };
>   final java.util.List tempList = (java.util.List) source.into(new java.util.ArrayList());
>   final java.util.Iterator iterator = org.apache.calcite.runtime.SortedMultiMap.singletonArrayIterator(comparator, tempList);
>   final java.util.ArrayList _list = new java.util.ArrayList(
>     tempList.size());
>   long a0s0w0;
>   Long a0w0 = (Long) null;
>   a0s0w0 = 0L;
>   int a1s0w0;
>   Integer a1w0 = (Integer) null;
>   a1s0w0 = 0;
>   long a2s0w0;
>   Long a2w0 = (Long) null;
>   a2s0w0 = 0L;
>   int a3s0w0;
>   Integer a3w0 = (Integer) null;
>   a3s0w0 = 0;
>   long a4s0w0;
>   Long a4w0 = (Long) null;
>   a4s0w0 = 0L;
>   long a5s0w0;
>   Long a5w0 = (Long) null;
>   a5s0w0 = 0L;
>   int a6s0w0;
>   Integer a6w0 = (Integer) null;
>   a6s0w0 = 0;
>   int a7s0w0;
>   Integer a7w0 = (Integer) null;
>   a7s0w0 = 0;
>   long a8s0w0;
>   Long a8w0 = (Long) null;
>   a8s0w0 = 0L;
>   int a9s0w0;
>   Integer a9w0 = (Integer) null;
>   a9s0w0 = 0;
>   long a10s0w0;
>   Long a10w0 = (Long) null;
>   a10s0w0 = 0L;
>   while (iterator.hasNext()) {
>     final Object[] _rows = (Object[]) iterator.next();
>     prevStart = -1;
>     prevEnd = 2147483647;
>     final int maxX = _rows.length - 1;
>     for (int i = 0; i < _rows.length; ++i) {
>       final Object[] row = (Object[]) _rows[i];
>       if (maxX != prevEnd) {
>         int actualStart;
>         if (maxX < prevEnd) {
>           actualStart = 0;
>           a0s0w0 = 0L;
>           a1s0w0 = 0;
>           a2s0w0 = 0L;
>           a3s0w0 = 0;
>           a4s0w0 = 0L;
>           a5s0w0 = 0L;
>           a6s0w0 = 0;
>           a7s0w0 = 0;
>           a8s0w0 = 0L;
>           a9s0w0 = 0;
>           a10s0w0 = 0L;
>         } else {
>           actualStart = prevEnd + 1;
>         }
>         prevEnd = maxX;
>         for (int j = actualStart; j <= maxX; ++j) {
>           final Object[] jRow = (Object[]) _rows[j];
>           final Integer inp5_ = (Integer) jRow[5];
>           if (inp5_ != null) {
>             a0s0w0++;
>           }
>           if (inp5_ != null) {
>             a1s0w0 = a1s0w0 + inp5_.intValue();
>           }
>           final Integer inp3_ = (Integer) jRow[3];
>           if (inp3_ != null) {
>             a2s0w0++;
>           }
>           if (inp3_ != null) {
>             a3s0w0 = a3s0w0 + inp3_.intValue();
>           }
>           if (inp3_ != null) {
>             a4s0w0++;
>           }
>           final Integer inp7_ = (Integer) jRow[7];
>           if (inp7_ != null) {
>             a5s0w0++;
>           }
>           if (inp7_ != null) {
>             a6s0w0 = a6s0w0 + inp7_.intValue();
>           }
>           final Integer inp6_ = (Integer) jRow[6];
>           if (inp6_ != null) {
>             a7s0w0 = a7s0w0 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[1]);
>           }
>           if (inp6_ != null) {
>             a8s0w0++;
>           }
>           if (inp6_ != null) {
>             a9s0w0 = a9s0w0 + inp6_.intValue();
>           }
>           if (inp6_ != null) {
>             a10s0w0++;
>           }
>         }
>         a0w0 = Long.valueOf(a0s0w0);
>         a1w0 = Integer.valueOf(a1s0w0);
>         a2w0 = Long.valueOf(a2s0w0);
>         a3w0 = Integer.valueOf(a3s0w0);
>         a4w0 = Long.valueOf(a4s0w0);
>         a5w0 = Long.valueOf(a5s0w0);
>         a6w0 = Integer.valueOf(a6s0w0);
>         a7w0 = Integer.valueOf(a7s0w0);
>         a8w0 = Long.valueOf(a8s0w0);
>         a9w0 = Integer.valueOf(a9s0w0);
>         a10w0 = Long.valueOf(a10s0w0);
>       }
>       _list.add(new Object[] {
>         row[0],
>         row[1],
>         row[2],
>         row[3],
>         row[4],
>         row[5],
>         row[6],
>         row[7],
>         row[8],
>         a0w0,
>         a1w0,
>         a2w0,
>         a3w0,
>         a4w0,
>         a5w0,
>         a6w0,
>         a7w0,
>         a8w0,
>         a9w0,
>         a10w0});
>     }
>   }
>   tempList.clear();
>   final java.util.Comparator comparator0 = new java.util.Comparator(){
>     public int compare(Object[] v0, Object[] v1) {
>       int c;
>       return 0;
>     }
> 
>     public int compare(Object o0, Object o1) {
>       return this.compare((Object[]) o0, (Object[]) o1);
>     }
> 
>   };
>   final org.apache.calcite.runtime.SortedMultiMap multiMap = new org.apache.calcite.runtime.SortedMultiMap();
>   org.apache.calcite.linq4j.Linq4j.asEnumerable(_list).foreach(new org.apache.calcite.linq4j.function.Function1() {
>     public Object apply(Object[] v) {
>       boolean key = org.apache.calcite.runtime.SqlFunctions.toBoolean(v[4]);
>       multiMap.putMulti(key, v);
>       return null;
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   );
>   final java.util.Iterator iterator0 = multiMap.arrays(comparator0);
>   final java.util.ArrayList _list0 = new java.util.ArrayList(
>     multiMap.size());
>   int a0s0w1;
>   Integer a0w1 = (Integer) null;
>   a0s0w1 = 0;
>   int a1s0w1;
>   Integer a1w1 = (Integer) null;
>   a1s0w1 = 0;
>   int a2s0w1;
>   Integer a2w1 = (Integer) null;
>   a2s0w1 = 0;
>   Long a3w1 = (Long) null;
>   while (iterator0.hasNext()) {
>     final Object[] _rows = (Object[]) iterator0.next();
>     prevStart = -1;
>     prevEnd = 2147483647;
>     final int maxX = _rows.length - 1;
>     for (int i = 0; i < _rows.length; ++i) {
>       final Object[] row = (Object[]) _rows[i];
>       if (maxX != prevEnd) {
>         int actualStart;
>         if (maxX < prevEnd) {
>           actualStart = 0;
>           a0s0w1 = 0;
>           a1s0w1 = 0;
>           a2s0w1 = 0;
>         } else {
>           actualStart = prevEnd + 1;
>         }
>         prevEnd = maxX;
>         for (int j = actualStart; j <= maxX; ++j) {
>           final Object[] jRow = (Object[]) _rows[j];
>           a0s0w1 = a0s0w1 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[8]);
>           a1s0w1 = a1s0w1 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[0]);
>           a2s0w1 = a2s0w1 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[1]);
>         }
>         a0w1 = Integer.valueOf(a0s0w1);
>         a1w1 = Integer.valueOf(a1s0w1);
>         a2w1 = Integer.valueOf(a2s0w1);
>         a3w1 = Long.valueOf(maxX + 1);
>       }
>       _list0.add(new Object[] {
>         row[0],
>         row[1],
>         row[2],
>         row[3],
>         row[4],
>         row[5],
>         row[6],
>         row[7],
>         row[8],
>         row[9],
>         row[10],
>         row[11],
>         row[12],
>         row[13],
>         row[14],
>         row[15],
>         row[16],
>         row[17],
>         row[18],
>         row[19],
>         a0w1,
>         a1w1,
>         a2w1,
>         a3w1});
>     }
>   }
>   multiMap.clear();
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable5 = org.apache.calcite.linq4j.Linq4j.asEnumerable(_list0).orderBy(new org.apache.calcite.linq4j.function.Function1() {
>     public Integer apply(Object[] v) {
>       return (Integer) v[3];
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   , org.apache.calcite.linq4j.function.Functions.nullsComparator(false, false));
>   return new org.apache.calcite.linq4j.AbstractEnumerable(){
>       public org.apache.calcite.linq4j.Enumerator enumerator() {
>         return new org.apache.calcite.linq4j.Enumerator(){
>             public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable5.enumerator();
>             public void reset() {
>               inputEnumerator.reset();
>             }
> 
>             public boolean moveNext() {
>               return inputEnumerator.moveNext();
>             }
> 
>             public void close() {
>               inputEnumerator.close();
>             }
> 
>             public Object current() {
>               final Object[] current = (Object[]) inputEnumerator.current();
>               final int inp12_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[12]);
>               final long inp13_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[13]);
>               final long inp19_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[19]);
>               final long inp23_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[23]);
>               return new Object[] {
>                   current[3],
>                   current[1],
>                   current[2],
>                   org.apache.calcite.runtime.SqlFunctions.toLong(current[9]) <= 0L || (Object) (org.apache.calcite.runtime.SqlFunctions.toLong(current[11]) <= 0L) || (int) inp13_ == 1 ? (Integer) null : Integer.valueOf((org.apache.calcite.runtime.SqlFunctions.toInt(current[10]) - inp12_ * inp12_ / (int) inp13_) / ((int) inp13_ - 1)),
> (                  org.apache.calcite.runtime.SqlFunctions.toInt(current[15]) - org.apache.calcite.runtime.SqlFunctions.toInt(current[16]) * org.apache.calcite.runtime.SqlFunctions.toInt(current[18]) / (int) inp19_) / ((int) inp19_ - 1),
> (                  org.apache.calcite.runtime.SqlFunctions.toInt(current[20]) - org.apache.calcite.runtime.SqlFunctions.toInt(current[21]) * org.apache.calcite.runtime.SqlFunctions.toInt(current[22]) / (int) inp23_) / ((int) inp23_ - 1)};
>             }
> 
>           };
>       }
> 
>     };
> }
> 
> 
> public Class getElementType() {
>   return java.lang.Object[].class;
> }
> 
> 
> 
> 	at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
> 	at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
> 	at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:163)
> 	at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:227)
> 	at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:322)
> 	at net. (stack truncated)
599,608c1095,1101
< +-----+--------+--------+---------+----------------+----------+--------------------+
< | AGE | DEPTNO | GENDER | var_pop | var_pop by age | var_samp | var_samp by gender |
< +-----+--------+--------+---------+----------------+----------+--------------------+
< |   5 |     20 | F      |    1005 |              0 |     1508 |                    |
< |  25 |     10 |        |    1005 |              0 |     1508 |                    |
< |  80 |     20 | M      |    1005 |              0 |     1508 |                    |
< |     |     40 | F      |    1005 |                |     1508 |                    |
< |     |     40 | M      |    1005 |                |     1508 |                    |
< +-----+--------+--------+---------+----------------+----------+--------------------+
< (5 rows)
---
> java.sql.SQLException: Error while executing SQL "select emps."AGE", emps."DEPTNO", emps."GENDER",
>  var_pop(emps."AGE") over() as "var_pop",
>  var_pop(emps."AGE") over(partition by emps."AGE") as "var_pop by age",
>  var_samp(emps."AGE") over() as "var_samp",
>  var_samp(emps."AGE") over(partition by emps."GENDER") as "var_samp by gender"
> from emps order by emps."AGE"": Error while compiling generated Java code:
> org.apache.calcite.DataContext root;
609a1103,1601
> public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
>   root = root0;
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 10,
>                 null,
>                 25};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child1 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 "M",
>                 80};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable1 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child2 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable1.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 40,
>                 "M",
>                 null};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable2 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child3 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable2.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 "F",
>                 5};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable3 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child4 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable3.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 40,
>                 "F",
>                 null};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable4 = child0.concat(child1).concat(child2).concat(child3).concat(child4);
>   final org.apache.calcite.linq4j.AbstractEnumerable source = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable4.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             final Object[] current = (Object[]) inputEnumerator.current();
>             final Integer inp2_0 = (Integer) current[2];
>             return new Object[] {
>                 current[0],
>                 current[1],
>                 current[2],
>                 inp2_0 == null ? (Integer) null : Integer.valueOf(inp2_0.intValue() * inp2_0.intValue())};
>           }
> 
>         };
>     }
> 
>   };
>   int prevStart;
>   int prevEnd;
>   final java.util.Comparator comparator = new java.util.Comparator(){
>     public int compare(Object[] v0, Object[] v1) {
>       int c;
>       return 0;
>     }
> 
>     public int compare(Object o0, Object o1) {
>       return this.compare((Object[]) o0, (Object[]) o1);
>     }
> 
>   };
>   final java.util.List tempList = (java.util.List) source.into(new java.util.ArrayList());
>   final java.util.Iterator iterator = org.apache.calcite.runtime.SortedMultiMap.singletonArrayIterator(comparator, tempList);
>   final java.util.ArrayList _list = new java.util.ArrayList(
>     tempList.size());
>   long a0s0w0;
>   Long a0w0 = (Long) null;
>   a0s0w0 = 0L;
>   int a1s0w0;
>   Integer a1w0 = (Integer) null;
>   a1s0w0 = 0;
>   long a2s0w0;
>   Long a2w0 = (Long) null;
>   a2s0w0 = 0L;
>   int a3s0w0;
>   Integer a3w0 = (Integer) null;
>   a3s0w0 = 0;
>   while (iterator.hasNext()) {
>     final Object[] _rows = (Object[]) iterator.next();
>     prevStart = -1;
>     prevEnd = 2147483647;
>     final int maxX = _rows.length - 1;
>     for (int i = 0; i < _rows.length; ++i) {
>       final Object[] row = (Object[]) _rows[i];
>       if (maxX != prevEnd) {
>         int actualStart;
>         if (maxX < prevEnd) {
>           actualStart = 0;
>           a0s0w0 = 0L;
>           a1s0w0 = 0;
>           a2s0w0 = 0L;
>           a3s0w0 = 0;
>         } else {
>           actualStart = prevEnd + 1;
>         }
>         prevEnd = maxX;
>         for (int j = actualStart; j <= maxX; ++j) {
>           final Object[] jRow = (Object[]) _rows[j];
>           final Integer inp3_ = (Integer) jRow[3];
>           if (inp3_ != null) {
>             a0s0w0++;
>           }
>           if (inp3_ != null) {
>             a1s0w0 = a1s0w0 + inp3_.intValue();
>           }
>           final Integer inp2_ = (Integer) jRow[2];
>           if (inp2_ != null) {
>             a2s0w0++;
>           }
>           if (inp2_ != null) {
>             a3s0w0 = a3s0w0 + inp2_.intValue();
>           }
>         }
>         a0w0 = Long.valueOf(a0s0w0);
>         a1w0 = Integer.valueOf(a1s0w0);
>         a2w0 = Long.valueOf(a2s0w0);
>         a3w0 = Integer.valueOf(a3s0w0);
>       }
>       _list.add(new Object[] {
>         row[0],
>         row[1],
>         row[2],
>         row[3],
>         a0w0,
>         a1w0,
>         a2w0,
>         a3w0});
>     }
>   }
>   tempList.clear();
>   final java.util.Comparator comparator0 = new java.util.Comparator(){
>     public int compare(Object[] v0, Object[] v1) {
>       int c;
>       return 0;
>     }
> 
>     public int compare(Object o0, Object o1) {
>       return this.compare((Object[]) o0, (Object[]) o1);
>     }
> 
>   };
>   final org.apache.calcite.runtime.SortedMultiMap multiMap = new org.apache.calcite.runtime.SortedMultiMap();
>   org.apache.calcite.linq4j.Linq4j.asEnumerable(_list).foreach(new org.apache.calcite.linq4j.function.Function1() {
>     public Object apply(Object[] v) {
>       Integer key = (Integer) v[2];
>       multiMap.putMulti(key, v);
>       return null;
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   );
>   final java.util.Iterator iterator0 = multiMap.arrays(comparator0);
>   final java.util.ArrayList _list0 = new java.util.ArrayList(
>     multiMap.size());
>   long a0s0w1;
>   Long a0w1 = (Long) null;
>   a0s0w1 = 0L;
>   int a1s0w1;
>   Integer a1w1 = (Integer) null;
>   a1s0w1 = 0;
>   long a2s0w1;
>   Long a2w1 = (Long) null;
>   a2s0w1 = 0L;
>   int a3s0w1;
>   Integer a3w1 = (Integer) null;
>   a3s0w1 = 0;
>   while (iterator0.hasNext()) {
>     final Object[] _rows = (Object[]) iterator0.next();
>     prevStart = -1;
>     prevEnd = 2147483647;
>     final int maxX = _rows.length - 1;
>     for (int i = 0; i < _rows.length; ++i) {
>       final Object[] row = (Object[]) _rows[i];
>       if (maxX != prevEnd) {
>         int actualStart;
>         if (maxX < prevEnd) {
>           actualStart = 0;
>           a0s0w1 = 0L;
>           a1s0w1 = 0;
>           a2s0w1 = 0L;
>           a3s0w1 = 0;
>         } else {
>           actualStart = prevEnd + 1;
>         }
>         prevEnd = maxX;
>         for (int j = actualStart; j <= maxX; ++j) {
>           final Object[] jRow = (Object[]) _rows[j];
>           final Integer inp3_ = (Integer) jRow[3];
>           if (inp3_ != null) {
>             a0s0w1++;
>           }
>           if (inp3_ != null) {
>             a1s0w1 = a1s0w1 + inp3_.intValue();
>           }
>           final Integer inp2_ = (Integer) jRow[2];
>           if (inp2_ != null) {
>             a2s0w1++;
>           }
>           if (inp2_ != null) {
>             a3s0w1 = a3s0w1 + inp2_.intValue();
>           }
>         }
>         a0w1 = Long.valueOf(a0s0w1);
>         a1w1 = Integer.valueOf(a1s0w1);
>         a2w1 = Long.valueOf(a2s0w1);
>         a3w1 = Integer.valueOf(a3s0w1);
>       }
>       _list0.add(new Object[] {
>         row[0],
>         row[1],
>         row[2],
>         row[3],
>         row[4],
>         row[5],
>         row[6],
>         row[7],
>         a0w1,
>         a1w1,
>         a2w1,
>         a3w1});
>     }
>   }
>   multiMap.clear();
>   final java.util.Comparator comparator1 = new java.util.Comparator(){
>     public int compare(Object[] v0, Object[] v1) {
>       int c;
>       return 0;
>     }
> 
>     public int compare(Object o0, Object o1) {
>       return this.compare((Object[]) o0, (Object[]) o1);
>     }
> 
>   };
>   org.apache.calcite.linq4j.Linq4j.asEnumerable(_list0).foreach(new org.apache.calcite.linq4j.function.Function1() {
>     public Object apply(Object[] v) {
>       String key = v[1] == null ? (String) null : v[1].toString();
>       multiMap.putMulti(key, v);
>       return null;
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   );
>   final java.util.Iterator iterator1 = multiMap.arrays(comparator1);
>   final java.util.ArrayList _list1 = new java.util.ArrayList(
>     multiMap.size());
>   long a0s0w2;
>   Long a0w2 = (Long) null;
>   a0s0w2 = 0L;
>   int a1s0w2;
>   Integer a1w2 = (Integer) null;
>   a1s0w2 = 0;
>   long a2s0w2;
>   Long a2w2 = (Long) null;
>   a2s0w2 = 0L;
>   int a3s0w2;
>   Integer a3w2 = (Integer) null;
>   a3s0w2 = 0;
>   while (iterator1.hasNext()) {
>     final Object[] _rows = (Object[]) iterator1.next();
>     prevStart = -1;
>     prevEnd = 2147483647;
>     final int maxX = _rows.length - 1;
>     for (int i = 0; i < _rows.length; ++i) {
>       final Object[] row = (Object[]) _rows[i];
>       if (maxX != prevEnd) {
>         int actualStart;
>         if (maxX < prevEnd) {
>           actualStart = 0;
>           a0s0w2 = 0L;
>           a1s0w2 = 0;
>           a2s0w2 = 0L;
>           a3s0w2 = 0;
>         } else {
>           actualStart = prevEnd + 1;
>         }
>         prevEnd = maxX;
>         for (int j = actualStart; j <= maxX; ++j) {
>           final Object[] jRow = (Object[]) _rows[j];
>           final Integer inp3_ = (Integer) jRow[3];
>           if (inp3_ != null) {
>             a0s0w2++;
>           }
>           if (inp3_ != null) {
>             a1s0w2 = a1s0w2 + inp3_.intValue();
>           }
>           final Integer inp2_ = (Integer) jRow[2];
>           if (inp2_ != null) {
>             a2s0w2++;
>           }
>           if (inp2_ != null) {
>             a3s0w2 = a3s0w2 + inp2_.intValue();
>           }
>         }
>         a0w2 = Long.valueOf(a0s0w2);
>         a1w2 = Integer.valueOf(a1s0w2);
>         a2w2 = Long.valueOf(a2s0w2);
>         a3w2 = Integer.valueOf(a3s0w2);
>       }
>       _list1.add(new Object[] {
>         row[0],
>         row[1],
>         row[2],
>         row[3],
>         row[4],
>         row[5],
>         row[6],
>         row[7],
>         row[8],
>         row[9],
>         row[10],
>         row[11],
>         a0w2,
>         a1w2,
>         a2w2,
>         a3w2});
>     }
>   }
>   multiMap.clear();
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable5 = org.apache.calcite.linq4j.Linq4j.asEnumerable(_list1).orderBy(new org.apache.calcite.linq4j.function.Function1() {
>     public Integer apply(Object[] v) {
>       return (Integer) v[2];
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   , org.apache.calcite.linq4j.function.Functions.nullsComparator(false, false));
>   return new org.apache.calcite.linq4j.AbstractEnumerable(){
>       public org.apache.calcite.linq4j.Enumerator enumerator() {
>         return new org.apache.calcite.linq4j.Enumerator(){
>             public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable5.enumerator();
>             public void reset() {
>               inputEnumerator.reset();
>             }
> 
>             public boolean moveNext() {
>               return inputEnumerator.moveNext();
>             }
> 
>             public void close() {
>               inputEnumerator.close();
>             }
> 
>             public Object current() {
>               final Object[] current = (Object[]) inputEnumerator.current();
>               final int inp7_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[7]);
>               final long inp6_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[6]);
>               final boolean v4 = org.apache.calcite.runtime.SqlFunctions.toLong(current[4]) <= 0L || (Object) (inp6_ <= 0L);
>               final int v7 = org.apache.calcite.runtime.SqlFunctions.toInt(current[5]) - inp7_ * inp7_ / (int) inp6_;
>               final int inp11_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[11]);
>               final long inp10_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[10]);
>               final int inp15_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[15]);
>               final long inp14_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[14]);
>               return new Object[] {
>                   current[2],
>                   current[0],
>                   current[1],
>                   v4 ? (Integer) null : Integer.valueOf(v7 / (int) inp6_),
>                   org.apache.calcite.runtime.SqlFunctions.toLong(current[8]) <= 0L || (Object) (inp10_ <= 0L) ? (Integer) null : Integer.valueOf((org.apache.calcite.runtime.SqlFunctions.toInt(current[9]) - inp11_ * inp11_ / (int) inp10_) / (int) inp10_),
>                   v4 || inp6_ == 1L ? (Integer) null : Integer.valueOf((int) ((long) v7 / (inp6_ - 1L))),
>                   org.apache.calcite.runtime.SqlFunctions.toLong(current[12]) <= 0L || (Object) (inp14_ <= 0L) || inp14_ == 1L ? (Integer) null : Int (stack truncated)
623,632c1615,1619
< +-----+--------+-----------------------+-----------------------+
< | AGE | DEPTNO | regr_sxx(age, deptno) | regr_syy(age, deptno) |
< +-----+--------+-----------------------+-----------------------+
< |   5 |     20 |                    66 |                  3015 |
< |  25 |     10 |                    66 |                  3015 |
< |  80 |     20 |                    66 |                  3015 |
< |     |     40 |                    66 |                  3015 |
< |     |     40 |                    66 |                  3015 |
< +-----+--------+-----------------------+-----------------------+
< (5 rows)
---
> java.sql.SQLException: Error while executing SQL "select emps."AGE", emps."DEPTNO",
>  regr_sxx(emps."AGE", emps."DEPTNO") over() as "regr_sxx(age, deptno)",
>  regr_syy(emps."AGE", emps."DEPTNO") over() as "regr_syy(age, deptno)"
> from emps order by emps."AGE"": Error while compiling generated Java code:
> org.apache.calcite.DataContext root;
633a1621,2070
> public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
>   root = root0;
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 10,
>                 25};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child1 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 80};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable1 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child2 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable1.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 40,
>                 null};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable2 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child3 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable2.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 5};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable3 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child4 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable3.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 40,
>                 null};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable4 = child0.concat(child1).concat(child2).concat(child3).concat(child4);
>   final org.apache.calcite.linq4j.AbstractEnumerable source = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable4.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             final Object[] current = (Object[]) inputEnumerator.current();
>             final int inp0_0 = org.apache.calcite.runtime.SqlFunctions.toInt(current[0]);
>             final Integer inp1_0 = (Integer) current[1];
>             return new Object[] {
>                 current[0],
>                 current[1],
>                 inp0_0,
>                 inp0_0 * inp0_0,
>                 inp1_0 == null ? (Integer) null : Integer.valueOf(inp1_0.intValue() * inp1_0.intValue())};
>           }
> 
>         };
>     }
> 
>   };
>   int prevStart;
>   int prevEnd;
>   final java.util.Comparator comparator = new java.util.Comparator(){
>     public int compare(Object[] v0, Object[] v1) {
>       int c;
>       return 0;
>     }
> 
>     public int compare(Object o0, Object o1) {
>       return this.compare((Object[]) o0, (Object[]) o1);
>     }
> 
>   };
>   final java.util.List tempList = (java.util.List) source.into(new java.util.ArrayList());
>   final java.util.Iterator iterator = org.apache.calcite.runtime.SortedMultiMap.singletonArrayIterator(comparator, tempList);
>   final java.util.ArrayList _list = new java.util.ArrayList(
>     tempList.size());
>   int a0s0w0;
>   Integer a0w0 = (Integer) null;
>   a0s0w0 = 0;
>   int a1s0w0;
>   Integer a1w0 = (Integer) null;
>   a1s0w0 = 0;
>   long a2s0w0;
>   Long a2w0 = (Long) null;
>   a2s0w0 = 0L;
>   long a3s0w0;
>   Long a3w0 = (Long) null;
>   a3s0w0 = 0L;
>   long a4s0w0;
>   Long a4w0 = (Long) null;
>   a4s0w0 = 0L;
>   int a5s0w0;
>   Integer a5w0 = (Integer) null;
>   a5s0w0 = 0;
>   long a6s0w0;
>   Long a6w0 = (Long) null;
>   a6s0w0 = 0L;
>   int a7s0w0;
>   Integer a7w0 = (Integer) null;
>   a7s0w0 = 0;
>   long a8s0w0;
>   Long a8w0 = (Long) null;
>   a8s0w0 = 0L;
>   while (iterator.hasNext()) {
>     final Object[] _rows = (Object[]) iterator.next();
>     prevStart = -1;
>     prevEnd = 2147483647;
>     final int maxX = _rows.length - 1;
>     for (int i = 0; i < _rows.length; ++i) {
>       final Object[] row = (Object[]) _rows[i];
>       if (maxX != prevEnd) {
>         int actualStart;
>         if (maxX < prevEnd) {
>           actualStart = 0;
>           a0s0w0 = 0;
>           a1s0w0 = 0;
>           a2s0w0 = 0L;
>           a3s0w0 = 0L;
>           a4s0w0 = 0L;
>           a5s0w0 = 0;
>           a6s0w0 = 0L;
>           a7s0w0 = 0;
>           a8s0w0 = 0L;
>         } else {
>           actualStart = prevEnd + 1;
>         }
>         prevEnd = maxX;
>         for (int j = actualStart; j <= maxX; ++j) {
>           final Object[] jRow = (Object[]) _rows[j];
>           final Integer inp1_ = (Integer) jRow[1];
>           if (inp1_ != null) {
>             a0s0w0 = a0s0w0 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[3]);
>           }
>           if (inp1_ != null) {
>             a1s0w0 = a1s0w0 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[2]);
>           }
>           if (inp1_ != null) {
>             a2s0w0++;
>           }
>           if (inp1_ != null) {
>             a3s0w0++;
>           }
>           final Integer inp4_ = (Integer) jRow[4];
>           if (inp4_ != null) {
>             a4s0w0++;
>           }
>           if (inp4_ != null) {
>             a5s0w0 = a5s0w0 + inp4_.intValue();
>           }
>           if (inp1_ != null) {
>             a6s0w0++;
>           }
>           if (inp1_ != null) {
>             a7s0w0 = a7s0w0 + inp1_.intValue();
>           }
>           if (inp1_ != null) {
>             a8s0w0++;
>           }
>         }
>         a0w0 = Integer.valueOf(a0s0w0);
>         a1w0 = Integer.valueOf(a1s0w0);
>         a2w0 = Long.valueOf(a2s0w0);
>         a3w0 = Long.valueOf(a3s0w0);
>         a4w0 = Long.valueOf(a4s0w0);
>         a5w0 = Integer.valueOf(a5s0w0);
>         a6w0 = Long.valueOf(a6s0w0);
>         a7w0 = Integer.valueOf(a7s0w0);
>         a8w0 = Long.valueOf(a8s0w0);
>       }
>       _list.add(new Object[] {
>         row[0],
>         row[1],
>         row[2],
>         row[3],
>         row[4],
>         a0w0,
>         a1w0,
>         a2w0,
>         a3w0,
>         a4w0,
>         a5w0,
>         a6w0,
>         a7w0,
>         a8w0});
>     }
>   }
>   tempList.clear();
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable5 = org.apache.calcite.linq4j.Linq4j.asEnumerable(_list).orderBy(new org.apache.calcite.linq4j.function.Function1() {
>     public Integer apply(Object[] v) {
>       return (Integer) v[1];
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   , org.apache.calcite.linq4j.function.Functions.nullsComparator(false, false));
>   return new org.apache.calcite.linq4j.AbstractEnumerable(){
>       public org.apache.calcite.linq4j.Enumerator enumerator() {
>         return new org.apache.calcite.linq4j.Enumerator(){
>             public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable5.enumerator();
>             public void reset() {
>               inputEnumerator.reset();
>             }
> 
>             public boolean moveNext() {
>               return inputEnumerator.moveNext();
>             }
> 
>             public void close() {
>               inputEnumerator.close();
>             }
> 
>             public Object current() {
>               final Object[] current = (Object[]) inputEnumerator.current();
>               final int inp6_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[6]);
>               final long inp7_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[7]);
>               final int inp12_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[12]);
>               final long inp13_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[13]);
>               return new Object[] {
>                   current[1],
>                   current[0],
>                   Integer.valueOf((int) ((long) ((org.apache.calcite.runtime.SqlFunctions.toInt(current[5]) - inp6_ * inp6_ / (int) inp7_) / (int) inp7_) * org.apache.calcite.runtime.SqlFunctions.toLong(current[8]))),
>                   org.apache.calcite.runtime.SqlFunctions.toLong(current[9]) <= 0L || (Object) (org.apache.calcite.runtime.SqlFunctions.toLong(current[11]) <= 0L) ? (Integer) null : Integer.valueOf((int) ((long) ((org.apache.calcite.runtime.SqlFunctions.toInt(current[10]) - inp12_ * inp12_ / (int) inp13_) / (int) inp13_) * inp13_))};
>             }
> 
>           };
>       }
> 
>     };
> }
> 
> 
> public Class getElementType() {
>   return java.lang.Object[].class;
> }
> 
> 
> 
> 	at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
> 	at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
> 	at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:163)
> 	at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:227)
> 	at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:322)
> 	at net.hydromatic.quidem.Quidem.access$2800(Quidem.java:54)
> 	at net.hydromatic.quidem.Quidem$ContextImpl.checkResult(Quidem.java:1747)
> 	at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:1078)
> 	at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1548)
> 	at net.hydromatic.quidem.Quidem.execute(Quidem.java:216)
> 	at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:160)
> 	at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:197)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
> 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
> 	at java.lang.reflect.Method.invoke(Method.java:498)
> 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
> 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
> 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
> 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
> 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
> 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
> 	at org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:410)
> 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
> 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
> 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
> 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
> 	at java.lang.Thread.run(Thread.java:745)
> Caused by: java.lang.RuntimeException: Error while compiling generated Java code:
> org.apache.calcite.DataContext root;
> 
> public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
>   root = root0;
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 10,
>                 25};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child1 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 80};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable1 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child2 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enum (stack truncated)
647,656c2084,2088
< +-----+--------+--------+-----------------------+-----------------------+
< | AGE | DEPTNO | GENDER | regr_sxx(age, deptno) | regr_syy(age, deptno) |
< +-----+--------+--------+-----------------------+-----------------------+
< |   5 |     20 | F      |                     0 |                     0 |
< |     |     40 | F      |                     0 |                     0 |
< |  80 |     20 | M      |                     0 |                     0 |
< |     |     40 | M      |                     0 |                     0 |
< |  25 |     10 |        |                     0 |                     0 |
< +-----+--------+--------+-----------------------+-----------------------+
< (5 rows)
---
> java.sql.SQLException: Error while executing SQL "select emps."AGE", emps."DEPTNO", emps."GENDER",
>  regr_sxx(emps."AGE", emps."DEPTNO") over(partition by emps."GENDER") as "regr_sxx(age, deptno)",
>  regr_syy(emps."AGE", emps."DEPTNO") over(partition by emps."GENDER") as "regr_syy(age, deptno)"
> from emps order by emps."GENDER"": Error while compiling generated Java code:
> org.apache.calcite.DataContext root;
657a2090,2540
> public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
>   root = root0;
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 10,
>                 null,
>                 25};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child1 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 "M",
>                 80};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable1 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child2 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable1.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 40,
>                 "M",
>                 null};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable2 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child3 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable2.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 20,
>                 "F",
>                 5};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable3 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child4 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable3.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 40,
>                 "F",
>                 null};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable4 = child0.concat(child1).concat(child2).concat(child3).concat(child4);
>   final org.apache.calcite.linq4j.AbstractEnumerable source = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable4.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             final Object[] current = (Object[]) inputEnumerator.current();
>             final int inp0_0 = org.apache.calcite.runtime.SqlFunctions.toInt(current[0]);
>             final Integer inp2_0 = (Integer) current[2];
>             return new Object[] {
>                 current[0],
>                 current[1],
>                 current[2],
>                 inp0_0,
>                 inp0_0 * inp0_0,
>                 inp2_0 == null ? (Integer) null : Integer.valueOf(inp2_0.intValue() * inp2_0.intValue())};
>           }
> 
>         };
>     }
> 
>   };
>   int prevStart;
>   int prevEnd;
>   final java.util.Comparator comparator = new java.util.Comparator(){
>     public int compare(Object[] v0, Object[] v1) {
>       int c;
>       return 0;
>     }
> 
>     public int compare(Object o0, Object o1) {
>       return this.compare((Object[]) o0, (Object[]) o1);
>     }
> 
>   };
>   final org.apache.calcite.runtime.SortedMultiMap multiMap = new org.apache.calcite.runtime.SortedMultiMap();
>   source.foreach(new org.apache.calcite.linq4j.function.Function1() {
>     public Object apply(Object[] v) {
>       String key = v[1] == null ? (String) null : v[1].toString();
>       multiMap.putMulti(key, v);
>       return null;
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   );
>   final java.util.Iterator iterator = multiMap.arrays(comparator);
>   final java.util.ArrayList _list = new java.util.ArrayList(
>     multiMap.size());
>   int a0s0w0;
>   Integer a0w0 = (Integer) null;
>   a0s0w0 = 0;
>   int a1s0w0;
>   Integer a1w0 = (Integer) null;
>   a1s0w0 = 0;
>   long a2s0w0;
>   Long a2w0 = (Long) null;
>   a2s0w0 = 0L;
>   long a3s0w0;
>   Long a3w0 = (Long) null;
>   a3s0w0 = 0L;
>   long a4s0w0;
>   Long a4w0 = (Long) null;
>   a4s0w0 = 0L;
>   int a5s0w0;
>   Integer a5w0 = (Integer) null;
>   a5s0w0 = 0;
>   long a6s0w0;
>   Long a6w0 = (Long) null;
>   a6s0w0 = 0L;
>   int a7s0w0;
>   Integer a7w0 = (Integer) null;
>   a7s0w0 = 0;
>   long a8s0w0;
>   Long a8w0 = (Long) null;
>   a8s0w0 = 0L;
>   while (iterator.hasNext()) {
>     final Object[] _rows = (Object[]) iterator.next();
>     prevStart = -1;
>     prevEnd = 2147483647;
>     final int maxX = _rows.length - 1;
>     for (int i = 0; i < _rows.length; ++i) {
>       final Object[] row = (Object[]) _rows[i];
>       if (maxX != prevEnd) {
>         int actualStart;
>         if (maxX < prevEnd) {
>           actualStart = 0;
>           a0s0w0 = 0;
>           a1s0w0 = 0;
>           a2s0w0 = 0L;
>           a3s0w0 = 0L;
>           a4s0w0 = 0L;
>           a5s0w0 = 0;
>           a6s0w0 = 0L;
>           a7s0w0 = 0;
>           a8s0w0 = 0L;
>         } else {
>           actualStart = prevEnd + 1;
>         }
>         prevEnd = maxX;
>         for (int j = actualStart; j <= maxX; ++j) {
>           final Object[] jRow = (Object[]) _rows[j];
>           final Integer inp2_ = (Integer) jRow[2];
>           if (inp2_ != null) {
>             a0s0w0 = a0s0w0 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[4]);
>           }
>           if (inp2_ != null) {
>             a1s0w0 = a1s0w0 + org.apache.calcite.runtime.SqlFunctions.toInt(jRow[3]);
>           }
>           if (inp2_ != null) {
>             a2s0w0++;
>           }
>           if (inp2_ != null) {
>             a3s0w0++;
>           }
>           final Integer inp5_ = (Integer) jRow[5];
>           if (inp5_ != null) {
>             a4s0w0++;
>           }
>           if (inp5_ != null) {
>             a5s0w0 = a5s0w0 + inp5_.intValue();
>           }
>           if (inp2_ != null) {
>             a6s0w0++;
>           }
>           if (inp2_ != null) {
>             a7s0w0 = a7s0w0 + inp2_.intValue();
>           }
>           if (inp2_ != null) {
>             a8s0w0++;
>           }
>         }
>         a0w0 = Integer.valueOf(a0s0w0);
>         a1w0 = Integer.valueOf(a1s0w0);
>         a2w0 = Long.valueOf(a2s0w0);
>         a3w0 = Long.valueOf(a3s0w0);
>         a4w0 = Long.valueOf(a4s0w0);
>         a5w0 = Integer.valueOf(a5s0w0);
>         a6w0 = Long.valueOf(a6s0w0);
>         a7w0 = Integer.valueOf(a7s0w0);
>         a8w0 = Long.valueOf(a8s0w0);
>       }
>       _list.add(new Object[] {
>         row[0],
>         row[1],
>         row[2],
>         row[3],
>         row[4],
>         row[5],
>         a0w0,
>         a1w0,
>         a2w0,
>         a3w0,
>         a4w0,
>         a5w0,
>         a6w0,
>         a7w0,
>         a8w0});
>     }
>   }
>   multiMap.clear();
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable5 = org.apache.calcite.linq4j.Linq4j.asEnumerable(_list).orderBy(new org.apache.calcite.linq4j.function.Function1() {
>     public String apply(Object[] v) {
>       return v[1] == null ? (String) null : v[1].toString();
>     }
>     public Object apply(Object v) {
>       return apply(
>         (Object[]) v);
>     }
>   }
>   , org.apache.calcite.linq4j.function.Functions.nullsComparator(false, false));
>   return new org.apache.calcite.linq4j.AbstractEnumerable(){
>       public org.apache.calcite.linq4j.Enumerator enumerator() {
>         return new org.apache.calcite.linq4j.Enumerator(){
>             public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable5.enumerator();
>             public void reset() {
>               inputEnumerator.reset();
>             }
> 
>             public boolean moveNext() {
>               return inputEnumerator.moveNext();
>             }
> 
>             public void close() {
>               inputEnumerator.close();
>             }
> 
>             public Object current() {
>               final Object[] current = (Object[]) inputEnumerator.current();
>               final int inp7_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[7]);
>               final long inp8_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[8]);
>               final int inp13_ = org.apache.calcite.runtime.SqlFunctions.toInt(current[13]);
>               final long inp14_ = org.apache.calcite.runtime.SqlFunctions.toLong(current[14]);
>               return new Object[] {
>                   current[2],
>                   current[0],
>                   current[1],
>                   Integer.valueOf((int) ((long) ((org.apache.calcite.runtime.SqlFunctions.toInt(current[6]) - inp7_ * inp7_ / (int) inp8_) / (int) inp8_) * org.apache.calcite.runtime.SqlFunctions.toLong(current[9]))),
>                   org.apache.calcite.runtime.SqlFunctions.toLong(current[10]) <= 0L || (Object) (org.apache.calcite.runtime.SqlFunctions.toLong(current[12]) <= 0L) ? (Integer) null : Integer.valueOf((int) ((long) ((org.apache.calcite.runtime.SqlFunctions.toInt(current[11]) - inp13_ * inp13_ / (int) inp14_) / (int) inp14_) * inp14_))};
>             }
> 
>           };
>       }
> 
>     };
> }
> 
> 
> public Class getElementType() {
>   return java.lang.Object[].class;
> }
> 
> 
> 
> 	at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
> 	at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
> 	at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:163)
> 	at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:227)
> 	at net.hydromatic.quidem.Quidem.checkResult(Quidem.java:322)
> 	at net.hydromatic.quidem.Quidem.access$2800(Quidem.java:54)
> 	at net.hydromatic.quidem.Quidem$ContextImpl.checkResult(Quidem.java:1747)
> 	at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:1078)
> 	at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1548)
> 	at net.hydromatic.quidem.Quidem.execute(Quidem.java:216)
> 	at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:160)
> 	at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:197)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
> 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
> 	at java.lang.reflect.Method.invoke(Method.java:498)
> 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
> 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
> 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
> 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
> 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
> 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
> 	at org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:410)
> 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
> 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
> 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
> 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
> 	at java.lang.Thread.run(Thread.java:745)
> Caused by: java.lang.RuntimeException: Error while compiling generated Java code:
> org.apache.calcite.DataContext root;
> 
> public org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {
>   root = root0;
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child0 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>             return inputEnumerator.moveNext();
>           }
> 
>           public void close() {
>             inputEnumerator.close();
>           }
> 
>           public Object current() {
>             return new Object[] {
>                 10,
>                 null,
>                 25};
>           }
> 
>         };
>     }
> 
>   };
>   final org.apache.calcite.linq4j.Enumerable _inputEnumerable0 = org.apache.calcite.linq4j.Linq4j.asEnumerable(new Integer[] {
>     0});
>   final org.apache.calcite.linq4j.AbstractEnumerable child1 = new org.apache.calcite.linq4j.AbstractEnumerable(){
>     public org.apache.calcite.linq4j.Enumerator enumerator() {
>       return new org.apache.calcite.linq4j.Enumerator(){
>           public final org.apache.calcite.linq4j.Enumerator inputEnumerator = _inputEnumerable0.enumerator();
>           public void reset() {
>             inputEnumerator.reset();
>           }
> 
>           public boolean moveNext() {
>  (stack truncated)

[ERROR] Errors: 
[ERROR]   CalciteSqlOperatorTest>SqlOperatorBaseTest.testDecodeFunc:5324 » Runtime java....
[ERROR]   CalciteSqlOperatorTest>SqlOperatorBaseTest.testStddevFunc:7004 » Runtime java....
[ERROR]   CalciteSqlOperatorTest>SqlOperatorBaseTest.testStddevPopFunc:6945 » Runtime ja...
[ERROR]   CalciteSqlOperatorTest>SqlOperatorBaseTest.testStddevSampFunc:6977 » Runtime j...
[INFO] 
[ERROR] Tests run: 4518, Failures: 2, Errors: 4, Skipped: 112
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Calcite ............................................ SUCCESS [  1.232 s]
[INFO] Calcite Linq4j ..................................... SUCCESS [  4.021 s]
[INFO] Calcite Core ....................................... FAILURE [07:25 min]
[INFO] Calcite Babel ...................................... SKIPPED
[INFO] Calcite Cassandra .................................. SKIPPED
[INFO] Calcite Druid ...................................... SKIPPED
[INFO] Calcite Elasticsearch .............................. SKIPPED
[INFO] Calcite Examples ................................... SKIPPED
[INFO] Calcite Example CSV ................................ SKIPPED
[INFO] Calcite Example Function ........................... SKIPPED
[INFO] Calcite File ....................................... SKIPPED
[INFO] Calcite Geode ...................................... SKIPPED
[INFO] Calcite MongoDB .................................... SKIPPED
[INFO] Calcite Pig ........................................ SKIPPED
[INFO] Calcite Piglet ..................................... SKIPPED
[INFO] Calcite Plus ....................................... SKIPPED
[INFO] Calcite Server ..................................... SKIPPED
[INFO] Calcite Spark ...................................... SKIPPED
[INFO] Calcite Splunk ..................................... SKIPPED
[INFO] Calcite Ubenchmark ................................. SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 07:31 min
[INFO] Finished at: 2018-09-05T00:37:11+02:00
[INFO] Final Memory: 63M/1260M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.0:test (default-test) on project calcite-core: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/apache/calcite/424535393/core/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :calcite-core
