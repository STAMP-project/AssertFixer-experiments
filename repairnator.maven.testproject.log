[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building GraphQL Java Tools 5.2.5-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- kotlin-maven-plugin:1.2.60:compile (compile) @ graphql-java-tools ---
[WARNING] /root/workspace/graphql-java/graphql-java-tools/432085275/src/main/kotlin/com/coxautodev/graphql/tools/GenericType.kt: (91, 41) Condition 'genericType.schemaWrapper != null' is always 'true'
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ graphql-java-tools ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/graphql-java/graphql-java-tools/432085275/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ graphql-java-tools ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- build-helper-maven-plugin:1.9.1:add-test-source (add-test-source) @ graphql-java-tools ---
[INFO] Test Source directory: /root/workspace/graphql-java/graphql-java-tools/432085275/src/test/kotlin added.
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ graphql-java-tools ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ graphql-java-tools ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- kotlin-maven-plugin:1.2.60:test-compile (test-compile) @ graphql-java-tools ---
[INFO] 
[INFO] --- gmavenplus-plugin:1.4:testCompile (default) @ graphql-java-tools ---
[INFO] Using Groovy 2.4.1 to perform testCompile.
[INFO] Compiled 169 files.
[INFO] 
[INFO] --- maven-surefire-plugin:2.6:test (default-test) @ graphql-java-tools ---
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.6/surefire-junit4-2.6.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.6/surefire-junit4-2.6.pom (2 KB at 5.4 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.6/surefire-providers-2.6.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.6/surefire-providers-2.6.pom (2 KB at 50.4 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.6/surefire-junit4-2.6.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.6/surefire-junit4-2.6.jar (12 KB at 245.9 KB/sec)
[INFO] Surefire report directory: /root/workspace/graphql-java/graphql-java-tools/432085275/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.coxautodev.graphql.tools.FieldResolverScannerSpec
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.712 sec
Running com.coxautodev.graphql.tools.MultiResolverSpec
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.397 sec <<< FAILURE!
com.coxautodev.graphql.tools.MultiResolverSpec  Time elapsed: 0 sec  <<< ERROR!
com.coxautodev.graphql.tools.FieldResolverError: No method found as defined in schema <unknown>:7 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:

  java.lang.Class.friends(~friendName)
  java.lang.Class.getFriends(~friendName)
	at com.coxautodev.graphql.tools.FieldResolverScanner.missingFieldResolver(FieldResolverScanner.kt:54)
	at com.coxautodev.graphql.tools.FieldResolverScanner.findFieldResolver(FieldResolverScanner.kt:45)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:231)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueueItemForPotentialMatches(SchemaClassScanner.kt:226)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueue(SchemaClassScanner.kt:104)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:82)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.build(SchemaParserBuilder.kt:179)
	at com.coxautodev.graphql.tools.MultiResolverSpec.setupSpec(MultiResolverSpec.groovy:29)

Running com.coxautodev.graphql.tools.EnumListParameterSpec
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.027 sec <<< FAILURE!
com.coxautodev.graphql.tools.EnumListParameterSpec  Time elapsed: 0 sec  <<< ERROR!
com.coxautodev.graphql.tools.FieldResolverError: No method or field found as defined in schema <unknown>:11 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:

  java.lang.Class.code()
  java.lang.Class.getCode()
  java.lang.Class.code
	at com.coxautodev.graphql.tools.FieldResolverScanner.missingFieldResolver(FieldResolverScanner.kt:54)
	at com.coxautodev.graphql.tools.FieldResolverScanner.findFieldResolver(FieldResolverScanner.kt:45)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:231)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueueItemForPotentialMatches(SchemaClassScanner.kt:226)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueue(SchemaClassScanner.kt:104)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:82)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.build(SchemaParserBuilder.kt:179)
	at com.coxautodev.graphql.tools.EnumListParameterSpec.setupSpec(EnumListParameterSpec.groovy:31)

Running com.coxautodev.graphql.tools.TypeClassMatcherSpec
Tests run: 20, Failures: 15, Errors: 0, Skipped: 0, Time elapsed: 0.27 sec <<< FAILURE!
matcher verifies that nested return type matches graphql definition for method type(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.131 sec  <<< FAILURE!
Condition not satisfied:

match.clazz == CustomType
|     |     |
|     |     false
|     class java.lang.Class
ValidMatch(type=ObjectTypeDefinition{name='CustomType', implements=[], directives=[], fieldDefinitions=[]}, clazz=class java.lang.Class, reference=return type of method public com.coxautodev.graphql.tools.TypeClassMatcherSpec$CustomType com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.type())

	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher verifies that nested return type matches graphql definition for method #methodName(TypeClassMatcherSpec.groovy:60)

matcher verifies that nested return type matches graphql definition for method futureType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.003 sec  <<< FAILURE!
Condition not satisfied:

match.clazz == CustomType
|     |     |
|     |     false
|     class java.lang.Class
ValidMatch(type=ObjectTypeDefinition{name='CustomType', implements=[], directives=[], fieldDefinitions=[]}, clazz=class java.lang.Class, reference=return type of method public java.util.concurrent.Future com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.futureType())

	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher verifies that nested return type matches graphql definition for method #methodName(TypeClassMatcherSpec.groovy:60)

matcher verifies that nested return type matches graphql definition for method listType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.003 sec  <<< FAILURE!
Condition not satisfied:

match.clazz == CustomType
|     |     |
|     |     false
|     class java.lang.Class
ValidMatch(type=ObjectTypeDefinition{name='CustomType', implements=[], directives=[], fieldDefinitions=[]}, clazz=class java.lang.Class, reference=return type of method public java.util.List com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.listType())

	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher verifies that nested return type matches graphql definition for method #methodName(TypeClassMatcherSpec.groovy:60)

matcher verifies that nested return type matches graphql definition for method listListType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.003 sec  <<< FAILURE!
Condition not satisfied:

match.clazz == CustomType
|     |     |
|     |     false
|     class java.lang.Class
ValidMatch(type=ObjectTypeDefinition{name='CustomType', implements=[], directives=[], fieldDefinitions=[]}, clazz=class java.lang.Class, reference=return type of method public java.util.List com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.listListType())

	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher verifies that nested return type matches graphql definition for method #methodName(TypeClassMatcherSpec.groovy:60)

matcher verifies that nested return type matches graphql definition for method futureListType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.002 sec  <<< FAILURE!
Condition not satisfied:

match.clazz == CustomType
|     |     |
|     |     false
|     class java.lang.Class
ValidMatch(type=ObjectTypeDefinition{name='CustomType', implements=[], directives=[], fieldDefinitions=[]}, clazz=class java.lang.Class, reference=return type of method public java.util.concurrent.CompletableFuture com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.futureListType())

	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher verifies that nested return type matches graphql definition for method #methodName(TypeClassMatcherSpec.groovy:60)

matcher verifies that nested return type matches graphql definition for method listFutureType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.002 sec  <<< FAILURE!
Condition not satisfied:

match.clazz == CustomType
|     |     |
|     |     false
|     class java.lang.Class
ValidMatch(type=ObjectTypeDefinition{name='CustomType', implements=[], directives=[], fieldDefinitions=[]}, clazz=class java.lang.Class, reference=return type of method public java.util.List com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.listFutureType())

	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher verifies that nested return type matches graphql definition for method #methodName(TypeClassMatcherSpec.groovy:60)

matcher verifies that nested return type matches graphql definition for method listListFutureType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.002 sec  <<< FAILURE!
Condition not satisfied:

match.clazz == CustomType
|     |     |
|     |     false
|     class java.lang.Class
ValidMatch(type=ObjectTypeDefinition{name='CustomType', implements=[], directives=[], fieldDefinitions=[]}, clazz=class java.lang.Class, reference=return type of method public java.util.List com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.listListFutureType())

	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher verifies that nested return type matches graphql definition for method #methodName(TypeClassMatcherSpec.groovy:60)

matcher verifies that nested return type matches graphql definition for method futureListListType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.003 sec  <<< FAILURE!
Condition not satisfied:

match.clazz == CustomType
|     |     |
|     |     false
|     class java.lang.Class
ValidMatch(type=ObjectTypeDefinition{name='CustomType', implements=[], directives=[], fieldDefinitions=[]}, clazz=class java.lang.Class, reference=return type of method public java.util.concurrent.CompletableFuture com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.futureListListType())

	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher verifies that nested return type matches graphql definition for method #methodName(TypeClassMatcherSpec.groovy:60)

matcher verifies that nested return type matches graphql definition for method superType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.002 sec  <<< FAILURE!
Condition not satisfied:

match.clazz == CustomType
|     |     |
|     |     false
|     class java.lang.Class
ValidMatch(type=ObjectTypeDefinition{name='CustomType', implements=[], directives=[], fieldDefinitions=[]}, clazz=class java.lang.Class, reference=return type of method public java.lang.Object com.coxautodev.graphql.tools.TypeClassMatcherSpec$Super.superType())

	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher verifies that nested return type matches graphql definition for method #methodName(TypeClassMatcherSpec.groovy:60)

matcher verifies that nested return type matches graphql definition for method superListFutureType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.002 sec  <<< FAILURE!
Condition not satisfied:

match.clazz == CustomType
|     |     |
|     |     false
|     class java.lang.Class
ValidMatch(type=ObjectTypeDefinition{name='CustomType', implements=[], directives=[], fieldDefinitions=[]}, clazz=class java.lang.Class, reference=return type of method public java.lang.Object com.coxautodev.graphql.tools.TypeClassMatcherSpec$Super.superListFutureType())

	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher verifies that nested return type matches graphql definition for method #methodName(TypeClassMatcherSpec.groovy:60)

matcher verifies that nested return type matches graphql definition for method nullableType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.003 sec  <<< FAILURE!
Condition not satisfied:

match.clazz == CustomType
|     |     |
|     |     false
|     class java.lang.Class
ValidMatch(type=ObjectTypeDefinition{name='CustomType', implements=[], directives=[], fieldDefinitions=[]}, clazz=class java.lang.Class, reference=return type of method public java.util.Optional com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.nullableType())

	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher verifies that nested return type matches graphql definition for method #methodName(TypeClassMatcherSpec.groovy:60)

matcher verifies that nested return type matches graphql definition for method nullableListType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.003 sec  <<< FAILURE!
Condition not satisfied:

match.clazz == CustomType
|     |     |
|     |     false
|     class java.lang.Class
ValidMatch(type=ObjectTypeDefinition{name='CustomType', implements=[], directives=[], fieldDefinitions=[]}, clazz=class java.lang.Class, reference=return type of method public java.util.Optional com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.nullableListType())

	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher verifies that nested return type matches graphql definition for method #methodName(TypeClassMatcherSpec.groovy:60)

matcher verifies that nested return type matches graphql definition for method genericCustomType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.003 sec  <<< FAILURE!
Condition not satisfied:

match.clazz == CustomType
|     |     |
|     |     false
|     class java.lang.Class
ValidMatch(type=ObjectTypeDefinition{name='CustomType', implements=[], directives=[], fieldDefinitions=[]}, clazz=class java.lang.Class, reference=return type of method public com.coxautodev.graphql.tools.TypeClassMatcherSpec$GenericCustomType com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.genericCustomType())

	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher verifies that nested return type matches graphql definition for method #methodName(TypeClassMatcherSpec.groovy:60)

matcher verifies that nested return type matches graphql definition for method genericListType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.004 sec  <<< FAILURE!
Condition not satisfied:

match.clazz == CustomType
|     |     |
|     |     false
|     class java.lang.Class
ValidMatch(type=ObjectTypeDefinition{name='CustomType', implements=[], directives=[], fieldDefinitions=[]}, clazz=class java.lang.Class, reference=return type of method public com.coxautodev.graphql.tools.TypeClassMatcherSpec$GenericCustomListType com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.genericListType())

	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher verifies that nested return type matches graphql definition for method #methodName(TypeClassMatcherSpec.groovy:60)

matcher does not allow unwrapped parameterized types as root types(com.coxautodev.graphql.tools.TypeClassMatcherSpec)  Time elapsed: 0.002 sec  <<< FAILURE!
Expected exception of type 'com.coxautodev.graphql.tools.TypeClassMatcher$RawClassRequiredForGraphQLMappingException', but no exception was thrown
	at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java:79)
	at org.spockframework.lang.SpecInternals.thrownImpl(SpecInternals.java:66)
	at com.coxautodev.graphql.tools.TypeClassMatcherSpec.matcher does not allow unwrapped parameterized types as root types(TypeClassMatcherSpec.groovy:114)

Running com.coxautodev.graphql.tools.EndToEndSpec
11:40:30.470 [main] WARN com.coxautodev.graphql.tools.SchemaClassScanner - Cannot find definition for field 'second: ComplexInputTypeTwo' on input type 'ComplexInputType' -> java.lang.Class. Try adding it manually to the dictionary
11:40:30.477 [main] WARN com.coxautodev.graphql.tools.SchemaClassScanner - Cannot find definition for field 'type: Type' on input type 'NewItemInput' -> java.lang.Class. Try adding it manually to the dictionary
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.083 sec <<< FAILURE!
com.coxautodev.graphql.tools.EndToEndSpec  Time elapsed: 0 sec  <<< ERROR!
com.coxautodev.graphql.tools.FieldResolverError: No method or field found as defined in schema <unknown>:96 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:

  java.lang.Class.id()
  java.lang.Class.getId()
  java.lang.Class.id
	at com.coxautodev.graphql.tools.FieldResolverScanner.missingFieldResolver(FieldResolverScanner.kt:54)
	at com.coxautodev.graphql.tools.FieldResolverScanner.findFieldResolver(FieldResolverScanner.kt:45)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:231)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueueItemForPotentialMatches(SchemaClassScanner.kt:226)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueue(SchemaClassScanner.kt:104)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:82)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.build(SchemaParserBuilder.kt:179)
	at com.coxautodev.graphql.tools.EndToEndSpecKt.createSchema(EndToEndSpec.kt:21)
	at com.coxautodev.graphql.tools.EndToEndSpec.setupSpec(EndToEndSpec.groovy:28)

Running com.coxautodev.graphql.tools.NestedInputTypesSpec
11:40:30.495 [main] WARN com.coxautodev.graphql.tools.SchemaClassScanner - Cannot find definition for field 'requestFilter: RequestFilter' on input type 'MaterialFilter' -> java.lang.Class. Try adding it manually to the dictionary
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec <<< FAILURE!
nested input types are parsed(com.coxautodev.graphql.tools.NestedInputTypesSpec)  Time elapsed: 0.011 sec  <<< FAILURE!
Expected no exception to be thrown, but got 'com.coxautodev.graphql.tools.FieldResolverError'
	at spock.lang.Specification.noExceptionThrown(Specification.java:118)
	at com.coxautodev.graphql.tools.NestedInputTypesSpec.nested input types are parsed(NestedInputTypesSpec.groovy:36)
Caused by: com.coxautodev.graphql.tools.FieldResolverError: No method or field found as defined in schema <unknown>:21 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:

  java.lang.Class.id()
  java.lang.Class.getId()
  java.lang.Class.id
	at com.coxautodev.graphql.tools.FieldResolverScanner.missingFieldResolver(FieldResolverScanner.kt:54)
	at com.coxautodev.graphql.tools.FieldResolverScanner.findFieldResolver(FieldResolverScanner.kt:45)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:231)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueueItemForPotentialMatches(SchemaClassScanner.kt:226)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueue(SchemaClassScanner.kt:104)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:82)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.build(SchemaParserBuilder.kt:179)
	at com.coxautodev.graphql.tools.NestedInputTypesSpec.nested input types are parsed(NestedInputTypesSpec.groovy:32)

Running com.coxautodev.graphql.tools.RelayConnectionSpec
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec <<< FAILURE!
relay connection types are compatible(com.coxautodev.graphql.tools.RelayConnectionSpec)  Time elapsed: 0.01 sec  <<< FAILURE!
Expected no exception to be thrown, but got 'com.coxautodev.graphql.tools.FieldResolverError'
	at spock.lang.Specification.noExceptionThrown(Specification.java:118)
	at com.coxautodev.graphql.tools.RelayConnectionSpec.relay connection types are compatible(RelayConnectionSpec.groovy:39)
Caused by: com.coxautodev.graphql.tools.FieldResolverError: No method or field found as defined in schema <unknown>:6 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:

  sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.edges()
  sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.getEdges()
  sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.edges
	at com.coxautodev.graphql.tools.FieldResolverScanner.missingFieldResolver(FieldResolverScanner.kt:54)
	at com.coxautodev.graphql.tools.FieldResolverScanner.findFieldResolver(FieldResolverScanner.kt:45)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:231)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueueItemForPotentialMatches(SchemaClassScanner.kt:226)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueue(SchemaClassScanner.kt:104)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:82)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.build(SchemaParserBuilder.kt:179)
	at com.coxautodev.graphql.tools.RelayConnectionSpec.relay connection types are compatible(RelayConnectionSpec.groovy:33)

Running com.coxautodev.graphql.tools.SuperclassResolverSpec
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.02 sec <<< FAILURE!
methods from generic resolvers are resolved(com.coxautodev.graphql.tools.SuperclassResolverSpec)  Time elapsed: 0.014 sec  <<< FAILURE!
Expected no exception to be thrown, but got 'com.coxautodev.graphql.tools.FieldResolverError'
	at spock.lang.Specification.noExceptionThrown(Specification.java:118)
	at com.coxautodev.graphql.tools.SuperclassResolverSpec.methods from generic resolvers are resolved(SuperclassResolverSpec.groovy:24)
Caused by: com.coxautodev.graphql.tools.FieldResolverError: No method or field found as defined in schema <unknown>:6 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:

  java.lang.Class.value()
  java.lang.Class.getValue()
  java.lang.Class.value
	at com.coxautodev.graphql.tools.FieldResolverScanner.missingFieldResolver(FieldResolverScanner.kt:54)
	at com.coxautodev.graphql.tools.FieldResolverScanner.findFieldResolver(FieldResolverScanner.kt:45)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:231)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueueItemForPotentialMatches(SchemaClassScanner.kt:226)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueue(SchemaClassScanner.kt:104)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:82)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.build(SchemaParserBuilder.kt:179)
	at com.coxautodev.graphql.tools.SuperclassResolverSpec.methods from generic resolvers are resolved(SuperclassResolverSpec.groovy:19)

Running com.coxautodev.graphql.tools.SchemaParserBuilderSpec
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec
Running com.coxautodev.graphql.tools.SchemaParserSpec
Tests run: 16, Failures: 7, Errors: 0, Skipped: 0, Time elapsed: 0.482 sec <<< FAILURE!
parser should parse correctly when multiple query resolvers are given(com.coxautodev.graphql.tools.SchemaParserSpec)  Time elapsed: 0.011 sec  <<< FAILURE!
Expected no exception to be thrown, but got 'com.coxautodev.graphql.tools.FieldResolverError'
	at spock.lang.Specification.noExceptionThrown(Specification.java:118)
	at com.coxautodev.graphql.tools.SchemaParserSpec.parser should parse correctly when multiple query resolvers are given(SchemaParserSpec.groovy:114)
Caused by: com.coxautodev.graphql.tools.FieldResolverError: No method or field found as defined in schema <unknown>:7 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:

  java.lang.Class.key()
  java.lang.Class.getKey()
  java.lang.Class.key
	at com.coxautodev.graphql.tools.FieldResolverScanner.missingFieldResolver(FieldResolverScanner.kt:54)
	at com.coxautodev.graphql.tools.FieldResolverScanner.findFieldResolver(FieldResolverScanner.kt:45)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:231)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueueItemForPotentialMatches(SchemaClassScanner.kt:226)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueue(SchemaClassScanner.kt:104)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:82)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.build(SchemaParserBuilder.kt:179)
	at com.coxautodev.graphql.tools.SchemaParserSpec.parser should parse correctly when multiple query resolvers are given(SchemaParserSpec.groovy:107)

parser should parse correctly when multiple resolvers for the same data type are given(com.coxautodev.graphql.tools.SchemaParserSpec)  Time elapsed: 0.012 sec  <<< FAILURE!
Expected no exception to be thrown, but got 'com.coxautodev.graphql.tools.FieldResolverError'
	at spock.lang.Specification.noExceptionThrown(Specification.java:118)
	at com.coxautodev.graphql.tools.SchemaParserSpec.parser should parse correctly when multiple resolvers for the same data type are given(SchemaParserSpec.groovy:149)
Caused by: com.coxautodev.graphql.tools.FieldResolverError: No method or field found as defined in schema <unknown>:3 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:

  java.lang.Class.obj()
  java.lang.Class.getObj()
  java.lang.Class.obj
	at com.coxautodev.graphql.tools.FieldResolverScanner.missingFieldResolver(FieldResolverScanner.kt:54)
	at com.coxautodev.graphql.tools.FieldResolverScanner.findFieldResolver(FieldResolverScanner.kt:45)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:231)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueueItemForPotentialMatches(SchemaClassScanner.kt:226)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueue(SchemaClassScanner.kt:104)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:82)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.build(SchemaParserBuilder.kt:179)
	at com.coxautodev.graphql.tools.SchemaParserSpec.parser should parse correctly when multiple resolvers for the same data type are given(SchemaParserSpec.groovy:142)

parser should allow turning off default generic wrappers(com.coxautodev.graphql.tools.SchemaParserSpec)  Time elapsed: 0.005 sec  <<< FAILURE!
Expected exception of type 'com.coxautodev.graphql.tools.TypeClassMatcher$RawClassRequiredForGraphQLMappingException', but got 'com.coxautodev.graphql.tools.SchemaClassScannerError'
	at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java:79)
	at org.spockframework.lang.SpecInternals.thrownImpl(SpecInternals.java:66)
	at com.coxautodev.graphql.tools.SchemaParserSpec.parser should allow turning off default generic wrappers(SchemaParserSpec.groovy:201)
Caused by: com.coxautodev.graphql.tools.SchemaClassScannerError: Two different classes used for type Object:
- class sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl:
|   return type of method public java.util.concurrent.Future com.coxautodev.graphql.tools.SchemaParserSpec$10.one()

- class java.lang.Class:
|   return type of method public com.coxautodev.graphql.tools.SchemaParserSpec$Obj com.coxautodev.graphql.tools.SchemaParserSpec$10.two()
	at com.coxautodev.graphql.tools.SchemaClassScanner.handleFoundType(SchemaClassScanner.kt:270)
	at com.coxautodev.graphql.tools.SchemaClassScanner.handleFoundType(SchemaClassScanner.kt:247)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:235)
	at com.coxautodev.graphql.tools.SchemaClassScanner.handleRootType(SchemaClassScanner.kt:120)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:78)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.build(SchemaParserBuilder.kt:179)
	at com.coxautodev.graphql.tools.SchemaParserSpec.parser should allow turning off default generic wrappers(SchemaParserSpec.groovy:196)

parser should throw descriptive exception when object is used as input type incorrectly(com.coxautodev.graphql.tools.SchemaParserSpec)  Time elapsed: 0.005 sec  <<< FAILURE!
Expected exception of type 'com.coxautodev.graphql.tools.SchemaError', but got 'com.coxautodev.graphql.tools.FieldResolverError'
	at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java:79)
	at org.spockframework.lang.SpecInternals.thrownImpl(SpecInternals.java:66)
	at com.coxautodev.graphql.tools.SchemaParserSpec.parser should throw descriptive exception when object is used as input type incorrectly(SchemaParserSpec.groovy:223)
Caused by: com.coxautodev.graphql.tools.FieldResolverError: No method or field found as defined in schema <unknown>:7 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:

  java.lang.Class.filter()
  java.lang.Class.getFilter()
  java.lang.Class.filter
	at com.coxautodev.graphql.tools.FieldResolverScanner.missingFieldResolver(FieldResolverScanner.kt:54)
	at com.coxautodev.graphql.tools.FieldResolverScanner.findFieldResolver(FieldResolverScanner.kt:45)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:231)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueueItemForPotentialMatches(SchemaClassScanner.kt:226)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueue(SchemaClassScanner.kt:104)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:82)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.build(SchemaParserBuilder.kt:179)
	at com.coxautodev.graphql.tools.SchemaParserSpec.parser should throw descriptive exception when object is used as input type incorrectly(SchemaParserSpec.groovy:216)

parser handles enums with overridden toString method(com.coxautodev.graphql.tools.SchemaParserSpec)  Time elapsed: 0.006 sec  <<< FAILURE!
Expected no exception to be thrown, but got 'com.coxautodev.graphql.tools.SchemaError'
	at spock.lang.Specification.noExceptionThrown(Specification.java:118)
	at com.coxautodev.graphql.tools.SchemaParserSpec.parser handles enums with overridden toString method(SchemaParserSpec.groovy:261)
Caused by: com.coxautodev.graphql.tools.SchemaError: Type 'CustomEnum' is declared as an enum in the GraphQL schema but is not a Java enum!
	at com.coxautodev.graphql.tools.SchemaParser.createEnumObject(SchemaParser.kt:164)
	at com.coxautodev.graphql.tools.SchemaParser.parseSchemaObjects(SchemaParser.kt:92)
	at com.coxautodev.graphql.tools.SchemaParser.makeExecutableSchema(SchemaParser.kt:113)
	at com.coxautodev.graphql.tools.SchemaParserSpec.parser handles enums with overridden toString method(SchemaParserSpec.groovy:255)

support enum types if only used as input type(com.coxautodev.graphql.tools.SchemaParserSpec)  Time elapsed: 0.01 sec  <<< FAILURE!
Expected no exception to be thrown, but got 'com.coxautodev.graphql.tools.SchemaError'
	at spock.lang.Specification.noExceptionThrown(Specification.java:118)
	at com.coxautodev.graphql.tools.SchemaParserSpec.support enum types if only used as input type(SchemaParserSpec.groovy:336)
Caused by: com.coxautodev.graphql.tools.SchemaError: Type 'EnumType' is declared as an enum in the GraphQL schema but is not a Java enum!
	at com.coxautodev.graphql.tools.SchemaParser.createEnumObject(SchemaParser.kt:164)
	at com.coxautodev.graphql.tools.SchemaParser.parseSchemaObjects(SchemaParser.kt:92)
	at com.coxautodev.graphql.tools.SchemaParser.makeExecutableSchema(SchemaParser.kt:113)
	at com.coxautodev.graphql.tools.SchemaParserSpec.support enum types if only used as input type(SchemaParserSpec.groovy:328)

support enum types if only used in input Map(com.coxautodev.graphql.tools.SchemaParserSpec)  Time elapsed: 0.008 sec  <<< FAILURE!
Expected no exception to be thrown, but got 'com.coxautodev.graphql.tools.SchemaError'
	at spock.lang.Specification.noExceptionThrown(Specification.java:118)
	at com.coxautodev.graphql.tools.SchemaParserSpec.support enum types if only used in input Map(SchemaParserSpec.groovy:367)
Caused by: com.coxautodev.graphql.tools.SchemaError: Type 'EnumType' is declared as an enum in the GraphQL schema but is not a Java enum!
	at com.coxautodev.graphql.tools.SchemaParser.createEnumObject(SchemaParser.kt:164)
	at com.coxautodev.graphql.tools.SchemaParser.parseSchemaObjects(SchemaParser.kt:92)
	at com.coxautodev.graphql.tools.SchemaParser.makeExecutableSchema(SchemaParser.kt:113)
	at com.coxautodev.graphql.tools.SchemaParserSpec.support enum types if only used in input Map(SchemaParserSpec.groovy:359)

Running com.coxautodev.graphql.tools.MethodFieldResolverDataFetcherSpec
Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.19 sec
Running com.coxautodev.graphql.tools.GenericResolverSpec
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec <<< FAILURE!
methods from generic resolvers are resolved(com.coxautodev.graphql.tools.GenericResolverSpec)  Time elapsed: 0.007 sec  <<< FAILURE!
Expected no exception to be thrown, but got 'com.coxautodev.graphql.tools.FieldResolverError'
	at spock.lang.Specification.noExceptionThrown(Specification.java:118)
	at com.coxautodev.graphql.tools.GenericResolverSpec.methods from generic resolvers are resolved(GenericResolverSpec.groovy:24)
Caused by: com.coxautodev.graphql.tools.FieldResolverError: No method or field found as defined in schema <unknown>:6 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:

  java.lang.Class.value()
  java.lang.Class.getValue()
  java.lang.Class.value
	at com.coxautodev.graphql.tools.FieldResolverScanner.missingFieldResolver(FieldResolverScanner.kt:54)
	at com.coxautodev.graphql.tools.FieldResolverScanner.findFieldResolver(FieldResolverScanner.kt:45)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:231)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueueItemForPotentialMatches(SchemaClassScanner.kt:226)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueue(SchemaClassScanner.kt:104)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:82)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.build(SchemaParserBuilder.kt:179)
	at com.coxautodev.graphql.tools.GenericResolverSpec.methods from generic resolvers are resolved(GenericResolverSpec.groovy:19)

Running com.coxautodev.graphql.tools.ParameterizedGetterSpec
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.01 sec <<< FAILURE!
com.coxautodev.graphql.tools.ParameterizedGetterSpec  Time elapsed: 0 sec  <<< ERROR!
com.coxautodev.graphql.tools.FieldResolverError: No method or field found as defined in schema <unknown>:6 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:

  java.lang.Class.bestFriends()
  java.lang.Class.getBestFriends()
  java.lang.Class.bestFriends
	at com.coxautodev.graphql.tools.FieldResolverScanner.missingFieldResolver(FieldResolverScanner.kt:54)
	at com.coxautodev.graphql.tools.FieldResolverScanner.findFieldResolver(FieldResolverScanner.kt:45)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:231)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueueItemForPotentialMatches(SchemaClassScanner.kt:226)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueue(SchemaClassScanner.kt:104)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:82)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.build(SchemaParserBuilder.kt:179)
	at com.coxautodev.graphql.tools.ParameterizedGetterSpec.setupSpec(ParameterizedGetterSpec.groovy:29)

Running com.coxautodev.graphql.tools.SchemaClassScannerSpec
11:40:31.286 [main] WARN com.coxautodev.graphql.tools.SchemaClassScanner - Cannot find definition for field 'second: SecondInput' on input type 'FirstInput' -> java.lang.Class. Try adding it manually to the dictionary
11:40:31.286 [main] WARN com.coxautodev.graphql.tools.SchemaClassScanner - Cannot find definition for field 'third: ThirdInput' on input type 'FirstInput' -> java.lang.Class. Try adding it manually to the dictionary
11:40:31.286 [main] WARN com.coxautodev.graphql.tools.SchemaClassScanner - Schema type was defined but can never be accessed, and can be safely deleted: SecondInput
11:40:31.286 [main] WARN com.coxautodev.graphql.tools.SchemaClassScanner - Schema type was defined but can never be accessed, and can be safely deleted: ThirdInput
11:40:31.340 [main] WARN com.coxautodev.graphql.tools.SchemaClassScanner - Cannot find definition for field 'map: customMap' on input type 'HasMapField' -> java.lang.Class. Try adding it manually to the dictionary
Tests run: 13, Failures: 2, Errors: 2, Skipped: 0, Time elapsed: 0.125 sec <<< FAILURE!
scanner handles input types that reference other input types(com.coxautodev.graphql.tools.SchemaClassScannerSpec)  Time elapsed: 0.015 sec  <<< FAILURE!
Condition not satisfied:

objects.definitions.findAll { it instanceof InputObjectTypeDefinition }.size() == 3
|       |           |                                                   |      |
|       |           |                                                   1      false
|       |           [InputObjectTypeDefinition{name='FirstInput', directives=[], inputValueDefinitions=[InputValueDefinition{name='id', type=NonNullType{type=TypeName{name='String'}}, defaultValue=null, directives=[]}, InputValueDefinition{name='second', type=NonNullType{type=TypeName{name='SecondInput'}}, defaultValue=null, directives=[]}, InputValueDefinition{name='third', type=NonNullType{type=TypeName{name='ThirdInput'}}, defaultValue=null, directives=[]}]}]
|       [InputObjectTypeDefinition{name='FirstInput', directives=[], inputValueDefinitions=[InputValueDefinition{name='id', type=NonNullType{type=TypeName{name='String'}}, defaultValue=null, directives=[]}, InputValueDefinition{name='second', type=NonNullType{type=TypeName{name='SecondInput'}}, defaultValue=null, directives=[]}, InputValueDefinition{name='third', type=NonNullType{type=TypeName{name='ThirdInput'}}, defaultValue=null, directives=[]}]}, ObjectTypeDefinition{name='Query', implements=[], directives=[], fieldDefinitions=[FieldDefinition{name='test', type=NonNullType{type=TypeName{name='String'}}, inputValueDefinitions=[InputValueDefinition{name='input', type=TypeName{name='FirstInput'}, defaultValue=null, directives=[]}], directives=[]}]}, ScalarTypeDefinition{name='String', directives=[]}]
ScannedSchemaObjects(dictionary={}, definitions=[InputObjectTypeDefinition{name='FirstInput', directives=[], inputValueDefinitions=[InputValueDefinition{name='id', type=NonNullType{type=TypeName{name='String'}}, defaultValue=null, directives=[]}, InputValueDefinition{name='second', type=NonNullType{type=TypeName{name='SecondInput'}}, defaultValue=null, directives=[]}, InputValueDefinition{name='third', type=NonNullType{type=TypeName{name='ThirdInput'}}, defaultValue=null, directives=[]}]}, ObjectTypeDefinition{name='Query', implements=[], directives=[], fieldDefinitions=[FieldDefinition{name='test', type=NonNullType{type=TypeName{name='String'}}, inputValueDefinitions=[InputValueDefinition{name='input', type=TypeName{name='FirstInput'}, defaultValue=null, directives=[]}], directives=[]}]}, ScalarTypeDefinition{name='String', directives=[]}], customScalars={}, rootInfo=com.coxautodev.graphql.tools.RootTypeInfo@1c25b8a7, fieldResolversByType={ObjectTypeDefinition{name='Query', implements=[], directives=[], fieldDefinitions=[FieldDefinition{name='test', type=NonNullType{type=TypeName{name='String'}}, inputValueDefinitions=[InputValueDefinition{name='input', type=TypeName{name='FirstInput'}, defaultValue=null, directives=[]}], directives=[]}]}={FieldDefinition{name='test', type=NonNullType{type=TypeName{name='String'}}, inputValueDefinitions=[InputValueDefinition{name='input', type=TypeName{name='FirstInput'}, defaultValue=null, directives=[]}], directives=[]}=MethodFieldResolver{method=public java.lang.String com.coxautodev.graphql.tools.SchemaClassScannerSpec$MultipleInputTypeQuery.test(com.coxautodev.graphql.tools.SchemaClassScannerSpec$MultipleInputTypeQuery$FirstInput)}}}, unusedDefinitions=[InputObjectTypeDefinition{name='SecondInput', directives=[], inputValueDefinitions=[InputValueDefinition{name='id', type=NonNullType{type=TypeName{name='String'}}, defaultValue=null, directives=[]}]}, InputObjectTypeDefinition{name='ThirdInput', directives=[], inputValueDefinitions=[InputValueDefinition{name='id', type=NonNullType{type=TypeName{name='String'}}, defaultValue=null, directives=[]}]}])

	at com.coxautodev.graphql.tools.SchemaClassScannerSpec.scanner handles input types that reference other input types(SchemaClassScannerSpec.groovy:137)

scanner handles multiple interfaces that are not used as field types(com.coxautodev.graphql.tools.SchemaClassScannerSpec)  Time elapsed: 0.009 sec  <<< ERROR!
com.coxautodev.graphql.tools.FieldResolverError: No method or field found as defined in schema <unknown>:20 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:

  java.lang.Class.version()
  java.lang.Class.getVersion()
  java.lang.Class.version
	at com.coxautodev.graphql.tools.FieldResolverScanner.missingFieldResolver(FieldResolverScanner.kt:54)
	at com.coxautodev.graphql.tools.FieldResolverScanner.findFieldResolver(FieldResolverScanner.kt:45)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:231)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueueItemForPotentialMatches(SchemaClassScanner.kt:226)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueue(SchemaClassScanner.kt:104)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:82)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaClassScannerSpec.scanner handles multiple interfaces that are not used as field types(SchemaClassScannerSpec.groovy:201)

scanner should handle nested types in input types(com.coxautodev.graphql.tools.SchemaClassScannerSpec)  Time elapsed: 0.01 sec  <<< ERROR!
com.coxautodev.graphql.tools.FieldResolverError: No method or field found as defined in schema <unknown>:19 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:

  java.lang.Class.id()
  java.lang.Class.getId()
  java.lang.Class.id
	at com.coxautodev.graphql.tools.FieldResolverScanner.missingFieldResolver(FieldResolverScanner.kt:54)
	at com.coxautodev.graphql.tools.FieldResolverScanner.findFieldResolver(FieldResolverScanner.kt:45)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:231)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueueItemForPotentialMatches(SchemaClassScanner.kt:226)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueue(SchemaClassScanner.kt:104)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:89)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaClassScannerSpec.scanner should handle nested types in input types(SchemaClassScannerSpec.groovy:387)

scanner throws if @Batched is used on data class(com.coxautodev.graphql.tools.SchemaClassScannerSpec)  Time elapsed: 0.006 sec  <<< FAILURE!
Expected exception of type 'com.coxautodev.graphql.tools.ResolverError', but got 'com.coxautodev.graphql.tools.FieldResolverError'
	at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java:79)
	at org.spockframework.lang.SpecInternals.thrownImpl(SpecInternals.java:66)
	at com.coxautodev.graphql.tools.SchemaClassScannerSpec.scanner throws if @Batched is used on data class(SchemaClassScannerSpec.groovy:453)
Caused by: com.coxautodev.graphql.tools.FieldResolverError: No method or field found as defined in schema <unknown>:7 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:

  java.lang.Class.test()
  java.lang.Class.getTest()
  java.lang.Class.test
	at com.coxautodev.graphql.tools.FieldResolverScanner.missingFieldResolver(FieldResolverScanner.kt:54)
	at com.coxautodev.graphql.tools.FieldResolverScanner.findFieldResolver(FieldResolverScanner.kt:45)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:231)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueueItemForPotentialMatches(SchemaClassScanner.kt:226)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanQueue(SchemaClassScanner.kt:104)
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:82)
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:144)
	at com.coxautodev.graphql.tools.SchemaClassScannerSpec.scanner throws if @Batched is used on data class(SchemaClassScannerSpec.groovy:443)


Results :

Failed tests: 
  matcher verifies that nested return type matches graphql definition for method type(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  matcher verifies that nested return type matches graphql definition for method futureType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  matcher verifies that nested return type matches graphql definition for method listType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  matcher verifies that nested return type matches graphql definition for method listListType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  matcher verifies that nested return type matches graphql definition for method futureListType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  matcher verifies that nested return type matches graphql definition for method listFutureType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  matcher verifies that nested return type matches graphql definition for method listListFutureType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  matcher verifies that nested return type matches graphql definition for method futureListListType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  matcher verifies that nested return type matches graphql definition for method superType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  matcher verifies that nested return type matches graphql definition for method superListFutureType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  matcher verifies that nested return type matches graphql definition for method nullableType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  matcher verifies that nested return type matches graphql definition for method nullableListType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  matcher verifies that nested return type matches graphql definition for method genericCustomType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  matcher verifies that nested return type matches graphql definition for method genericListType(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  matcher does not allow unwrapped parameterized types as root types(com.coxautodev.graphql.tools.TypeClassMatcherSpec)
  nested input types are parsed(com.coxautodev.graphql.tools.NestedInputTypesSpec)
  relay connection types are compatible(com.coxautodev.graphql.tools.RelayConnectionSpec)
  methods from generic resolvers are resolved(com.coxautodev.graphql.tools.SuperclassResolverSpec)
  parser should parse correctly when multiple query resolvers are given(com.coxautodev.graphql.tools.SchemaParserSpec)
  parser should parse correctly when multiple resolvers for the same data type are given(com.coxautodev.graphql.tools.SchemaParserSpec)
  parser should allow turning off default generic wrappers(com.coxautodev.graphql.tools.SchemaParserSpec)
  parser should throw descriptive exception when object is used as input type incorrectly(com.coxautodev.graphql.tools.SchemaParserSpec)
  parser handles enums with overridden toString method(com.coxautodev.graphql.tools.SchemaParserSpec)
  support enum types if only used as input type(com.coxautodev.graphql.tools.SchemaParserSpec)
  support enum types if only used in input Map(com.coxautodev.graphql.tools.SchemaParserSpec)
  methods from generic resolvers are resolved(com.coxautodev.graphql.tools.GenericResolverSpec)
  scanner handles input types that reference other input types(com.coxautodev.graphql.tools.SchemaClassScannerSpec)
  scanner throws if @Batched is used on data class(com.coxautodev.graphql.tools.SchemaClassScannerSpec)

Tests in error: 
  com.coxautodev.graphql.tools.MultiResolverSpec
  com.coxautodev.graphql.tools.EnumListParameterSpec
  com.coxautodev.graphql.tools.EndToEndSpec
  com.coxautodev.graphql.tools.ParameterizedGetterSpec
  scanner handles multiple interfaces that are not used as field types(com.coxautodev.graphql.tools.SchemaClassScannerSpec)
  scanner should handle nested types in input types(com.coxautodev.graphql.tools.SchemaClassScannerSpec)

Tests run: 77, Failures: 28, Errors: 6, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 22.564 s
[INFO] Finished at: 2018-09-23T11:40:31+02:00
[INFO] Final Memory: 77M/657M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.6:test (default-test) on project graphql-java-tools: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/graphql-java/graphql-java-tools/432085275/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
