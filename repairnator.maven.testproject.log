[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for fr.inria.gforge.spoon:spoon-core:jar:7.1.0-SNAPSHOT
[WARNING] 'build.plugins.plugin.version' for org.pitest:pitest-maven is missing. @ line 526, column 15
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] Inspecting build with total of 1 modules...
[INFO] Installing Nexus Staging features:
[INFO]   ... total of 1 executions of maven-deploy-plugin replaced with nexus-staging-maven-plugin
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spoon Core 7.1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ spoon-core ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.1:prepare-agent (default) @ spoon-core ---
[INFO] argLine set to -javaagent:/root/./workspace/INRIA/spoon/419294439/.m2/org/jacoco/org.jacoco.agent/0.8.1/org.jacoco.agent-0.8.1-runtime.jar=destfile=/root/workspace/INRIA/spoon/419294439/target/jacoco.exec
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ spoon-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 177 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ spoon-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.21.0:test (default-test) @ spoon-core ---
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom (4 KB at 8.8 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom (3 KB at 87.6 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar (83 KB at 1502.9 KB/sec)
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running spoon.test.api.FileSystemFolderTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.265 s - in spoon.test.api.FileSystemFolderTest
[INFO] Running spoon.test.api.NoClasspathTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.806 s - in spoon.test.api.NoClasspathTest
[INFO] Running spoon.test.api.MetamodelTest
[ERROR] Tests run: 14, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 17.045 s <<< FAILURE! - in spoon.test.api.MetamodelTest
[ERROR] testRuntimeMetamodel(spoon.test.api.MetamodelTest)  Time elapsed: 0.154 s  <<< ERROR!
java.lang.NullPointerException
	at spoon.test.api.MetamodelTest.testRuntimeMetamodel(MetamodelTest.java:99)

[INFO] Running spoon.test.api.APITest
./target/nooutput_5aaa9372-3861-41b3-9d36-be77dc476d6c
[ERROR] Tests run: 23, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 19.777 s <<< FAILURE! - in spoon.test.api.APITest
[ERROR] testSetterInNodes(spoon.test.api.APITest)  Time elapsed: 5.212 s  <<< ERROR!
java.lang.NullPointerException
	at spoon.test.api.APITest.testSetterInNodes(APITest.java:406)

[INFO] Running spoon.test.exceptions.ExceptionTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.594 s - in spoon.test.exceptions.ExceptionTest
[INFO] Running spoon.test.module.TestModule
[WARNING] Tests run: 8, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.263 s - in spoon.test.module.TestModule
[INFO] Running spoon.test.imports.ImportScannerTest
2018-08-22 20:52:05,428 WARN spoon.Launcher - ImportScannerTest: Import scanner imports 584 unused imports and misses 0 imports
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 34.878 s - in spoon.test.imports.ImportScannerTest
[INFO] Running spoon.test.imports.ImportTest
[INFO] Tests run: 44, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.838 s - in spoon.test.imports.ImportTest
[INFO] Running spoon.test.imports.ImportAndExtendWithPackageNameTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.053 s - in spoon.test.imports.ImportAndExtendWithPackageNameTest
[INFO] Running spoon.test.prettyprinter.LinesTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.628 s - in spoon.test.prettyprinter.LinesTest
[INFO] Running spoon.test.prettyprinter.PrinterTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.349 s - in spoon.test.prettyprinter.PrinterTest
[INFO] Running spoon.test.prettyprinter.DefaultPrettyPrinterTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.14 s - in spoon.test.prettyprinter.DefaultPrettyPrinterTest
[INFO] Running spoon.test.prettyprinter.QualifiedThisRefTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.205 s - in spoon.test.prettyprinter.QualifiedThisRefTest
[INFO] Running spoon.test.visitor.VisitorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.061 s - in spoon.test.visitor.VisitorTest
[INFO] Running spoon.test.visitor.AssignmentsEqualsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.063 s - in spoon.test.visitor.AssignmentsEqualsTest
[INFO] Running spoon.test.loop.LoopTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.091 s - in spoon.test.loop.LoopTest
[INFO] Running spoon.test.intercession.insertBefore.InsertMethodsTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.774 s - in spoon.test.intercession.insertBefore.InsertMethodsTest
[INFO] Running spoon.test.intercession.IntercessionTest
[WARNING] Tests run: 8, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 6.005 s - in spoon.test.intercession.IntercessionTest
[INFO] Running spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest
[INFO] Tests run: 118, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.629 s - in spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest
[INFO] Running spoon.test.intercession.RemoveTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.073 s - in spoon.test.intercession.RemoveTest
[INFO] Running spoon.test.variable.AccessTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.505 s - in spoon.test.variable.AccessTest
[INFO] Running spoon.test.variable.InferredVariableTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.124 s - in spoon.test.variable.InferredVariableTest
[INFO] Running spoon.test.variable.AccessFullyQualifiedFieldTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.978 s - in spoon.test.variable.AccessFullyQualifiedFieldTest
[INFO] Running spoon.test.annotation.AnnotationValuesTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.146 s - in spoon.test.annotation.AnnotationValuesTest
[INFO] Running spoon.test.annotation.AnnotationTest
[INFO] Tests run: 52, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.49 s - in spoon.test.annotation.AnnotationTest
[INFO] Running spoon.test.annotation.AnnotationLoopTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.048 s - in spoon.test.annotation.AnnotationLoopTest
[INFO] Running spoon.test.pkg.PackageTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.132 s - in spoon.test.pkg.PackageTest
[INFO] Running spoon.test.comment.CommentTest
[INFO] Tests run: 20, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 27.407 s - in spoon.test.comment.CommentTest
[INFO] Running spoon.test.targeted.TargetedExpressionTest
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.807 s - in spoon.test.targeted.TargetedExpressionTest
[INFO] Running spoon.test.reference.VariableAccessTest
2018-08-22 20:53:02,057 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable e at (/root/workspace/INRIA/spoon/419294439/src/test/resources/noclasspath/org/elasticsearch/indices/analysis/HunspellService.java:100)
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.826 s - in spoon.test.reference.VariableAccessTest
[INFO] Running spoon.test.reference.ExecutableReferenceTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.683 s - in spoon.test.reference.ExecutableReferenceTest
[INFO] Running spoon.test.reference.AnnotationFieldReferenceTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.047 s - in spoon.test.reference.AnnotationFieldReferenceTest
[INFO] Running spoon.test.reference.ElasticsearchStackoverflowTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.094 s - in spoon.test.reference.ElasticsearchStackoverflowTest
[INFO] Running spoon.test.reference.TypeReferenceTest
[ERROR] Tests run: 28, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.873 s <<< FAILURE! - in spoon.test.reference.TypeReferenceTest
[ERROR] testClearBoundsForTypeParameterReference(spoon.test.reference.TypeReferenceTest)  Time elapsed: 0.001 s  <<< ERROR!
java.lang.NullPointerException
	at spoon.test.reference.TypeReferenceTest.testClearBoundsForTypeParameterReference(TypeReferenceTest.java:508)

[INFO] Running spoon.test.reference.ExecutableReferenceGenericTest
[ERROR] Tests run: 12, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.805 s <<< FAILURE! - in spoon.test.reference.ExecutableReferenceGenericTest
[ERROR] testMultiReferenceBetweenMethodsWithGenericInSameClass(spoon.test.reference.ExecutableReferenceGenericTest)  Time elapsed: 0.071 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<method1(T[ extends java.lang.String])> but was:<method1(T[])>
	at spoon.test.reference.ExecutableReferenceGenericTest.testMultiReferenceBetweenMethodsWithGenericInSameClass(ExecutableReferenceGenericTest.java:122)

[ERROR] testOneReferenceWithGenericMethodOutOfTheClass(spoon.test.reference.ExecutableReferenceGenericTest)  Time elapsed: 0.043 s  <<< FAILURE!
org.junit.ComparisonFailure: expected:<method1(T[ extends java.lang.String])> but was:<method1(T[])>
	at spoon.test.reference.ExecutableReferenceGenericTest.testOneReferenceWithGenericMethodOutOfTheClass(ExecutableReferenceGenericTest.java:175)

[INFO] Running spoon.test.reference.CloneReferenceTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.094 s - in spoon.test.reference.CloneReferenceTest
[INFO] Running spoon.test.generics.GenericsTest
[INFO] Tests run: 45, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.977 s - in spoon.test.generics.GenericsTest
[INFO] Running spoon.test.filters.CUFilterTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.123 s - in spoon.test.filters.CUFilterTest
[INFO] Running spoon.test.filters.FilterTest
2018-08-22 20:53:10,100 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:10,100 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:10,102 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:10,102 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:10,102 INFO spoon.Launcher - start processing...
2018-08-22 20:53:10,183 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:10,183 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:10,386 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:10,386 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:10,387 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:10,387 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:10,387 INFO spoon.Launcher - start processing...
2018-08-22 20:53:10,438 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:10,438 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:10,644 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:10,645 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:10,647 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:10,647 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:10,647 INFO spoon.Launcher - start processing...
2018-08-22 20:53:10,734 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:10,734 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:11,050 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:11,050 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:11,051 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:11,052 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:11,052 INFO spoon.Launcher - start processing...
2018-08-22 20:53:11,104 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:11,104 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:11,249 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:11,249 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:11,251 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:11,251 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:11,252 INFO spoon.Launcher - start processing...
2018-08-22 20:53:11,325 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:11,325 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:12,042 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:12,042 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:12,043 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:12,044 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:12,044 INFO spoon.Launcher - start processing...
2018-08-22 20:53:12,127 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:12,127 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:12,197 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:12,197 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:12,492 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:12,493 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:12,493 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:12,494 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:12,494 INFO spoon.Launcher - start processing...
2018-08-22 20:53:12,549 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:12,549 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:12,768 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:12,768 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:12,769 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:12,769 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:12,770 INFO spoon.Launcher - start processing...
2018-08-22 20:53:12,823 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:12,824 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:12,923 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:12,924 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:12,925 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:12,925 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:12,925 INFO spoon.Launcher - start processing...
2018-08-22 20:53:12,984 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:12,984 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:13,109 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:13,109 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:13,110 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:13,110 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:13,110 INFO spoon.Launcher - start processing...
2018-08-22 20:53:13,161 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:13,161 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:13,286 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:13,286 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:13,287 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:13,287 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:13,287 INFO spoon.Launcher - start processing...
2018-08-22 20:53:13,336 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:13,336 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:13,377 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:13,377 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:13,378 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:13,378 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:13,378 INFO spoon.Launcher - start processing...
2018-08-22 20:53:13,428 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:13,428 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:13,975 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:13,975 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:13,976 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:13,977 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:13,977 INFO spoon.Launcher - start processing...
2018-08-22 20:53:14,044 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:14,044 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:14,086 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:14,087 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:14,087 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:14,087 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:14,087 INFO spoon.Launcher - start processing...
2018-08-22 20:53:14,139 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:14,139 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:14,488 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:53:14,488 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:53:14,489 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:53:14,490 INFO spoon.Launcher - running Spoon...
2018-08-22 20:53:14,490 INFO spoon.Launcher - start processing...
2018-08-22 20:53:14,571 INFO spoon.Launcher - end of processing: 
2018-08-22 20:53:14,572 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:53:14,577 INFO spoon.Launcher - Step filter CtClass only) spoon.reflect.CtModelImpl$CtRootPackage cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtRootPackage: unnamed package
2018-08-22 20:53:14,577 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon
2018-08-22 20:53:14,577 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test
2018-08-22 20:53:14,578 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters
2018-08-22 20:53:14,578 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,579 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-22 20:53:14,579 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,579 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: AbstractTostada() {
}
2018-08-22 20:53:14,579 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-22 20:53:14,580 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-22 20:53:14,580 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-08-22 20:53:14,580 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-22 20:53:14,580 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,581 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-22 20:53:14,581 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,581 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2018-08-22 20:53:14,582 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-22 20:53:14,582 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,582 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,582 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,583 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,583 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-22 20:53:14,583 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,583 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2018-08-22 20:53:14,584 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2018-08-22 20:53:14,584 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2018-08-22 20:53:14,584 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada$1()
2018-08-22 20:53:14,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada.1
2018-08-22 20:53:14,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-22 20:53:14,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: 1() {
}
2018-08-22 20:53:14,589 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-22 20:53:14,589 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-22 20:53:14,589 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-08-22 20:53:14,589 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,589 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    super.prepare();
}
2018-08-22 20:53:14,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-22 20:53:14,591 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,591 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,591 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,591 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,592 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,592 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    super.prepare();
}
2018-08-22 20:53:14,592 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-08-22 20:53:14,592 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-22 20:53:14,593 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-22 20:53:14,593 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,593 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,593 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-08-22 20:53:14,594 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,594 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,594 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,595 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}
2018-08-22 20:53:14,595 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-22 20:53:14,595 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,596 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,596 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,596 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,596 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-22 20:53:14,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return super.make();
}
2018-08-22 20:53:14,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return super.make()
2018-08-22 20:53:14,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.make()
2018-08-22 20:53:14,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-22 20:53:14,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-22 20:53:14,599 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,599 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,599 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: make()
2018-08-22 20:53:14,599 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,600 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,600 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-22 20:53:14,600 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,601 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public abstract void prepare();
2018-08-22 20:53:14,601 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,601 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void honey() {
}
2018-08-22 20:53:14,601 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,602 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-22 20:53:14,602 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-22 20:53:14,602 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-22 20:53:14,603 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,603 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Antojito() {
}
2018-08-22 20:53:14,603 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-22 20:53:14,604 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-22 20:53:14,604 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada()
2018-08-22 20:53:14,604 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-22 20:53:14,604 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,605 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-22 20:53:14,605 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,606 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}
2018-08-22 20:53:14,606 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-22 20:53:14,606 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,607 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,607 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,607 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,608 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,608 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("Antojito");
}
2018-08-22 20:53:14,609 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("Antojito")
2018-08-22 20:53:14,609 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-22 20:53:14,609 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-22 20:53:14,610 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,610 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,610 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-22 20:53:14,610 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,611 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,611 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,611 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,611 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-22 20:53:14,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "Antojito"
2018-08-22 20:53:14,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,614 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,614 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void prepare(java.lang.String ingredient) {
}
2018-08-22 20:53:14,614 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,614 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtParameterImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtParameterImpl: java.lang.String ingredient
2018-08-22 20:53:14,615 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,615 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,615 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-22 20:53:14,616 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-22 20:53:14,616 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-22 20:53:14,616 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-22 20:53:14,616 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtFieldImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldImpl: private int myfield = 0;
2018-08-22 20:53:14,617 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,617 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-22 20:53:14,617 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,618 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: FieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}
2018-08-22 20:53:14,618 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    super();
    this.myfield = 0;
}
2018-08-22 20:53:14,618 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-22 20:53:14,618 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.util.ArrayList()
2018-08-22 20:53:14,619 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-22 20:53:14,619 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-22 20:53:14,619 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-22 20:53:14,619 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-22 20:53:14,620 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: this.myfield = 0
2018-08-22 20:53:14,620 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,620 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: this.myfield
2018-08-22 20:53:14,622 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: this
2018-08-22 20:53:14,623 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-22 20:53:14,623 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,623 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-22 20:53:14,623 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-22 20:53:14,624 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,626 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-08-22 20:53:14,626 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-22 20:53:14,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-22 20:53:14,627 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,628 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2018-08-22 20:53:14,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,629 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2018-08-22 20:53:14,630 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: myfield = super.size()
2018-08-22 20:53:14,630 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,631 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: myfield
2018-08-22 20:53:14,631 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-08-22 20:53:14,631 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-22 20:53:14,631 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-22 20:53:14,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-22 20:53:14,632 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-08-22 20:53:14,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-22 20:53:14,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,633 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.size()
2018-08-22 20:53:14,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-22 20:53:14,634 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-22 20:53:14,635 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-22 20:53:14,635 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-22 20:53:14,635 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: size()
2018-08-22 20:53:14,636 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-22 20:53:14,636 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-22 20:53:14,636 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: java.lang.Object o = super.get(myfield)
2018-08-22 20:53:14,637 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-22 20:53:14,638 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,638 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.get(myfield)
2018-08-22 20:53:14,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-22 20:53:14,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-22 20:53:14,639 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-22 20:53:14,640 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-22 20:53:14,640 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: get(int)
2018-08-22 20:53:14,641 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-22 20:53:14,641 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-22 20:53:14,641 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-22 20:53:14,642 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,642 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,642 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: myfield
2018-08-22 20:53:14,643 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-08-22 20:53:14,643 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-22 20:53:14,644 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,644 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-22 20:53:14,644 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-22 20:53:14,645 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,645 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-08-22 20:53:14,645 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-08-22 20:53:14,646 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,646 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,647 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-22 20:53:14,652 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.SuppressWarnings("bar")
2018-08-22 20:53:14,653 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-08-22 20:53:14,653 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,653 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-08-22 20:53:14,654 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,654 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "bar"
2018-08-22 20:53:14,654 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,655 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,655 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Foo() {
}
2018-08-22 20:53:14,655 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-22 20:53:14,655 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-22 20:53:14,656 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-08-22 20:53:14,656 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-22 20:53:14,656 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,656 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-22 20:53:14,657 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,657 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtFieldImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldImpl: int i;
2018-08-22 20:53:14,657 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,658 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void foo() {
    int x = 3;
    int z;
    z = x + (i);
    java.lang.System.out.println(z);
}
2018-08-22 20:53:14,658 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,659 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    int x = 3;
    int z;
    z = x + (i);
    java.lang.System.out.println(z);
}
2018-08-22 20:53:14,659 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int x = 3
2018-08-22 20:53:14,660 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,660 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-22 20:53:14,660 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int z
2018-08-22 20:53:14,669 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,670 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: z = x + (i)
2018-08-22 20:53:14,670 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,670 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableWriteImpl: z
2018-08-22 20:53:14,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: z
2018-08-22 20:53:14,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: x + (i)
2018-08-22 20:53:14,671 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: x
2018-08-22 20:53:14,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: x
2018-08-22 20:53:14,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,672 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: (i)
2018-08-22 20:53:14,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-08-22 20:53:14,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-22 20:53:14,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.Foo
2018-08-22 20:53:14,673 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-22 20:53:14,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: i
2018-08-22 20:53:14,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-22 20:53:14,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,674 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println(z)
2018-08-22 20:53:14,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-22 20:53:14,675 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-22 20:53:14,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-22 20:53:14,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,676 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(int)
2018-08-22 20:53:14,677 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: z
2018-08-22 20:53:14,678 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: z
2018-08-22 20:53:14,679 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,680 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.SuppressWarnings("foo")
int bar() {
    if (0 == 1) {
        throw new java.lang.RuntimeException();
    }
    return i;
}
2018-08-22 20:53:14,681 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.SuppressWarnings("foo")
2018-08-22 20:53:14,681 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-08-22 20:53:14,689 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,690 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-08-22 20:53:14,690 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,691 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "foo"
2018-08-22 20:53:14,691 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,691 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,692 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,692 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    if (0 == 1) {
        throw new java.lang.RuntimeException();
    }
    return i;
}
2018-08-22 20:53:14,693 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtIfImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtIfImpl: if (0 == 1) {
    throw new java.lang.RuntimeException();
}
2018-08-22 20:53:14,693 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: 0 == 1
2018-08-22 20:53:14,694 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-22 20:53:14,694 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-22 20:53:14,694 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,695 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 1
2018-08-22 20:53:14,695 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,695 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    throw new java.lang.RuntimeException();
}
2018-08-22 20:53:14,696 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThrowImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThrowImpl: throw new java.lang.RuntimeException()
2018-08-22 20:53:14,696 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtConstructorCallImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorCallImpl: new java.lang.RuntimeException()
2018-08-22 20:53:14,696 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.RuntimeException()
2018-08-22 20:53:14,697 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.RuntimeException
2018-08-22 20:53:14,697 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,697 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.RuntimeException
2018-08-22 20:53:14,697 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,698 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return i
2018-08-22 20:53:14,698 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: i
2018-08-22 20:53:14,699 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-08-22 20:53:14,699 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-22 20:53:14,699 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,700 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.Foo
2018-08-22 20:53:14,700 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-22 20:53:14,700 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,701 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: i
2018-08-22 20:53:14,702 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-08-22 20:53:14,702 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,703 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,703 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: FooLine() {
}
2018-08-22 20:53:14,703 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-22 20:53:14,704 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-22 20:53:14,704 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-08-22 20:53:14,705 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-22 20:53:14,705 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,705 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-22 20:53:14,706 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,706 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void simple() {
    int x = 3;
    int z = 0;
    java.lang.System.out.println(z);
}
2018-08-22 20:53:14,707 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,707 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    int x = 3;
    int z = 0;
    java.lang.System.out.println(z);
}
2018-08-22 20:53:14,708 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int x = 3
2018-08-22 20:53:14,708 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,708 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-22 20:53:14,708 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,709 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int z = 0
2018-08-22 20:53:14,709 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,709 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-22 20:53:14,710 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,713 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println(z)
2018-08-22 20:53:14,713 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-22 20:53:14,714 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-22 20:53:14,714 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,714 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,715 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-22 20:53:14,715 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,715 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,716 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,716 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,716 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(int)
2018-08-22 20:53:14,717 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,717 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,717 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,717 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,718 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: z
2018-08-22 20:53:14,718 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: z
2018-08-22 20:53:14,718 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,719 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void loopBlock() {
    for (int i = 0; i < 10; i++) {
        java.lang.System.out.println(i);
    }
}
2018-08-22 20:53:14,720 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,720 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    for (int i = 0; i < 10; i++) {
        java.lang.System.out.println(i);
    }
}
2018-08-22 20:53:14,721 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtForImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtForImpl: for (int i = 0; i < 10; i++) {
    java.lang.System.out.println(i);
}
2018-08-22 20:53:14,721 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int i = 0
2018-08-22 20:53:14,722 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,722 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-22 20:53:14,722 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,722 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: i < 10
2018-08-22 20:53:14,723 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-22 20:53:14,723 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-22 20:53:14,723 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-22 20:53:14,723 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,738 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 10
2018-08-22 20:53:14,738 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,739 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtUnaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtUnaryOperatorImpl: i++
2018-08-22 20:53:14,739 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,739 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableWriteImpl: i
2018-08-22 20:53:14,740 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-22 20:53:14,740 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,740 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println(i);
}
2018-08-22 20:53:14,741 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println(i)
2018-08-22 20:53:14,741 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-22 20:53:14,743 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-22 20:53:14,743 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,744 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,744 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-22 20:53:14,744 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,745 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,745 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,746 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,746 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(int)
2018-08-22 20:53:14,747 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,748 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,751 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,751 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,752 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-22 20:53:14,752 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-22 20:53:14,752 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,753 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void loopNoBlock() {
    for (int i = 0; i < 10; i++)
        java.lang.System.out.println(i);

}
2018-08-22 20:53:14,753 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,754 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    for (int i = 0; i < 10; i++)
        java.lang.System.out.println(i);

}
2018-08-22 20:53:14,754 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtForImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtForImpl: for (int i = 0; i < 10; i++)
    java.lang.System.out.println(i);

2018-08-22 20:53:14,755 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int i = 0
2018-08-22 20:53:14,755 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,757 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-22 20:53:14,757 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,758 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: i < 10
2018-08-22 20:53:14,758 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-22 20:53:14,758 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-22 20:53:14,758 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-22 20:53:14,759 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,759 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 10
2018-08-22 20:53:14,759 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,760 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtUnaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtUnaryOperatorImpl: i++
2018-08-22 20:53:14,761 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,761 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableWriteImpl: i
2018-08-22 20:53:14,762 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-22 20:53:14,762 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,762 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: java.lang.System.out.println(i);

2018-08-22 20:53:14,763 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println(i)
2018-08-22 20:53:14,763 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-22 20:53:14,764 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-22 20:53:14,764 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,764 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,764 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-22 20:53:14,765 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,765 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,765 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,765 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,766 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(int)
2018-08-22 20:53:14,766 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,766 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,766 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,767 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,767 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-22 20:53:14,767 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-22 20:53:14,767 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,768 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void loopNoBody() {
    for (int i = 0; i < 10; i++);
}
2018-08-22 20:53:14,768 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,769 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    for (int i = 0; i < 10; i++);
}
2018-08-22 20:53:14,769 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtForImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtForImpl: for (int i = 0; i < 10; i++);
2018-08-22 20:53:14,769 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int i = 0
2018-08-22 20:53:14,769 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,770 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-08-22 20:53:14,770 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,770 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: i < 10
2018-08-22 20:53:14,770 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-22 20:53:14,771 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: i
2018-08-22 20:53:14,771 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-22 20:53:14,771 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,771 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 10
2018-08-22 20:53:14,772 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,772 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtUnaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtUnaryOperatorImpl: i++
2018-08-22 20:53:14,772 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,772 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableWriteImpl: i
2018-08-22 20:53:14,773 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: i
2018-08-22 20:53:14,773 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,773 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void ifBlock() {
    if (3 < 4) {
        java.lang.System.out.println("if");
    }
}
2018-08-22 20:53:14,774 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,774 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    if (3 < 4) {
        java.lang.System.out.println("if");
    }
}
2018-08-22 20:53:14,775 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtIfImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtIfImpl: if (3 < 4) {
    java.lang.System.out.println("if");
}
2018-08-22 20:53:14,775 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: 3 < 4
2018-08-22 20:53:14,775 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-22 20:53:14,775 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-22 20:53:14,776 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,776 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 4
2018-08-22 20:53:14,776 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,777 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("if");
}
2018-08-22 20:53:14,777 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("if")
2018-08-22 20:53:14,777 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-22 20:53:14,778 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-22 20:53:14,778 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,778 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,778 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-22 20:53:14,779 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,779 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,779 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,779 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,780 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-22 20:53:14,780 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,780 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,780 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,781 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,781 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,781 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "if"
2018-08-22 20:53:14,781 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,782 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,782 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void ifNoBlock() {
    if (3 < 4)
        java.lang.System.out.println("if");

}
2018-08-22 20:53:14,782 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,783 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    if (3 < 4)
        java.lang.System.out.println("if");

}
2018-08-22 20:53:14,783 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtIfImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtIfImpl: if (3 < 4)
    java.lang.System.out.println("if");

2018-08-22 20:53:14,784 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: 3 < 4
2018-08-22 20:53:14,784 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-08-22 20:53:14,784 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-22 20:53:14,785 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,785 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 4
2018-08-22 20:53:14,785 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,786 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: java.lang.System.out.println("if");

2018-08-22 20:53:14,786 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("if")
2018-08-22 20:53:14,787 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-22 20:53:14,787 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-22 20:53:14,787 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,787 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,788 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-22 20:53:14,788 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,788 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,788 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,789 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,789 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-22 20:53:14,789 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,789 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,790 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,790 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,790 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,790 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "if"
2018-08-22 20:53:14,791 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,791 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,791 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void switchBlock() {
    switch ("test") {
        case "test" :
            break;
        default :
            java.lang.System.out.println("switch");
    }
}
2018-08-22 20:53:14,792 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,793 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    switch ("test") {
        case "test" :
            break;
        default :
            java.lang.System.out.println("switch");
    }
}
2018-08-22 20:53:14,793 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSwitchImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSwitchImpl: switch ("test") {
    case "test" :
        break;
    default :
        java.lang.System.out.println("switch");
}
2018-08-22 20:53:14,794 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "test"
2018-08-22 20:53:14,794 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,794 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,794 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCaseImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCaseImpl: case "test" :
    break;
2018-08-22 20:53:14,795 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "test"
2018-08-22 20:53:14,796 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,796 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,797 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBreakImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBreakImpl: break
2018-08-22 20:53:14,797 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCaseImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCaseImpl: default :
    java.lang.System.out.println("switch");
2018-08-22 20:53:14,798 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("switch")
2018-08-22 20:53:14,798 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-22 20:53:14,798 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-22 20:53:14,799 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,799 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,799 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-22 20:53:14,799 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,800 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,800 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,800 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,800 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-22 20:53:14,801 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,801 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,801 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,801 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,802 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,802 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "switch"
2018-08-22 20:53:14,802 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,802 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,803 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: interface Honey {
    void honey();
}
2018-08-22 20:53:14,803 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void honey();
2018-08-22 20:53:14,803 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,804 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: interface IFoo {}
2018-08-22 20:53:14,804 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: public interface ITostada extends spoon.test.filters.testclasses.IFoo {
    spoon.test.filters.testclasses.ITostada make();
}
2018-08-22 20:53:14,804 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.IFoo
2018-08-22 20:53:14,804 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,805 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostada make();
2018-08-22 20:53:14,805 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-22 20:53:14,805 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,806 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-22 20:53:14,817 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,818 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,818 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: SubTostada() {
}
2018-08-22 20:53:14,818 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-22 20:53:14,819 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-22 20:53:14,819 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-08-22 20:53:14,819 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,820 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,820 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,820 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,821 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2018-08-22 20:53:14,822 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-22 20:53:14,822 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,822 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,822 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,823 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,823 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,823 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2018-08-22 20:53:14,824 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("SubTostada")
2018-08-22 20:53:14,824 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-08-22 20:53:14,824 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-08-22 20:53:14,825 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,825 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,825 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-08-22 20:53:14,825 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-08-22 20:53:14,826 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,826 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,826 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,827 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-08-22 20:53:14,827 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-08-22 20:53:14,827 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-08-22 20:53:14,827 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,828 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,828 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,828 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "SubTostada"
2018-08-22 20:53:14,828 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,829 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,829 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-08-22 20:53:14,829 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-22 20:53:14,829 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-22 20:53:14,830 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,830 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,830 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-08-22 20:53:14,830 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,831 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,831 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,831 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-22 20:53:14,832 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-22 20:53:14,832 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,833 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Tacos() {
}
2018-08-22 20:53:14,833 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-22 20:53:14,833 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-22 20:53:14,833 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-08-22 20:53:14,834 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-22 20:53:14,834 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,834 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-08-22 20:53:14,834 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,835 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}
2018-08-22 20:53:14,835 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-22 20:53:14,835 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,836 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,836 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,836 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,836 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-22 20:53:14,836 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,837 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return null;
}
2018-08-22 20:53:14,837 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return null
2018-08-22 20:53:14,837 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: null
2018-08-22 20:53:14,837 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: <nulltype>
2018-08-22 20:53:14,838 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2018-08-22 20:53:14,838 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,838 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2018-08-22 20:53:14,839 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()
2018-08-22 20:53:14,839 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-08-22 20:53:14,839 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-22 20:53:14,840 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,840 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,840 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtConstructorCallImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorCallImpl: new java.util.ArrayList<java.lang.String>()
2018-08-22 20:53:14,840 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.util.ArrayList()
2018-08-22 20:53:14,841 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-22 20:53:14,841 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-22 20:53:14,841 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-08-22 20:53:14,841 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-22 20:53:14,842 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,842 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,842 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: strings.size()
2018-08-22 20:53:14,842 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: strings
2018-08-22 20:53:14,843 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: strings
2018-08-22 20:53:14,843 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-08-22 20:53:14,843 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-22 20:53:14,843 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,844 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,844 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: size()
2018-08-22 20:53:14,844 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-08-22 20:53:14,844 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-08-22 20:53:14,845 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,845 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-08-22 20:53:14,846 INFO spoon.Launcher - Step 6) Skipped element, because CtFunction#accept(input) returned false
Parameter 1) CtMethodImpl: void honey();
2018-08-22 20:53:14,846 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-22 20:53:14,847 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,848 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Honey
2018-08-22 20:53:14,848 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,848 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Tostada() {
}
2018-08-22 20:53:14,848 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-22 20:53:14,849 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-22 20:53:14,849 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada()
2018-08-22 20:53:14,849 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-22 20:53:14,850 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,850 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-08-22 20:53:14,851 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,851 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2018-08-22 20:53:14,852 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-22 20:53:14,852 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,852 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,852 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,852 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,853 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-08-22 20:53:14,853 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,853 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2018-08-22 20:53:14,854 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2018-08-22 20:53:14,854 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2018-08-22 20:53:14,855 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada$1()
2018-08-22 20:53:14,856 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada.1
2018-08-22 20:53:14,856 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,857 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,857 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,857 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,857 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,858 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,858 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: 1() {
}
2018-08-22 20:53:14,858 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-22 20:53:14,859 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-08-22 20:53:14,859 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-08-22 20:53:14,860 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,860 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,861 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,861 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,861 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}
2018-08-22 20:53:14,862 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-22 20:53:14,862 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,862 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,862 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,863 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,863 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,863 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    int a = 3;
    super.prepare();
}
2018-08-22 20:53:14,864 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int a = 3
2018-08-22 20:53:14,864 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,864 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-08-22 20:53:14,864 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-08-22 20:53:14,865 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-08-22 20:53:14,865 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-08-22 20:53:14,865 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-08-22 20:53:14,865 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,866 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,866 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-08-22 20:53:14,866 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-08-22 20:53:14,866 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-08-22 20:53:14,867 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,867 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
}
2018-08-22 20:53:14,867 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-22 20:53:14,867 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,869 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,869 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,869 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,870 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,870 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-22 20:53:14,870 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public java.lang.String toString() {
    return "";
}
2018-08-22 20:53:14,871 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-22 20:53:14,871 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,871 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,871 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,872 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,872 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,872 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,872 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return "";
}
2018-08-22 20:53:14,873 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return ""
2018-08-22 20:53:14,873 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: ""
2018-08-22 20:53:14,873 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-08-22 20:53:14,873 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,874 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void honey() {
}
2018-08-22 20:53:14,874 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-08-22 20:53:14,874 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,874 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,875 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-08-22 20:53:14,875 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-08-22 20:53:14,875 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,875 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-22 20:53:14,876 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void foo() {
}
2018-08-22 20:53:14,876 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-08-22 20:53:14,876 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-08-22 20:53:14,877 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
[INFO] Tests run: 43, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.018 s - in spoon.test.filters.FilterTest
[INFO] Running spoon.test.lambda.LambdaTest
2018-08-22 20:53:16,405 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Strings at (/root/workspace/INRIA/spoon/419294439/src/test/resources/noclasspath/lambdas/TypeAccessInLambda.java:6)
[INFO] Tests run: 23, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.51 s - in spoon.test.lambda.LambdaTest
[INFO] Running spoon.test.main.MainTest
[INFO] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 242.506 s - in spoon.test.main.MainTest
[INFO] Running spoon.test.model.TypeTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.385 s - in spoon.test.model.TypeTest
[INFO] Running spoon.test.model.IncrementalLauncherTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.236 s - in spoon.test.model.IncrementalLauncherTest
[INFO] Running spoon.test.model.AnonymousExecutableTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.045 s - in spoon.test.model.AnonymousExecutableTest
[INFO] Running spoon.test.model.SwitchCaseTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.084 s - in spoon.test.model.SwitchCaseTest
[INFO] Running spoon.test.model.BlockTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.075 s - in spoon.test.model.BlockTest
[INFO] Running spoon.test.template.TemplateArrayAccessTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.138 s - in spoon.test.template.TemplateArrayAccessTest
[INFO] Running spoon.test.template.PatternTest
[INFO] Tests run: 31, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.989 s - in spoon.test.template.PatternTest
[INFO] Running spoon.test.template.TemplateInvocationSubstitutionTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.175 s - in spoon.test.template.TemplateInvocationSubstitutionTest
[INFO] Running spoon.test.template.core.ParameterInfoTest
[INFO] Tests run: 21, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 s - in spoon.test.template.core.ParameterInfoTest
[INFO] Running spoon.test.template.TemplateTest
0
[INFO] Tests run: 24, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.684 s - in spoon.test.template.TemplateTest
[INFO] Running spoon.test.template.TemplateReplaceReturnTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.171 s - in spoon.test.template.TemplateReplaceReturnTest
[INFO] Running spoon.test.template.TemplateEnumAccessTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.094 s - in spoon.test.template.TemplateEnumAccessTest
[INFO] Running spoon.test.template.TemplateClassAccessTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.058 s - in spoon.test.template.TemplateClassAccessTest
[INFO] Running spoon.test.replace.ReplaceParametrizedTest
[INFO] Tests run: 80, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.224 s - in spoon.test.replace.ReplaceParametrizedTest
[INFO] Running spoon.test.replace.ReplaceTest
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.389 s - in spoon.test.replace.ReplaceTest
[INFO] Running spoon.test.executable.ExecutableRefTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.312 s - in spoon.test.executable.ExecutableRefTest
[INFO] Running spoon.test.executable.ExecutableTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.185 s - in spoon.test.executable.ExecutableTest
[INFO] Running spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.42 s - in spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
[INFO] Running spoon.test.refactoring.RefactoringTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.547 s - in spoon.test.refactoring.RefactoringTest
[INFO] Running spoon.test.refactoring.MethodsRefactoringTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.89 s - in spoon.test.refactoring.MethodsRefactoringTest
[INFO] Running spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 13.318 s - in spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
[INFO] Running spoon.test.modifiers.TestModifiers
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.352 s - in spoon.test.modifiers.TestModifiers
[INFO] Running spoon.test.position.PositionTest
2018-08-22 20:57:48,638 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:48,641 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:48,642 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:48,642 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:48,903 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:48,904 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:48,904 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:48,905 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:201)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:49,120 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:49,121 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:49,121 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:49,121 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:49,505 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:49,506 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:49,507 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:57:49,507 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:105)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:235)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
[INFO] Tests run: 26, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.23 s - in spoon.test.position.PositionTest
[INFO] Running spoon.test.condition.ConditionalTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.154 s - in spoon.test.condition.ConditionalTest
[INFO] Running spoon.test.constructor.ConstructorTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.509 s - in spoon.test.constructor.ConstructorTest
[INFO] Running spoon.test.secondaryclasses.ClassesTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.404 s - in spoon.test.secondaryclasses.ClassesTest
[INFO] Running spoon.test.jdtimportbuilder.ImportBuilderTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.681 s - in spoon.test.jdtimportbuilder.ImportBuilderTest
[INFO] Running spoon.test.methodreference.MethodReferenceTest
[ERROR] Tests run: 13, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.96 s <<< FAILURE! - in spoon.test.methodreference.MethodReferenceTest
[ERROR] testGetGenericExecutableReference(spoon.test.methodreference.MethodReferenceTest)  Time elapsed: 0.211 s  <<< FAILURE!
java.lang.AssertionError: expected same:<class java.io.Reader> was not:<class java.io.InputStream>
	at spoon.test.methodreference.MethodReferenceTest.testGetGenericExecutableReference(MethodReferenceTest.java:249)

[INFO] Running spoon.test.visibility.VisibilityTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.52 s - in spoon.test.visibility.VisibilityTest
[INFO] Running spoon.test.ctBodyHolder.CtBodyHolderTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.453 s - in spoon.test.ctBodyHolder.CtBodyHolderTest
[INFO] Running spoon.test.control.ControlTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.08 s - in spoon.test.control.ControlTest
[INFO] Running spoon.test.properties.PropertiesTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.041 s - in spoon.test.properties.PropertiesTest
[INFO] Running spoon.test.arrays.ArraysTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.393 s - in spoon.test.arrays.ArraysTest
[INFO] Running spoon.test.enums.EnumsTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.328 s - in spoon.test.enums.EnumsTest
[INFO] Running spoon.test.enums.EnumsTypeTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.051 s - in spoon.test.enums.EnumsTypeTest
[INFO] Running spoon.test.ctClass.CtClassTest
2018-08-22 20:57:55,925 ERROR spoon.Launcher - cannot load class: daikon.Runtime
spoon.support.SpoonClassNotFoundException: cannot load class: daikon.Runtime
	at spoon.support.reflect.reference.CtTypeReferenceImpl.findClass(CtTypeReferenceImpl.java:158)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.getActualClass(CtTypeReferenceImpl.java:140)
	at spoon.support.reflect.reference.CtFieldReferenceImpl.getActualField(CtFieldReferenceImpl.java:63)
	at spoon.support.reflect.reference.CtFieldReferenceImpl.getModifiers(CtFieldReferenceImpl.java:227)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.isInitializeStaticFinalField(DefaultJavaPrettyPrinter.java:904)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.printCtFieldAccess(DefaultJavaPrettyPrinter.java:851)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtFieldWrite(DefaultJavaPrettyPrinter.java:810)
	at spoon.support.reflect.code.CtFieldWriteImpl.accept(CtFieldWriteImpl.java:27)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:371)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtAssignment(DefaultJavaPrettyPrinter.java:519)
	at spoon.support.reflect.code.CtAssignmentImpl.accept(CtAssignmentImpl.java:54)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:371)
	at spoon.reflect.visitor.ElementPrinterHelper.writeStatement(ElementPrinterHelper.java:177)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtBlock(DefaultJavaPrettyPrinter.java:552)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:68)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:371)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtAnonymousExecutable(DefaultJavaPrettyPrinter.java:470)
	at spoon.support.reflect.declaration.CtAnonymousExecutableImpl.accept(CtAnonymousExecutableImpl.java:46)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:371)
	at spoon.reflect.visitor.ElementPrinterHelper.writeElementList(ElementPrinterHelper.java:187)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtClass(DefaultJavaPrettyPrinter.java:646)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:67)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:371)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.calculate(DefaultJavaPrettyPrinter.java:1983)
	at spoon.support.JavaOutputProcessor.createJavaFile(JavaOutputProcessor.java:120)
	at spoon.support.JavaOutputProcessor.process(JavaOutputProcessor.java:156)
	at spoon.support.JavaOutputProcessor.process(JavaOutputProcessor.java:46)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:74)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:147)
	at spoon.reflect.visitor.CtScanner.visitCtPackage(CtScanner.java:649)
	at spoon.support.reflect.declaration.CtPackageImpl.accept(CtPackageImpl.java:101)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:181)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:147)
	at spoon.reflect.visitor.CtScanner.visitCtPackage(CtScanner.java:648)
	at spoon.support.reflect.declaration.CtPackageImpl.accept(CtPackageImpl.java:101)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:181)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:173)
	at spoon.reflect.visitor.CtScanner.visitCtModule(CtScanner.java:923)
	at spoon.reflect.factory.ModuleFactory$CtUnnamedModule.accept(ModuleFactory.java:105)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:181)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.generateProcessedSourceFilesUsingTypes(JDTBasedSpoonCompiler.java:507)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.generateProcessedSourceFiles(JDTBasedSpoonCompiler.java:202)
	at spoon.Launcher.prettyprint(Launcher.java:785)
	at spoon.Launcher.run(Launcher.java:723)
	at spoon.test.ctClass.CtClassTest.testParentOfTheEnclosingClassOfStaticClass(CtClassTest.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
Caused by: java.lang.ClassNotFoundException: daikon.Runtime
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.findClass(CtTypeReferenceImpl.java:156)
	... 75 more
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.705 s - in spoon.test.ctClass.CtClassTest
[INFO] Running spoon.test.compilationunit.TestCompilationUnit
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.235 s - in spoon.test.compilationunit.TestCompilationUnit
[INFO] Running spoon.test.compilationunit.GetBinaryFilesTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.389 s - in spoon.test.compilationunit.GetBinaryFilesTest
[INFO] Running spoon.test.parent.ParentTest
[WARNING] Tests run: 11, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.632 s - in spoon.test.parent.ParentTest
[INFO] Running spoon.test.parent.ContractOnSettersParametrizedTest
[INFO] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.818 s - in spoon.test.parent.ContractOnSettersParametrizedTest
[INFO] Running spoon.test.parent.NullParentTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.52 s - in spoon.test.parent.NullParentTest
[INFO] Running spoon.test.parent.SetParentTest
[INFO] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.109 s - in spoon.test.parent.SetParentTest
[INFO] Running spoon.test.parent.TopLevelTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.04 s - in spoon.test.parent.TopLevelTypeTest
[INFO] Running spoon.test.method_overriding.MethodOverriddingTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.143 s - in spoon.test.method_overriding.MethodOverriddingTest
[INFO] Running spoon.test.factory.ClassFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.test.factory.ClassFactoryTest
[INFO] Running spoon.test.factory.TypeFactoryTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.206 s - in spoon.test.factory.TypeFactoryTest
[INFO] Running spoon.test.factory.ConstructorFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.062 s - in spoon.test.factory.ConstructorFactoryTest
[INFO] Running spoon.test.factory.CodeFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.factory.CodeFactoryTest
[INFO] Running spoon.test.factory.FieldFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.203 s - in spoon.test.factory.FieldFactoryTest
[INFO] Running spoon.test.factory.ExecutableFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.factory.ExecutableFactoryTest
[INFO] Running spoon.test.factory.FactoryTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.278 s - in spoon.test.factory.FactoryTest
[INFO] Running spoon.test.factory.AnnotationFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.063 s - in spoon.test.factory.AnnotationFactoryTest
[INFO] Running spoon.test.fieldaccesses.FieldAccessTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.846 s - in spoon.test.fieldaccesses.FieldAccessTest
[INFO] Running spoon.test.ctBlock.TestCtBlock
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.196 s - in spoon.test.ctBlock.TestCtBlock
[INFO] Running spoon.test.compilation.CompilationTest
>> Hello: Bar <<
>> Hello: FooEx <<
>> Hello: IBar <<
>> Hello: SimpleProcessor <<
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.932 s - in spoon.test.compilation.CompilationTest
[INFO] Running spoon.test.change.ChangeCollectorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.049 s - in spoon.test.change.ChangeCollectorTest
[INFO] Running spoon.test.sourcePosition.SourcePositionTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.226 s - in spoon.test.sourcePosition.SourcePositionTest
[INFO] Running spoon.test.delete.DeleteTest
[INFO] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.699 s - in spoon.test.delete.DeleteTest
[INFO] Running spoon.test.ctType.CtTypeParameterTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.15 s - in spoon.test.ctType.CtTypeParameterTest
[INFO] Running spoon.test.ctType.CtTypeTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.403 s - in spoon.test.ctType.CtTypeTest
[INFO] Running spoon.test.staticFieldAccess.StaticAccessTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.194 s - in spoon.test.staticFieldAccess.StaticAccessTest
[INFO] Running spoon.test.ctCase.SwitchCaseTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.133 s - in spoon.test.ctCase.SwitchCaseTest
[INFO] Running spoon.test.type.TypeTest
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.753 s - in spoon.test.type.TypeTest
[INFO] Running spoon.test.role.TestCtRole
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in spoon.test.role.TestCtRole
[INFO] Running spoon.test.varargs.VarArgsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.042 s - in spoon.test.varargs.VarArgsTest
[INFO] Running spoon.test.reflect.visitor.ReferenceQueryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.054 s - in spoon.test.reflect.visitor.ReferenceQueryTest
[INFO] Running spoon.test.query_function.testclasses.VariableReferencesModelTest
[INFO] Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 s - in spoon.test.query_function.testclasses.VariableReferencesModelTest
[INFO] Running spoon.test.query_function.VariableReferencesTest
2018-08-22 20:58:13,476 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:58:13,476 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:58:13,476 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:58:13,477 INFO spoon.Launcher - running Spoon...
2018-08-22 20:58:13,477 INFO spoon.Launcher - start processing...
2018-08-22 20:58:13,529 INFO spoon.Launcher - end of processing: 
2018-08-22 20:58:13,529 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:58:13,563 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:58:13,563 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:58:13,563 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:58:13,563 INFO spoon.Launcher - running Spoon...
2018-08-22 20:58:13,563 INFO spoon.Launcher - start processing...
2018-08-22 20:58:13,661 INFO spoon.Launcher - end of processing: 
2018-08-22 20:58:13,661 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:58:13,688 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:58:13,688 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:58:13,688 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:58:13,688 INFO spoon.Launcher - running Spoon...
2018-08-22 20:58:13,688 INFO spoon.Launcher - start processing...
2018-08-22 20:58:13,739 INFO spoon.Launcher - end of processing: 
2018-08-22 20:58:13,739 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:58:13,743 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:58:13,743 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:58:13,744 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:58:13,744 INFO spoon.Launcher - running Spoon...
2018-08-22 20:58:13,744 INFO spoon.Launcher - start processing...
2018-08-22 20:58:13,795 INFO spoon.Launcher - end of processing: 
2018-08-22 20:58:13,795 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:58:13,819 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:58:13,819 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:58:13,820 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:58:13,820 INFO spoon.Launcher - running Spoon...
2018-08-22 20:58:13,820 INFO spoon.Launcher - start processing...
2018-08-22 20:58:13,871 INFO spoon.Launcher - end of processing: 
2018-08-22 20:58:13,871 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:58:13,879 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:58:13,879 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:58:13,879 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:58:13,879 INFO spoon.Launcher - running Spoon...
2018-08-22 20:58:13,879 INFO spoon.Launcher - start processing...
2018-08-22 20:58:13,930 INFO spoon.Launcher - end of processing: 
2018-08-22 20:58:13,930 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:58:13,936 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:58:13,936 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:58:13,937 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:58:13,937 INFO spoon.Launcher - running Spoon...
2018-08-22 20:58:13,937 INFO spoon.Launcher - start processing...
2018-08-22 20:58:13,988 INFO spoon.Launcher - end of processing: 
2018-08-22 20:58:13,988 INFO spoon.Launcher - no errors, no warnings
2018-08-22 20:58:14,035 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:58:14,035 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:58:14,035 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-08-22 20:58:14,035 INFO spoon.Launcher - running Spoon...
2018-08-22 20:58:14,035 INFO spoon.Launcher - start processing...
2018-08-22 20:58:14,086 INFO spoon.Launcher - end of processing: 
2018-08-22 20:58:14,087 INFO spoon.Launcher - no errors, no warnings
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.668 s - in spoon.test.query_function.VariableReferencesTest
[INFO] Running spoon.test.interfaces.TestInterfaceWithoutSetup
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.121 s - in spoon.test.interfaces.TestInterfaceWithoutSetup
[INFO] Running spoon.test.interfaces.InterfaceTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.268 s - in spoon.test.interfaces.InterfaceTest
[INFO] Running spoon.test.processing.ProcessingTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.443 s - in spoon.test.processing.ProcessingTest
[INFO] Running spoon.test.serializable.SerializableTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.131 s - in spoon.test.serializable.SerializableTest
[INFO] Running spoon.test.serializable.ModelStreamerTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.799 s - in spoon.test.serializable.ModelStreamerTest
[INFO] Running spoon.test.serializable.SourcePositionTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.038 s - in spoon.test.serializable.SourcePositionTest
[INFO] Running spoon.test.method.MethodTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.223 s - in spoon.test.method.MethodTest
[INFO] Running spoon.test.trycatch.TryCatchTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.919 s - in spoon.test.trycatch.TryCatchTest
[INFO] Running spoon.test.constructorcallnewclass.ConstructorCallTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.516 s - in spoon.test.constructorcallnewclass.ConstructorCallTest
[INFO] Running spoon.test.constructorcallnewclass.NewClassTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.724 s - in spoon.test.constructorcallnewclass.NewClassTest
[INFO] Running spoon.test.casts.CastTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.201 s - in spoon.test.casts.CastTest
[INFO] Running spoon.test.javadoc.JavaDocTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.087 s - in spoon.test.javadoc.JavaDocTest
[INFO] Running spoon.test.field.FieldTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.214 s - in spoon.test.field.FieldTest
[INFO] Running spoon.test.jar.JarTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.117 s - in spoon.test.jar.JarTest
[INFO] Running spoon.test.initializers.InitializerTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.121 s - in spoon.test.initializers.InitializerTest
[INFO] Running spoon.test.eval.EvalTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.563 s - in spoon.test.eval.EvalTest
[INFO] Running spoon.test.ctElement.MetadataTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.037 s - in spoon.test.ctElement.MetadataTest
[INFO] Running spoon.test.ctElement.ElementTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.ctElement.ElementTest
[INFO] Running spoon.test.snippets.SnippetTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.308 s - in spoon.test.snippets.SnippetTest
[INFO] Running spoon.test.strings.StringLiteralTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.04 s - in spoon.test.strings.StringLiteralTest
[INFO] Running spoon.test.strings.StringTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.054 s - in spoon.test.strings.StringTest
[INFO] Running spoon.test.invocations.InvocationTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.151 s - in spoon.test.invocations.InvocationTest
[INFO] Running spoon.test.literal.LiteralTest
2018-08-22 20:58:21,527 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Longs at (/root/workspace/INRIA/spoon/419294439/src/test/resources/noclasspath/SecondaryIndexManager.java:611)
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.741 s - in spoon.test.literal.LiteralTest
[INFO] Running spoon.test.labels.TestLabels
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.039 s - in spoon.test.labels.TestLabels
[INFO] Running spoon.test.parameters.ParameterTest
2018-08-22 20:58:22,227 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable typeRatingFilters at (/root/workspace/INRIA/spoon/419294439/src/test/resources/noclasspath/Tacos.java:4)
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.167 s - in spoon.test.parameters.ParameterTest
[INFO] Running spoon.test.OutputTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.OutputTypeTest
[INFO] Running spoon.test.path.PathTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.427 s - in spoon.test.path.PathTest
[INFO] Running spoon.test.limits.utils.InternalTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.077 s - in spoon.test.limits.utils.InternalTest
[INFO] Running spoon.test.support.ResourceTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.184 s - in spoon.test.support.ResourceTest
[INFO] Running spoon.test.signature.SignatureTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.587 s - in spoon.test.signature.SignatureTest
[INFO] Running spoon.test.comparison.EqualTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.231 s - in spoon.test.comparison.EqualTest
[INFO] Running spoon.test.logging.LogTest
2018-08-22 20:58:23,750 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:58:23,750 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:58:23,750 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/419294439/spooned-classes
2018-08-22 20:58:23,750 DEBUG spoon.Launcher - source classpath: null
2018-08-22 20:58:23,750 DEBUG spoon.Launcher - template classpath: []
2018-08-22 20:58:23,751 INFO spoon.Launcher - Log info
2018-08-22 20:58:23,751 WARN spoon.Launcher - Log warn
2018-08-22 20:58:23,751 ERROR spoon.Launcher - Log error
2018-08-22 20:58:23,751 DEBUG spoon.Launcher - Log debug
2018-08-22 20:58:23,752 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:58:23,752 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:58:23,752 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/419294439/spooned-classes
2018-08-22 20:58:23,752 DEBUG spoon.Launcher - source classpath: null
2018-08-22 20:58:23,752 DEBUG spoon.Launcher - template classpath: []
2018-08-22 20:58:23,752 INFO spoon.Launcher - Log info
2018-08-22 20:58:23,752 WARN spoon.Launcher - Log warn
2018-08-22 20:58:23,752 ERROR spoon.Launcher - Log error
2018-08-22 20:58:23,752 DEBUG spoon.Launcher - Log debug
2018-08-22 20:58:23,753 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:58:23,753 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:58:23,753 INFO spoon.Launcher - Log info
2018-08-22 20:58:23,753 WARN spoon.Launcher - Log warn
2018-08-22 20:58:23,754 ERROR spoon.Launcher - Log error
2018-08-22 20:58:23,754 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-08-22 20:58:23,754 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-08-22 20:58:23,754 WARN spoon.Launcher - Log warn
2018-08-22 20:58:23,755 ERROR spoon.Launcher - Log error
2018-08-22 20:58:23,756 ERROR spoon.Launcher - Log error
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 s - in spoon.test.logging.LogTest
[INFO] Running spoon.test.architecture.SpoonArchitectureEnforcerTest
2018-08-22 20:58:46,962 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.Launcher.buildModel(Launcher.java:768)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:58:46,963 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.Launcher.buildModel(Launcher.java:768)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:58:46,964 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.Launcher.buildModel(Launcher.java:768)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-08-22 20:58:46,964 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/419294439/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:381)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:484)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:469)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:382)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:331)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:120)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:103)
	at spoon.Launcher.buildModel(Launcher.java:768)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 32.011 s - in spoon.test.architecture.SpoonArchitectureEnforcerTest
[INFO] Running spoon.reflect.declaration.UnknownDeclarationTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.04 s - in spoon.reflect.declaration.UnknownDeclarationTest
[INFO] Running spoon.reflect.declaration.CtTypeInformationTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.468 s - in spoon.reflect.declaration.CtTypeInformationTest
[INFO] Running spoon.reflect.visitor.CtIteratorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.247 s - in spoon.reflect.visitor.CtIteratorTest
[INFO] Running spoon.reflect.visitor.CtScannerTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.076 s - in spoon.reflect.visitor.CtScannerTest
[INFO] Running spoon.reflect.visitor.CtVisitorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.434 s - in spoon.reflect.visitor.CtVisitorTest
[INFO] Running spoon.reflect.visitor.CtInheritanceScannerTest
[INFO] Tests run: 82, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.584 s - in spoon.reflect.visitor.CtInheritanceScannerTest
[INFO] Running spoon.reflect.visitor.CtInheritanceScannerMethodsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.004 s - in spoon.reflect.visitor.CtInheritanceScannerMethodsTest
[INFO] Running spoon.reflect.ast.CloneTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 10.725 s - in spoon.reflect.ast.CloneTest
[INFO] Running spoon.reflect.ast.AstCheckerTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.362 s - in spoon.reflect.ast.AstCheckerTest
[INFO] Running spoon.testing.CtElementAssertTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.213 s - in spoon.testing.CtElementAssertTest
[INFO] Running spoon.testing.AbstractAssertTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.29 s - in spoon.testing.AbstractAssertTest
[INFO] Running spoon.testing.FileAssertTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.258 s - in spoon.testing.FileAssertTest
[INFO] Running spoon.testing.CtPackageAssertTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.114 s - in spoon.testing.CtPackageAssertTest
[INFO] Running spoon.LauncherTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.182 s - in spoon.LauncherTest
[INFO] Running spoon.support.compiler.jdt.ExtendedStringLiteralTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.041 s - in spoon.support.compiler.jdt.ExtendedStringLiteralTest
[INFO] Running spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.774 s - in spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
[INFO] Running spoon.support.compiler.jdt.JDTBatchCompilerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.078 s - in spoon.support.compiler.jdt.JDTBatchCompilerTest
[INFO] Running spoon.support.compiler.jdt.JDTBuilderTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.support.compiler.jdt.JDTBuilderTest
[INFO] Running spoon.support.compiler.classpath.ComputeClasspathTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.support.compiler.classpath.ComputeClasspathTest
[INFO] Running spoon.support.visitor.java.JavaReflectionTreeBuilderTest
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.007 s - in spoon.support.visitor.java.JavaReflectionTreeBuilderTest
[INFO] Running spoon.processing.ProcessingTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.067 s - in spoon.processing.ProcessingTest
[INFO] Running spoon.processing.CtGenerationTest
[ERROR] Tests run: 4, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 48.858 s <<< FAILURE! - in spoon.processing.CtGenerationTest
[ERROR] testGenerateRoleHandler(spoon.processing.CtGenerationTest)  Time elapsed: 10.181 s  <<< FAILURE!
org.junit.ComparisonFailure: 
ModelRoleHandlers different expected:<...
    static class Ct[TypeParameterReference_BOUNDING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeParameterReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtTypeParameterReference_BOUNDING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.BOUNDING_TYPE, spoon.reflect.reference.CtTypeParameterReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBoundingType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBoundingType(castValue(value));
        }
    }

    static class CtSwitch_CASE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtCase<?>> {
        private CtSwitch_CASE_RoleHandler() {
            super(spoon.reflect.path.CtRole.CASE, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtCase.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCases())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCases(castValue(value));
        }
    }

    static class CtExpression_CAST_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtExpression, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtExpression_CAST_RoleHandler() {
            super(spoon.reflect.path.CtRole.CAST, spoon.reflect.code.CtExpression.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeCasts())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeCasts(castValue(value));
        }
    }

    static class CtTry_CATCH_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtCatch> {
        private CtTry_CATCH_RoleHandler() {
            super(spoon.reflect.path.CtRole.CATCH, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtCatch.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCatchers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCatchers(castValue(value));
        }
    }

    static class CtElement_COMMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtElement, spoon.reflect.code.CtComment> {
        private CtElement_COMMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT, spoon.reflect.declaration.CtElement.class, spoon.reflect.code.CtComment.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComments(castValue(value));
        }
    }

    static class CtComment_COMMENT_CONTENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, java.lang.String> {
        private CtComment_COMMENT_CONTENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_CONTENT, spoon.reflect.code.CtComment.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDocTag_COMMENT_CONTENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_COMMENT_CONTENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_CONTENT, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDoc_COMMENT_TAG_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtJavaDoc, spoon.reflect.code.CtJavaDocTag> {
        private CtJavaDoc_COMMENT_TAG_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_TAG, spoon.reflect.code.CtJavaDoc.class, spoon.reflect.code.CtJavaDocTag.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTags())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTags(castValue(value));
        }
    }

    static class CtComment_COMMENT_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, spoon.reflect.code.CtComment.CommentType> {
        private CtComment_COMMENT_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_TYPE, spoon.reflect.code.CtComment.class, spoon.reflect.code.CtComment.CommentType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCommentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCommentType(castValue(value));
        }
    }

    static class CtAssert_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtAssert_CONDITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONDITION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssertExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssertExpression(castValue(value));
        }
    }

    static class CtConditional_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtConditional_CONDITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONDITION, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtIf_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtIf_CONDITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONDITION, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtClass_CONSTRUCTOR_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtConstructor<?>> {
        private CtClass_CONSTRUCTOR_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONSTRUCTOR, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtConstructor.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getConstructors())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setConstructors(castValue(value));
        }
    }

    static class CtPackage_CONTAINED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtType<? extends java.lang.Object>> {
        private CtPackage_CONTAINED_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONTAINED_TYPE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypes(castValue(value));
        }
    }

    static class CtExecutableReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtExecutableReference_DECLARING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DECLARING_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtFieldReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtFieldReference_DECLARING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DECLARING_TYPE, spoon.reflect.reference.CtFieldReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtTypeReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtTypeReference_DECLARING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DECLARING_TYPE, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.code.CtExpression<?>> {
        private CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtAnnotationMethod.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtVariable_DEFAULT_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtVariable, spoon.reflect.code.CtExpression<?>> {
        private CtVariable_DEFAULT_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtVariable.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtNewArray_DIMENSION_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtNewArray_DIMENSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.DIMENSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDimensionExpressions())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDimensionExpressions(castValue(value));
        }
    }

    static class CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, spoon.reflect.code.CtJavaDocTag.TagType> {
        private CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DOCUMENTATION_TYPE, spoon.reflect.code.CtJavaDocTag.class, spoon.reflect.code.CtJavaDocTag.TagType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtConditional_ELSE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_ELSE_RoleHandler() {
            super(spoon.reflect.path.CtRole.ELSE, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseExpression(castValue(value));
        }
    }

    static class CtIf_ELSE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_ELSE_RoleHandler() {
            super(spoon.reflect.path.CtRole.ELSE, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseStatement(castValue(value));
        }
    }

    static class CtAbstractInvocation_EXECUTABLE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAbstractInvocation, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtAbstractInvocation_EXECUTABLE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXECUTABLE_REF, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXECUTABLE_REF, spoon.reflect.code.CtExecutableReferenceExpression.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtModule_EXPORTED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_EXPORTED_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPORTED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExportedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExportedPackages(castValue(value));
        }
    }

    static class CtArrayAccess_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtArrayAccess, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtArrayAccess_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtArrayAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getIndexExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIndexExpression(castValue(value));
        }
    }

    static class CtAssert_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<?>> {
        private CtAssert_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtCase_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCase, spoon.reflect.code.CtExpression<?>> {
        private CtCase_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtCase.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCaseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCaseExpression(castValue(value));
        }
    }

    static class CtDo_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtDo, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtDo_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtDo.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtFor_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtFor_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtForEach_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtForEach_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtLambda_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLambda, spoon.reflect.code.CtExpression<?>> {
        private CtLambda_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtLambda.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtNewArray_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtNewArray_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElements(castValue(value));
        }
    }

    static class CtReturn_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtReturn, spoon.reflect.code.CtExpression<?>> {
        private CtReturn_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtReturn.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReturnedExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReturnedExpression(castValue(value));
        }
    }

    static class CtSwitch_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtExpression<?>> {
        private CtSwitch_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSelector())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSelector(castValue(value));
        }
    }

    static class CtSynchronized_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSynchronized, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtSynchronized_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtThrow_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtThrow, spoon.reflect.code.CtExpression<? extends java.lang.Throwable>> {
        private CtThrow_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtThrow.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownExpression(castValue(value));
        }
    }

    static class CtUnaryOperator_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.CtExpression<?>> {
        private CtUnaryOperator_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOperand(castValue(value));
        }
    }

    static class CtWhile_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtWhile, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtWhile_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtWhile.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtType_FIELD_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtField<? extends java.lang.Object>> {
        private CtType_FIELD_RoleHandler() {
            super(spoon.reflect.path.CtRole.FIELD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtField.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFields())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFields(castValue(value));
        }
    }

    static class CtTry_FINALIZER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtBlock<? extends java.lang.Object>> {
        private CtTry_FINALIZER_RoleHandler() {
            super(spoon.reflect.path.CtRole.FINALIZER, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtBlock.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFinalizer())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinalizer(castValue(value));
        }
    }

    static class CtForEach_FOREACH_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtForEach_FOREACH_VARIABLE_RoleHandler() {
            super(spoon.reflect.path.CtRole.FOREACH_VARIABLE, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    static class CtFor_FOR_INIT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_INIT_RoleHandler() {
            super(spoon.reflect.path.CtRole.FOR_INIT, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForInit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForInit(castValue(value));
        }
    }

    static class CtFor_FOR_UPDATE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_UPDATE_RoleHandler() {
            super(spoon.reflect.path.CtRole.FOR_UPDATE, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForUpdate())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForUpdate(castValue(value));
        }
    }

    static class CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getImplementationTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplementationTypes(castValue(value));
        }
    }

    static class CtImport_IMPORT_REFERENCE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtImport, spoon.reflect.reference.CtReference> {
        private CtImport_IMPORT_REFERENCE_RoleHandler() {
            super(spoon.reflect.path.CtRole.IMPORT_REFERENCE, spoon.reflect.declaration.CtImport.class, spoon.reflect.reference.CtReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReference(castValue(value));
        }
    }

    static class CtType_INTERFACE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtType_INTERFACE_RoleHandler() {
            super(spoon.reflect.path.CtRole.INTERFACE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperInterfaces(castValue(value));
        }
    }

    static class CtTypeInformation_INTERFACE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_INTERFACE_RoleHandler() {
            super(spoon.reflect.path.CtRole.INTERFACE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }
    }

    static class CtMethod_IS_DEFAULT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtMethod, java.lang.Boolean> {
        private CtMethod_IS_DEFAULT_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_DEFAULT, spoon.reflect.declaration.CtMethod.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isDefaultMethod())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultMethod(castValue(value));
        }
    }

    static class CtFieldReference_IS_FINAL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_FINAL_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_FINAL, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isFinal())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinal(castValue(value));
        }
    }

    static class CtElement_IS_IMPLICIT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, java.lang.Boolean> {
        private CtElement_IS_IMPLICIT_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_IMPLICIT, spoon.reflect.declaration.CtElement.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isImplicit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplicit(castValue(value));
        }
    }

    static class CtLocalVariable_IS_INFERRED_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLocalVariable, java.lang.Boolean> {
        private CtLocalVariable_IS_INFERRED_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_INFERRED, spoon.reflect.code.CtLocalVariable.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isInferred())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setInferred(castValue(value));
        }
    }

    static class CtShadowable_IS_SHADOW_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtShadowable, java.lang.Boolean> {
        private CtShadowable_IS_SHADOW_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_SHADOW, spoon.reflect.declaration.CtShadowable.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isShadow())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setShadow(castValue(value));
        }
    }

    static class CtExecutableReference_IS_STATIC_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, java.lang.Boolean> {
        private CtExecutableReference_IS_STATIC_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_STATIC, spoon.reflect.reference.CtExecutableReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtFieldReference_IS_STATIC_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_STATIC_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_STATIC, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtTypeParameterReference_IS_UPPER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeParameterReference, java.lang.Boolean> {
        private CtTypeParameterReference_IS_UPPER_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_UPPER, spoon.reflect.reference.CtTypeParameterReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isUpper())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUpper(castValue(value));
        }
    }

    static class CtParameter_IS_VARARGS_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtParameter, java.lang.Boolean> {
        private CtParameter_IS_VARARGS_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_VARARGS, spoon.reflect.declaration.CtParameter.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isVarArgs())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVarArgs(castValue(value));
        }
    }

    static class CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.JAVADOC_TAG_VALUE, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParam())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParam(castValue(value));
        }
    }

    static class CtStatement_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtStatement, java.lang.String> {
        private CtStatement_LABEL_RoleHandler() {
            super(spoon.reflect.path.CtRole.LABEL, spoon.reflect.code.CtStatement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLabel(castValue(value));
        }
    }

    static class CtBinaryOperator_LEFT_OPERAND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtBinaryOperator_LEFT_OPERAND_RoleHandler() {
            super(spoon.reflect.path.CtRole.LEFT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLeftHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLeftHandOperand(castValue(value));
        }
    }

    static class CtType_METHOD_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtMethod<? extends java.lang.Object>> {
        private CtType_METHOD_RoleHandler() {
            super(spoon.reflect.path.CtRole.METHOD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtMethod.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMethods())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMethods(castValue(value));
        }
    }

    static class CtModifiable_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModifiable, spoon.reflect.declaration.ModifierKind> {
        private CtModifiable_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtModifiable.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModifiers(castValue(value));
        }
    }

    static class CtModule_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, java.lang.Boolean> {
        private CtModule_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtModule.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenModule())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIsOpenModule(castValue(value));
        }
    }

    static class CtModuleRequirement_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> {
        private CtModuleRequirement_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtModuleRequirement.class, spoon.reflect.declaration.CtModuleRequirement.RequiresModifier.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiresModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiresModifiers(castValue(value));
        }
    }

    static class CtTypeInformation_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.declaration.ModifierKind> {
        private CtTypeInformation_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }
    }

    static class CtModule_MODULE_DIRECTIVE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleDirective> {
        private CtModule_MODULE_DIRECTIVE_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODULE_DIRECTIVE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleDirective.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleDirectives())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleDirectives(castValue(value));
        }
    }

    static class CtModuleRequirement_MODULE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.reference.CtModuleReference> {
        private CtModuleRequirement_MODULE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODULE_REF, spoon.reflect.declaration.CtModuleRequirement.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleReference(castValue(value));
        }
    }

    static class CtPackageExport_MODULE_REF_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtModuleReference> {
        private CtPackageExport_MODULE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODULE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetExport())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetExport(castValue(value));
        }
    }

    static class CtMultiTypedElement_MULTI_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtMultiTypedElement_MULTI_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.MULTI_TYPE, spoon.reflect.declaration.CtMultiTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMultiTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMultiTypes(castValue(value));
        }
    }

    static class CtNamedElement_NAME_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtNamedElement, java.lang.String> {
        private CtNamedElement_NAME_RoleHandler() {
            super(spoon.reflect.path.CtRole.NAME, spoon.reflect.declaration.CtNamedElement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtReference_NAME_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtReference, java.lang.String> {
        private CtReference_NAME_RoleHandler() {
            super(spoon.reflect.path.CtRole.NAME, spoon.reflect.reference.CtReference.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtNewClass_NESTED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtNewClass, spoon.reflect.declaration.CtClass<? extends java.lang.Object>> {
        private CtNewClass_NESTED_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.NESTED_TYPE, spoon.reflect.code.CtNewClass.class, spoon.reflect.declaration.CtClass.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousClass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnonymousClass(castValue(value));
        }
    }

    static class CtType_NESTED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtType<? extends java.lang.Object>> {
        private CtType_NESTED_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.NESTED_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getNestedTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setNestedTypes(castValue(value));
        }
    }

    static class CtModule_OPENED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_OPENED_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOpenedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackages(castValue(value));
        }
    }

    static class CtPackageExport_OPENED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, java.lang.Boolean> {
        private CtPackageExport_OPENED_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtPackageExport.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenedPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackage(castValue(value));
        }
    }

    static class CtBinaryOperator_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.BinaryOperatorKind> {
        private CtBinaryOperator_OPERATOR_KIND_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPERATOR_KIND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtOperatorAssignment_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.BinaryOperatorKind> {
        private CtOperatorAssignment_OPERATOR_KIND_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPERATOR_KIND, spoon.reflect.code.CtOperatorAssignment.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtUnaryOperator_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.UnaryOperatorKind> {
        private CtUnaryOperator_OPERATOR_KIND_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPERATOR_KIND, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.UnaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtPackageExport_PACKAGE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtPackageReference> {
        private CtPackageExport_PACKAGE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.PACKAGE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackageReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackageReference(castValue(value));
        }
    }

    static class CtTypeReference_PACKAGE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtPackageReference> {
        private CtTypeReference_PACKAGE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.PACKAGE_REF, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackage(castValue(value));
        }
    }

    static class CtCatch_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCatch, spoon.reflect.code.CtCatchVariable<? extends java.lang.Throwable>> {
        private CtCatch_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.PARAMETER, spoon.reflect.code.CtCatch.class, spoon.reflect.code.CtCatchVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameter())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameter(castValue(value));
        }
    }

    static class CtExecutable_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.declaration.CtParameter<? extends java.lang.Object>> {
        private CtExecutable_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.PARAMETER, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.declaration.CtParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameters(castValue(value));
        }
    }

    static class CtElement_POSITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, spoon.reflect.cu.SourcePosition> {
        private CtElement_POSITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.POSITION, spoon.reflect.declaration.CtElement.class, spoon.reflect.cu.SourcePosition.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPosition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPosition(castValue(value));
        }
    }

    static class CtModule_PROVIDED_SERVICE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtProvidedService> {
        private CtModule_PROVIDED_SERVICE_RoleHandler() {
            super(spoon.reflect.path.CtRole.PROVIDED_SERVICE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtProvidedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getProvidedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setProvidedServices(castValue(value));
        }
    }

    static class CtModule_REQUIRED_MODULE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleRequirement> {
        private CtModule_REQUIRED_MODULE_RoleHandler() {
            super(spoon.reflect.path.CtRole.REQUIRED_MODULE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleRequirement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiredModules())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiredModules(castValue(value));
        }
    }

    static class CtBinaryOperator_RIGHT_OPERAND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtBinaryOperator_RIGHT_OPERAND_RoleHandler() {
            super(spoon.reflect.path.CtRole.RIGHT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRightHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRightHandOperand(castValue(value));
        }
    }

    static class CtModule_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtUsedService> {
        private CtModule_SERVICE_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtUsedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getUsedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUsedServices(castValue(value));
        }
    }

    static class CtProvidedService_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_SERVICE_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtUsedService_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtUsedService, spoon.reflect.reference.CtTypeReference> {
        private CtUsedService_SERVICE_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtUsedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtCodeSnippet_SNIPPET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtCodeSnippet, java.lang.String> {
        private CtCodeSnippet_SNIPPET_RoleHandler() {
            super(spoon.reflect.path.CtRole.SNIPPET, spoon.reflect.declaration.CtCodeSnippet.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtStatementList_STATEMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtStatementList, spoon.reflect.code.CtStatement> {
        private CtStatementList_STATEMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.STATEMENT, spoon.reflect.code.CtStatementList.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getStatements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatements(castValue(value));
        }
    }

    static class CtModule_SUB_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackage> {
        private CtModule_SUB_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRootPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRootPackage(castValue(value));
        }
    }

    static class CtPackage_SUB_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtPackage> {
        private CtPackage_SUB_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackages(castValue(value));
        }
    }

    static class CtType_SUPER_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtType_SUPER_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUPER_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperclass(castValue(value));
        }
    }

    static class CtTypeInformation_SUPER_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_SUPER_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUPER_TYPE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }
    }

    static class CtTargetedExpression_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtExpression<?>> {
        private CtTargetedExpression_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLabelledFlowBreak, java.lang.String> {
        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetLabel(castValue(value));
        }
    }

    static class CtConditional_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenExpression(castValue(value));
        }
    }

    static class CtIf_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenStatement(castValue(value));
        }
    }

    static class CtExecutable_THROWN_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> {
        private CtExecutable_THROWN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownTypes(castValue(value));
        }
    }

    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getResources())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setResources(castValue(value));
        }
    }

    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtArrayTypeReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComponentType(castValue(value));
        }
    }

    static class CtExecutableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtTypedElement_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypedElement_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtVariableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtVariableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference<?>> {
        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setActualTypeArguments(castValue(value));
        }
    }

    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember> {
        private CtType_TYPE_MEMBER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeMembers(castValue(value));
        }
    }

    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter> {
        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFormalCtTypeParameters(castValue(value));
        }
    }

    static class CtAnnotation_VALUE_RoleHandler extends spoon.reflect.meta.impl.MapHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression> {
        private CtAnnotation_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValues(castValue(value));
        }
    }

    static class CtEnum_VALUE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue<? extends java.lang.Object>> {
        private CtEnum_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setEnumValues(castValue(value));
        }
    }

    static class CtLiteral_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLiteral, java.lang.Object> {
        private CtLiteral_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtVariableAccess_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtVariableAccess, spoon.reflect.reference.CtVariableReference<?>> {
        private CtVariableAccess_VARIABLE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VARIABLE, spoon.reflect.code.CtVariableAccess.class, spoon.reflect.reference.CtVariableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    private ModelRoleHandlers() {
    }

    static final spoon.reflect.meta.RoleHandler[] roleHandlers = new spoon.reflect.meta.RoleHandler[]{ new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_BOUNDING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLocalVariable_IS_INFERRED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameter]Reference_IS_UPPER_R...> but was:<...
    static class Ct[WildcardReference_BOUNDING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtWildcardReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtWildcardReference_BOUNDING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.BOUNDING_TYPE, spoon.reflect.reference.CtWildcardReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBoundingType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBoundingType(castValue(value));
        }
    }

    static class CtSwitch_CASE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtCase<?>> {
        private CtSwitch_CASE_RoleHandler() {
            super(spoon.reflect.path.CtRole.CASE, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtCase.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCases())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCases(castValue(value));
        }
    }

    static class CtExpression_CAST_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtExpression, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtExpression_CAST_RoleHandler() {
            super(spoon.reflect.path.CtRole.CAST, spoon.reflect.code.CtExpression.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeCasts())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeCasts(castValue(value));
        }
    }

    static class CtTry_CATCH_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtCatch> {
        private CtTry_CATCH_RoleHandler() {
            super(spoon.reflect.path.CtRole.CATCH, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtCatch.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCatchers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCatchers(castValue(value));
        }
    }

    static class CtElement_COMMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtElement, spoon.reflect.code.CtComment> {
        private CtElement_COMMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT, spoon.reflect.declaration.CtElement.class, spoon.reflect.code.CtComment.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComments(castValue(value));
        }
    }

    static class CtComment_COMMENT_CONTENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, java.lang.String> {
        private CtComment_COMMENT_CONTENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_CONTENT, spoon.reflect.code.CtComment.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDocTag_COMMENT_CONTENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_COMMENT_CONTENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_CONTENT, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDoc_COMMENT_TAG_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtJavaDoc, spoon.reflect.code.CtJavaDocTag> {
        private CtJavaDoc_COMMENT_TAG_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_TAG, spoon.reflect.code.CtJavaDoc.class, spoon.reflect.code.CtJavaDocTag.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTags())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTags(castValue(value));
        }
    }

    static class CtComment_COMMENT_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, spoon.reflect.code.CtComment.CommentType> {
        private CtComment_COMMENT_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_TYPE, spoon.reflect.code.CtComment.class, spoon.reflect.code.CtComment.CommentType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCommentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCommentType(castValue(value));
        }
    }

    static class CtAssert_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtAssert_CONDITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONDITION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssertExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssertExpression(castValue(value));
        }
    }

    static class CtConditional_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtConditional_CONDITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONDITION, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtIf_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtIf_CONDITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONDITION, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtClass_CONSTRUCTOR_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtConstructor<?>> {
        private CtClass_CONSTRUCTOR_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONSTRUCTOR, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtConstructor.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getConstructors())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setConstructors(castValue(value));
        }
    }

    static class CtPackage_CONTAINED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtType<? extends java.lang.Object>> {
        private CtPackage_CONTAINED_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONTAINED_TYPE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypes(castValue(value));
        }
    }

    static class CtExecutableReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtExecutableReference_DECLARING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DECLARING_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtFieldReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtFieldReference_DECLARING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DECLARING_TYPE, spoon.reflect.reference.CtFieldReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtTypeReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtTypeReference_DECLARING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DECLARING_TYPE, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.code.CtExpression<?>> {
        private CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtAnnotationMethod.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtVariable_DEFAULT_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtVariable, spoon.reflect.code.CtExpression<?>> {
        private CtVariable_DEFAULT_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtVariable.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtNewArray_DIMENSION_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtNewArray_DIMENSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.DIMENSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDimensionExpressions())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDimensionExpressions(castValue(value));
        }
    }

    static class CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, spoon.reflect.code.CtJavaDocTag.TagType> {
        private CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DOCUMENTATION_TYPE, spoon.reflect.code.CtJavaDocTag.class, spoon.reflect.code.CtJavaDocTag.TagType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtConditional_ELSE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_ELSE_RoleHandler() {
            super(spoon.reflect.path.CtRole.ELSE, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseExpression(castValue(value));
        }
    }

    static class CtIf_ELSE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_ELSE_RoleHandler() {
            super(spoon.reflect.path.CtRole.ELSE, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseStatement(castValue(value));
        }
    }

    static class CtAbstractInvocation_EXECUTABLE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAbstractInvocation, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtAbstractInvocation_EXECUTABLE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXECUTABLE_REF, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXECUTABLE_REF, spoon.reflect.code.CtExecutableReferenceExpression.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtModule_EXPORTED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_EXPORTED_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPORTED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExportedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExportedPackages(castValue(value));
        }
    }

    static class CtArrayAccess_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtArrayAccess, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtArrayAccess_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtArrayAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getIndexExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIndexExpression(castValue(value));
        }
    }

    static class CtAssert_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<?>> {
        private CtAssert_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtCase_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCase, spoon.reflect.code.CtExpression<?>> {
        private CtCase_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtCase.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCaseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCaseExpression(castValue(value));
        }
    }

    static class CtDo_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtDo, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtDo_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtDo.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtFor_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtFor_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtForEach_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtForEach_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtLambda_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLambda, spoon.reflect.code.CtExpression<?>> {
        private CtLambda_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtLambda.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtNewArray_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtNewArray_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElements(castValue(value));
        }
    }

    static class CtReturn_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtReturn, spoon.reflect.code.CtExpression<?>> {
        private CtReturn_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtReturn.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReturnedExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReturnedExpression(castValue(value));
        }
    }

    static class CtSwitch_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtExpression<?>> {
        private CtSwitch_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSelector())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSelector(castValue(value));
        }
    }

    static class CtSynchronized_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSynchronized, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtSynchronized_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtThrow_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtThrow, spoon.reflect.code.CtExpression<? extends java.lang.Throwable>> {
        private CtThrow_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtThrow.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownExpression(castValue(value));
        }
    }

    static class CtUnaryOperator_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.CtExpression<?>> {
        private CtUnaryOperator_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOperand(castValue(value));
        }
    }

    static class CtWhile_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtWhile, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtWhile_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtWhile.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtType_FIELD_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtField<? extends java.lang.Object>> {
        private CtType_FIELD_RoleHandler() {
            super(spoon.reflect.path.CtRole.FIELD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtField.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFields())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFields(castValue(value));
        }
    }

    static class CtTry_FINALIZER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtBlock<? extends java.lang.Object>> {
        private CtTry_FINALIZER_RoleHandler() {
            super(spoon.reflect.path.CtRole.FINALIZER, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtBlock.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFinalizer())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinalizer(castValue(value));
        }
    }

    static class CtForEach_FOREACH_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtForEach_FOREACH_VARIABLE_RoleHandler() {
            super(spoon.reflect.path.CtRole.FOREACH_VARIABLE, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    static class CtFor_FOR_INIT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_INIT_RoleHandler() {
            super(spoon.reflect.path.CtRole.FOR_INIT, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForInit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForInit(castValue(value));
        }
    }

    static class CtFor_FOR_UPDATE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_UPDATE_RoleHandler() {
            super(spoon.reflect.path.CtRole.FOR_UPDATE, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForUpdate())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForUpdate(castValue(value));
        }
    }

    static class CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getImplementationTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplementationTypes(castValue(value));
        }
    }

    static class CtImport_IMPORT_REFERENCE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtImport, spoon.reflect.reference.CtReference> {
        private CtImport_IMPORT_REFERENCE_RoleHandler() {
            super(spoon.reflect.path.CtRole.IMPORT_REFERENCE, spoon.reflect.declaration.CtImport.class, spoon.reflect.reference.CtReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReference(castValue(value));
        }
    }

    static class CtType_INTERFACE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtType_INTERFACE_RoleHandler() {
            super(spoon.reflect.path.CtRole.INTERFACE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperInterfaces(castValue(value));
        }
    }

    static class CtTypeInformation_INTERFACE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_INTERFACE_RoleHandler() {
            super(spoon.reflect.path.CtRole.INTERFACE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }
    }

    static class CtMethod_IS_DEFAULT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtMethod, java.lang.Boolean> {
        private CtMethod_IS_DEFAULT_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_DEFAULT, spoon.reflect.declaration.CtMethod.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isDefaultMethod())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultMethod(castValue(value));
        }
    }

    static class CtFieldReference_IS_FINAL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_FINAL_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_FINAL, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isFinal())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinal(castValue(value));
        }
    }

    static class CtElement_IS_IMPLICIT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, java.lang.Boolean> {
        private CtElement_IS_IMPLICIT_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_IMPLICIT, spoon.reflect.declaration.CtElement.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isImplicit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplicit(castValue(value));
        }
    }

    static class CtLocalVariable_IS_INFERRED_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLocalVariable, java.lang.Boolean> {
        private CtLocalVariable_IS_INFERRED_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_INFERRED, spoon.reflect.code.CtLocalVariable.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isInferred())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setInferred(castValue(value));
        }
    }

    static class CtShadowable_IS_SHADOW_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtShadowable, java.lang.Boolean> {
        private CtShadowable_IS_SHADOW_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_SHADOW, spoon.reflect.declaration.CtShadowable.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isShadow())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setShadow(castValue(value));
        }
    }

    static class CtExecutableReference_IS_STATIC_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, java.lang.Boolean> {
        private CtExecutableReference_IS_STATIC_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_STATIC, spoon.reflect.reference.CtExecutableReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtFieldReference_IS_STATIC_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_STATIC_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_STATIC, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtWildcardReference_IS_UPPER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtWildcardReference, java.lang.Boolean> {
        private CtWildcardReference_IS_UPPER_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_UPPER, spoon.reflect.reference.CtWildcardReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isUpper())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUpper(castValue(value));
        }
    }

    static class CtParameter_IS_VARARGS_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtParameter, java.lang.Boolean> {
        private CtParameter_IS_VARARGS_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_VARARGS, spoon.reflect.declaration.CtParameter.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isVarArgs())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVarArgs(castValue(value));
        }
    }

    static class CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.JAVADOC_TAG_VALUE, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParam())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParam(castValue(value));
        }
    }

    static class CtStatement_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtStatement, java.lang.String> {
        private CtStatement_LABEL_RoleHandler() {
            super(spoon.reflect.path.CtRole.LABEL, spoon.reflect.code.CtStatement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLabel(castValue(value));
        }
    }

    static class CtBinaryOperator_LEFT_OPERAND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtBinaryOperator_LEFT_OPERAND_RoleHandler() {
            super(spoon.reflect.path.CtRole.LEFT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLeftHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLeftHandOperand(castValue(value));
        }
    }

    static class CtType_METHOD_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtMethod<? extends java.lang.Object>> {
        private CtType_METHOD_RoleHandler() {
            super(spoon.reflect.path.CtRole.METHOD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtMethod.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMethods())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMethods(castValue(value));
        }
    }

    static class CtModifiable_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModifiable, spoon.reflect.declaration.ModifierKind> {
        private CtModifiable_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtModifiable.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModifiers(castValue(value));
        }
    }

    static class CtModule_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, java.lang.Boolean> {
        private CtModule_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtModule.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenModule())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIsOpenModule(castValue(value));
        }
    }

    static class CtModuleRequirement_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> {
        private CtModuleRequirement_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtModuleRequirement.class, spoon.reflect.declaration.CtModuleRequirement.RequiresModifier.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiresModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiresModifiers(castValue(value));
        }
    }

    static class CtTypeInformation_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.declaration.ModifierKind> {
        private CtTypeInformation_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }
    }

    static class CtModule_MODULE_DIRECTIVE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleDirective> {
        private CtModule_MODULE_DIRECTIVE_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODULE_DIRECTIVE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleDirective.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleDirectives())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleDirectives(castValue(value));
        }
    }

    static class CtModuleRequirement_MODULE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.reference.CtModuleReference> {
        private CtModuleRequirement_MODULE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODULE_REF, spoon.reflect.declaration.CtModuleRequirement.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleReference(castValue(value));
        }
    }

    static class CtPackageExport_MODULE_REF_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtModuleReference> {
        private CtPackageExport_MODULE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODULE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetExport())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetExport(castValue(value));
        }
    }

    static class CtMultiTypedElement_MULTI_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtMultiTypedElement_MULTI_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.MULTI_TYPE, spoon.reflect.declaration.CtMultiTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMultiTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMultiTypes(castValue(value));
        }
    }

    static class CtNamedElement_NAME_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtNamedElement, java.lang.String> {
        private CtNamedElement_NAME_RoleHandler() {
            super(spoon.reflect.path.CtRole.NAME, spoon.reflect.declaration.CtNamedElement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtReference_NAME_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtReference, java.lang.String> {
        private CtReference_NAME_RoleHandler() {
            super(spoon.reflect.path.CtRole.NAME, spoon.reflect.reference.CtReference.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtNewClass_NESTED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtNewClass, spoon.reflect.declaration.CtClass<? extends java.lang.Object>> {
        private CtNewClass_NESTED_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.NESTED_TYPE, spoon.reflect.code.CtNewClass.class, spoon.reflect.declaration.CtClass.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousClass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnonymousClass(castValue(value));
        }
    }

    static class CtType_NESTED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtType<? extends java.lang.Object>> {
        private CtType_NESTED_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.NESTED_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getNestedTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setNestedTypes(castValue(value));
        }
    }

    static class CtModule_OPENED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_OPENED_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOpenedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackages(castValue(value));
        }
    }

    static class CtPackageExport_OPENED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, java.lang.Boolean> {
        private CtPackageExport_OPENED_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtPackageExport.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenedPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackage(castValue(value));
        }
    }

    static class CtBinaryOperator_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.BinaryOperatorKind> {
        private CtBinaryOperator_OPERATOR_KIND_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPERATOR_KIND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtOperatorAssignment_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.BinaryOperatorKind> {
        private CtOperatorAssignment_OPERATOR_KIND_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPERATOR_KIND, spoon.reflect.code.CtOperatorAssignment.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtUnaryOperator_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.UnaryOperatorKind> {
        private CtUnaryOperator_OPERATOR_KIND_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPERATOR_KIND, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.UnaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtPackageExport_PACKAGE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtPackageReference> {
        private CtPackageExport_PACKAGE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.PACKAGE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackageReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackageReference(castValue(value));
        }
    }

    static class CtTypeReference_PACKAGE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtPackageReference> {
        private CtTypeReference_PACKAGE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.PACKAGE_REF, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackage(castValue(value));
        }
    }

    static class CtCatch_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCatch, spoon.reflect.code.CtCatchVariable<? extends java.lang.Throwable>> {
        private CtCatch_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.PARAMETER, spoon.reflect.code.CtCatch.class, spoon.reflect.code.CtCatchVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameter())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameter(castValue(value));
        }
    }

    static class CtExecutable_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.declaration.CtParameter<? extends java.lang.Object>> {
        private CtExecutable_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.PARAMETER, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.declaration.CtParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameters(castValue(value));
        }
    }

    static class CtElement_POSITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, spoon.reflect.cu.SourcePosition> {
        private CtElement_POSITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.POSITION, spoon.reflect.declaration.CtElement.class, spoon.reflect.cu.SourcePosition.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPosition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPosition(castValue(value));
        }
    }

    static class CtModule_PROVIDED_SERVICE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtProvidedService> {
        private CtModule_PROVIDED_SERVICE_RoleHandler() {
            super(spoon.reflect.path.CtRole.PROVIDED_SERVICE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtProvidedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getProvidedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setProvidedServices(castValue(value));
        }
    }

    static class CtModule_REQUIRED_MODULE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleRequirement> {
        private CtModule_REQUIRED_MODULE_RoleHandler() {
            super(spoon.reflect.path.CtRole.REQUIRED_MODULE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleRequirement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiredModules())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiredModules(castValue(value));
        }
    }

    static class CtBinaryOperator_RIGHT_OPERAND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtBinaryOperator_RIGHT_OPERAND_RoleHandler() {
            super(spoon.reflect.path.CtRole.RIGHT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRightHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRightHandOperand(castValue(value));
        }
    }

    static class CtModule_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtUsedService> {
        private CtModule_SERVICE_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtUsedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getUsedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUsedServices(castValue(value));
        }
    }

    static class CtProvidedService_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_SERVICE_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtUsedService_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtUsedService, spoon.reflect.reference.CtTypeReference> {
        private CtUsedService_SERVICE_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtUsedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtCodeSnippet_SNIPPET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtCodeSnippet, java.lang.String> {
        private CtCodeSnippet_SNIPPET_RoleHandler() {
            super(spoon.reflect.path.CtRole.SNIPPET, spoon.reflect.declaration.CtCodeSnippet.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtStatementList_STATEMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtStatementList, spoon.reflect.code.CtStatement> {
        private CtStatementList_STATEMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.STATEMENT, spoon.reflect.code.CtStatementList.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getStatements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatements(castValue(value));
        }
    }

    static class CtModule_SUB_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackage> {
        private CtModule_SUB_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRootPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRootPackage(castValue(value));
        }
    }

    static class CtPackage_SUB_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtPackage> {
        private CtPackage_SUB_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackages(castValue(value));
        }
    }

    static class CtType_SUPER_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtType_SUPER_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUPER_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperclass(castValue(value));
        }
    }

    static class CtTypeInformation_SUPER_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_SUPER_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUPER_TYPE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }
    }

    static class CtTargetedExpression_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtExpression<?>> {
        private CtTargetedExpression_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLabelledFlowBreak, java.lang.String> {
        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetLabel(castValue(value));
        }
    }

    static class CtConditional_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenExpression(castValue(value));
        }
    }

    static class CtIf_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenStatement(castValue(value));
        }
    }

    static class CtExecutable_THROWN_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> {
        private CtExecutable_THROWN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownTypes(castValue(value));
        }
    }

    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getResources())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setResources(castValue(value));
        }
    }

    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtArrayTypeReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComponentType(castValue(value));
        }
    }

    static class CtExecutableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtTypedElement_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypedElement_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtVariableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtVariableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference<?>> {
        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setActualTypeArguments(castValue(value));
        }
    }

    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember> {
        private CtType_TYPE_MEMBER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeMembers(castValue(value));
        }
    }

    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter> {
        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFormalCtTypeParameters(castValue(value));
        }
    }

    static class CtAnnotation_VALUE_RoleHandler extends spoon.reflect.meta.impl.MapHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression> {
        private CtAnnotation_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValues(castValue(value));
        }
    }

    static class CtEnum_VALUE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue<? extends java.lang.Object>> {
        private CtEnum_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setEnumValues(castValue(value));
        }
    }

    static class CtLiteral_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLiteral, java.lang.Object> {
        private CtLiteral_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtVariableAccess_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtVariableAccess, spoon.reflect.reference.CtVariableReference<?>> {
        private CtVariableAccess_VARIABLE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VARIABLE, spoon.reflect.code.CtVariableAccess.class, spoon.reflect.reference.CtVariableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    private ModelRoleHandlers() {
    }

    static final spoon.reflect.meta.RoleHandler[] roleHandlers = new spoon.reflect.meta.RoleHandler[]{ new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWildcardReference_BOUNDING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLocalVariable_IS_INFERRED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWildcard]Reference_IS_UPPER_R...>
	at spoon.processing.CtGenerationTest.testGenerateRoleHandler(CtGenerationTest.java:194)

[INFO] Running spoon.MavenLauncherTest
[WARNING] Tests run: 7, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 86.525 s - in spoon.MavenLauncherTest
[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   CtGenerationTest.testGenerateRoleHandler:194 ModelRoleHandlers different expected:<...
    static class Ct[TypeParameterReference_BOUNDING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeParameterReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtTypeParameterReference_BOUNDING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.BOUNDING_TYPE, spoon.reflect.reference.CtTypeParameterReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBoundingType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBoundingType(castValue(value));
        }
    }

    static class CtSwitch_CASE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtCase<?>> {
        private CtSwitch_CASE_RoleHandler() {
            super(spoon.reflect.path.CtRole.CASE, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtCase.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCases())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCases(castValue(value));
        }
    }

    static class CtExpression_CAST_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtExpression, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtExpression_CAST_RoleHandler() {
            super(spoon.reflect.path.CtRole.CAST, spoon.reflect.code.CtExpression.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeCasts())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeCasts(castValue(value));
        }
    }

    static class CtTry_CATCH_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtCatch> {
        private CtTry_CATCH_RoleHandler() {
            super(spoon.reflect.path.CtRole.CATCH, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtCatch.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCatchers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCatchers(castValue(value));
        }
    }

    static class CtElement_COMMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtElement, spoon.reflect.code.CtComment> {
        private CtElement_COMMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT, spoon.reflect.declaration.CtElement.class, spoon.reflect.code.CtComment.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComments(castValue(value));
        }
    }

    static class CtComment_COMMENT_CONTENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, java.lang.String> {
        private CtComment_COMMENT_CONTENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_CONTENT, spoon.reflect.code.CtComment.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDocTag_COMMENT_CONTENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_COMMENT_CONTENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_CONTENT, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDoc_COMMENT_TAG_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtJavaDoc, spoon.reflect.code.CtJavaDocTag> {
        private CtJavaDoc_COMMENT_TAG_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_TAG, spoon.reflect.code.CtJavaDoc.class, spoon.reflect.code.CtJavaDocTag.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTags())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTags(castValue(value));
        }
    }

    static class CtComment_COMMENT_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, spoon.reflect.code.CtComment.CommentType> {
        private CtComment_COMMENT_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_TYPE, spoon.reflect.code.CtComment.class, spoon.reflect.code.CtComment.CommentType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCommentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCommentType(castValue(value));
        }
    }

    static class CtAssert_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtAssert_CONDITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONDITION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssertExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssertExpression(castValue(value));
        }
    }

    static class CtConditional_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtConditional_CONDITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONDITION, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtIf_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtIf_CONDITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONDITION, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtClass_CONSTRUCTOR_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtConstructor<?>> {
        private CtClass_CONSTRUCTOR_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONSTRUCTOR, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtConstructor.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getConstructors())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setConstructors(castValue(value));
        }
    }

    static class CtPackage_CONTAINED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtType<? extends java.lang.Object>> {
        private CtPackage_CONTAINED_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONTAINED_TYPE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypes(castValue(value));
        }
    }

    static class CtExecutableReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtExecutableReference_DECLARING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DECLARING_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtFieldReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtFieldReference_DECLARING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DECLARING_TYPE, spoon.reflect.reference.CtFieldReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtTypeReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtTypeReference_DECLARING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DECLARING_TYPE, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.code.CtExpression<?>> {
        private CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtAnnotationMethod.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtVariable_DEFAULT_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtVariable, spoon.reflect.code.CtExpression<?>> {
        private CtVariable_DEFAULT_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtVariable.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtNewArray_DIMENSION_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtNewArray_DIMENSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.DIMENSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDimensionExpressions())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDimensionExpressions(castValue(value));
        }
    }

    static class CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, spoon.reflect.code.CtJavaDocTag.TagType> {
        private CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DOCUMENTATION_TYPE, spoon.reflect.code.CtJavaDocTag.class, spoon.reflect.code.CtJavaDocTag.TagType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtConditional_ELSE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_ELSE_RoleHandler() {
            super(spoon.reflect.path.CtRole.ELSE, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseExpression(castValue(value));
        }
    }

    static class CtIf_ELSE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_ELSE_RoleHandler() {
            super(spoon.reflect.path.CtRole.ELSE, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseStatement(castValue(value));
        }
    }

    static class CtAbstractInvocation_EXECUTABLE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAbstractInvocation, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtAbstractInvocation_EXECUTABLE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXECUTABLE_REF, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXECUTABLE_REF, spoon.reflect.code.CtExecutableReferenceExpression.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtModule_EXPORTED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_EXPORTED_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPORTED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExportedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExportedPackages(castValue(value));
        }
    }

    static class CtArrayAccess_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtArrayAccess, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtArrayAccess_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtArrayAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getIndexExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIndexExpression(castValue(value));
        }
    }

    static class CtAssert_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<?>> {
        private CtAssert_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtCase_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCase, spoon.reflect.code.CtExpression<?>> {
        private CtCase_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtCase.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCaseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCaseExpression(castValue(value));
        }
    }

    static class CtDo_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtDo, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtDo_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtDo.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtFor_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtFor_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtForEach_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtForEach_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtLambda_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLambda, spoon.reflect.code.CtExpression<?>> {
        private CtLambda_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtLambda.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtNewArray_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtNewArray_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElements(castValue(value));
        }
    }

    static class CtReturn_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtReturn, spoon.reflect.code.CtExpression<?>> {
        private CtReturn_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtReturn.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReturnedExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReturnedExpression(castValue(value));
        }
    }

    static class CtSwitch_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtExpression<?>> {
        private CtSwitch_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSelector())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSelector(castValue(value));
        }
    }

    static class CtSynchronized_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSynchronized, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtSynchronized_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtThrow_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtThrow, spoon.reflect.code.CtExpression<? extends java.lang.Throwable>> {
        private CtThrow_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtThrow.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownExpression(castValue(value));
        }
    }

    static class CtUnaryOperator_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.CtExpression<?>> {
        private CtUnaryOperator_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOperand(castValue(value));
        }
    }

    static class CtWhile_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtWhile, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtWhile_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtWhile.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtType_FIELD_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtField<? extends java.lang.Object>> {
        private CtType_FIELD_RoleHandler() {
            super(spoon.reflect.path.CtRole.FIELD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtField.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFields())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFields(castValue(value));
        }
    }

    static class CtTry_FINALIZER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtBlock<? extends java.lang.Object>> {
        private CtTry_FINALIZER_RoleHandler() {
            super(spoon.reflect.path.CtRole.FINALIZER, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtBlock.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFinalizer())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinalizer(castValue(value));
        }
    }

    static class CtForEach_FOREACH_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtForEach_FOREACH_VARIABLE_RoleHandler() {
            super(spoon.reflect.path.CtRole.FOREACH_VARIABLE, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    static class CtFor_FOR_INIT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_INIT_RoleHandler() {
            super(spoon.reflect.path.CtRole.FOR_INIT, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForInit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForInit(castValue(value));
        }
    }

    static class CtFor_FOR_UPDATE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_UPDATE_RoleHandler() {
            super(spoon.reflect.path.CtRole.FOR_UPDATE, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForUpdate())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForUpdate(castValue(value));
        }
    }

    static class CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getImplementationTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplementationTypes(castValue(value));
        }
    }

    static class CtImport_IMPORT_REFERENCE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtImport, spoon.reflect.reference.CtReference> {
        private CtImport_IMPORT_REFERENCE_RoleHandler() {
            super(spoon.reflect.path.CtRole.IMPORT_REFERENCE, spoon.reflect.declaration.CtImport.class, spoon.reflect.reference.CtReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReference(castValue(value));
        }
    }

    static class CtType_INTERFACE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtType_INTERFACE_RoleHandler() {
            super(spoon.reflect.path.CtRole.INTERFACE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperInterfaces(castValue(value));
        }
    }

    static class CtTypeInformation_INTERFACE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_INTERFACE_RoleHandler() {
            super(spoon.reflect.path.CtRole.INTERFACE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }
    }

    static class CtMethod_IS_DEFAULT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtMethod, java.lang.Boolean> {
        private CtMethod_IS_DEFAULT_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_DEFAULT, spoon.reflect.declaration.CtMethod.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isDefaultMethod())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultMethod(castValue(value));
        }
    }

    static class CtFieldReference_IS_FINAL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_FINAL_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_FINAL, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isFinal())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinal(castValue(value));
        }
    }

    static class CtElement_IS_IMPLICIT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, java.lang.Boolean> {
        private CtElement_IS_IMPLICIT_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_IMPLICIT, spoon.reflect.declaration.CtElement.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isImplicit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplicit(castValue(value));
        }
    }

    static class CtLocalVariable_IS_INFERRED_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLocalVariable, java.lang.Boolean> {
        private CtLocalVariable_IS_INFERRED_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_INFERRED, spoon.reflect.code.CtLocalVariable.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isInferred())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setInferred(castValue(value));
        }
    }

    static class CtShadowable_IS_SHADOW_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtShadowable, java.lang.Boolean> {
        private CtShadowable_IS_SHADOW_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_SHADOW, spoon.reflect.declaration.CtShadowable.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isShadow())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setShadow(castValue(value));
        }
    }

    static class CtExecutableReference_IS_STATIC_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, java.lang.Boolean> {
        private CtExecutableReference_IS_STATIC_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_STATIC, spoon.reflect.reference.CtExecutableReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtFieldReference_IS_STATIC_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_STATIC_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_STATIC, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtTypeParameterReference_IS_UPPER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeParameterReference, java.lang.Boolean> {
        private CtTypeParameterReference_IS_UPPER_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_UPPER, spoon.reflect.reference.CtTypeParameterReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isUpper())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUpper(castValue(value));
        }
    }

    static class CtParameter_IS_VARARGS_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtParameter, java.lang.Boolean> {
        private CtParameter_IS_VARARGS_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_VARARGS, spoon.reflect.declaration.CtParameter.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isVarArgs())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVarArgs(castValue(value));
        }
    }

    static class CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.JAVADOC_TAG_VALUE, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParam())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParam(castValue(value));
        }
    }

    static class CtStatement_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtStatement, java.lang.String> {
        private CtStatement_LABEL_RoleHandler() {
            super(spoon.reflect.path.CtRole.LABEL, spoon.reflect.code.CtStatement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLabel(castValue(value));
        }
    }

    static class CtBinaryOperator_LEFT_OPERAND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtBinaryOperator_LEFT_OPERAND_RoleHandler() {
            super(spoon.reflect.path.CtRole.LEFT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLeftHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLeftHandOperand(castValue(value));
        }
    }

    static class CtType_METHOD_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtMethod<? extends java.lang.Object>> {
        private CtType_METHOD_RoleHandler() {
            super(spoon.reflect.path.CtRole.METHOD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtMethod.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMethods())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMethods(castValue(value));
        }
    }

    static class CtModifiable_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModifiable, spoon.reflect.declaration.ModifierKind> {
        private CtModifiable_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtModifiable.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModifiers(castValue(value));
        }
    }

    static class CtModule_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, java.lang.Boolean> {
        private CtModule_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtModule.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenModule())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIsOpenModule(castValue(value));
        }
    }

    static class CtModuleRequirement_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> {
        private CtModuleRequirement_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtModuleRequirement.class, spoon.reflect.declaration.CtModuleRequirement.RequiresModifier.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiresModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiresModifiers(castValue(value));
        }
    }

    static class CtTypeInformation_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.declaration.ModifierKind> {
        private CtTypeInformation_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }
    }

    static class CtModule_MODULE_DIRECTIVE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleDirective> {
        private CtModule_MODULE_DIRECTIVE_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODULE_DIRECTIVE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleDirective.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleDirectives())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleDirectives(castValue(value));
        }
    }

    static class CtModuleRequirement_MODULE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.reference.CtModuleReference> {
        private CtModuleRequirement_MODULE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODULE_REF, spoon.reflect.declaration.CtModuleRequirement.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleReference(castValue(value));
        }
    }

    static class CtPackageExport_MODULE_REF_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtModuleReference> {
        private CtPackageExport_MODULE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODULE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetExport())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetExport(castValue(value));
        }
    }

    static class CtMultiTypedElement_MULTI_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtMultiTypedElement_MULTI_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.MULTI_TYPE, spoon.reflect.declaration.CtMultiTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMultiTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMultiTypes(castValue(value));
        }
    }

    static class CtNamedElement_NAME_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtNamedElement, java.lang.String> {
        private CtNamedElement_NAME_RoleHandler() {
            super(spoon.reflect.path.CtRole.NAME, spoon.reflect.declaration.CtNamedElement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtReference_NAME_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtReference, java.lang.String> {
        private CtReference_NAME_RoleHandler() {
            super(spoon.reflect.path.CtRole.NAME, spoon.reflect.reference.CtReference.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtNewClass_NESTED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtNewClass, spoon.reflect.declaration.CtClass<? extends java.lang.Object>> {
        private CtNewClass_NESTED_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.NESTED_TYPE, spoon.reflect.code.CtNewClass.class, spoon.reflect.declaration.CtClass.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousClass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnonymousClass(castValue(value));
        }
    }

    static class CtType_NESTED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtType<? extends java.lang.Object>> {
        private CtType_NESTED_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.NESTED_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getNestedTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setNestedTypes(castValue(value));
        }
    }

    static class CtModule_OPENED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_OPENED_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOpenedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackages(castValue(value));
        }
    }

    static class CtPackageExport_OPENED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, java.lang.Boolean> {
        private CtPackageExport_OPENED_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtPackageExport.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenedPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackage(castValue(value));
        }
    }

    static class CtBinaryOperator_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.BinaryOperatorKind> {
        private CtBinaryOperator_OPERATOR_KIND_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPERATOR_KIND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtOperatorAssignment_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.BinaryOperatorKind> {
        private CtOperatorAssignment_OPERATOR_KIND_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPERATOR_KIND, spoon.reflect.code.CtOperatorAssignment.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtUnaryOperator_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.UnaryOperatorKind> {
        private CtUnaryOperator_OPERATOR_KIND_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPERATOR_KIND, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.UnaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtPackageExport_PACKAGE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtPackageReference> {
        private CtPackageExport_PACKAGE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.PACKAGE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackageReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackageReference(castValue(value));
        }
    }

    static class CtTypeReference_PACKAGE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtPackageReference> {
        private CtTypeReference_PACKAGE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.PACKAGE_REF, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackage(castValue(value));
        }
    }

    static class CtCatch_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCatch, spoon.reflect.code.CtCatchVariable<? extends java.lang.Throwable>> {
        private CtCatch_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.PARAMETER, spoon.reflect.code.CtCatch.class, spoon.reflect.code.CtCatchVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameter())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameter(castValue(value));
        }
    }

    static class CtExecutable_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.declaration.CtParameter<? extends java.lang.Object>> {
        private CtExecutable_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.PARAMETER, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.declaration.CtParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameters(castValue(value));
        }
    }

    static class CtElement_POSITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, spoon.reflect.cu.SourcePosition> {
        private CtElement_POSITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.POSITION, spoon.reflect.declaration.CtElement.class, spoon.reflect.cu.SourcePosition.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPosition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPosition(castValue(value));
        }
    }

    static class CtModule_PROVIDED_SERVICE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtProvidedService> {
        private CtModule_PROVIDED_SERVICE_RoleHandler() {
            super(spoon.reflect.path.CtRole.PROVIDED_SERVICE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtProvidedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getProvidedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setProvidedServices(castValue(value));
        }
    }

    static class CtModule_REQUIRED_MODULE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleRequirement> {
        private CtModule_REQUIRED_MODULE_RoleHandler() {
            super(spoon.reflect.path.CtRole.REQUIRED_MODULE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleRequirement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiredModules())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiredModules(castValue(value));
        }
    }

    static class CtBinaryOperator_RIGHT_OPERAND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtBinaryOperator_RIGHT_OPERAND_RoleHandler() {
            super(spoon.reflect.path.CtRole.RIGHT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRightHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRightHandOperand(castValue(value));
        }
    }

    static class CtModule_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtUsedService> {
        private CtModule_SERVICE_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtUsedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getUsedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUsedServices(castValue(value));
        }
    }

    static class CtProvidedService_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_SERVICE_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtUsedService_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtUsedService, spoon.reflect.reference.CtTypeReference> {
        private CtUsedService_SERVICE_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtUsedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtCodeSnippet_SNIPPET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtCodeSnippet, java.lang.String> {
        private CtCodeSnippet_SNIPPET_RoleHandler() {
            super(spoon.reflect.path.CtRole.SNIPPET, spoon.reflect.declaration.CtCodeSnippet.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtStatementList_STATEMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtStatementList, spoon.reflect.code.CtStatement> {
        private CtStatementList_STATEMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.STATEMENT, spoon.reflect.code.CtStatementList.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getStatements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatements(castValue(value));
        }
    }

    static class CtModule_SUB_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackage> {
        private CtModule_SUB_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRootPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRootPackage(castValue(value));
        }
    }

    static class CtPackage_SUB_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtPackage> {
        private CtPackage_SUB_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackages(castValue(value));
        }
    }

    static class CtType_SUPER_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtType_SUPER_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUPER_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperclass(castValue(value));
        }
    }

    static class CtTypeInformation_SUPER_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_SUPER_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUPER_TYPE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }
    }

    static class CtTargetedExpression_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtExpression<?>> {
        private CtTargetedExpression_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLabelledFlowBreak, java.lang.String> {
        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetLabel(castValue(value));
        }
    }

    static class CtConditional_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenExpression(castValue(value));
        }
    }

    static class CtIf_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenStatement(castValue(value));
        }
    }

    static class CtExecutable_THROWN_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> {
        private CtExecutable_THROWN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownTypes(castValue(value));
        }
    }

    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getResources())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setResources(castValue(value));
        }
    }

    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtArrayTypeReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComponentType(castValue(value));
        }
    }

    static class CtExecutableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtTypedElement_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypedElement_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtVariableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtVariableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference<?>> {
        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setActualTypeArguments(castValue(value));
        }
    }

    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember> {
        private CtType_TYPE_MEMBER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeMembers(castValue(value));
        }
    }

    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter> {
        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFormalCtTypeParameters(castValue(value));
        }
    }

    static class CtAnnotation_VALUE_RoleHandler extends spoon.reflect.meta.impl.MapHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression> {
        private CtAnnotation_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValues(castValue(value));
        }
    }

    static class CtEnum_VALUE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue<? extends java.lang.Object>> {
        private CtEnum_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setEnumValues(castValue(value));
        }
    }

    static class CtLiteral_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLiteral, java.lang.Object> {
        private CtLiteral_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtVariableAccess_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtVariableAccess, spoon.reflect.reference.CtVariableReference<?>> {
        private CtVariableAccess_VARIABLE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VARIABLE, spoon.reflect.code.CtVariableAccess.class, spoon.reflect.reference.CtVariableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    private ModelRoleHandlers() {
    }

    static final spoon.reflect.meta.RoleHandler[] roleHandlers = new spoon.reflect.meta.RoleHandler[]{ new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_BOUNDING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLocalVariable_IS_INFERRED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameter]Reference_IS_UPPER_R...> but was:<...
    static class Ct[WildcardReference_BOUNDING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtWildcardReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtWildcardReference_BOUNDING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.BOUNDING_TYPE, spoon.reflect.reference.CtWildcardReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getBoundingType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setBoundingType(castValue(value));
        }
    }

    static class CtSwitch_CASE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtCase<?>> {
        private CtSwitch_CASE_RoleHandler() {
            super(spoon.reflect.path.CtRole.CASE, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtCase.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCases())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCases(castValue(value));
        }
    }

    static class CtExpression_CAST_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtExpression, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtExpression_CAST_RoleHandler() {
            super(spoon.reflect.path.CtRole.CAST, spoon.reflect.code.CtExpression.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeCasts())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeCasts(castValue(value));
        }
    }

    static class CtTry_CATCH_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtCatch> {
        private CtTry_CATCH_RoleHandler() {
            super(spoon.reflect.path.CtRole.CATCH, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtCatch.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCatchers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCatchers(castValue(value));
        }
    }

    static class CtElement_COMMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtElement, spoon.reflect.code.CtComment> {
        private CtElement_COMMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT, spoon.reflect.declaration.CtElement.class, spoon.reflect.code.CtComment.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComments(castValue(value));
        }
    }

    static class CtComment_COMMENT_CONTENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, java.lang.String> {
        private CtComment_COMMENT_CONTENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_CONTENT, spoon.reflect.code.CtComment.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDocTag_COMMENT_CONTENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_COMMENT_CONTENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_CONTENT, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getContent())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setContent(castValue(value));
        }
    }

    static class CtJavaDoc_COMMENT_TAG_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtJavaDoc, spoon.reflect.code.CtJavaDocTag> {
        private CtJavaDoc_COMMENT_TAG_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_TAG, spoon.reflect.code.CtJavaDoc.class, spoon.reflect.code.CtJavaDocTag.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTags())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTags(castValue(value));
        }
    }

    static class CtComment_COMMENT_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtComment, spoon.reflect.code.CtComment.CommentType> {
        private CtComment_COMMENT_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.COMMENT_TYPE, spoon.reflect.code.CtComment.class, spoon.reflect.code.CtComment.CommentType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCommentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCommentType(castValue(value));
        }
    }

    static class CtAssert_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtAssert_CONDITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONDITION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAssertExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAssertExpression(castValue(value));
        }
    }

    static class CtConditional_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtConditional_CONDITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONDITION, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtIf_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtIf_CONDITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONDITION, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCondition(castValue(value));
        }
    }

    static class CtClass_CONSTRUCTOR_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtConstructor<?>> {
        private CtClass_CONSTRUCTOR_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONSTRUCTOR, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtConstructor.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getConstructors())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setConstructors(castValue(value));
        }
    }

    static class CtPackage_CONTAINED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtType<? extends java.lang.Object>> {
        private CtPackage_CONTAINED_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.CONTAINED_TYPE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypes(castValue(value));
        }
    }

    static class CtExecutableReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtExecutableReference_DECLARING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DECLARING_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtFieldReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtFieldReference_DECLARING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DECLARING_TYPE, spoon.reflect.reference.CtFieldReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtTypeReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtTypeReference_DECLARING_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DECLARING_TYPE, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDeclaringType(castValue(value));
        }
    }

    static class CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.code.CtExpression<?>> {
        private CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtAnnotationMethod.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtVariable_DEFAULT_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtVariable, spoon.reflect.code.CtExpression<?>> {
        private CtVariable_DEFAULT_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtVariable.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultExpression(castValue(value));
        }
    }

    static class CtNewArray_DIMENSION_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtNewArray_DIMENSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.DIMENSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getDimensionExpressions())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDimensionExpressions(castValue(value));
        }
    }

    static class CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, spoon.reflect.code.CtJavaDocTag.TagType> {
        private CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.DOCUMENTATION_TYPE, spoon.reflect.code.CtJavaDocTag.class, spoon.reflect.code.CtJavaDocTag.TagType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtConditional_ELSE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_ELSE_RoleHandler() {
            super(spoon.reflect.path.CtRole.ELSE, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseExpression(castValue(value));
        }
    }

    static class CtIf_ELSE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_ELSE_RoleHandler() {
            super(spoon.reflect.path.CtRole.ELSE, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElseStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElseStatement(castValue(value));
        }
    }

    static class CtAbstractInvocation_EXECUTABLE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAbstractInvocation, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtAbstractInvocation_EXECUTABLE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXECUTABLE_REF, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtExecutableReference<?>> {
        private CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXECUTABLE_REF, spoon.reflect.code.CtExecutableReferenceExpression.class, spoon.reflect.reference.CtExecutableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExecutable(castValue(value));
        }
    }

    static class CtModule_EXPORTED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_EXPORTED_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPORTED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExportedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExportedPackages(castValue(value));
        }
    }

    static class CtArrayAccess_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtArrayAccess, spoon.reflect.code.CtExpression<java.lang.Integer>> {
        private CtArrayAccess_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtArrayAccess.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getIndexExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIndexExpression(castValue(value));
        }
    }

    static class CtAssert_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression<?>> {
        private CtAssert_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtCase_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCase, spoon.reflect.code.CtExpression<?>> {
        private CtCase_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtCase.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getCaseExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setCaseExpression(castValue(value));
        }
    }

    static class CtDo_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtDo, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtDo_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtDo.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtFor_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtFor_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtForEach_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtForEach_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtLambda_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLambda, spoon.reflect.code.CtExpression<?>> {
        private CtLambda_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtLambda.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtNewArray_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtNewArray_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getElements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setElements(castValue(value));
        }
    }

    static class CtReturn_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtReturn, spoon.reflect.code.CtExpression<?>> {
        private CtReturn_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtReturn.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReturnedExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReturnedExpression(castValue(value));
        }
    }

    static class CtSwitch_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSwitch, spoon.reflect.code.CtExpression<?>> {
        private CtSwitch_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSelector())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSelector(castValue(value));
        }
    }

    static class CtSynchronized_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtSynchronized, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtSynchronized_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setExpression(castValue(value));
        }
    }

    static class CtThrow_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtThrow, spoon.reflect.code.CtExpression<? extends java.lang.Throwable>> {
        private CtThrow_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtThrow.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownExpression(castValue(value));
        }
    }

    static class CtUnaryOperator_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.CtExpression<?>> {
        private CtUnaryOperator_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOperand(castValue(value));
        }
    }

    static class CtWhile_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtWhile, spoon.reflect.code.CtExpression<java.lang.Boolean>> {
        private CtWhile_EXPRESSION_RoleHandler() {
            super(spoon.reflect.path.CtRole.EXPRESSION, spoon.reflect.code.CtWhile.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLoopingExpression(castValue(value));
        }
    }

    static class CtType_FIELD_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtField<? extends java.lang.Object>> {
        private CtType_FIELD_RoleHandler() {
            super(spoon.reflect.path.CtRole.FIELD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtField.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFields())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFields(castValue(value));
        }
    }

    static class CtTry_FINALIZER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTry, spoon.reflect.code.CtBlock<? extends java.lang.Object>> {
        private CtTry_FINALIZER_RoleHandler() {
            super(spoon.reflect.path.CtRole.FINALIZER, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtBlock.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFinalizer())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinalizer(castValue(value));
        }
    }

    static class CtForEach_FOREACH_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtForEach, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtForEach_FOREACH_VARIABLE_RoleHandler() {
            super(spoon.reflect.path.CtRole.FOREACH_VARIABLE, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    static class CtFor_FOR_INIT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_INIT_RoleHandler() {
            super(spoon.reflect.path.CtRole.FOR_INIT, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForInit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForInit(castValue(value));
        }
    }

    static class CtFor_FOR_UPDATE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtFor, spoon.reflect.code.CtStatement> {
        private CtFor_FOR_UPDATE_RoleHandler() {
            super(spoon.reflect.path.CtRole.FOR_UPDATE, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getForUpdate())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setForUpdate(castValue(value));
        }
    }

    static class CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getImplementationTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplementationTypes(castValue(value));
        }
    }

    static class CtImport_IMPORT_REFERENCE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtImport, spoon.reflect.reference.CtReference> {
        private CtImport_IMPORT_REFERENCE_RoleHandler() {
            super(spoon.reflect.path.CtRole.IMPORT_REFERENCE, spoon.reflect.declaration.CtImport.class, spoon.reflect.reference.CtReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setReference(castValue(value));
        }
    }

    static class CtType_INTERFACE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtType_INTERFACE_RoleHandler() {
            super(spoon.reflect.path.CtRole.INTERFACE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperInterfaces(castValue(value));
        }
    }

    static class CtTypeInformation_INTERFACE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_INTERFACE_RoleHandler() {
            super(spoon.reflect.path.CtRole.INTERFACE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));
        }
    }

    static class CtMethod_IS_DEFAULT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtMethod, java.lang.Boolean> {
        private CtMethod_IS_DEFAULT_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_DEFAULT, spoon.reflect.declaration.CtMethod.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isDefaultMethod())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setDefaultMethod(castValue(value));
        }
    }

    static class CtFieldReference_IS_FINAL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_FINAL_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_FINAL, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isFinal())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFinal(castValue(value));
        }
    }

    static class CtElement_IS_IMPLICIT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, java.lang.Boolean> {
        private CtElement_IS_IMPLICIT_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_IMPLICIT, spoon.reflect.declaration.CtElement.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isImplicit())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setImplicit(castValue(value));
        }
    }

    static class CtLocalVariable_IS_INFERRED_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLocalVariable, java.lang.Boolean> {
        private CtLocalVariable_IS_INFERRED_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_INFERRED, spoon.reflect.code.CtLocalVariable.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isInferred())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setInferred(castValue(value));
        }
    }

    static class CtShadowable_IS_SHADOW_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtShadowable, java.lang.Boolean> {
        private CtShadowable_IS_SHADOW_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_SHADOW, spoon.reflect.declaration.CtShadowable.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isShadow())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setShadow(castValue(value));
        }
    }

    static class CtExecutableReference_IS_STATIC_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, java.lang.Boolean> {
        private CtExecutableReference_IS_STATIC_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_STATIC, spoon.reflect.reference.CtExecutableReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtFieldReference_IS_STATIC_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtFieldReference, java.lang.Boolean> {
        private CtFieldReference_IS_STATIC_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_STATIC, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatic(castValue(value));
        }
    }

    static class CtWildcardReference_IS_UPPER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtWildcardReference, java.lang.Boolean> {
        private CtWildcardReference_IS_UPPER_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_UPPER, spoon.reflect.reference.CtWildcardReference.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isUpper())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUpper(castValue(value));
        }
    }

    static class CtParameter_IS_VARARGS_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtParameter, java.lang.Boolean> {
        private CtParameter_IS_VARARGS_RoleHandler() {
            super(spoon.reflect.path.CtRole.IS_VARARGS, spoon.reflect.declaration.CtParameter.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isVarArgs())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVarArgs(castValue(value));
        }
    }

    static class CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtJavaDocTag, java.lang.String> {
        private CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.JAVADOC_TAG_VALUE, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParam())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParam(castValue(value));
        }
    }

    static class CtStatement_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtStatement, java.lang.String> {
        private CtStatement_LABEL_RoleHandler() {
            super(spoon.reflect.path.CtRole.LABEL, spoon.reflect.code.CtStatement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLabel(castValue(value));
        }
    }

    static class CtBinaryOperator_LEFT_OPERAND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtBinaryOperator_LEFT_OPERAND_RoleHandler() {
            super(spoon.reflect.path.CtRole.LEFT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getLeftHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setLeftHandOperand(castValue(value));
        }
    }

    static class CtType_METHOD_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtMethod<? extends java.lang.Object>> {
        private CtType_METHOD_RoleHandler() {
            super(spoon.reflect.path.CtRole.METHOD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtMethod.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMethods())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMethods(castValue(value));
        }
    }

    static class CtModifiable_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModifiable, spoon.reflect.declaration.ModifierKind> {
        private CtModifiable_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtModifiable.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModifiers(castValue(value));
        }
    }

    static class CtModule_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, java.lang.Boolean> {
        private CtModule_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtModule.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenModule())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setIsOpenModule(castValue(value));
        }
    }

    static class CtModuleRequirement_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> {
        private CtModuleRequirement_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtModuleRequirement.class, spoon.reflect.declaration.CtModuleRequirement.RequiresModifier.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiresModifiers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiresModifiers(castValue(value));
        }
    }

    static class CtTypeInformation_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.declaration.ModifierKind> {
        private CtTypeInformation_MODIFIER_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODIFIER, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.declaration.ModifierKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));
        }
    }

    static class CtModule_MODULE_DIRECTIVE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleDirective> {
        private CtModule_MODULE_DIRECTIVE_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODULE_DIRECTIVE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleDirective.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleDirectives())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleDirectives(castValue(value));
        }
    }

    static class CtModuleRequirement_MODULE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.reference.CtModuleReference> {
        private CtModuleRequirement_MODULE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODULE_REF, spoon.reflect.declaration.CtModuleRequirement.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getModuleReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setModuleReference(castValue(value));
        }
    }

    static class CtPackageExport_MODULE_REF_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtModuleReference> {
        private CtPackageExport_MODULE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.MODULE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtModuleReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetExport())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetExport(castValue(value));
        }
    }

    static class CtMultiTypedElement_MULTI_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtMultiTypedElement_MULTI_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.MULTI_TYPE, spoon.reflect.declaration.CtMultiTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getMultiTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setMultiTypes(castValue(value));
        }
    }

    static class CtNamedElement_NAME_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtNamedElement, java.lang.String> {
        private CtNamedElement_NAME_RoleHandler() {
            super(spoon.reflect.path.CtRole.NAME, spoon.reflect.declaration.CtNamedElement.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtReference_NAME_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtReference, java.lang.String> {
        private CtReference_NAME_RoleHandler() {
            super(spoon.reflect.path.CtRole.NAME, spoon.reflect.reference.CtReference.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSimpleName(castValue(value));
        }
    }

    static class CtNewClass_NESTED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtNewClass, spoon.reflect.declaration.CtClass<? extends java.lang.Object>> {
        private CtNewClass_NESTED_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.NESTED_TYPE, spoon.reflect.code.CtNewClass.class, spoon.reflect.declaration.CtClass.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousClass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setAnonymousClass(castValue(value));
        }
    }

    static class CtType_NESTED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtType<? extends java.lang.Object>> {
        private CtType_NESTED_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.NESTED_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtType.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getNestedTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setNestedTypes(castValue(value));
        }
    }

    static class CtModule_OPENED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport> {
        private CtModule_OPENED_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getOpenedPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackages(castValue(value));
        }
    }

    static class CtPackageExport_OPENED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, java.lang.Boolean> {
        private CtPackageExport_OPENED_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtPackageExport.class, java.lang.Boolean.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).isOpenedPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setOpenedPackage(castValue(value));
        }
    }

    static class CtBinaryOperator_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.BinaryOperatorKind> {
        private CtBinaryOperator_OPERATOR_KIND_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPERATOR_KIND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtOperatorAssignment_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.BinaryOperatorKind> {
        private CtOperatorAssignment_OPERATOR_KIND_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPERATOR_KIND, spoon.reflect.code.CtOperatorAssignment.class, spoon.reflect.code.BinaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtUnaryOperator_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtUnaryOperator, spoon.reflect.code.UnaryOperatorKind> {
        private CtUnaryOperator_OPERATOR_KIND_RoleHandler() {
            super(spoon.reflect.path.CtRole.OPERATOR_KIND, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.UnaryOperatorKind.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getKind())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setKind(castValue(value));
        }
    }

    static class CtPackageExport_PACKAGE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtPackageReference> {
        private CtPackageExport_PACKAGE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.PACKAGE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackageReference())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackageReference(castValue(value));
        }
    }

    static class CtTypeReference_PACKAGE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtPackageReference> {
        private CtTypeReference_PACKAGE_REF_RoleHandler() {
            super(spoon.reflect.path.CtRole.PACKAGE_REF, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtPackageReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackage(castValue(value));
        }
    }

    static class CtCatch_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtCatch, spoon.reflect.code.CtCatchVariable<? extends java.lang.Throwable>> {
        private CtCatch_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.PARAMETER, spoon.reflect.code.CtCatch.class, spoon.reflect.code.CtCatchVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameter())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameter(castValue(value));
        }
    }

    static class CtExecutable_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.declaration.CtParameter<? extends java.lang.Object>> {
        private CtExecutable_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.PARAMETER, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.declaration.CtParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setParameters(castValue(value));
        }
    }

    static class CtElement_POSITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtElement, spoon.reflect.cu.SourcePosition> {
        private CtElement_POSITION_RoleHandler() {
            super(spoon.reflect.path.CtRole.POSITION, spoon.reflect.declaration.CtElement.class, spoon.reflect.cu.SourcePosition.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPosition())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPosition(castValue(value));
        }
    }

    static class CtModule_PROVIDED_SERVICE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtProvidedService> {
        private CtModule_PROVIDED_SERVICE_RoleHandler() {
            super(spoon.reflect.path.CtRole.PROVIDED_SERVICE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtProvidedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getProvidedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setProvidedServices(castValue(value));
        }
    }

    static class CtModule_REQUIRED_MODULE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleRequirement> {
        private CtModule_REQUIRED_MODULE_RoleHandler() {
            super(spoon.reflect.path.CtRole.REQUIRED_MODULE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleRequirement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRequiredModules())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRequiredModules(castValue(value));
        }
    }

    static class CtBinaryOperator_RIGHT_OPERAND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression<? extends java.lang.Object>> {
        private CtBinaryOperator_RIGHT_OPERAND_RoleHandler() {
            super(spoon.reflect.path.CtRole.RIGHT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRightHandOperand())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRightHandOperand(castValue(value));
        }
    }

    static class CtModule_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtUsedService> {
        private CtModule_SERVICE_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtUsedService.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getUsedServices())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setUsedServices(castValue(value));
        }
    }

    static class CtProvidedService_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference> {
        private CtProvidedService_SERVICE_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtUsedService_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtUsedService, spoon.reflect.reference.CtTypeReference> {
        private CtUsedService_SERVICE_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtUsedService.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setServiceType(castValue(value));
        }
    }

    static class CtCodeSnippet_SNIPPET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtCodeSnippet, java.lang.String> {
        private CtCodeSnippet_SNIPPET_RoleHandler() {
            super(spoon.reflect.path.CtRole.SNIPPET, spoon.reflect.declaration.CtCodeSnippet.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtStatementList_STATEMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtStatementList, spoon.reflect.code.CtStatement> {
        private CtStatementList_STATEMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.STATEMENT, spoon.reflect.code.CtStatementList.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getStatements())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setStatements(castValue(value));
        }
    }

    static class CtModule_SUB_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackage> {
        private CtModule_SUB_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getRootPackage())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setRootPackage(castValue(value));
        }
    }

    static class CtPackage_SUB_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtPackage> {
        private CtPackage_SUB_PACKAGE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtPackage.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getPackages())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setPackages(castValue(value));
        }
    }

    static class CtType_SUPER_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtType_SUPER_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUPER_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setSuperclass(castValue(value));
        }
    }

    static class CtTypeInformation_SUPER_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypeInformation_SUPER_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.SUPER_TYPE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));
        }
    }

    static class CtTargetedExpression_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtExpression<?>> {
        private CtTargetedExpression_TARGET_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTarget(castValue(value));
        }
    }

    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLabelledFlowBreak, java.lang.String> {
        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {
            super(spoon.reflect.path.CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTargetLabel(castValue(value));
        }
    }

    static class CtConditional_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression<?>> {
        private CtConditional_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenExpression(castValue(value));
        }
    }

    static class CtIf_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtIf, spoon.reflect.code.CtStatement> {
        private CtIf_THEN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThenStatement(castValue(value));
        }
    }

    static class CtExecutable_THROWN_RoleHandler extends spoon.reflect.meta.impl.SetHandler<spoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> {
        private CtExecutable_THROWN_RoleHandler() {
            super(spoon.reflect.path.CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setThrownTypes(castValue(value));
        }
    }

    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable<? extends java.lang.Object>> {
        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getResources())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setResources(castValue(value));
        }
    }

    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference<? extends java.lang.Object>> {
        private CtArrayTypeReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setComponentType(castValue(value));
        }
    }

    static class CtExecutableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtExecutableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtTypedElement_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference<?>> {
        private CtTypedElement_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtVariableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference<?>> {
        private CtVariableReference_TYPE_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getType())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setType(castValue(value));
        }
    }

    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference<?>> {
        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setActualTypeArguments(castValue(value));
        }
    }

    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember> {
        private CtType_TYPE_MEMBER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setTypeMembers(castValue(value));
        }
    }

    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter> {
        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {
            super(spoon.reflect.path.CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setFormalCtTypeParameters(castValue(value));
        }
    }

    static class CtAnnotation_VALUE_RoleHandler extends spoon.reflect.meta.impl.MapHandler<spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression> {
        private CtAnnotation_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValues(castValue(value));
        }
    }

    static class CtEnum_VALUE_RoleHandler extends spoon.reflect.meta.impl.ListHandler<spoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue<? extends java.lang.Object>> {
        private CtEnum_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setEnumValues(castValue(value));
        }
    }

    static class CtLiteral_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtLiteral, java.lang.Object> {
        private CtLiteral_VALUE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getValue())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setValue(castValue(value));
        }
    }

    static class CtVariableAccess_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler<spoon.reflect.code.CtVariableAccess, spoon.reflect.reference.CtVariableReference<?>> {
        private CtVariableAccess_VARIABLE_RoleHandler() {
            super(spoon.reflect.path.CtRole.VARIABLE, spoon.reflect.code.CtVariableAccess.class, spoon.reflect.reference.CtVariableReference.class);
        }

        @java.lang.SuppressWarnings("unchecked")
        @java.lang.Override
        public <T, U> U getValue(T element) {
            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));
        }

        @java.lang.Override
        public <T, U> void setValue(T element, U value) {
            castTarget(element).setVariable(castValue(value));
        }
    }

    private ModelRoleHandlers() {
    }

    static final spoon.reflect.meta.RoleHandler[] roleHandlers = new spoon.reflect.meta.RoleHandler[]{ new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWildcardReference_BOUNDING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLocalVariable_IS_INFERRED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWildcard]Reference_IS_UPPER_R...>
[ERROR]   MethodReferenceTest.testGetGenericExecutableReference:249 expected same:<class java.io.Reader> was not:<class java.io.InputStream>
[ERROR]   ExecutableReferenceGenericTest.testMultiReferenceBetweenMethodsWithGenericInSameClass:122 expected:<method1(T[ extends java.lang.String])> but was:<method1(T[])>
[ERROR]   ExecutableReferenceGenericTest.testOneReferenceWithGenericMethodOutOfTheClass:175 expected:<method1(T[ extends java.lang.String])> but was:<method1(T[])>
[ERROR] Errors: 
[ERROR]   APITest.testSetterInNodes:406 » NullPointer
[ERROR]   MetamodelTest.testRuntimeMetamodel:99 NullPointer
[ERROR]   TypeReferenceTest.testClearBoundsForTypeParameterReference:508 » NullPointer
[INFO] 
[ERROR] Tests run: 1540, Failures: 4, Errors: 3, Skipped: 5
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 11:01 min
[INFO] Finished at: 2018-08-22T21:01:44+02:00
[INFO] Final Memory: 23M/529M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.21.0:test (default-test) on project spoon-core: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/INRIA/spoon/419294439/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
