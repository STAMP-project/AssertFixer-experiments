[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for fr.inria.gforge.spoon:spoon-core:jar:6.3.0-SNAPSHOT
[WARNING] 'build.plugins.plugin.version' for org.pitest:pitest-maven is missing. @ line 478, column 15
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] Inspecting build with total of 1 modules...
[INFO] Installing Nexus Staging features:
[INFO]   ... total of 1 executions of maven-deploy-plugin replaced with nexus-staging-maven-plugin
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spoon Core 6.3.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ spoon-core ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- jacoco-maven-plugin:0.7.9:prepare-agent (default) @ spoon-core ---
[INFO] argLine set to -javaagent:/root/./workspace/INRIA/spoon/381041449/.m2/org/jacoco/org.jacoco.agent/0.7.9/org.jacoco.agent-0.7.9-runtime.jar=destfile=/root/workspace/INRIA/spoon/381041449/target/jacoco.exec
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ spoon-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 162 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ spoon-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.20.1:test (default-test) @ spoon-core ---
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.20.1/surefire-junit4-2.20.1.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.20.1/surefire-junit4-2.20.1.pom (4 KB at 9.6 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.20.1/surefire-providers-2.20.1.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.20.1/surefire-providers-2.20.1.pom (3 KB at 123.0 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.20.1/surefire-junit4-2.20.1.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.20.1/surefire-junit4-2.20.1.jar (81 KB at 1385.3 KB/sec)
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running spoon.LauncherTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.087 s - in spoon.LauncherTest
[INFO] Running spoon.MavenLauncherTest
[ERROR] Tests run: 6, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.191 s <<< FAILURE! - in spoon.MavenLauncherTest
[ERROR] mavenLauncherTestMultiModulesAndVariables(spoon.MavenLauncherTest)  Time elapsed: 0.093 s  <<< FAILURE!
java.lang.AssertionError: Content of classpath: 
	at spoon.MavenLauncherTest.mavenLauncherTestMultiModulesAndVariables(MavenLauncherTest.java:70)

[ERROR] spoonMavenLauncherTest(spoon.MavenLauncherTest)  Time elapsed: 0.066 s  <<< FAILURE!
java.lang.AssertionError: expected:<7> but was:<0>
	at spoon.MavenLauncherTest.spoonMavenLauncherTest(MavenLauncherTest.java:19)

[INFO] Running spoon.support.visitor.java.JavaReflectionTreeBuilderTest
[ERROR] Tests run: 17, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 7.37 s <<< FAILURE! - in spoon.support.visitor.java.JavaReflectionTreeBuilderTest
[ERROR] testScannerClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)  Time elapsed: 0.192 s  <<< FAILURE!
java.lang.AssertionError
	at spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerClass(JavaReflectionTreeBuilderTest.java:76)

[ERROR] testShadowModelEqualsNormalModel(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)  Time elapsed: 6.938 s  <<< FAILURE!
java.lang.AssertionError: 
Found 272 problems:
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=6]#typeMember
Shadow: public static final enum RequiresModifier {
    STATIC, TRANSITIVE;
    private RequiresModifier() {
    }

    private static transient boolean[] $jacocoData;
}
Normal: enum RequiresModifier {
    STATIC, TRANSITIVE;}

Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=6]#value[index=0]#value
Shadow: STATIC
Normal: STATIC

Difference on path: #typeMember[index=6]#value[index=1]#value
Shadow: TRANSITIVE
Normal: TRANSITIVE

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=8]#typeMember
Shadow: public static final enum CommentType {
    FILE, JAVADOC, INLINE, BLOCK;
    private CommentType() {
    }

    private static transient boolean[] $jacocoData;
}
Normal: enum CommentType {
    FILE, JAVADOC, INLINE, BLOCK;}

Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=8]#value[index=0]#value
Shadow: FILE
Normal: FILE

Difference on path: #typeMember[index=8]#value[index=1]#value
Shadow: JAVADOC
Normal: JAVADOC

Difference on path: #typeMember[index=8]#value[index=2]#value
Shadow: INLINE
Normal: INLINE

Difference on path: #typeMember[index=8]#value[index=3]#value
Shadow: BLOCK
Normal: BLOCK

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeParameter[index=0]#superType
Shadow: null
Normal: java.lang.Object

Missing shadow typeMember: spoon.support.reflect.declaration.CtClassImpl$NewInstanceClassloader(java.io.File)
Difference on path: #typeMember[index=30]#typeMember
Shadow: null
Normal: NewInstanceClassloader(java.io.File binaryOutputDirectory) throws java.net.MalformedURLException {
    super(new java.net.URL[]{ binaryOutputDirectory.toURI().toURL() });
}

Unexpected shadow typeMember: spoon.support.reflect.declaration.CtClassImpl$NewInstanceClassloader(spoon.support.reflect.declaration.CtClassImpl,java.io.File)
Unexpected shadow typeMember: this$0
Unexpected shadow typeMember: $jacocoData
Missing shadow typeMember: getConstructor(spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public spoon.reflect.declaration.CtConstructor<T> getConstructor(spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {
    for (spoon.reflect.declaration.CtTypeMember typeMember : getTypeMembers()) {
        if (!(typeMember instanceof spoon.reflect.declaration.CtConstructor)) {
            continue;
        }
        spoon.reflect.declaration.CtConstructor<T> c = ((spoon.reflect.declaration.CtConstructor<T>) (typeMember));
        boolean cont = (c.getParameters().size()) == (parameterTypes.length);
        for (int i = 0; (cont && (i < (c.getParameters().size()))) && (i < (parameterTypes.length)); i++) {
            if (!(parameterTypes[i].getQualifiedName().equals(c.getParameters().get(i).getType().getQualifiedName()))) {
                cont = false;
            }
        }
        if (cont) {
            return c;
        }
    }
    return null;
}

Unexpected shadow typeMember: getConstructor(spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeParameter[index=0]#superType
Shadow: null
Normal: java.lang.Object

Missing shadow typeMember: getConstructor(spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: /**
 * Returns the constructor of the class that takes the given argument types.
 *
 * Derived from {@link #getTypeMembers()}
 */
@spoon.support.DerivedProperty
@spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONSTRUCTOR)
spoon.reflect.declaration.CtConstructor<T> getConstructor(spoon.reflect.reference.CtTypeReference<?>... parameterTypes);

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: getConstructor(spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=15]#typeMember
Shadow: private abstract static enum InsertType {
    BEFORE, AFTER;
    InsertType(java.lang.String arg0, int arg1, spoon.support.reflect.code.CtStatementImpl. arg2) {
    }

    private InsertType() {
    }

    public int indexOfReference(java.util.List arg0, spoon.reflect.declaration.CtElement arg1) {
    }

    abstract void insertFromFirstStatement(spoon.reflect.code.CtBlock<?> arg0, spoon.reflect.code.CtStatement arg1, spoon.reflect.code.CtStatementList arg2) {
    }

    abstract <T extends spoon.reflect.declaration.CtElement> java.util.List<T> insertFromLastStatement(java.util.List<T> arg0, spoon.reflect.code.CtStatement arg1, spoon.reflect.code.CtStatementList arg2) {
    }

    abstract void insert(spoon.reflect.code.CtBlock<?> arg0, spoon.reflect.code.CtStatementList arg1) {
    }

    private static transient boolean[] $jacocoData;
}
Normal: private enum InsertType {
    BEFORE {
        @java.lang.Override
        void insert(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatementList statementsToBeInserted) {
            block.insertBegin(statementsToBeInserted);
        }

        @java.lang.Override
        void insertFromFirstStatement(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
            final java.util.List<spoon.reflect.code.CtStatement> copy = new java.util.ArrayList<>(block.getStatements());
            int indexOfTargetElement = indexOfReference(block.getStatements(), target);
            for (spoon.reflect.code.CtStatement ctStatement : statementsToBeInserted) {
                copy.add((indexOfTargetElement++), ctStatement);
            }
            block.setStatements(copy);
        }

        @java.lang.Override
        <T extends spoon.reflect.declaration.CtElement> java.util.List<T> insertFromLastStatement(java.util.List<T> statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
            final java.util.List<T> copy = new java.util.ArrayList<>(statements);
            int indexOfTargetElement = indexOfReference(statements, target);
            for (int j = (statementsToBeInserted.getStatements().size()) - 1; j >= 0; j--) {
                copy.add(indexOfTargetElement, ((T) (statementsToBeInserted.getStatements().get(j))));
            }
            return copy;
        }
    }, AFTER {
        @java.lang.Override
        void insert(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatementList statementsToBeInserted) {
            block.insertEnd(statementsToBeInserted);
        }

        @java.lang.Override
        void insertFromFirstStatement(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
            final java.util.List<spoon.reflect.code.CtStatement> copy = new java.util.ArrayList<>(block.getStatements());
            int indexOfTargetElement = indexOfReference(block.getStatements(), target);
            for (spoon.reflect.code.CtStatement s : statementsToBeInserted) {
                copy.add((++indexOfTargetElement), s);
            }
            block.setStatements(copy);
        }

        @java.lang.Override
        <T extends spoon.reflect.declaration.CtElement> java.util.List<T> insertFromLastStatement(java.util.List<T> statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
            final java.util.List<T> copy = new java.util.ArrayList<>(statements);
            int indexOfTargetElement = (indexOfReference(copy, target)) + 1;
            for (int j = (statementsToBeInserted.getStatements().size()) - 1; j >= 0; j--) {
                copy.add(indexOfTargetElement, ((T) (statementsToBeInserted.getStatements().get(j))));
            }
            return copy;
        }
    };
    public int indexOfReference(java.util.List statements, spoon.reflect.declaration.CtElement target) {
        int indexOfTargetElement = -1;
        // check the reference not the equality
        for (int i = 0; i < (statements.size()); i++) {
            if ((statements.get(i)) == target) {
                indexOfTargetElement = i;
                break;
            }
        }
        return indexOfTargetElement;
    }

    abstract void insert(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatementList statementsToBeInserted);

    abstract void insertFromFirstStatement(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted);

    abstract <T extends spoon.reflect.declaration.CtElement> java.util.List<T> insertFromLastStatement(java.util.List<T> statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted);
}

Difference on path: #typeMember[index=15]#typeMember[index=5]#body
Shadow: {
}
Normal: null

Difference on path: #typeMember[index=15]#typeMember[index=4]#body
Shadow: {
}
Normal: null

Difference on path: #typeMember[index=15]#typeMember[index=3]#body
Shadow: {
}
Normal: null

Unexpected shadow typeMember: spoon.support.reflect.code.CtStatementImpl$InsertType(java.lang.String,int,spoon.support.reflect.code.CtStatementImpl$)
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=15]#value[index=0]#value
Shadow: BEFORE
Normal: BEFORE {
    @java.lang.Override
    void insert(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatementList statementsToBeInserted) {
        block.insertBegin(statementsToBeInserted);
    }

    @java.lang.Override
    void insertFromFirstStatement(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
        final java.util.List<spoon.reflect.code.CtStatement> copy = new java.util.ArrayList<>(block.getStatements());
        int indexOfTargetElement = indexOfReference(block.getStatements(), target);
        for (spoon.reflect.code.CtStatement ctStatement : statementsToBeInserted) {
            copy.add((indexOfTargetElement++), ctStatement);
        }
        block.setStatements(copy);
    }

    @java.lang.Override
    <T extends spoon.reflect.declaration.CtElement> java.util.List<T> insertFromLastStatement(java.util.List<T> statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
        final java.util.List<T> copy = new java.util.ArrayList<>(statements);
        int indexOfTargetElement = indexOfReference(statements, target);
        for (int j = (statementsToBeInserted.getStatements().size()) - 1; j >= 0; j--) {
            copy.add(indexOfTargetElement, ((T) (statementsToBeInserted.getStatements().get(j))));
        }
        return copy;
    }
}

Difference on path: #typeMember[index=15]#value[index=1]#value
Shadow: AFTER
Normal: AFTER {
    @java.lang.Override
    void insert(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatementList statementsToBeInserted) {
        block.insertEnd(statementsToBeInserted);
    }

    @java.lang.Override
    void insertFromFirstStatement(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
        final java.util.List<spoon.reflect.code.CtStatement> copy = new java.util.ArrayList<>(block.getStatements());
        int indexOfTargetElement = indexOfReference(block.getStatements(), target);
        for (spoon.reflect.code.CtStatement s : statementsToBeInserted) {
            copy.add((++indexOfTargetElement), s);
        }
        block.setStatements(copy);
    }

    @java.lang.Override
    <T extends spoon.reflect.declaration.CtElement> java.util.List<T> insertFromLastStatement(java.util.List<T> statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
        final java.util.List<T> copy = new java.util.ArrayList<>(statements);
        int indexOfTargetElement = (indexOfReference(copy, target)) + 1;
        for (int j = (statementsToBeInserted.getStatements().size()) - 1; j >= 0; j--) {
            copy.add(indexOfTargetElement, ((T) (statementsToBeInserted.getStatements().get(j))));
        }
        return copy;
    }
}

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Missing shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public <R> spoon.reflect.declaration.CtMethod<R> getMethod(spoon.reflect.reference.CtTypeReference<R> returnType, java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {
    return null;
}

Missing shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public <R> spoon.reflect.declaration.CtMethod<R> getMethod(java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {
    return null;
}

Missing shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public java.util.Set<spoon.reflect.declaration.CtMethod<?>> getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference<?>... annotationTypes) {
    return java.util.Collections.emptySet();
}

Unexpected shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Missing shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
@java.lang.SuppressWarnings("unchecked")
public <R> spoon.reflect.declaration.CtMethod<R> getMethod(spoon.reflect.reference.CtTypeReference<R> returnType, java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {
    for (spoon.reflect.declaration.CtTypeMember typeMember : typeMembers) {
        if (!(typeMember instanceof spoon.reflect.declaration.CtMethod)) {
            continue;
        }
        spoon.reflect.declaration.CtMethod<R> m = ((spoon.reflect.declaration.CtMethod<R>) (typeMember));
        if (m.getSimpleName().equals(name)) {
            if (!(m.getType().equals(returnType))) {
                continue;
            }
            boolean cont = (m.getParameters().size()) == (parameterTypes.length);
            for (int i = 0; (cont && (i < (m.getParameters().size()))) && (i < (parameterTypes.length)); i++) {
                if (!(m.getParameters().get(i).getType().getQualifiedName().equals(parameterTypes[i].getQualifiedName()))) {
                    cont = false;
                }
            }
            if (cont) {
                return m;
            }
        }
    }
    return null;
}

Missing shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
@java.lang.SuppressWarnings("unchecked")
public <R> spoon.reflect.declaration.CtMethod<R> getMethod(java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {
    if (name == null) {
        return null;
    }
    for (spoon.reflect.declaration.CtMethod<?> candidate : getMethodsByName(name)) {
        boolean cont = (candidate.getParameters().size()) == (parameterTypes.length);
        for (int i = 0; (cont && (i < (candidate.getParameters().size()))) && (i < (parameterTypes.length)); i++) {
            final spoon.reflect.reference.CtTypeReference<?> ctParameterType = candidate.getParameters().get(i).getType();
            final spoon.reflect.reference.CtTypeReference<?> parameterType = parameterTypes[i];
            if (parameterType instanceof spoon.reflect.reference.CtArrayTypeReference) {
                if (ctParameterType instanceof spoon.reflect.reference.CtArrayTypeReference) {
                    if (!(isSameParameter(candidate, ((spoon.reflect.reference.CtArrayTypeReference) (ctParameterType)).getComponentType(), ((spoon.reflect.reference.CtArrayTypeReference) (parameterType)).getComponentType()))) {
                        cont = false;
                    }else {
                        if (!((((spoon.reflect.reference.CtArrayTypeReference) (ctParameterType)).getDimensionCount()) == (((spoon.reflect.reference.CtArrayTypeReference) (parameterType)).getDimensionCount()))) {
                            cont = false;
                        }
                    }
                }else {
                    cont = false;
                }
            }else
                if (!(isSameParameter(candidate, ctParameterType, parameterType))) {
                    cont = false;
                }

        }
        if (cont) {
            return ((spoon.reflect.declaration.CtMethod<R>) (candidate));
        }
    }
    return null;
}

Missing shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public java.util.Set<spoon.reflect.declaration.CtMethod<?>> getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference<?>... annotationTypes) {
    java.util.Set<spoon.reflect.declaration.CtMethod<?>> result = new spoon.support.util.SignatureBasedSortedSet<>();
    for (spoon.reflect.declaration.CtTypeMember typeMember : typeMembers) {
        if (!(typeMember instanceof spoon.reflect.declaration.CtMethod)) {
            continue;
        }
        spoon.reflect.declaration.CtMethod<?> m = ((spoon.reflect.declaration.CtMethod<?>) (typeMember));
        for (spoon.reflect.declaration.CtAnnotation<?> a : m.getAnnotations()) {
            if (java.util.Arrays.asList(annotationTypes).contains(a.getAnnotationType())) {
                result.add(m);
            }
        }
    }
    return result;
}

Unexpected shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Missing shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: /**
 * Gets a method from its return type, name, and parameter types.
 *
 * @return null if does not exit
 */
@spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.METHOD)
<R> spoon.reflect.declaration.CtMethod<R> getMethod(spoon.reflect.reference.CtTypeReference<R> returnType, java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes);

Missing shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: /**
 * Gets a method from its name and parameter types.
 *
 * @return null if does not exit
 */
@spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.METHOD)
<R> spoon.reflect.declaration.CtMethod<R> getMethod(java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes);

Missing shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: /**
 * Returns the methods that are directly declared by this class or
 * interface and annotated with one of the given annotations.
 */
@spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.METHOD)
java.util.Set<spoon.reflect.declaration.CtMethod<?>> getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference<?>... annotationTypes);

Unexpected shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeParameter[index=0]#superType
Shadow: null
Normal: java.lang.Object

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=7]#body
Shadow: {
}
Normal: null

Difference on path: #typeMember[index=3]#body
Shadow: {
}
Normal: null

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=10]#typeMember
Shadow: public static final enum TagType {
    AUTHOR, DEPRECATED, EXCEPTION, PARAM, RETURN, SEE, SERIAL, SERIAL_DATA, SERIAL_FIELD, SINCE, THROWS, VERSION, UNKNOWN;
    private TagType() {
    }

    public boolean hasParam() {
    }

    public static spoon.reflect.code.CtJavaDocTag.TagType tagFromName(java.lang.String arg0) {
    }

    public java.lang.String toString() {
    }

    private static transient boolean[] $jacocoData;
}
Normal: /**
 * Define the possible type for a tag
 */
enum TagType {
    AUTHOR, DEPRECATED, EXCEPTION, PARAM, RETURN, SEE, SERIAL, SERIAL_DATA, SERIAL_FIELD, SINCE, THROWS, VERSION, UNKNOWN;
    /**
     * Return true if the tag can have a parameter
     *
     * @return true if the tag can have a parameter
     */
    public boolean hasParam() {
        return ((this) == (spoon.reflect.code.CtJavaDocTag.TagType.PARAM)) || ((this) == (spoon.reflect.code.CtJavaDocTag.TagType.THROWS));
    }

    /**
     * Get the tag type associated to a name
     *
     * @param tagName
     * 		the tag name
     * @return the tag type
     */
    public static spoon.reflect.code.CtJavaDocTag.TagType tagFromName(java.lang.String tagName) {
        for (spoon.reflect.code.CtJavaDocTag.TagType t : spoon.reflect.code.CtJavaDocTag.TagType.values()) {
            if (t.name().toLowerCase().equals(tagName.toLowerCase())) {
                return t;
            }
        }
        return spoon.reflect.code.CtJavaDocTag.TagType.UNKNOWN;
    }

    @java.lang.Override
    public java.lang.String toString() {
        return (spoon.reflect.code.CtJavaDocTag.JAVADOC_TAG_PREFIX) + (name().toLowerCase());
    }
}

Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=10]#value[index=0]#value
Shadow: AUTHOR
Normal: AUTHOR

Difference on path: #typeMember[index=10]#value[index=1]#value
Shadow: DEPRECATED
Normal: DEPRECATED

Difference on path: #typeMember[index=10]#value[index=2]#value
Shadow: EXCEPTION
Normal: EXCEPTION

Difference on path: #typeMember[index=10]#value[index=3]#value
Shadow: PARAM
Normal: PARAM

Difference on path: #typeMember[index=10]#value[index=4]#value
Shadow: RETURN
Normal: RETURN

Difference on path: #typeMember[index=10]#value[index=5]#value
Shadow: SEE
Normal: SEE

Difference on path: #typeMember[index=10]#value[index=6]#value
Shadow: SERIAL
Normal: SERIAL

Difference on path: #typeMember[index=10]#value[index=7]#value
Shadow: SERIAL_DATA
Normal: SERIAL_DATA

Difference on path: #typeMember[index=10]#value[index=8]#value
Shadow: SERIAL_FIELD
Normal: SERIAL_FIELD

Difference on path: #typeMember[index=10]#value[index=9]#value
Shadow: SINCE
Normal: SINCE

Difference on path: #typeMember[index=10]#value[index=10]#value
Shadow: THROWS
Normal: THROWS

Difference on path: #typeMember[index=10]#value[index=11]#value
Shadow: VERSION
Normal: VERSION

Difference on path: #typeMember[index=10]#value[index=12]#value
Shadow: UNKNOWN
Normal: UNKNOWN

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=13]#body
Shadow: null
Normal: {
    if (element == null) {
        return null;
    }
    if (element instanceof spoon.reflect.declaration.CtMethod) {
        return spoon.reflect.declaration.CtAnnotatedElementType.METHOD;
    }
    if ((element instanceof spoon.reflect.declaration.CtAnnotation) || (element instanceof spoon.reflect.declaration.CtAnnotationType)) {
        return spoon.reflect.declaration.CtAnnotatedElementType.ANNOTATION_TYPE;
    }
    if (element instanceof spoon.reflect.declaration.CtType) {
        return spoon.reflect.declaration.CtAnnotatedElementType.TYPE;
    }
    if (element instanceof spoon.reflect.declaration.CtField) {
        return spoon.reflect.declaration.CtAnnotatedElementType.FIELD;
    }
    if (element instanceof spoon.reflect.declaration.CtConstructor) {
        return spoon.reflect.declaration.CtAnnotatedElementType.CONSTRUCTOR;
    }
    if (element instanceof spoon.reflect.declaration.CtParameter) {
        return spoon.reflect.declaration.CtAnnotatedElementType.PARAMETER;
    }
    if (element instanceof spoon.reflect.code.CtLocalVariable) {
        return spoon.reflect.declaration.CtAnnotatedElementType.LOCAL_VARIABLE;
    }
    if (element instanceof spoon.reflect.declaration.CtPackage) {
        return spoon.reflect.declaration.CtAnnotatedElementType.PACKAGE;
    }
    if (element instanceof spoon.reflect.reference.CtTypeParameterReference) {
        return spoon.reflect.declaration.CtAnnotatedElementType.TYPE_PARAMETER;
    }
    if (element instanceof spoon.reflect.reference.CtTypeReference) {
        return spoon.reflect.declaration.CtAnnotatedElementType.TYPE_USE;
    }
    return null;
}

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Missing shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public <R> spoon.reflect.declaration.CtMethod<R> getMethod(spoon.reflect.reference.CtTypeReference<R> returnType, java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {
    if ((("values".equals(name)) && ((parameterTypes.length) == 0)) && (returnType.equals(getReference()))) {
        return valuesMethod();
    }else
        if (((("valueOf".equals(name)) && ((parameterTypes.length) == 1)) && (parameterTypes[0].equals(factory.Type().STRING))) && (returnType.equals(factory.Type().createArrayReference(getReference())))) {
            return valueOfMethod();
        }else {
            return super.getMethod(returnType, name, parameterTypes);
        }

}

Missing shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public <R> spoon.reflect.declaration.CtMethod<R> getMethod(java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {
    if (("values".equals(name)) && ((parameterTypes.length) == 0)) {
        return valuesMethod();
    }else
        if ((("valueOf".equals(name)) && ((parameterTypes.length) == 1)) && (parameterTypes[0].equals(factory.Type().STRING))) {
            return valueOfMethod();
        }else {
            return super.getMethod(name, parameterTypes);
        }

}

Unexpected shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
	at spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testShadowModelEqualsNormalModel(JavaReflectionTreeBuilderTest.java:187)

[INFO] Running spoon.support.compiler.jdt.JDTBuilderTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.support.compiler.jdt.JDTBuilderTest
[INFO] Running spoon.support.compiler.jdt.JDTBatchCompilerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.132 s - in spoon.support.compiler.jdt.JDTBatchCompilerTest
[INFO] Running spoon.support.compiler.jdt.ExtendedStringLiteralTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.064 s - in spoon.support.compiler.jdt.ExtendedStringLiteralTest
[INFO] Running spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.212 s - in spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
[INFO] Running spoon.support.compiler.classpath.ComputeClasspathTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.support.compiler.classpath.ComputeClasspathTest
[INFO] Running spoon.reflect.visitor.CtInheritanceScannerTest
[INFO] Tests run: 81, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.493 s - in spoon.reflect.visitor.CtInheritanceScannerTest
[INFO] Running spoon.reflect.visitor.CtInheritanceScannerMethodsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.122 s - in spoon.reflect.visitor.CtInheritanceScannerMethodsTest
[INFO] Running spoon.reflect.visitor.CtVisitorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.52 s - in spoon.reflect.visitor.CtVisitorTest
[INFO] Running spoon.reflect.visitor.CtScannerTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 9.883 s - in spoon.reflect.visitor.CtScannerTest
[INFO] Running spoon.reflect.visitor.CtIteratorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.183 s - in spoon.reflect.visitor.CtIteratorTest
[INFO] Running spoon.reflect.declaration.UnknownDeclarationTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.04 s - in spoon.reflect.declaration.UnknownDeclarationTest
[INFO] Running spoon.reflect.declaration.CtTypeInformationTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.57 s - in spoon.reflect.declaration.CtTypeInformationTest
[INFO] Running spoon.reflect.ast.CloneTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 9.851 s - in spoon.reflect.ast.CloneTest
[INFO] Running spoon.reflect.ast.AstCheckerTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.54 s - in spoon.reflect.ast.AstCheckerTest
[INFO] Running spoon.testing.AbstractAssertTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.255 s - in spoon.testing.AbstractAssertTest
[INFO] Running spoon.testing.CtElementAssertTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.228 s - in spoon.testing.CtElementAssertTest
[INFO] Running spoon.testing.CtPackageAssertTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.099 s - in spoon.testing.CtPackageAssertTest
[INFO] Running spoon.testing.FileAssertTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.12 s - in spoon.testing.FileAssertTest
[INFO] Running spoon.processing.CtGenerationTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 38.65 s - in spoon.processing.CtGenerationTest
[INFO] Running spoon.processing.ProcessingTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.056 s - in spoon.processing.ProcessingTest
[INFO] Running spoon.test.varargs.VarArgsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.03 s - in spoon.test.varargs.VarArgsTest
[INFO] Running spoon.test.ctCase.SwitchCaseTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.062 s - in spoon.test.ctCase.SwitchCaseTest
[INFO] Running spoon.test.condition.ConditionalTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.136 s - in spoon.test.condition.ConditionalTest
[INFO] Running spoon.test.refactoring.RefactoringTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.446 s - in spoon.test.refactoring.RefactoringTest
[INFO] Running spoon.test.refactoring.MethodsRefactoringTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.613 s - in spoon.test.refactoring.MethodsRefactoringTest
[INFO] Running spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 9.29 s - in spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
[INFO] Running spoon.test.path.PathTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.319 s - in spoon.test.path.PathTest
[INFO] Running spoon.test.staticFieldAccess.StaticAccessTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.102 s - in spoon.test.staticFieldAccess.StaticAccessTest
[INFO] Running spoon.test.arrays.ArraysTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.203 s - in spoon.test.arrays.ArraysTest
[INFO] Running spoon.test.signature.SignatureTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.512 s - in spoon.test.signature.SignatureTest
[INFO] Running spoon.test.serializable.SerializableTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.171 s - in spoon.test.serializable.SerializableTest
[INFO] Running spoon.test.serializable.SourcePositionTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.038 s - in spoon.test.serializable.SourcePositionTest
[INFO] Running spoon.test.properties.PropertiesTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.033 s - in spoon.test.properties.PropertiesTest
[INFO] Running spoon.test.initializers.InitializerTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.065 s - in spoon.test.initializers.InitializerTest
[INFO] Running spoon.test.javadoc.JavaDocTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.071 s - in spoon.test.javadoc.JavaDocTest
[INFO] Running spoon.test.visitor.VisitorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 s - in spoon.test.visitor.VisitorTest
[INFO] Running spoon.test.visitor.AssignmentsEqualsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.044 s - in spoon.test.visitor.AssignmentsEqualsTest
[INFO] Running spoon.test.invocations.InvocationTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.145 s - in spoon.test.invocations.InvocationTest
[INFO] Running spoon.test.modifiers.TestModifiers
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.223 s - in spoon.test.modifiers.TestModifiers
[INFO] Running spoon.test.intercession.RemoveTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.03 s - in spoon.test.intercession.RemoveTest
[INFO] Running spoon.test.intercession.insertBefore.InsertMethodsTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.583 s - in spoon.test.intercession.insertBefore.InsertMethodsTest
[INFO] Running spoon.test.intercession.IntercessionContractTest
[INFO] Tests run: 107, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.924 s - in spoon.test.intercession.IntercessionContractTest
[INFO] Running spoon.test.intercession.IntercessionTest
[WARNING] Tests run: 8, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 4.329 s - in spoon.test.intercession.IntercessionTest
[INFO] Running spoon.test.compilation.CompilationTest
>> Hello: Bar <<
>> Hello: FooEx <<
>> Hello: IBar <<
>> Hello: SimpleProcessor <<
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.267 s - in spoon.test.compilation.CompilationTest
[INFO] Running spoon.test.compilationunit.GetBinaryFilesTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.336 s - in spoon.test.compilationunit.GetBinaryFilesTest
[INFO] Running spoon.test.compilationunit.TestCompilationUnit
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.173 s - in spoon.test.compilationunit.TestCompilationUnit
[INFO] Running spoon.test.comparison.EqualTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.162 s - in spoon.test.comparison.EqualTest
[INFO] Running spoon.test.method.MethodTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.183 s - in spoon.test.method.MethodTest
[INFO] Running spoon.test.ctElement.MetadataTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.03 s - in spoon.test.ctElement.MetadataTest
[INFO] Running spoon.test.ctElement.ElementTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.ctElement.ElementTest
[INFO] Running spoon.test.casts.CastTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.176 s - in spoon.test.casts.CastTest
[INFO] Running spoon.test.support.ResourceTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.181 s - in spoon.test.support.ResourceTest
[INFO] Running spoon.test.interfaces.InterfaceTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.233 s - in spoon.test.interfaces.InterfaceTest
[INFO] Running spoon.test.interfaces.TestInterfaceWithoutSetup
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.09 s - in spoon.test.interfaces.TestInterfaceWithoutSetup
[INFO] Running spoon.test.type.TypeTest
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.592 s - in spoon.test.type.TypeTest
[INFO] Running spoon.test.reference.TypeReferenceTest
[INFO] Tests run: 28, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.98 s - in spoon.test.reference.TypeReferenceTest
[INFO] Running spoon.test.reference.VariableAccessTest
2018-05-19 13:15:00,232 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable e at (/root/workspace/INRIA/spoon/381041449/src/test/resources/noclasspath/org/elasticsearch/indices/analysis/HunspellService.java:100)
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.391 s - in spoon.test.reference.VariableAccessTest
[INFO] Running spoon.test.reference.ElasticsearchStackoverflowTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.068 s - in spoon.test.reference.ElasticsearchStackoverflowTest
[INFO] Running spoon.test.reference.ExecutableReferenceTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.275 s - in spoon.test.reference.ExecutableReferenceTest
[INFO] Running spoon.test.reference.ExecutableReferenceGenericTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.411 s - in spoon.test.reference.ExecutableReferenceGenericTest
[INFO] Running spoon.test.reference.AnnotationFieldReferenceTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.029 s - in spoon.test.reference.AnnotationFieldReferenceTest
[INFO] Running spoon.test.reference.CloneReferenceTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.071 s - in spoon.test.reference.CloneReferenceTest
[INFO] Running spoon.test.reflect.meta.MetaModelTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.789 s - in spoon.test.reflect.meta.MetaModelTest
[INFO] Running spoon.test.reflect.visitor.ReferenceQueryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.033 s - in spoon.test.reflect.visitor.ReferenceQueryTest
[INFO] Running spoon.test.generics.GenericsTest
[INFO] Tests run: 45, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.515 s - in spoon.test.generics.GenericsTest
[INFO] Running spoon.test.ctBlock.TestCtBlock
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.089 s - in spoon.test.ctBlock.TestCtBlock
[INFO] Running spoon.test.OutputTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.OutputTypeTest
[INFO] Running spoon.test.ctType.CtTypeParameterTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.084 s - in spoon.test.ctType.CtTypeParameterTest
[INFO] Running spoon.test.ctType.CtTypeTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.307 s - in spoon.test.ctType.CtTypeTest
[INFO] Running spoon.test.targeted.TargetedExpressionTest
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.648 s - in spoon.test.targeted.TargetedExpressionTest
[INFO] Running spoon.test.sourcePosition.SourcePositionTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.107 s - in spoon.test.sourcePosition.SourcePositionTest
[INFO] Running spoon.test.eval.EvalTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.456 s - in spoon.test.eval.EvalTest
[INFO] Running spoon.test.ctClass.CtClassTest
2018-05-19 13:15:08,824 ERROR spoon.Launcher - cannot load class: daikon.Runtime
spoon.support.SpoonClassNotFoundException: cannot load class: daikon.Runtime
	at spoon.support.reflect.reference.CtTypeReferenceImpl.findClass(CtTypeReferenceImpl.java:164)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.getActualClass(CtTypeReferenceImpl.java:146)
	at spoon.support.reflect.reference.CtFieldReferenceImpl.getActualField(CtFieldReferenceImpl.java:65)
	at spoon.support.reflect.reference.CtFieldReferenceImpl.getModifiers(CtFieldReferenceImpl.java:223)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.isInitializeStaticFinalField(DefaultJavaPrettyPrinter.java:889)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.printCtFieldAccess(DefaultJavaPrettyPrinter.java:836)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtFieldWrite(DefaultJavaPrettyPrinter.java:795)
	at spoon.support.reflect.code.CtFieldWriteImpl.accept(CtFieldWriteImpl.java:27)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:343)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtAssignment(DefaultJavaPrettyPrinter.java:491)
	at spoon.support.reflect.code.CtAssignmentImpl.accept(CtAssignmentImpl.java:55)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:343)
	at spoon.reflect.visitor.ElementPrinterHelper.writeStatement(ElementPrinterHelper.java:180)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtBlock(DefaultJavaPrettyPrinter.java:523)
	at spoon.support.reflect.code.CtBlockImpl.accept(CtBlockImpl.java:48)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:343)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtAnonymousExecutable(DefaultJavaPrettyPrinter.java:442)
	at spoon.support.reflect.declaration.CtAnonymousExecutableImpl.accept(CtAnonymousExecutableImpl.java:46)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:343)
	at spoon.reflect.visitor.ElementPrinterHelper.writeElementList(ElementPrinterHelper.java:194)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.visitCtClass(DefaultJavaPrettyPrinter.java:615)
	at spoon.support.reflect.declaration.CtClassImpl.accept(CtClassImpl.java:68)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.scan(DefaultJavaPrettyPrinter.java:343)
	at spoon.reflect.visitor.DefaultJavaPrettyPrinter.calculate(DefaultJavaPrettyPrinter.java:1950)
	at spoon.support.JavaOutputProcessor.createJavaFile(JavaOutputProcessor.java:133)
	at spoon.support.JavaOutputProcessor.process(JavaOutputProcessor.java:171)
	at spoon.support.JavaOutputProcessor.process(JavaOutputProcessor.java:45)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:74)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:174)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:148)
	at spoon.reflect.visitor.CtScanner.visitCtPackage(CtScanner.java:650)
	at spoon.support.reflect.declaration.CtPackageImpl.accept(CtPackageImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:182)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:174)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:148)
	at spoon.reflect.visitor.CtScanner.visitCtPackage(CtScanner.java:649)
	at spoon.support.reflect.declaration.CtPackageImpl.accept(CtPackageImpl.java:56)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:182)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:174)
	at spoon.reflect.visitor.CtScanner.visitCtModule(CtScanner.java:925)
	at spoon.reflect.factory.ModuleFactory$CtUnnamedModule.accept(ModuleFactory.java:105)
	at spoon.reflect.visitor.CtScanner.scan(CtScanner.java:182)
	at spoon.support.visitor.ProcessingVisitor.scan(ProcessingVisitor.java:77)
	at spoon.support.QueueProcessingManager.process(QueueProcessingManager.java:119)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.generateProcessedSourceFilesUsingTypes(JDTBasedSpoonCompiler.java:497)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.generateProcessedSourceFiles(JDTBasedSpoonCompiler.java:208)
	at spoon.Launcher.prettyprint(Launcher.java:725)
	at spoon.Launcher.run(Launcher.java:663)
	at spoon.test.ctClass.CtClassTest.testParentOfTheEnclosingClassOfStaticClass(CtClassTest.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:369)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:275)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:239)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:160)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:373)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:334)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:119)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:407)
Caused by: java.lang.ClassNotFoundException: daikon.Runtime
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at spoon.support.reflect.reference.CtTypeReferenceImpl.findClass(CtTypeReferenceImpl.java:162)
	... 75 more
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.175 s - in spoon.test.ctClass.CtClassTest
[INFO] Running spoon.test.secondaryclasses.ClassesTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.197 s - in spoon.test.secondaryclasses.ClassesTest
[INFO] Running spoon.test.factory.ClassFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.factory.ClassFactoryTest
[INFO] Running spoon.test.factory.CodeFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.factory.CodeFactoryTest
[INFO] Running spoon.test.factory.ExecutableFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.factory.ExecutableFactoryTest
[INFO] Running spoon.test.factory.FieldFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.096 s - in spoon.test.factory.FieldFactoryTest
[INFO] Running spoon.test.factory.TypeFactoryTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.105 s - in spoon.test.factory.TypeFactoryTest
[INFO] Running spoon.test.factory.ConstructorFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 s - in spoon.test.factory.ConstructorFactoryTest
[INFO] Running spoon.test.factory.FactoryTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.792 s - in spoon.test.factory.FactoryTest
[INFO] Running spoon.test.factory.AnnotationFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 s - in spoon.test.factory.AnnotationFactoryTest
[INFO] Running spoon.test.field.FieldTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.099 s - in spoon.test.field.FieldTest
[INFO] Running spoon.test.query_function.VariableReferencesTest
2018-05-19 13:15:15,796 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:15:15,796 INFO spoon.Launcher - running Spoon...
2018-05-19 13:15:15,796 INFO spoon.Launcher - start processing...
2018-05-19 13:15:15,846 INFO spoon.Launcher - end of processing: 
2018-05-19 13:15:15,846 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:15:15,880 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:15:15,881 INFO spoon.Launcher - running Spoon...
2018-05-19 13:15:15,881 INFO spoon.Launcher - start processing...
2018-05-19 13:15:15,928 INFO spoon.Launcher - end of processing: 
2018-05-19 13:15:15,928 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:15:15,972 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:15:15,973 INFO spoon.Launcher - running Spoon...
2018-05-19 13:15:15,973 INFO spoon.Launcher - start processing...
2018-05-19 13:15:16,039 INFO spoon.Launcher - end of processing: 
2018-05-19 13:15:16,039 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:15:16,045 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:15:16,046 INFO spoon.Launcher - running Spoon...
2018-05-19 13:15:16,046 INFO spoon.Launcher - start processing...
2018-05-19 13:15:16,116 INFO spoon.Launcher - end of processing: 
2018-05-19 13:15:16,116 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:15:16,154 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:15:16,154 INFO spoon.Launcher - running Spoon...
2018-05-19 13:15:16,154 INFO spoon.Launcher - start processing...
2018-05-19 13:15:16,200 INFO spoon.Launcher - end of processing: 
2018-05-19 13:15:16,200 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:15:16,209 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:15:16,210 INFO spoon.Launcher - running Spoon...
2018-05-19 13:15:16,210 INFO spoon.Launcher - start processing...
2018-05-19 13:15:16,255 INFO spoon.Launcher - end of processing: 
2018-05-19 13:15:16,256 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:15:16,263 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:15:16,263 INFO spoon.Launcher - running Spoon...
2018-05-19 13:15:16,263 INFO spoon.Launcher - start processing...
2018-05-19 13:15:16,309 INFO spoon.Launcher - end of processing: 
2018-05-19 13:15:16,309 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:15:16,342 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:15:16,342 INFO spoon.Launcher - running Spoon...
2018-05-19 13:15:16,342 INFO spoon.Launcher - start processing...
2018-05-19 13:15:16,387 INFO spoon.Launcher - end of processing: 
2018-05-19 13:15:16,388 INFO spoon.Launcher - no errors, no warnings
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.665 s - in spoon.test.query_function.VariableReferencesTest
[INFO] Running spoon.test.query_function.testclasses.VariableReferencesModelTest
[INFO] Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in spoon.test.query_function.testclasses.VariableReferencesModelTest
[INFO] Running spoon.test.pkg.PackageTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.585 s - in spoon.test.pkg.PackageTest
[INFO] Running spoon.test.jdtimportbuilder.ImportBuilderTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.333 s - in spoon.test.jdtimportbuilder.ImportBuilderTest
[INFO] Running spoon.test.template.TemplateClassAccessTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.079 s - in spoon.test.template.TemplateClassAccessTest
[INFO] Running spoon.test.template.TemplateArrayAccessTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.075 s - in spoon.test.template.TemplateArrayAccessTest
[INFO] Running spoon.test.template.TemplateReplaceReturnTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.142 s - in spoon.test.template.TemplateReplaceReturnTest
[INFO] Running spoon.test.template.TemplateTest
0
[INFO] Tests run: 24, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.95 s - in spoon.test.template.TemplateTest
[INFO] Running spoon.test.template.TemplateInvocationSubstitutionTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.169 s - in spoon.test.template.TemplateInvocationSubstitutionTest
[INFO] Running spoon.test.template.TemplateEnumAccessTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.07 s - in spoon.test.template.TemplateEnumAccessTest
[INFO] Running spoon.test.visibility.VisibilityTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.431 s - in spoon.test.visibility.VisibilityTest
[INFO] Running spoon.test.architecture.SpoonArchitectureEnforcerTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 28.852 s - in spoon.test.architecture.SpoonArchitectureEnforcerTest
[INFO] Running spoon.test.executable.ExecutableRefTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.218 s - in spoon.test.executable.ExecutableRefTest
[INFO] Running spoon.test.executable.ExecutableTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.087 s - in spoon.test.executable.ExecutableTest
[INFO] Running spoon.test.processing.ProcessingTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.331 s - in spoon.test.processing.ProcessingTest
[INFO] Running spoon.test.labels.TestLabels
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 s - in spoon.test.labels.TestLabels
[INFO] Running spoon.test.constructorcallnewclass.ConstructorCallTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.262 s - in spoon.test.constructorcallnewclass.ConstructorCallTest
[INFO] Running spoon.test.constructorcallnewclass.NewClassTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.414 s - in spoon.test.constructorcallnewclass.NewClassTest
[INFO] Running spoon.test.control.ControlTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.061 s - in spoon.test.control.ControlTest
[INFO] Running spoon.test.role.TestCtRole
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.test.role.TestCtRole
[INFO] Running spoon.test.logging.LogTest
2018-05-19 13:15:50,596 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/381041449/spooned-classes
2018-05-19 13:15:50,596 DEBUG spoon.Launcher - source classpath: null
2018-05-19 13:15:50,597 DEBUG spoon.Launcher - template classpath: []
2018-05-19 13:15:50,597 INFO spoon.Launcher - Log info
2018-05-19 13:15:50,597 WARN spoon.Launcher - Log warn
2018-05-19 13:15:50,597 ERROR spoon.Launcher - Log error
2018-05-19 13:15:50,598 DEBUG spoon.Launcher - Log debug
2018-05-19 13:15:50,598 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/381041449/spooned-classes
2018-05-19 13:15:50,598 DEBUG spoon.Launcher - source classpath: null
2018-05-19 13:15:50,599 DEBUG spoon.Launcher - template classpath: []
2018-05-19 13:15:50,599 INFO spoon.Launcher - Log info
2018-05-19 13:15:50,599 WARN spoon.Launcher - Log warn
2018-05-19 13:15:50,599 ERROR spoon.Launcher - Log error
2018-05-19 13:15:50,599 DEBUG spoon.Launcher - Log debug
2018-05-19 13:15:50,600 INFO spoon.Launcher - Log info
2018-05-19 13:15:50,601 WARN spoon.Launcher - Log warn
2018-05-19 13:15:50,601 ERROR spoon.Launcher - Log error
2018-05-19 13:15:50,602 WARN spoon.Launcher - Log warn
2018-05-19 13:15:50,602 ERROR spoon.Launcher - Log error
2018-05-19 13:15:50,603 ERROR spoon.Launcher - Log error
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 s - in spoon.test.logging.LogTest
[INFO] Running spoon.test.enums.EnumsTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.135 s - in spoon.test.enums.EnumsTest
[INFO] Running spoon.test.enums.EnumsTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 s - in spoon.test.enums.EnumsTypeTest
[INFO] Running spoon.test.methodreference.MethodReferenceTest
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.293 s - in spoon.test.methodreference.MethodReferenceTest
[INFO] Running spoon.test.comment.CommentTest
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 20.774 s - in spoon.test.comment.CommentTest
[INFO] Running spoon.test.prettyprinter.LinesTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.274 s - in spoon.test.prettyprinter.LinesTest
[INFO] Running spoon.test.prettyprinter.DefaultPrettyPrinterTest
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.488 s - in spoon.test.prettyprinter.DefaultPrettyPrinterTest
[INFO] Running spoon.test.prettyprinter.PrinterTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.119 s - in spoon.test.prettyprinter.PrinterTest
[INFO] Running spoon.test.prettyprinter.QualifiedThisRefTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.128 s - in spoon.test.prettyprinter.QualifiedThisRefTest
[INFO] Running spoon.test.loop.LoopTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.073 s - in spoon.test.loop.LoopTest
[INFO] Running spoon.test.replace.ReplaceTest
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.768 s - in spoon.test.replace.ReplaceTest
[INFO] Running spoon.test.replace.ReplaceParametrizedTest
[INFO] Tests run: 80, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.439 s - in spoon.test.replace.ReplaceParametrizedTest
[INFO] Running spoon.test.main.MainTest
[ERROR] Tests run: 13, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 150.555 s <<< FAILURE! - in spoon.test.main.MainTest
[ERROR] testMain_checkShadow(spoon.test.main.MainTest)  Time elapsed: 0.068 s  <<< FAILURE!
java.lang.AssertionError: cannot find decl for asList(T[])
	at spoon.test.main.MainTest.checkShadow(MainTest.java:266)
	at spoon.test.main.MainTest.testMain_checkShadow(MainTest.java:109)

[INFO] Running spoon.test.limits.utils.InternalTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.06 s - in spoon.test.limits.utils.InternalTest
[INFO] Running spoon.test.exceptions.ExceptionTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.252 s - in spoon.test.exceptions.ExceptionTest
[INFO] Running spoon.test.fieldaccesses.FieldAccessTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.533 s - in spoon.test.fieldaccesses.FieldAccessTest
[INFO] Running spoon.test.delete.DeleteTest
[INFO] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.435 s - in spoon.test.delete.DeleteTest
[INFO] Running spoon.test.change.ChangeCollectorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 s - in spoon.test.change.ChangeCollectorTest
[INFO] Running spoon.test.imports.ImportScannerTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.138 s - in spoon.test.imports.ImportScannerTest
[INFO] Running spoon.test.imports.ImportAndExtendWithPackageNameTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.029 s - in spoon.test.imports.ImportAndExtendWithPackageNameTest
[INFO] Running spoon.test.imports.ImportTest
[INFO] Tests run: 43, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.509 s - in spoon.test.imports.ImportTest
[INFO] Running spoon.test.constructor.ConstructorTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.377 s - in spoon.test.constructor.ConstructorTest
[INFO] Running spoon.test.position.PositionTest
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.647 s - in spoon.test.position.PositionTest
[INFO] Running spoon.test.trycatch.TryCatchTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.509 s - in spoon.test.trycatch.TryCatchTest
[INFO] Running spoon.test.filters.FilterTest
2018-05-19 13:18:56,327 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:56,327 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:56,327 INFO spoon.Launcher - start processing...
2018-05-19 13:18:56,367 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:56,368 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:56,530 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:56,530 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:56,530 INFO spoon.Launcher - start processing...
2018-05-19 13:18:56,568 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:56,568 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:56,702 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:56,702 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:56,702 INFO spoon.Launcher - start processing...
2018-05-19 13:18:56,739 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:56,739 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:56,975 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:56,975 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:56,976 INFO spoon.Launcher - start processing...
2018-05-19 13:18:57,013 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:57,014 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:57,085 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:57,085 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:57,085 INFO spoon.Launcher - start processing...
2018-05-19 13:18:57,123 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:57,123 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:57,484 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:57,484 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:57,484 INFO spoon.Launcher - start processing...
2018-05-19 13:18:57,521 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:57,521 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:57,761 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:57,761 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:57,761 INFO spoon.Launcher - start processing...
2018-05-19 13:18:57,797 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:57,797 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:57,979 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:57,979 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:57,979 INFO spoon.Launcher - start processing...
2018-05-19 13:18:58,015 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:58,015 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:58,049 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:58,049 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:58,049 INFO spoon.Launcher - start processing...
2018-05-19 13:18:58,084 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:58,084 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:58,176 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:58,176 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:58,177 INFO spoon.Launcher - start processing...
2018-05-19 13:18:58,212 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:58,212 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:58,323 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:58,323 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:58,324 INFO spoon.Launcher - start processing...
2018-05-19 13:18:58,360 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:58,361 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:58,392 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:58,393 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:58,393 INFO spoon.Launcher - start processing...
2018-05-19 13:18:58,428 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:58,428 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:58,697 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:58,697 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:58,697 INFO spoon.Launcher - start processing...
2018-05-19 13:18:58,733 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:58,733 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:58,764 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:58,764 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:58,764 INFO spoon.Launcher - start processing...
2018-05-19 13:18:58,802 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:58,802 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:59,050 INFO spoon.Launcher - Spoon version 6.3.0-SNAPSHOT
2018-05-19 13:18:59,050 INFO spoon.Launcher - running Spoon...
2018-05-19 13:18:59,050 INFO spoon.Launcher - start processing...
2018-05-19 13:18:59,086 INFO spoon.Launcher - end of processing: 
2018-05-19 13:18:59,086 INFO spoon.Launcher - no errors, no warnings
2018-05-19 13:18:59,089 INFO spoon.Launcher - Step filter CtClass only) spoon.reflect.CtModelImpl$CtRootPackage cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtRootPackage: unnamed package
2018-05-19 13:18:59,089 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon
2018-05-19 13:18:59,089 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test
2018-05-19 13:18:59,089 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters
2018-05-19 13:18:59,089 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,090 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-05-19 13:18:59,090 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,090 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: AbstractTostada() {
}
2018-05-19 13:18:59,090 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-05-19 13:18:59,090 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-05-19 13:18:59,090 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-05-19 13:18:59,091 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-05-19 13:18:59,091 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,091 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-05-19 13:18:59,091 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,091 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2018-05-19 13:18:59,091 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-05-19 13:18:59,091 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,092 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,092 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,092 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,092 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-05-19 13:18:59,092 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,092 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2018-05-19 13:18:59,093 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2018-05-19 13:18:59,093 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2018-05-19 13:18:59,093 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada$1()
2018-05-19 13:18:59,094 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada.1
2018-05-19 13:18:59,094 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-05-19 13:18:59,094 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,094 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,094 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,094 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,094 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,095 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: 1() {
}
2018-05-19 13:18:59,095 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-05-19 13:18:59,095 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-05-19 13:18:59,095 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-05-19 13:18:59,095 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,095 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,095 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,096 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,096 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    super.prepare();
}
2018-05-19 13:18:59,096 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-05-19 13:18:59,096 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,096 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,096 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,096 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,097 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,097 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    super.prepare();
}
2018-05-19 13:18:59,097 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-05-19 13:18:59,097 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-05-19 13:18:59,097 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-05-19 13:18:59,097 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,097 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,098 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-05-19 13:18:59,098 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,098 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,098 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,098 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}
2018-05-19 13:18:59,098 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-05-19 13:18:59,098 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,099 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,099 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,099 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,099 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-05-19 13:18:59,099 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,099 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return super.make();
}
2018-05-19 13:18:59,099 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return super.make()
2018-05-19 13:18:59,100 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.make()
2018-05-19 13:18:59,100 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-05-19 13:18:59,100 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-05-19 13:18:59,100 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,100 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,100 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: make()
2018-05-19 13:18:59,100 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,100 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,101 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-05-19 13:18:59,101 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,101 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public abstract void prepare();
2018-05-19 13:18:59,101 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,101 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void honey() {
}
2018-05-19 13:18:59,101 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,101 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-05-19 13:18:59,102 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-05-19 13:18:59,102 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,102 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Antojito() {
}
2018-05-19 13:18:59,102 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-05-19 13:18:59,102 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-05-19 13:18:59,102 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada()
2018-05-19 13:18:59,102 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-05-19 13:18:59,102 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,103 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-05-19 13:18:59,103 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,103 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}
2018-05-19 13:18:59,103 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-05-19 13:18:59,103 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,103 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,104 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,104 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,104 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,104 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("Antojito");
}
2018-05-19 13:18:59,104 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("Antojito")
2018-05-19 13:18:59,105 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-05-19 13:18:59,105 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-05-19 13:18:59,105 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-05-19 13:18:59,105 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,105 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-05-19 13:18:59,105 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-05-19 13:18:59,105 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,105 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-05-19 13:18:59,106 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-05-19 13:18:59,106 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-05-19 13:18:59,106 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-05-19 13:18:59,106 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-05-19 13:18:59,106 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,106 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-05-19 13:18:59,106 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,107 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "Antojito"
2018-05-19 13:18:59,107 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-05-19 13:18:59,107 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,107 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void prepare(java.lang.String ingredient) {
}
2018-05-19 13:18:59,107 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,107 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtParameterImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtParameterImpl: java.lang.String ingredient
2018-05-19 13:18:59,108 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-05-19 13:18:59,108 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,108 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-05-19 13:18:59,108 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-05-19 13:18:59,108 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-05-19 13:18:59,108 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtFieldImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldImpl: private int myfield = 0;
2018-05-19 13:18:59,108 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-05-19 13:18:59,109 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-05-19 13:18:59,109 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-05-19 13:18:59,109 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: FieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}
2018-05-19 13:18:59,109 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    super();
    this.myfield = 0;
}
2018-05-19 13:18:59,109 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-05-19 13:18:59,109 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.util.ArrayList()
2018-05-19 13:18:59,109 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-05-19 13:18:59,110 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-05-19 13:18:59,110 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-05-19 13:18:59,110 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-05-19 13:18:59,110 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: this.myfield = 0
2018-05-19 13:18:59,110 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-05-19 13:18:59,110 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: this.myfield
2018-05-19 13:18:59,110 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: this
2018-05-19 13:18:59,110 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-05-19 13:18:59,111 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,111 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-05-19 13:18:59,111 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-05-19 13:18:59,111 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,111 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-05-19 13:18:59,111 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-05-19 13:18:59,111 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,112 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-05-19 13:18:59,112 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-05-19 13:18:59,112 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-05-19 13:18:59,112 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2018-05-19 13:18:59,112 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,113 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2018-05-19 13:18:59,113 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: myfield = super.size()
2018-05-19 13:18:59,113 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-05-19 13:18:59,113 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: myfield
2018-05-19 13:18:59,113 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-05-19 13:18:59,114 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-05-19 13:18:59,114 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,114 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-05-19 13:18:59,114 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-05-19 13:18:59,114 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,114 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-05-19 13:18:59,115 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-05-19 13:18:59,115 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,115 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-05-19 13:18:59,115 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.size()
2018-05-19 13:18:59,115 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-05-19 13:18:59,115 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-05-19 13:18:59,115 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-05-19 13:18:59,115 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-05-19 13:18:59,116 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: size()
2018-05-19 13:18:59,116 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-05-19 13:18:59,116 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-05-19 13:18:59,116 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-05-19 13:18:59,116 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: java.lang.Object o = super.get(myfield)
2018-05-19 13:18:59,116 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-05-19 13:18:59,117 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,117 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.get(myfield)
2018-05-19 13:18:59,117 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-05-19 13:18:59,117 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-05-19 13:18:59,117 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-05-19 13:18:59,117 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-05-19 13:18:59,117 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: get(int)
2018-05-19 13:18:59,117 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-05-19 13:18:59,117 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-05-19 13:18:59,118 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-05-19 13:18:59,118 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,118 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-05-19 13:18:59,118 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: myfield
2018-05-19 13:18:59,118 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-05-19 13:18:59,118 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-05-19 13:18:59,118 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,118 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-05-19 13:18:59,119 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-05-19 13:18:59,119 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,119 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-05-19 13:18:59,119 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-05-19 13:18:59,119 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,119 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-05-19 13:18:59,119 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: interface Foo {}
2018-05-19 13:18:59,120 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: interface Honey {
    void honey();
}
2018-05-19 13:18:59,120 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void honey();
2018-05-19 13:18:59,120 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,120 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: public interface ITostada extends spoon.test.filters.testclasses.Foo {
    spoon.test.filters.testclasses.ITostada make();
}
2018-05-19 13:18:59,120 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-05-19 13:18:59,120 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,120 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostada make();
2018-05-19 13:18:59,120 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-05-19 13:18:59,121 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,121 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,121 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,121 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: SubTostada() {
}
2018-05-19 13:18:59,121 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-05-19 13:18:59,121 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-05-19 13:18:59,121 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-05-19 13:18:59,121 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,121 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,121 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,122 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,122 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2018-05-19 13:18:59,122 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-05-19 13:18:59,122 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,122 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,122 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,122 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,122 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,123 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2018-05-19 13:18:59,123 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("SubTostada")
2018-05-19 13:18:59,123 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-05-19 13:18:59,123 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-05-19 13:18:59,123 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-05-19 13:18:59,123 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,123 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-05-19 13:18:59,123 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-05-19 13:18:59,123 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,124 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-05-19 13:18:59,124 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-05-19 13:18:59,124 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-05-19 13:18:59,124 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-05-19 13:18:59,124 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-05-19 13:18:59,124 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,124 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-05-19 13:18:59,124 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,125 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "SubTostada"
2018-05-19 13:18:59,125 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-05-19 13:18:59,125 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,125 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-05-19 13:18:59,125 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-05-19 13:18:59,125 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-05-19 13:18:59,125 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,125 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,125 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-05-19 13:18:59,125 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,126 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,126 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,126 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-05-19 13:18:59,126 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,126 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Tacos() {
}
2018-05-19 13:18:59,126 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-05-19 13:18:59,127 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-05-19 13:18:59,127 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-05-19 13:18:59,127 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-05-19 13:18:59,127 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,127 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-05-19 13:18:59,127 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,127 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}
2018-05-19 13:18:59,128 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-05-19 13:18:59,128 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,128 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,128 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,128 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,128 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-05-19 13:18:59,128 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,128 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return null;
}
2018-05-19 13:18:59,129 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return null
2018-05-19 13:18:59,129 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: null
2018-05-19 13:18:59,129 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: <nulltype>
2018-05-19 13:18:59,129 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2018-05-19 13:18:59,129 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,129 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2018-05-19 13:18:59,129 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()
2018-05-19 13:18:59,130 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-05-19 13:18:59,130 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-05-19 13:18:59,130 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-05-19 13:18:59,130 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,130 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtConstructorCallImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorCallImpl: new java.util.ArrayList<java.lang.String>()
2018-05-19 13:18:59,130 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.util.ArrayList()
2018-05-19 13:18:59,130 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-05-19 13:18:59,130 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-05-19 13:18:59,130 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-05-19 13:18:59,131 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-05-19 13:18:59,131 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-05-19 13:18:59,131 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,131 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: strings.size()
2018-05-19 13:18:59,131 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: strings
2018-05-19 13:18:59,131 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: strings
2018-05-19 13:18:59,131 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-05-19 13:18:59,131 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-05-19 13:18:59,131 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-05-19 13:18:59,132 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,132 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: size()
2018-05-19 13:18:59,132 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-05-19 13:18:59,132 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-05-19 13:18:59,132 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-05-19 13:18:59,132 INFO spoon.Launcher - Step 6) Skipped element, because CtFunction#accept(input) returned false
Parameter 1) CtMethodImpl: void honey();
2018-05-19 13:18:59,132 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-05-19 13:18:59,132 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,133 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Honey
2018-05-19 13:18:59,133 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,133 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Tostada() {
}
2018-05-19 13:18:59,133 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-05-19 13:18:59,133 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-05-19 13:18:59,133 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada()
2018-05-19 13:18:59,133 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-05-19 13:18:59,133 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,133 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-05-19 13:18:59,133 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,134 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2018-05-19 13:18:59,134 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-05-19 13:18:59,134 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,134 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,134 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,134 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,134 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-05-19 13:18:59,134 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,135 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2018-05-19 13:18:59,135 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2018-05-19 13:18:59,135 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2018-05-19 13:18:59,135 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada$1()
2018-05-19 13:18:59,136 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada.1
2018-05-19 13:18:59,136 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,136 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,136 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,137 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,137 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,137 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,137 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: 1() {
}
2018-05-19 13:18:59,137 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-05-19 13:18:59,137 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-05-19 13:18:59,137 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-05-19 13:18:59,138 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,138 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,138 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,138 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,138 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}
2018-05-19 13:18:59,138 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-05-19 13:18:59,138 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,138 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,138 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,139 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,139 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,139 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    int a = 3;
    super.prepare();
}
2018-05-19 13:18:59,139 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int a = 3
2018-05-19 13:18:59,139 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-05-19 13:18:59,139 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-05-19 13:18:59,139 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-05-19 13:18:59,139 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-05-19 13:18:59,139 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-05-19 13:18:59,140 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-05-19 13:18:59,140 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,140 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,140 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-05-19 13:18:59,140 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-05-19 13:18:59,140 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-05-19 13:18:59,140 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,140 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
}
2018-05-19 13:18:59,140 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-05-19 13:18:59,140 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,141 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,141 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,141 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,141 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,141 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-05-19 13:18:59,141 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public java.lang.String toString() {
    return "";
}
2018-05-19 13:18:59,141 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-05-19 13:18:59,141 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,142 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,142 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,142 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,142 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-05-19 13:18:59,142 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,142 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return "";
}
2018-05-19 13:18:59,142 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return ""
2018-05-19 13:18:59,142 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: ""
2018-05-19 13:18:59,142 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-05-19 13:18:59,143 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,143 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void honey() {
}
2018-05-19 13:18:59,143 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-05-19 13:18:59,143 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,143 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,143 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-05-19 13:18:59,143 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-05-19 13:18:59,143 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,143 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-05-19 13:18:59,144 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void foo() {
}
2018-05-19 13:18:59,144 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-05-19 13:18:59,144 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
[INFO] Tests run: 43, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.971 s - in spoon.test.filters.FilterTest
[INFO] Running spoon.test.filters.CUFilterTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.106 s - in spoon.test.filters.CUFilterTest
[INFO] Running spoon.test.literal.LiteralTest
2018-05-19 13:18:59,461 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Longs at (/root/workspace/INRIA/spoon/381041449/src/test/resources/noclasspath/SecondaryIndexManager.java:611)
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.518 s - in spoon.test.literal.LiteralTest
[INFO] Running spoon.test.parameters.ParameterTest
2018-05-19 13:18:59,962 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable typeRatingFilters at (/root/workspace/INRIA/spoon/381041449/src/test/resources/noclasspath/Tacos.java:4)
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.115 s - in spoon.test.parameters.ParameterTest
[INFO] Running spoon.test.api.APITest
./target/nooutput_d84ef6a2-873a-4248-9105-d5cbf13834e1
[INFO] Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 9.511 s - in spoon.test.api.APITest
[INFO] Running spoon.test.api.FileSystemFolderTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.api.FileSystemFolderTest
[INFO] Running spoon.test.api.NoClasspathTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.179 s - in spoon.test.api.NoClasspathTest
[INFO] Running spoon.test.api.MetamodelTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.857 s - in spoon.test.api.MetamodelTest
[INFO] Running spoon.test.ctBodyHolder.CtBodyHolderTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.25 s - in spoon.test.ctBodyHolder.CtBodyHolderTest
[INFO] Running spoon.test.lambda.LambdaTest
2018-05-19 13:19:12,737 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Strings at (/root/workspace/INRIA/spoon/381041449/src/test/resources/noclasspath/lambdas/TypeAccessInLambda.java:6)
[INFO] Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.321 s - in spoon.test.lambda.LambdaTest
[INFO] Running spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.009 s - in spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
[INFO] Running spoon.test.parent.TopLevelTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.03 s - in spoon.test.parent.TopLevelTypeTest
[INFO] Running spoon.test.parent.NullParentTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.242 s - in spoon.test.parent.NullParentTest
[INFO] Running spoon.test.parent.SetParentTest
[INFO] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.063 s - in spoon.test.parent.SetParentTest
[INFO] Running spoon.test.parent.ParentContractTest
[INFO] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.553 s - in spoon.test.parent.ParentContractTest
[INFO] Running spoon.test.parent.ParentTest
[WARNING] Tests run: 11, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.468 s - in spoon.test.parent.ParentTest
[INFO] Running spoon.test.variable.AccessFullyQualifiedFieldTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.541 s - in spoon.test.variable.AccessFullyQualifiedFieldTest
[INFO] Running spoon.test.variable.AccessTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.255 s - in spoon.test.variable.AccessTest
[INFO] Running spoon.test.jar.JarTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.087 s - in spoon.test.jar.JarTest
[INFO] Running spoon.test.method_overriding.MethodOverriddingTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.078 s - in spoon.test.method_overriding.MethodOverriddingTest
[INFO] Running spoon.test.annotation.AnnotationValuesTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.109 s - in spoon.test.annotation.AnnotationValuesTest
[INFO] Running spoon.test.annotation.AnnotationTest
[INFO] Tests run: 52, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.817 s - in spoon.test.annotation.AnnotationTest
[INFO] Running spoon.test.annotation.AnnotationLoopTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.028 s - in spoon.test.annotation.AnnotationLoopTest
[INFO] Running spoon.test.snippets.SnippetTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.252 s - in spoon.test.snippets.SnippetTest
[INFO] Running spoon.test.model.TypeTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.296 s - in spoon.test.model.TypeTest
[INFO] Running spoon.test.model.AnonymousExecutableTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 s - in spoon.test.model.AnonymousExecutableTest
[INFO] Running spoon.test.model.SwitchCaseTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.071 s - in spoon.test.model.SwitchCaseTest
[INFO] Running spoon.test.model.BlockTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.059 s - in spoon.test.model.BlockTest
[INFO] Running spoon.test.strings.StringLiteralTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 s - in spoon.test.strings.StringLiteralTest
[INFO] Running spoon.test.strings.StringTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 s - in spoon.test.strings.StringTest
[INFO] Running spoon.test.module.TestModule
[WARNING] Tests run: 8, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.072 s - in spoon.test.module.TestModule
[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   MavenLauncherTest.mavenLauncherTestMultiModulesAndVariables:70 Content of classpath: 
[ERROR]   MavenLauncherTest.spoonMavenLauncherTest:19 expected:<7> but was:<0>
[ERROR]   JavaReflectionTreeBuilderTest.testScannerClass:76
[ERROR]   JavaReflectionTreeBuilderTest.testShadowModelEqualsNormalModel:187 Found 272 problems:
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=6]#typeMember
Shadow: public static final enum RequiresModifier {
    STATIC, TRANSITIVE;
    private RequiresModifier() {
    }

    private static transient boolean[] $jacocoData;
}
Normal: enum RequiresModifier {
    STATIC, TRANSITIVE;}

Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=6]#value[index=0]#value
Shadow: STATIC
Normal: STATIC

Difference on path: #typeMember[index=6]#value[index=1]#value
Shadow: TRANSITIVE
Normal: TRANSITIVE

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=8]#typeMember
Shadow: public static final enum CommentType {
    FILE, JAVADOC, INLINE, BLOCK;
    private CommentType() {
    }

    private static transient boolean[] $jacocoData;
}
Normal: enum CommentType {
    FILE, JAVADOC, INLINE, BLOCK;}

Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=8]#value[index=0]#value
Shadow: FILE
Normal: FILE

Difference on path: #typeMember[index=8]#value[index=1]#value
Shadow: JAVADOC
Normal: JAVADOC

Difference on path: #typeMember[index=8]#value[index=2]#value
Shadow: INLINE
Normal: INLINE

Difference on path: #typeMember[index=8]#value[index=3]#value
Shadow: BLOCK
Normal: BLOCK

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeParameter[index=0]#superType
Shadow: null
Normal: java.lang.Object

Missing shadow typeMember: spoon.support.reflect.declaration.CtClassImpl$NewInstanceClassloader(java.io.File)
Difference on path: #typeMember[index=30]#typeMember
Shadow: null
Normal: NewInstanceClassloader(java.io.File binaryOutputDirectory) throws java.net.MalformedURLException {
    super(new java.net.URL[]{ binaryOutputDirectory.toURI().toURL() });
}

Unexpected shadow typeMember: spoon.support.reflect.declaration.CtClassImpl$NewInstanceClassloader(spoon.support.reflect.declaration.CtClassImpl,java.io.File)
Unexpected shadow typeMember: this$0
Unexpected shadow typeMember: $jacocoData
Missing shadow typeMember: getConstructor(spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public spoon.reflect.declaration.CtConstructor<T> getConstructor(spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {
    for (spoon.reflect.declaration.CtTypeMember typeMember : getTypeMembers()) {
        if (!(typeMember instanceof spoon.reflect.declaration.CtConstructor)) {
            continue;
        }
        spoon.reflect.declaration.CtConstructor<T> c = ((spoon.reflect.declaration.CtConstructor<T>) (typeMember));
        boolean cont = (c.getParameters().size()) == (parameterTypes.length);
        for (int i = 0; (cont && (i < (c.getParameters().size()))) && (i < (parameterTypes.length)); i++) {
            if (!(parameterTypes[i].getQualifiedName().equals(c.getParameters().get(i).getType().getQualifiedName()))) {
                cont = false;
            }
        }
        if (cont) {
            return c;
        }
    }
    return null;
}

Unexpected shadow typeMember: getConstructor(spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeParameter[index=0]#superType
Shadow: null
Normal: java.lang.Object

Missing shadow typeMember: getConstructor(spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: /**
 * Returns the constructor of the class that takes the given argument types.
 *
 * Derived from {@link #getTypeMembers()}
 */
@spoon.support.DerivedProperty
@spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONSTRUCTOR)
spoon.reflect.declaration.CtConstructor<T> getConstructor(spoon.reflect.reference.CtTypeReference<?>... parameterTypes);

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: getConstructor(spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=15]#typeMember
Shadow: private abstract static enum InsertType {
    BEFORE, AFTER;
    InsertType(java.lang.String arg0, int arg1, spoon.support.reflect.code.CtStatementImpl. arg2) {
    }

    private InsertType() {
    }

    public int indexOfReference(java.util.List arg0, spoon.reflect.declaration.CtElement arg1) {
    }

    abstract void insertFromFirstStatement(spoon.reflect.code.CtBlock<?> arg0, spoon.reflect.code.CtStatement arg1, spoon.reflect.code.CtStatementList arg2) {
    }

    abstract <T extends spoon.reflect.declaration.CtElement> java.util.List<T> insertFromLastStatement(java.util.List<T> arg0, spoon.reflect.code.CtStatement arg1, spoon.reflect.code.CtStatementList arg2) {
    }

    abstract void insert(spoon.reflect.code.CtBlock<?> arg0, spoon.reflect.code.CtStatementList arg1) {
    }

    private static transient boolean[] $jacocoData;
}
Normal: private enum InsertType {
    BEFORE {
        @java.lang.Override
        void insert(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatementList statementsToBeInserted) {
            block.insertBegin(statementsToBeInserted);
        }

        @java.lang.Override
        void insertFromFirstStatement(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
            final java.util.List<spoon.reflect.code.CtStatement> copy = new java.util.ArrayList<>(block.getStatements());
            int indexOfTargetElement = indexOfReference(block.getStatements(), target);
            for (spoon.reflect.code.CtStatement ctStatement : statementsToBeInserted) {
                copy.add((indexOfTargetElement++), ctStatement);
            }
            block.setStatements(copy);
        }

        @java.lang.Override
        <T extends spoon.reflect.declaration.CtElement> java.util.List<T> insertFromLastStatement(java.util.List<T> statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
            final java.util.List<T> copy = new java.util.ArrayList<>(statements);
            int indexOfTargetElement = indexOfReference(statements, target);
            for (int j = (statementsToBeInserted.getStatements().size()) - 1; j >= 0; j--) {
                copy.add(indexOfTargetElement, ((T) (statementsToBeInserted.getStatements().get(j))));
            }
            return copy;
        }
    }, AFTER {
        @java.lang.Override
        void insert(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatementList statementsToBeInserted) {
            block.insertEnd(statementsToBeInserted);
        }

        @java.lang.Override
        void insertFromFirstStatement(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
            final java.util.List<spoon.reflect.code.CtStatement> copy = new java.util.ArrayList<>(block.getStatements());
            int indexOfTargetElement = indexOfReference(block.getStatements(), target);
            for (spoon.reflect.code.CtStatement s : statementsToBeInserted) {
                copy.add((++indexOfTargetElement), s);
            }
            block.setStatements(copy);
        }

        @java.lang.Override
        <T extends spoon.reflect.declaration.CtElement> java.util.List<T> insertFromLastStatement(java.util.List<T> statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
            final java.util.List<T> copy = new java.util.ArrayList<>(statements);
            int indexOfTargetElement = (indexOfReference(copy, target)) + 1;
            for (int j = (statementsToBeInserted.getStatements().size()) - 1; j >= 0; j--) {
                copy.add(indexOfTargetElement, ((T) (statementsToBeInserted.getStatements().get(j))));
            }
            return copy;
        }
    };
    public int indexOfReference(java.util.List statements, spoon.reflect.declaration.CtElement target) {
        int indexOfTargetElement = -1;
        // check the reference not the equality
        for (int i = 0; i < (statements.size()); i++) {
            if ((statements.get(i)) == target) {
                indexOfTargetElement = i;
                break;
            }
        }
        return indexOfTargetElement;
    }

    abstract void insert(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatementList statementsToBeInserted);

    abstract void insertFromFirstStatement(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted);

    abstract <T extends spoon.reflect.declaration.CtElement> java.util.List<T> insertFromLastStatement(java.util.List<T> statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted);
}

Difference on path: #typeMember[index=15]#typeMember[index=5]#body
Shadow: {
}
Normal: null

Difference on path: #typeMember[index=15]#typeMember[index=4]#body
Shadow: {
}
Normal: null

Difference on path: #typeMember[index=15]#typeMember[index=3]#body
Shadow: {
}
Normal: null

Unexpected shadow typeMember: spoon.support.reflect.code.CtStatementImpl$InsertType(java.lang.String,int,spoon.support.reflect.code.CtStatementImpl$)
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=15]#value[index=0]#value
Shadow: BEFORE
Normal: BEFORE {
    @java.lang.Override
    void insert(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatementList statementsToBeInserted) {
        block.insertBegin(statementsToBeInserted);
    }

    @java.lang.Override
    void insertFromFirstStatement(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
        final java.util.List<spoon.reflect.code.CtStatement> copy = new java.util.ArrayList<>(block.getStatements());
        int indexOfTargetElement = indexOfReference(block.getStatements(), target);
        for (spoon.reflect.code.CtStatement ctStatement : statementsToBeInserted) {
            copy.add((indexOfTargetElement++), ctStatement);
        }
        block.setStatements(copy);
    }

    @java.lang.Override
    <T extends spoon.reflect.declaration.CtElement> java.util.List<T> insertFromLastStatement(java.util.List<T> statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
        final java.util.List<T> copy = new java.util.ArrayList<>(statements);
        int indexOfTargetElement = indexOfReference(statements, target);
        for (int j = (statementsToBeInserted.getStatements().size()) - 1; j >= 0; j--) {
            copy.add(indexOfTargetElement, ((T) (statementsToBeInserted.getStatements().get(j))));
        }
        return copy;
    }
}

Difference on path: #typeMember[index=15]#value[index=1]#value
Shadow: AFTER
Normal: AFTER {
    @java.lang.Override
    void insert(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatementList statementsToBeInserted) {
        block.insertEnd(statementsToBeInserted);
    }

    @java.lang.Override
    void insertFromFirstStatement(spoon.reflect.code.CtBlock<?> block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
        final java.util.List<spoon.reflect.code.CtStatement> copy = new java.util.ArrayList<>(block.getStatements());
        int indexOfTargetElement = indexOfReference(block.getStatements(), target);
        for (spoon.reflect.code.CtStatement s : statementsToBeInserted) {
            copy.add((++indexOfTargetElement), s);
        }
        block.setStatements(copy);
    }

    @java.lang.Override
    <T extends spoon.reflect.declaration.CtElement> java.util.List<T> insertFromLastStatement(java.util.List<T> statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {
        final java.util.List<T> copy = new java.util.ArrayList<>(statements);
        int indexOfTargetElement = (indexOfReference(copy, target)) + 1;
        for (int j = (statementsToBeInserted.getStatements().size()) - 1; j >= 0; j--) {
            copy.add(indexOfTargetElement, ((T) (statementsToBeInserted.getStatements().get(j))));
        }
        return copy;
    }
}

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Missing shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public <R> spoon.reflect.declaration.CtMethod<R> getMethod(spoon.reflect.reference.CtTypeReference<R> returnType, java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {
    return null;
}

Missing shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public <R> spoon.reflect.declaration.CtMethod<R> getMethod(java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {
    return null;
}

Missing shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public java.util.Set<spoon.reflect.declaration.CtMethod<?>> getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference<?>... annotationTypes) {
    return java.util.Collections.emptySet();
}

Unexpected shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Missing shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
@java.lang.SuppressWarnings("unchecked")
public <R> spoon.reflect.declaration.CtMethod<R> getMethod(spoon.reflect.reference.CtTypeReference<R> returnType, java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {
    for (spoon.reflect.declaration.CtTypeMember typeMember : typeMembers) {
        if (!(typeMember instanceof spoon.reflect.declaration.CtMethod)) {
            continue;
        }
        spoon.reflect.declaration.CtMethod<R> m = ((spoon.reflect.declaration.CtMethod<R>) (typeMember));
        if (m.getSimpleName().equals(name)) {
            if (!(m.getType().equals(returnType))) {
                continue;
            }
            boolean cont = (m.getParameters().size()) == (parameterTypes.length);
            for (int i = 0; (cont && (i < (m.getParameters().size()))) && (i < (parameterTypes.length)); i++) {
                if (!(m.getParameters().get(i).getType().getQualifiedName().equals(parameterTypes[i].getQualifiedName()))) {
                    cont = false;
                }
            }
            if (cont) {
                return m;
            }
        }
    }
    return null;
}

Missing shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
@java.lang.SuppressWarnings("unchecked")
public <R> spoon.reflect.declaration.CtMethod<R> getMethod(java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {
    if (name == null) {
        return null;
    }
    for (spoon.reflect.declaration.CtMethod<?> candidate : getMethodsByName(name)) {
        boolean cont = (candidate.getParameters().size()) == (parameterTypes.length);
        for (int i = 0; (cont && (i < (candidate.getParameters().size()))) && (i < (parameterTypes.length)); i++) {
            final spoon.reflect.reference.CtTypeReference<?> ctParameterType = candidate.getParameters().get(i).getType();
            final spoon.reflect.reference.CtTypeReference<?> parameterType = parameterTypes[i];
            if (parameterType instanceof spoon.reflect.reference.CtArrayTypeReference) {
                if (ctParameterType instanceof spoon.reflect.reference.CtArrayTypeReference) {
                    if (!(isSameParameter(candidate, ((spoon.reflect.reference.CtArrayTypeReference) (ctParameterType)).getComponentType(), ((spoon.reflect.reference.CtArrayTypeReference) (parameterType)).getComponentType()))) {
                        cont = false;
                    }else {
                        if (!((((spoon.reflect.reference.CtArrayTypeReference) (ctParameterType)).getDimensionCount()) == (((spoon.reflect.reference.CtArrayTypeReference) (parameterType)).getDimensionCount()))) {
                            cont = false;
                        }
                    }
                }else {
                    cont = false;
                }
            }else
                if (!(isSameParameter(candidate, ctParameterType, parameterType))) {
                    cont = false;
                }

        }
        if (cont) {
            return ((spoon.reflect.declaration.CtMethod<R>) (candidate));
        }
    }
    return null;
}

Missing shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public java.util.Set<spoon.reflect.declaration.CtMethod<?>> getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference<?>... annotationTypes) {
    java.util.Set<spoon.reflect.declaration.CtMethod<?>> result = new spoon.support.util.SignatureBasedSortedSet<>();
    for (spoon.reflect.declaration.CtTypeMember typeMember : typeMembers) {
        if (!(typeMember instanceof spoon.reflect.declaration.CtMethod)) {
            continue;
        }
        spoon.reflect.declaration.CtMethod<?> m = ((spoon.reflect.declaration.CtMethod<?>) (typeMember));
        for (spoon.reflect.declaration.CtAnnotation<?> a : m.getAnnotations()) {
            if (java.util.Arrays.asList(annotationTypes).contains(a.getAnnotationType())) {
                result.add(m);
            }
        }
    }
    return result;
}

Unexpected shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Missing shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: /**
 * Gets a method from its return type, name, and parameter types.
 *
 * @return null if does not exit
 */
@spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.METHOD)
<R> spoon.reflect.declaration.CtMethod<R> getMethod(spoon.reflect.reference.CtTypeReference<R> returnType, java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes);

Missing shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: /**
 * Gets a method from its name and parameter types.
 *
 * @return null if does not exit
 */
@spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.METHOD)
<R> spoon.reflect.declaration.CtMethod<R> getMethod(java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes);

Missing shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: /**
 * Returns the methods that are directly declared by this class or
 * interface and annotated with one of the given annotations.
 */
@spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.METHOD)
java.util.Set<spoon.reflect.declaration.CtMethod<?>> getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference<?>... annotationTypes);

Unexpected shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeParameter[index=0]#superType
Shadow: null
Normal: java.lang.Object

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=7]#body
Shadow: {
}
Normal: null

Difference on path: #typeMember[index=3]#body
Shadow: {
}
Normal: null

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=10]#typeMember
Shadow: public static final enum TagType {
    AUTHOR, DEPRECATED, EXCEPTION, PARAM, RETURN, SEE, SERIAL, SERIAL_DATA, SERIAL_FIELD, SINCE, THROWS, VERSION, UNKNOWN;
    private TagType() {
    }

    public boolean hasParam() {
    }

    public static spoon.reflect.code.CtJavaDocTag.TagType tagFromName(java.lang.String arg0) {
    }

    public java.lang.String toString() {
    }

    private static transient boolean[] $jacocoData;
}
Normal: /**
 * Define the possible type for a tag
 */
enum TagType {
    AUTHOR, DEPRECATED, EXCEPTION, PARAM, RETURN, SEE, SERIAL, SERIAL_DATA, SERIAL_FIELD, SINCE, THROWS, VERSION, UNKNOWN;
    /**
     * Return true if the tag can have a parameter
     *
     * @return true if the tag can have a parameter
     */
    public boolean hasParam() {
        return ((this) == (spoon.reflect.code.CtJavaDocTag.TagType.PARAM)) || ((this) == (spoon.reflect.code.CtJavaDocTag.TagType.THROWS));
    }

    /**
     * Get the tag type associated to a name
     *
     * @param tagName
     * 		the tag name
     * @return the tag type
     */
    public static spoon.reflect.code.CtJavaDocTag.TagType tagFromName(java.lang.String tagName) {
        for (spoon.reflect.code.CtJavaDocTag.TagType t : spoon.reflect.code.CtJavaDocTag.TagType.values()) {
            if (t.name().toLowerCase().equals(tagName.toLowerCase())) {
                return t;
            }
        }
        return spoon.reflect.code.CtJavaDocTag.TagType.UNKNOWN;
    }

    @java.lang.Override
    public java.lang.String toString() {
        return (spoon.reflect.code.CtJavaDocTag.JAVADOC_TAG_PREFIX) + (name().toLowerCase());
    }
}

Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=10]#value[index=0]#value
Shadow: AUTHOR
Normal: AUTHOR

Difference on path: #typeMember[index=10]#value[index=1]#value
Shadow: DEPRECATED
Normal: DEPRECATED

Difference on path: #typeMember[index=10]#value[index=2]#value
Shadow: EXCEPTION
Normal: EXCEPTION

Difference on path: #typeMember[index=10]#value[index=3]#value
Shadow: PARAM
Normal: PARAM

Difference on path: #typeMember[index=10]#value[index=4]#value
Shadow: RETURN
Normal: RETURN

Difference on path: #typeMember[index=10]#value[index=5]#value
Shadow: SEE
Normal: SEE

Difference on path: #typeMember[index=10]#value[index=6]#value
Shadow: SERIAL
Normal: SERIAL

Difference on path: #typeMember[index=10]#value[index=7]#value
Shadow: SERIAL_DATA
Normal: SERIAL_DATA

Difference on path: #typeMember[index=10]#value[index=8]#value
Shadow: SERIAL_FIELD
Normal: SERIAL_FIELD

Difference on path: #typeMember[index=10]#value[index=9]#value
Shadow: SINCE
Normal: SINCE

Difference on path: #typeMember[index=10]#value[index=10]#value
Shadow: THROWS
Normal: THROWS

Difference on path: #typeMember[index=10]#value[index=11]#value
Shadow: VERSION
Normal: VERSION

Difference on path: #typeMember[index=10]#value[index=12]#value
Shadow: UNKNOWN
Normal: UNKNOWN

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Difference on path: #typeMember[index=13]#body
Shadow: null
Normal: {
    if (element == null) {
        return null;
    }
    if (element instanceof spoon.reflect.declaration.CtMethod) {
        return spoon.reflect.declaration.CtAnnotatedElementType.METHOD;
    }
    if ((element instanceof spoon.reflect.declaration.CtAnnotation) || (element instanceof spoon.reflect.declaration.CtAnnotationType)) {
        return spoon.reflect.declaration.CtAnnotatedElementType.ANNOTATION_TYPE;
    }
    if (element instanceof spoon.reflect.declaration.CtType) {
        return spoon.reflect.declaration.CtAnnotatedElementType.TYPE;
    }
    if (element instanceof spoon.reflect.declaration.CtField) {
        return spoon.reflect.declaration.CtAnnotatedElementType.FIELD;
    }
    if (element instanceof spoon.reflect.declaration.CtConstructor) {
        return spoon.reflect.declaration.CtAnnotatedElementType.CONSTRUCTOR;
    }
    if (element instanceof spoon.reflect.declaration.CtParameter) {
        return spoon.reflect.declaration.CtAnnotatedElementType.PARAMETER;
    }
    if (element instanceof spoon.reflect.code.CtLocalVariable) {
        return spoon.reflect.declaration.CtAnnotatedElementType.LOCAL_VARIABLE;
    }
    if (element instanceof spoon.reflect.declaration.CtPackage) {
        return spoon.reflect.declaration.CtAnnotatedElementType.PACKAGE;
    }
    if (element instanceof spoon.reflect.reference.CtTypeParameterReference) {
        return spoon.reflect.declaration.CtAnnotatedElementType.TYPE_PARAMETER;
    }
    if (element instanceof spoon.reflect.reference.CtTypeReference) {
        return spoon.reflect.declaration.CtAnnotatedElementType.TYPE_USE;
    }
    return null;
}

Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Missing shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public <R> spoon.reflect.declaration.CtMethod<R> getMethod(spoon.reflect.reference.CtTypeReference<R> returnType, java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {
    if ((("values".equals(name)) && ((parameterTypes.length) == 0)) && (returnType.equals(getReference()))) {
        return valuesMethod();
    }else
        if (((("valueOf".equals(name)) && ((parameterTypes.length) == 1)) && (parameterTypes[0].equals(factory.Type().STRING))) && (returnType.equals(factory.Type().createArrayReference(getReference())))) {
            return valueOfMethod();
        }else {
            return super.getMethod(returnType, name, parameterTypes);
        }

}

Missing shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])
Difference on path: #typeMember
Shadow: null
Normal: @java.lang.Override
public <R> spoon.reflect.declaration.CtMethod<R> getMethod(java.lang.String name, spoon.reflect.reference.CtTypeReference<?>... parameterTypes) {
    if (("values".equals(name)) && ((parameterTypes.length) == 0)) {
        return valuesMethod();
    }else
        if ((("valueOf".equals(name)) && ((parameterTypes.length) == 1)) && (parameterTypes[0].equals(factory.Type().STRING))) {
            return valueOfMethod();
        }else {
            return super.getMethod(name, parameterTypes);
        }

}

Unexpected shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[][])
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
Unexpected shadow typeMember: $jacocoData
[ERROR]   MainTest.testMain_checkShadow:109->checkShadow:266 cannot find decl for asList(T[])
[INFO] 
[ERROR] Tests run: 1420, Failures: 5, Errors: 0, Skipped: 4
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 06:16 min
[INFO] Finished at: 2018-05-19T13:19:19+02:00
[INFO] Final Memory: 26M/574M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.20.1:test (default-test) on project spoon-core: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/INRIA/spoon/381041449/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
