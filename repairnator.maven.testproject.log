[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for fr.inria.gforge.spoon:spoon-core:jar:7.1.0-SNAPSHOT
[WARNING] 'build.plugins.plugin.version' for org.pitest:pitest-maven is missing. @ line 521, column 15
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] Inspecting build with total of 1 modules...
[INFO] Installing Nexus Staging features:
[INFO]   ... total of 1 executions of maven-deploy-plugin replaced with nexus-staging-maven-plugin
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spoon Core 7.1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ spoon-core ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.1:prepare-agent (default) @ spoon-core ---
[INFO] argLine set to -javaagent:/root/./workspace/INRIA/spoon/404936373/.m2/org/jacoco/org.jacoco.agent/0.8.1/org.jacoco.agent-0.8.1-runtime.jar=destfile=/root/workspace/INRIA/spoon/404936373/target/jacoco.exec
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ spoon-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ spoon-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 177 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ spoon-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.21.0:test (default-test) @ spoon-core ---
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom (4 KB at 6.1 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom (3 KB at 81.8 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar (83 KB at 1476.1 KB/sec)
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running spoon.test.api.NoClasspathTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.999 s - in spoon.test.api.NoClasspathTest
[INFO] Running spoon.test.api.APITest
./target/nooutput_a958dde3-6561-4d59-af17-cd600ece71ca
[ERROR] Tests run: 23, Failures: 1, Errors: 3, Skipped: 0, Time elapsed: 49.419 s <<< FAILURE! - in spoon.test.api.APITest
[ERROR] testPrintNotAllSourcesWithNames(spoon.test.api.APITest)  Time elapsed: 2.005 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:template
	CtClassImpl:AbstractTemplate
	CtMethodImpl:isAddGeneratedBy
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/template/AbstractTemplate.java:62) failed
	at spoon.test.api.APITest.testPrintNotAllSourcesWithNames(APITest.java:242)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:template
	CtClassImpl:AbstractTemplate
	CtMethodImpl:isAddGeneratedBy
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/template/AbstractTemplate.java:62) failed
	at spoon.test.api.APITest.testPrintNotAllSourcesWithNames(APITest.java:242)
Caused by: java.lang.NullPointerException
	at spoon.test.api.APITest.testPrintNotAllSourcesWithNames(APITest.java:242)

[ERROR] testPrintNotAllSourcesInCommandLine(spoon.test.api.APITest)  Time elapsed: 23.766 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:template
	CtClassImpl:AbstractTemplate
	CtMethodImpl:isAddGeneratedBy
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/template/AbstractTemplate.java:62) failed
	at spoon.test.api.APITest.testPrintNotAllSourcesInCommandLine(APITest.java:256)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:template
	CtClassImpl:AbstractTemplate
	CtMethodImpl:isAddGeneratedBy
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/template/AbstractTemplate.java:62) failed
	at spoon.test.api.APITest.testPrintNotAllSourcesInCommandLine(APITest.java:256)
Caused by: java.lang.NullPointerException
	at spoon.test.api.APITest.testPrintNotAllSourcesInCommandLine(APITest.java:256)

[ERROR] testPrintNotAllSourcesWithFilter(spoon.test.api.APITest)  Time elapsed: 0.428 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:template
	CtClassImpl:AbstractTemplate
	CtMethodImpl:isAddGeneratedBy
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/template/AbstractTemplate.java:62) failed
	at spoon.test.api.APITest.testPrintNotAllSourcesWithFilter(APITest.java:223)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:template
	CtClassImpl:AbstractTemplate
	CtMethodImpl:isAddGeneratedBy
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/template/AbstractTemplate.java:62) failed
	at spoon.test.api.APITest.testPrintNotAllSourcesWithFilter(APITest.java:223)
Caused by: java.lang.NullPointerException
	at spoon.test.api.APITest.testPrintNotAllSourcesWithFilter(APITest.java:223)

[ERROR] testSetterInNodes(spoon.test.api.APITest)  Time elapsed: 19.833 s  <<< FAILURE!
java.lang.AssertionError: Check the method setContentDescription(spoon.reflect.code.CtJavadocDescription) in the declaring class spoon.support.reflect.code.CtJavaDocImpl
	at spoon.test.api.APITest.testSetterInNodes(APITest.java:411)

[INFO] Running spoon.test.api.MetamodelTest
[ERROR] Tests run: 14, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 11.513 s <<< FAILURE! - in spoon.test.api.MetamodelTest
[ERROR] testRuntimeMetamodel(spoon.test.api.MetamodelTest)  Time elapsed: 0.213 s  <<< FAILURE!
java.lang.AssertionError: 
You might need to update api/Metamodel.java: Field CtJavaDoc#commentContent<java.lang.String>.derived hardcoded value = false but computed value is true
These Metamodel.Field instances are missing on Type CtJavaDoc: [javadocContent]
	at spoon.test.api.MetamodelTest.testRuntimeMetamodel(MetamodelTest.java:114)

[ERROR] testMetamodelWithoutSources(spoon.test.api.MetamodelTest)  Time elapsed: 4.877 s  <<< FAILURE!
java.lang.AssertionError: expected:<0> but was:<4>
	at spoon.test.api.MetamodelTest.testMetamodelWithoutSources(MetamodelTest.java:245)

[ERROR] testGetAllMetamodelInterfacess(spoon.test.api.MetamodelTest)  Time elapsed: 1.031 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: <[spoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.CtSwitch, spoon.reflect.code.CtJavaDocTag, spoon.reflect.declaration.CtNamedElement, spoon.reflect.code.CtUnaryOperator, spoon.reflect.declaration.CtElement, spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.code.CtAssert, spoon.reflect.declaration.CtExecutable, spoon.reflect.code.CtThisAccess, spoon.reflect.declaration.CtImport, spoon.reflect.declaration.CtField, spoon.reflect.reference.CtTypeParameterReference, spoon.reflect.reference.CtParameterReference, spoon.reflect.code.CtCodeSnippetExpression, spoon.reflect.declaration.CtModule, spoon.reflect.code.CtJavadocDescription, spoon.reflect.reference.CtIntersectionTypeReference, spoon.reflect.code.CtFieldAccess, spoon.reflect.reference.CtVariableReference, spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtFieldWrite, spoon.reflect.code.CtSynchronized, spoon.reflect.declaration.CtMethod, spoon.reflect.code.CtLocalVariable, spoon.reflect.declaration.CtEnum, spoon.reflect.code.CtIf, spoon.reflect.code.CtThrow, spoon.reflect.declaration.CtPackage, spoon.reflect.reference.CtWildcardReference, spoon.reflect.code.CtBreak, spoon.reflect.code.CtStatement, spoon.reflect.reference.CtExecutableReference, spoon.reflect.declaration.CtEnumValue, spoon.reflect.code.CtExpression, spoon.reflect.code.CtNewArray, spoon.reflect.code.CtNewClass, spoon.reflect.reference.CtLocalVariableReference, spoon.reflect.code.CtLambda, spoon.reflect.declaration.CtConstructor, spoon.reflect.code.CtJavadocSnippetDescription, spoon.reflect.code.CtCodeSnippetStatement, spoon.reflect.code.CtTargetedExpression, spoon.reflect.declaration.CtVariable, spoon.reflect.declaration.CtModuleDirective, spoon.reflect.declaration.CtPackageExport, spoon.reflect.code.CtCase, spoon.reflect.code.CtConstructorCall, spoon.reflect.code.CtBodyHolder, spoon.reflect.declaration.ModifierKind, spoon.reflect.reference.CtUnboundVariableReference, spoon.reflect.code.CtFieldRead, spoon.reflect.declaration.CtProvidedService, spoon.reflect.code.CtTry, spoon.reflect.code.UnaryOperatorKind, spoon.reflect.code.CtLiteral, spoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtPackageReference, spoon.reflect.code.CtStatementList, spoon.reflect.code.CtSuperAccess, spoon.reflect.declaration.CtInterface, spoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtFor, spoon.reflect.code.CtVariableWrite, spoon.reflect.code.CtCatch, spoon.reflect.code.BinaryOperatorKind, spoon.reflect.code.CtArrayAccess, spoon.reflect.declaration.CtUsedService, spoon.reflect.code.CtConditional, spoon.reflect.code.CtArrayWrite, spoon.reflect.declaration.CtType, spoon.reflect.code.CtTypeAccess, spoon.reflect.code.CtContinue, spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtReference, spoon.reflect.declaration.ParentNotInitializedException, spoon.reflect.code.CtAnnotationFieldAccess, spoon.reflect.code.CtAssignment, spoon.reflect.declaration.CtModifiable, spoon.reflect.reference.CtCatchVariableReference, spoon.reflect.declaration.CtTypeInformation, spoon.reflect.code.CtLabelledFlowBreak, spoon.reflect.code.CtAbstractInvocation, spoon.reflect.code.CtVariableAccess, spoon.reflect.code.CtBlock, spoon.reflect.code.CtReturn, spoon.reflect.declaration.CtCodeSnippet, spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtParameter, spoon.reflect.declaration.CtTypeMember, spoon.reflect.code.CtComment, spoon.reflect.code.CtCatchVariable, spoon.reflect.code.CtCodeElement, spoon.reflect.code.CtJavaDoc, spoon.reflect.declaration.CtAnnotatedElementType, spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtModuleReference, spoon.reflect.declaration.CtShadowable, spoon.reflect.code.CtLoop, spoon.reflect.code.CtVariableRead, spoon.reflect.code.CtForEach, spoon.reflect.code.CtInvocation, spoon.reflect.declaration.CtImportKind, spoon.reflect.declaration.CtAnonymousExecutable, spoon.reflect.code.CtDo, spoon.reflect.code.CtJavadocInlineTag, spoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.declaration.CtTypeParameter, spoon.reflect.code.CtRHSReceiver, spoon.reflect.reference.CtTypeReference, spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtCFlowBreak, spoon.reflect.code.CtArrayRead, spoon.reflect.code.CtJavadocDescriptionElement, spoon.reflect.code.CtWhile, spoon.reflect.declaration.CtClass, spoon.reflect.reference.CtFieldReference, spoon.reflect.declaration.CtAnnotationType]>
     but: was <[spoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.CtSwitch, spoon.reflect.code.CtJavaDocTag, spoon.reflect.declaration.CtNamedElement, spoon.reflect.code.CtUnaryOperator, spoon.reflect.declaration.CtElement, spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.code.CtAssert, spoon.reflect.declaration.CtExecutable, spoon.reflect.code.CtThisAccess, spoon.reflect.declaration.CtImport, spoon.reflect.declaration.CtField, spoon.reflect.reference.CtTypeParameterReference, spoon.reflect.reference.CtParameterReference, spoon.reflect.code.CtCodeSnippetExpression, spoon.reflect.declaration.CtModule, spoon.reflect.reference.CtIntersectionTypeReference, spoon.reflect.code.CtFieldAccess, spoon.reflect.reference.CtVariableReference, spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtFieldWrite, spoon.reflect.code.CtSynchronized, spoon.reflect.declaration.CtMethod, spoon.reflect.code.CtLocalVariable, spoon.reflect.declaration.CtEnum, spoon.reflect.code.CtIf, spoon.reflect.reference.CtWildcardReference, spoon.reflect.declaration.CtPackage, spoon.reflect.code.CtThrow, spoon.reflect.code.CtStatement, spoon.reflect.code.CtBreak, spoon.reflect.reference.CtExecutableReference, spoon.reflect.declaration.CtEnumValue, spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression, spoon.reflect.code.CtNewClass, spoon.reflect.reference.CtLocalVariableReference, spoon.reflect.code.CtLambda, spoon.reflect.declaration.CtConstructor, spoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtCodeSnippetStatement, spoon.reflect.declaration.CtVariable, spoon.reflect.declaration.CtModuleDirective, spoon.reflect.declaration.CtPackageExport, spoon.reflect.code.CtCase, spoon.reflect.code.CtConstructorCall, spoon.reflect.reference.CtUnboundVariableReference, spoon.reflect.declaration.ModifierKind, spoon.reflect.code.CtBodyHolder, spoon.reflect.declaration.CtProvidedService, spoon.reflect.code.CtFieldRead, spoon.reflect.code.CtTry, spoon.reflect.code.UnaryOperatorKind, spoon.reflect.code.CtLiteral, spoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtPackageReference, spoon.reflect.code.CtSuperAccess, spoon.reflect.code.CtStatementList, spoon.reflect.declaration.CtInterface, spoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtVariableWrite, spoon.reflect.code.CtFor, spoon.reflect.code.CtCatch, spoon.reflect.code.CtArrayAccess, spoon.reflect.code.BinaryOperatorKind, spoon.reflect.declaration.CtUsedService, spoon.reflect.code.CtConditional, spoon.reflect.code.CtArrayWrite, spoon.reflect.declaration.CtType, spoon.reflect.code.CtTypeAccess, spoon.reflect.code.CtContinue, spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtReference, spoon.reflect.declaration.ParentNotInitializedException, spoon.reflect.code.CtAssignment, spoon.reflect.code.CtAnnotationFieldAccess, spoon.reflect.reference.CtCatchVariableReference, spoon.reflect.declaration.CtModifiable, spoon.reflect.declaration.CtTypeInformation, spoon.reflect.code.CtLabelledFlowBreak, spoon.reflect.code.CtAbstractInvocation, spoon.reflect.code.CtVariableAccess, spoon.reflect.declaration.CtCodeSnippet, spoon.reflect.code.CtBlock, spoon.reflect.code.CtReturn, spoon.reflect.declaration.CtParameter, spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeMember, spoon.reflect.code.CtComment, spoon.reflect.code.CtCodeElement, spoon.reflect.code.CtCatchVariable, spoon.reflect.code.CtJavaDoc, spoon.reflect.declaration.CtAnnotatedElementType, spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtModuleReference, spoon.reflect.declaration.CtShadowable, spoon.reflect.code.CtLoop, spoon.reflect.code.CtVariableRead, spoon.reflect.code.CtForEach, spoon.reflect.code.CtInvocation, spoon.reflect.declaration.CtImportKind, spoon.reflect.declaration.CtAnonymousExecutable, spoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.code.CtDo, spoon.reflect.declaration.CtTypeParameter, spoon.reflect.code.CtRHSReceiver, spoon.reflect.reference.CtTypeReference, spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtCFlowBreak, spoon.reflect.code.CtWhile, spoon.reflect.code.CtArrayRead, spoon.reflect.declaration.CtClass, spoon.reflect.reference.CtFieldReference, spoon.reflect.declaration.CtAnnotationType]>
	at spoon.test.api.MetamodelTest.testGetAllMetamodelInterfacess(MetamodelTest.java:79)

[INFO] Running spoon.test.api.FileSystemFolderTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.test.api.FileSystemFolderTest
[INFO] Running spoon.test.exceptions.ExceptionTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.016 s - in spoon.test.exceptions.ExceptionTest
[INFO] Running spoon.test.module.TestModule
[WARNING] Tests run: 8, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.412 s - in spoon.test.module.TestModule
[INFO] Running spoon.test.imports.ImportScannerTest
[ERROR] Tests run: 6, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 18.146 s <<< FAILURE! - in spoon.test.imports.ImportScannerTest
[ERROR] testImportOnSpoon(spoon.test.imports.ImportScannerTest)  Time elapsed: 17.495 s  <<< ERROR!
spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtClassImpl:IncrementalLauncher
	CtConstructorImpl:<init>
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/IncrementalLauncher.java:135) failed
	at spoon.test.imports.ImportScannerTest.testImportOnSpoon(ImportScannerTest.java:73)
Caused by: java.lang.NullPointerException
	at spoon.test.imports.ImportScannerTest.testImportOnSpoon(ImportScannerTest.java:73)

[INFO] Running spoon.test.imports.ImportAndExtendWithPackageNameTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.082 s - in spoon.test.imports.ImportAndExtendWithPackageNameTest
[INFO] Running spoon.test.imports.ImportTest
[ERROR] Tests run: 44, Failures: 0, Errors: 4, Skipped: 0, Time elapsed: 9.92 s <<< FAILURE! - in spoon.test.imports.ImportTest
[ERROR] testStaticMethodWithDifferentClassSameNameJava3NoCollision(spoon.test.imports.ImportTest)  Time elapsed: 0.286 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:imports
	CtPackageImpl:testclasses2
	CtPackageImpl:apachetestsuite
	CtPackageImpl:staticjava3
	CtClassImpl:AllLangTestJava3
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/staticjava3/AllLangTestJava3.java:30) failed
	at spoon.test.imports.ImportTest.testStaticMethodWithDifferentClassSameNameJava3NoCollision(ImportTest.java:1089)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:imports
	CtPackageImpl:testclasses2
	CtPackageImpl:apachetestsuite
	CtPackageImpl:staticjava3
	CtClassImpl:AllLangTestJava3
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/staticjava3/AllLangTestJava3.java:30) failed
	at spoon.test.imports.ImportTest.testStaticMethodWithDifferentClassSameNameJava3NoCollision(ImportTest.java:1089)
Caused by: java.lang.NullPointerException
	at spoon.test.imports.ImportTest.testStaticMethodWithDifferentClassSameNameJava3NoCollision(ImportTest.java:1089)

[ERROR] testStaticMethodWithDifferentClassSameNameJava7NoCollision(spoon.test.imports.ImportTest)  Time elapsed: 0.211 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:imports
	CtPackageImpl:testclasses2
	CtPackageImpl:apachetestsuite
	CtPackageImpl:staticmethod
	CtClassImpl:AllLangTestSuiteStaticMethod
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/staticmethod/AllLangTestSuiteStaticMethod.java:31) failed
	at spoon.test.imports.ImportTest.testStaticMethodWithDifferentClassSameNameJava7NoCollision(ImportTest.java:1059)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:imports
	CtPackageImpl:testclasses2
	CtPackageImpl:apachetestsuite
	CtPackageImpl:staticmethod
	CtClassImpl:AllLangTestSuiteStaticMethod
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/staticmethod/AllLangTestSuiteStaticMethod.java:31) failed
	at spoon.test.imports.ImportTest.testStaticMethodWithDifferentClassSameNameJava7NoCollision(ImportTest.java:1059)
Caused by: java.lang.NullPointerException
	at spoon.test.imports.ImportTest.testStaticMethodWithDifferentClassSameNameJava7NoCollision(ImportTest.java:1059)

[ERROR] testSortingOfImports(spoon.test.imports.ImportTest)  Time elapsed: 1.699 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:reflect
	CtPackageImpl:visitor
	CtClassImpl:DefaultJavaPrettyPrinter
	CtMethodImpl:getLineSeparator
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java:234) failed
	at spoon.test.imports.ImportTest.testSortingOfImports(ImportTest.java:1144)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:reflect
	CtPackageImpl:visitor
	CtClassImpl:DefaultJavaPrettyPrinter
	CtMethodImpl:getLineSeparator
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java:234) failed
	at spoon.test.imports.ImportTest.testSortingOfImports(ImportTest.java:1144)
Caused by: java.lang.NullPointerException
	at spoon.test.imports.ImportTest.testSortingOfImports(ImportTest.java:1144)

[ERROR] testStaticMethodWithDifferentClassSameNameCollision(spoon.test.imports.ImportTest)  Time elapsed: 0.143 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:imports
	CtPackageImpl:testclasses2
	CtPackageImpl:apachetestsuite
	CtPackageImpl:staticcollision
	CtClassImpl:AllLangTestSuite
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/staticcollision/AllLangTestSuite.java:31) failed
	at spoon.test.imports.ImportTest.testStaticMethodWithDifferentClassSameNameCollision(ImportTest.java:1119)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:imports
	CtPackageImpl:testclasses2
	CtPackageImpl:apachetestsuite
	CtPackageImpl:staticcollision
	CtClassImpl:AllLangTestSuite
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/staticcollision/AllLangTestSuite.java:31) failed
	at spoon.test.imports.ImportTest.testStaticMethodWithDifferentClassSameNameCollision(ImportTest.java:1119)
Caused by: java.lang.NullPointerException
	at spoon.test.imports.ImportTest.testStaticMethodWithDifferentClassSameNameCollision(ImportTest.java:1119)

[INFO] Running spoon.test.prettyprinter.LinesTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.779 s - in spoon.test.prettyprinter.LinesTest
[INFO] Running spoon.test.prettyprinter.PrinterTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.344 s - in spoon.test.prettyprinter.PrinterTest
[INFO] Running spoon.test.prettyprinter.DefaultPrettyPrinterTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.103 s - in spoon.test.prettyprinter.DefaultPrettyPrinterTest
[INFO] Running spoon.test.prettyprinter.QualifiedThisRefTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.485 s - in spoon.test.prettyprinter.QualifiedThisRefTest
[INFO] Running spoon.test.visitor.VisitorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.063 s - in spoon.test.visitor.VisitorTest
[INFO] Running spoon.test.visitor.AssignmentsEqualsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.062 s - in spoon.test.visitor.AssignmentsEqualsTest
[INFO] Running spoon.test.loop.LoopTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.198 s - in spoon.test.loop.LoopTest
[INFO] Running spoon.test.intercession.insertBefore.InsertMethodsTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.283 s - in spoon.test.intercession.insertBefore.InsertMethodsTest
[INFO] Running spoon.test.intercession.IntercessionTest
[WARNING] Tests run: 8, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 10.688 s - in spoon.test.intercession.IntercessionTest
[INFO] Running spoon.test.intercession.RemoveTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.07 s - in spoon.test.intercession.RemoveTest
[INFO] Running spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.599 s <<< FAILURE! - in spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest
[ERROR] initializationError(spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest)  Time elapsed: 0.001 s  <<< ERROR!
java.lang.IllegalArgumentException: cannot instantiate spoon.reflect.code.CtJavadocDescription
	at spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest.data(OneCanCallSetterWithNullParameterizedTest.java:49)

[INFO] Running spoon.test.variable.AccessFullyQualifiedFieldTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.169 s - in spoon.test.variable.AccessFullyQualifiedFieldTest
[INFO] Running spoon.test.variable.AccessTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.586 s - in spoon.test.variable.AccessTest
[INFO] Running spoon.test.variable.InferredVariableTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.194 s - in spoon.test.variable.InferredVariableTest
[INFO] Running spoon.test.annotation.AnnotationLoopTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.058 s - in spoon.test.annotation.AnnotationLoopTest
[INFO] Running spoon.test.annotation.AnnotationTest
[INFO] Tests run: 52, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.889 s - in spoon.test.annotation.AnnotationTest
[INFO] Running spoon.test.annotation.AnnotationValuesTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.198 s - in spoon.test.annotation.AnnotationValuesTest
[INFO] Running spoon.test.pkg.PackageTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.077 s - in spoon.test.pkg.PackageTest
[INFO] Running spoon.test.comment.CommentTest
[ERROR] Tests run: 20, Failures: 1, Errors: 14, Skipped: 0, Time elapsed: 16.293 s <<< FAILURE! - in spoon.test.comment.CommentTest
[ERROR] testCommentsInComment1And2(spoon.test.comment.CommentTest)  Time elapsed: 0.191 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testCommentsInComment1And2(CommentTest.java:830)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testCommentsInComment1And2(CommentTest.java:830)
Caused by: java.lang.NullPointerException
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testCommentsInComment1And2(CommentTest.java:830)

[ERROR] testJavaDocCommentOnUnix(spoon.test.comment.CommentTest)  Time elapsed: 0.174 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testJavaDocCommentOnUnix(CommentTest.java:128)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testJavaDocCommentOnUnix(CommentTest.java:128)
Caused by: java.lang.NullPointerException
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testJavaDocCommentOnUnix(CommentTest.java:128)

[ERROR] testJavaDocEmptyCommentAndTag(spoon.test.comment.CommentTest)  Time elapsed: 0.23 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testJavaDocEmptyCommentAndTag(CommentTest.java:231)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testJavaDocEmptyCommentAndTag(CommentTest.java:231)
Caused by: java.lang.NullPointerException
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testJavaDocEmptyCommentAndTag(CommentTest.java:231)

[ERROR] testWildComments(spoon.test.comment.CommentTest)  Time elapsed: 0.195 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testWildComments(CommentTest.java:901)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testWildComments(CommentTest.java:901)
Caused by: java.lang.NullPointerException
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testWildComments(CommentTest.java:901)

[ERROR] testCommentsInResourcesWithWindowsEOL(spoon.test.comment.CommentTest)  Time elapsed: 0.131 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:WindowsEOL
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/WindowsEOL.java:3) failed
	at spoon.test.comment.CommentTest.testCommentsInResourcesWithWindowsEOL(CommentTest.java:861)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:WindowsEOL
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/WindowsEOL.java:3) failed
	at spoon.test.comment.CommentTest.testCommentsInResourcesWithWindowsEOL(CommentTest.java:861)
Caused by: java.lang.NullPointerException
	at spoon.test.comment.CommentTest.testCommentsInResourcesWithWindowsEOL(CommentTest.java:861)

[ERROR] testRemoveComment(spoon.test.comment.CommentTest)  Time elapsed: 0.141 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testRemoveComment(CommentTest.java:249)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testRemoveComment(CommentTest.java:249)
Caused by: java.lang.NullPointerException
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testRemoveComment(CommentTest.java:249)

[ERROR] testJavadocShortAndLongComment(spoon.test.comment.CommentTest)  Time elapsed: 0.268 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testJavadocShortAndLongComment(CommentTest.java:136)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testJavadocShortAndLongComment(CommentTest.java:136)
Caused by: java.lang.NullPointerException
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testJavadocShortAndLongComment(CommentTest.java:136)

[ERROR] testCombinedPackageInfoComment(spoon.test.comment.CommentTest)  Time elapsed: 0.157 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testCombinedPackageInfoComment(CommentTest.java:99)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testCombinedPackageInfoComment(CommentTest.java:99)
Caused by: java.lang.NullPointerException
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testCombinedPackageInfoComment(CommentTest.java:99)

[ERROR] testJavaDocCommentOnMac(spoon.test.comment.CommentTest)  Time elapsed: 0.109 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/comment/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.testJavaDocCommentOnMac(CommentTest.java:149)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/comment/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.testJavaDocCommentOnMac(CommentTest.java:149)
Caused by: java.lang.NullPointerException
	at spoon.test.comment.CommentTest.testJavaDocCommentOnMac(CommentTest.java:149)

[ERROR] testInsertNewComment(spoon.test.comment.CommentTest)  Time elapsed: 0.14 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testInsertNewComment(CommentTest.java:621)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testInsertNewComment(CommentTest.java:621)
Caused by: java.lang.NullPointerException
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testInsertNewComment(CommentTest.java:621)

[ERROR] testInLineComment(spoon.test.comment.CommentTest)  Time elapsed: 0.138 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testInLineComment(CommentTest.java:259)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testInLineComment(CommentTest.java:259)
Caused by: java.lang.NullPointerException
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testInLineComment(CommentTest.java:259)

[ERROR] testBlockComment(spoon.test.comment.CommentTest)  Time elapsed: 0.152 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testBlockComment(CommentTest.java:458)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testBlockComment(CommentTest.java:458)
Caused by: java.lang.NullPointerException
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testBlockComment(CommentTest.java:458)

[ERROR] testCodeFactory(spoon.test.comment.CommentTest)  Time elapsed: 0.138 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testCodeFactory(CommentTest.java:673)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testCodeFactory(CommentTest.java:673)
Caused by: java.lang.NullPointerException
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testCodeFactory(CommentTest.java:673)

[ERROR] testCoreFactory(spoon.test.comment.CommentTest)  Time elapsed: 0.109 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testCoreFactory(CommentTest.java:655)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:comment
	CtPackageImpl:testclasses
	CtClassImpl:JavaDocComment
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testCoreFactory(CommentTest.java:655)
Caused by: java.lang.NullPointerException
	at spoon.test.comment.CommentTest.getSpoonFactory(CommentTest.java:81)
	at spoon.test.comment.CommentTest.testCoreFactory(CommentTest.java:655)

[ERROR] testDocumentationContract(spoon.test.comment.CommentTest)  Time elapsed: 13.712 s  <<< FAILURE!
java.lang.AssertionError: CtJavadocDescription has no documentation
	at spoon.test.comment.CommentTest.lambda$testDocumentationContract$0(CommentTest.java:769)
	at spoon.test.comment.CommentTest.testDocumentationContract(CommentTest.java:766)

[INFO] Running spoon.test.reference.CloneReferenceTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.246 s - in spoon.test.reference.CloneReferenceTest
[INFO] Running spoon.test.reference.TypeReferenceTest
[INFO] Tests run: 28, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.514 s - in spoon.test.reference.TypeReferenceTest
[INFO] Running spoon.test.reference.AnnotationFieldReferenceTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.082 s - in spoon.test.reference.AnnotationFieldReferenceTest
[INFO] Running spoon.test.reference.VariableAccessTest
2018-07-17 17:03:15,496 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable e at (/root/workspace/INRIA/spoon/404936373/src/test/resources/noclasspath/org/elasticsearch/indices/analysis/HunspellService.java:100)
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.852 s - in spoon.test.reference.VariableAccessTest
[INFO] Running spoon.test.reference.ElasticsearchStackoverflowTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.196 s - in spoon.test.reference.ElasticsearchStackoverflowTest
[INFO] Running spoon.test.reference.ExecutableReferenceTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.971 s - in spoon.test.reference.ExecutableReferenceTest
[INFO] Running spoon.test.reference.ExecutableReferenceGenericTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.081 s - in spoon.test.reference.ExecutableReferenceGenericTest
[INFO] Running spoon.test.model.BlockTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.129 s - in spoon.test.model.BlockTest
[INFO] Running spoon.test.model.AnonymousExecutableTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.078 s - in spoon.test.model.AnonymousExecutableTest
[INFO] Running spoon.test.model.SwitchCaseTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.128 s - in spoon.test.model.SwitchCaseTest
[INFO] Running spoon.test.model.TypeTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.719 s - in spoon.test.model.TypeTest
[INFO] Running spoon.test.model.IncrementalLauncherTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.902 s - in spoon.test.model.IncrementalLauncherTest
[INFO] Running spoon.test.method_overriding.MethodOverriddingTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.24 s - in spoon.test.method_overriding.MethodOverriddingTest
[INFO] Running spoon.test.template.TemplateTest
0
[ERROR] Tests run: 24, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 4.114 s <<< FAILURE! - in spoon.test.template.TemplateTest
[ERROR] testTemplateInheritance(spoon.test.template.TemplateTest)  Time elapsed: 0.169 s  <<< ERROR!
spoon.SpoonException: The element of class interface spoon.reflect.code.CtJavaDoc does not have CtRole.JAVADOC_CONTENT
	at spoon.test.template.TemplateTest.testTemplateInheritance(TemplateTest.java:142)

[ERROR] testAnotherFieldAccessNameSubstitution(spoon.test.template.TemplateTest)  Time elapsed: 0.071 s  <<< ERROR!
spoon.SpoonException: The element of class interface spoon.reflect.code.CtJavaDoc does not have CtRole.JAVADOC_CONTENT
	at spoon.test.template.TemplateTest.testAnotherFieldAccessNameSubstitution(TemplateTest.java:1105)

[INFO] Running spoon.test.template.PatternTest
[INFO] Tests run: 31, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.217 s - in spoon.test.template.PatternTest
[INFO] Running spoon.test.template.TemplateInvocationSubstitutionTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.242 s - in spoon.test.template.TemplateInvocationSubstitutionTest
[INFO] Running spoon.test.template.TemplateClassAccessTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.098 s - in spoon.test.template.TemplateClassAccessTest
[INFO] Running spoon.test.template.core.ParameterInfoTest
[INFO] Tests run: 21, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.042 s - in spoon.test.template.core.ParameterInfoTest
[INFO] Running spoon.test.template.TemplateEnumAccessTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.232 s - in spoon.test.template.TemplateEnumAccessTest
[INFO] Running spoon.test.template.TemplateArrayAccessTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.151 s - in spoon.test.template.TemplateArrayAccessTest
[INFO] Running spoon.test.template.TemplateReplaceReturnTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.258 s - in spoon.test.template.TemplateReplaceReturnTest
[INFO] Running spoon.test.refactoring.RefactoringTest
[ERROR] Tests run: 4, Failures: 0, Errors: 4, Skipped: 0, Time elapsed: 1.131 s <<< FAILURE! - in spoon.test.refactoring.RefactoringTest
[ERROR] testTransformedInstanceofAfterATransformation(spoon.test.refactoring.RefactoringTest)  Time elapsed: 0.225 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:refactoring
	CtPackageImpl:testclasses
	CtAnnotationTypeImpl:TestTryRename
	CtAnnotationMethodImpl:value
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/refactoring/testclasses/TestTryRename.java:11) failed
	at spoon.test.refactoring.RefactoringTest.testTransformedInstanceofAfterATransformation(RefactoringTest.java:106)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:refactoring
	CtPackageImpl:testclasses
	CtAnnotationTypeImpl:TestTryRename
	CtAnnotationMethodImpl:value
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/refactoring/testclasses/TestTryRename.java:11) failed
	at spoon.test.refactoring.RefactoringTest.testTransformedInstanceofAfterATransformation(RefactoringTest.java:106)
Caused by: java.lang.NullPointerException
	at spoon.test.refactoring.RefactoringTest.testTransformedInstanceofAfterATransformation(RefactoringTest.java:106)

[ERROR] testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned(spoon.test.refactoring.RefactoringTest)  Time elapsed: 0.427 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:refactoring
	CtPackageImpl:testclasses
	CtAnnotationTypeImpl:TestTryRename
	CtAnnotationMethodImpl:value
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/refactoring/testclasses/TestTryRename.java:11) failed
	at spoon.test.refactoring.RefactoringTest.testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned(RefactoringTest.java:28)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:refactoring
	CtPackageImpl:testclasses
	CtAnnotationTypeImpl:TestTryRename
	CtAnnotationMethodImpl:value
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/refactoring/testclasses/TestTryRename.java:11) failed
	at spoon.test.refactoring.RefactoringTest.testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned(RefactoringTest.java:28)
Caused by: java.lang.NullPointerException
	at spoon.test.refactoring.RefactoringTest.testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned(RefactoringTest.java:28)

[ERROR] testThisInConstructor(spoon.test.refactoring.RefactoringTest)  Time elapsed: 0.244 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:refactoring
	CtPackageImpl:testclasses
	CtAnnotationTypeImpl:TestTryRename
	CtAnnotationMethodImpl:value
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/refactoring/testclasses/TestTryRename.java:11) failed
	at spoon.test.refactoring.RefactoringTest.testThisInConstructor(RefactoringTest.java:67)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:refactoring
	CtPackageImpl:testclasses
	CtAnnotationTypeImpl:TestTryRename
	CtAnnotationMethodImpl:value
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/refactoring/testclasses/TestTryRename.java:11) failed
	at spoon.test.refactoring.RefactoringTest.testThisInConstructor(RefactoringTest.java:67)
Caused by: java.lang.NullPointerException
	at spoon.test.refactoring.RefactoringTest.testThisInConstructor(RefactoringTest.java:67)

[ERROR] testThisInConstructorAfterATransformation(spoon.test.refactoring.RefactoringTest)  Time elapsed: 0.201 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:refactoring
	CtPackageImpl:testclasses
	CtAnnotationTypeImpl:TestTryRename
	CtAnnotationMethodImpl:value
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/refactoring/testclasses/TestTryRename.java:11) failed
	at spoon.test.refactoring.RefactoringTest.testThisInConstructorAfterATransformation(RefactoringTest.java:87)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:refactoring
	CtPackageImpl:testclasses
	CtAnnotationTypeImpl:TestTryRename
	CtAnnotationMethodImpl:value
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/refactoring/testclasses/TestTryRename.java:11) failed
	at spoon.test.refactoring.RefactoringTest.testThisInConstructorAfterATransformation(RefactoringTest.java:87)
Caused by: java.lang.NullPointerException
	at spoon.test.refactoring.RefactoringTest.testThisInConstructorAfterATransformation(RefactoringTest.java:87)

[INFO] Running spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 16.749 s - in spoon.test.refactoring.CtRenameLocalVariableRefactoringTest
[INFO] Running spoon.test.refactoring.MethodsRefactoringTest
[ERROR] Tests run: 5, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.389 s <<< FAILURE! - in spoon.test.refactoring.MethodsRefactoringTest
[ERROR] testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)  Time elapsed: 0.18 s  <<< ERROR!
spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:refactoring
	CtPackageImpl:parameter
	CtPackageImpl:testclasses
	CtAnnotationTypeImpl:TestHierarchy
	CtAnnotationMethodImpl:value
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/refactoring/parameter/testclasses/TestHierarchy.java:11) failed
	at spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(MethodsRefactoringTest.java:335)
Caused by: java.lang.NullPointerException
	at spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(MethodsRefactoringTest.java:335)

[INFO] Running spoon.test.executable.ExecutableRefTest
[ERROR] Tests run: 5, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.329 s <<< FAILURE! - in spoon.test.executable.ExecutableRefTest
[ERROR] testSameTypeInConstructorCallBetweenItsObjectAndItsExecutable(spoon.test.executable.ExecutableRefTest)  Time elapsed: 0.074 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:org
	CtPackageImpl:objectweb
	CtPackageImpl:carol
	CtPackageImpl:jndi
	CtPackageImpl:spi
	CtClassImpl:CmiContext
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/executable/CmiContext_1.2.java:45) failed
	at spoon.test.executable.ExecutableRefTest.testSameTypeInConstructorCallBetweenItsObjectAndItsExecutable(ExecutableRefTest.java:84)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:org
	CtPackageImpl:objectweb
	CtPackageImpl:carol
	CtPackageImpl:jndi
	CtPackageImpl:spi
	CtClassImpl:CmiContext
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/executable/CmiContext_1.2.java:45) failed
	at spoon.test.executable.ExecutableRefTest.testSameTypeInConstructorCallBetweenItsObjectAndItsExecutable(ExecutableRefTest.java:84)
Caused by: java.lang.NullPointerException
	at spoon.test.executable.ExecutableRefTest.testSameTypeInConstructorCallBetweenItsObjectAndItsExecutable(ExecutableRefTest.java:84)

[INFO] Running spoon.test.executable.ExecutableTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.274 s - in spoon.test.executable.ExecutableTest
[INFO] Running spoon.test.jdtimportbuilder.ImportBuilderTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.87 s - in spoon.test.jdtimportbuilder.ImportBuilderTest
[INFO] Running spoon.test.staticFieldAccess.StaticAccessTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.221 s - in spoon.test.staticFieldAccess.StaticAccessTest
[INFO] Running spoon.test.control.ControlTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.127 s - in spoon.test.control.ControlTest
[INFO] Running spoon.test.position.PositionTest
2018-07-17 17:03:53,119 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:43)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:53,129 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:43)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:53,133 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:43)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:53,135 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionClass(PositionTest.java:43)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:53,651 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:161)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:53,654 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:161)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:53,657 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:161)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:53,678 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionInterface(PositionTest.java:161)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:53,989 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:53,991 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:53,993 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:53,997 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionClassWithComments(PositionTest.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:54,790 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:195)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:54,793 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:195)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:54,796 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:195)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:03:54,806 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.testing.utils.ModelUtils.build(ModelUtils.java:101)
	at spoon.test.position.PositionTest.testPositionAnnotation(PositionTest.java:195)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
[INFO] Tests run: 25, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.218 s - in spoon.test.position.PositionTest
[INFO] Running spoon.test.generics.GenericsTest
[INFO] Tests run: 45, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.155 s - in spoon.test.generics.GenericsTest
[INFO] Running spoon.test.fieldaccesses.FieldAccessTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.006 s - in spoon.test.fieldaccesses.FieldAccessTest
[INFO] Running spoon.test.trycatch.TryCatchTest
[ERROR] Tests run: 12, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.201 s <<< FAILURE! - in spoon.test.trycatch.TryCatchTest
[ERROR] testCompileMultiTryCatchWithCustomExceptions(spoon.test.trycatch.TryCatchTest)  Time elapsed: 0.136 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:trycatch
	CtPackageImpl:testclasses
	CtClassImpl:Statement
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/trycatch/testclasses/Statement.java:4) failed
	at spoon.test.trycatch.TryCatchTest.testCompileMultiTryCatchWithCustomExceptions(TryCatchTest.java:197)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:trycatch
	CtPackageImpl:testclasses
	CtClassImpl:Statement
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/trycatch/testclasses/Statement.java:4) failed
	at spoon.test.trycatch.TryCatchTest.testCompileMultiTryCatchWithCustomExceptions(TryCatchTest.java:197)
Caused by: java.lang.NullPointerException
	at spoon.test.trycatch.TryCatchTest.testCompileMultiTryCatchWithCustomExceptions(TryCatchTest.java:197)

[INFO] Running spoon.test.filters.FilterTest
2018-07-17 17:04:02,473 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:02,473 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:02,475 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:02,475 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:02,475 INFO spoon.Launcher - start processing...
2018-07-17 17:04:02,566 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:02,570 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:02,899 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:02,899 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:02,900 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:02,900 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:02,902 INFO spoon.Launcher - start processing...
2018-07-17 17:04:02,980 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:02,981 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:03,224 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:03,224 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:03,225 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:03,226 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:03,226 INFO spoon.Launcher - start processing...
2018-07-17 17:04:03,312 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:03,312 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:03,714 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:03,714 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:03,715 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:03,715 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:03,715 INFO spoon.Launcher - start processing...
2018-07-17 17:04:03,766 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:03,767 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:03,864 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:03,865 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:03,866 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:03,866 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:03,866 INFO spoon.Launcher - start processing...
2018-07-17 17:04:03,942 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:03,943 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:04,526 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:04,526 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:04,527 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:04,527 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:04,527 INFO spoon.Launcher - start processing...
2018-07-17 17:04:04,585 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:04,586 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:04,652 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:04,653 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:05,008 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:05,008 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:05,009 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:05,009 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:05,009 INFO spoon.Launcher - start processing...
2018-07-17 17:04:05,079 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:05,079 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:05,458 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:05,460 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:05,462 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:05,463 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:05,463 INFO spoon.Launcher - start processing...
2018-07-17 17:04:05,544 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:05,544 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:05,617 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:05,618 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:05,619 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:05,619 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:05,619 INFO spoon.Launcher - start processing...
2018-07-17 17:04:05,700 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:05,701 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:05,853 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:05,853 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:05,854 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:05,854 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:05,854 INFO spoon.Launcher - start processing...
2018-07-17 17:04:05,908 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:05,908 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:06,103 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:06,104 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:06,105 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:06,105 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:06,105 INFO spoon.Launcher - start processing...
2018-07-17 17:04:06,182 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:06,182 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:06,251 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:06,251 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:06,252 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:06,253 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:06,253 INFO spoon.Launcher - start processing...
2018-07-17 17:04:06,327 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:06,327 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:06,718 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:06,718 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:06,719 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:06,719 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:06,720 INFO spoon.Launcher - start processing...
2018-07-17 17:04:06,789 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:06,789 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:06,829 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:06,830 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:06,830 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:06,830 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:06,830 INFO spoon.Launcher - start processing...
2018-07-17 17:04:06,884 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:06,884 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:07,275 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:07,276 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:07,276 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:07,277 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:07,277 INFO spoon.Launcher - start processing...
2018-07-17 17:04:07,347 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:07,348 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:07,355 INFO spoon.Launcher - Step filter CtClass only) spoon.reflect.CtModelImpl$CtRootPackage cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtRootPackage: unnamed package
2018-07-17 17:04:07,356 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon
2018-07-17 17:04:07,357 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test
2018-07-17 17:04:07,357 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters
2018-07-17 17:04:07,357 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtPackageImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,358 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-07-17 17:04:07,358 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,359 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: AbstractTostada() {
}
2018-07-17 17:04:07,359 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-07-17 17:04:07,359 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-07-17 17:04:07,359 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-07-17 17:04:07,360 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-07-17 17:04:07,360 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,360 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-07-17 17:04:07,360 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,361 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2018-07-17 17:04:07,361 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-07-17 17:04:07,361 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,361 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,362 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,362 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,362 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-07-17 17:04:07,362 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,363 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            super.prepare();
        }

        @java.lang.Override
        public spoon.test.filters.testclasses.ITostada make() {
            return super.make();
        }
    };
}
2018-07-17 17:04:07,363 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2018-07-17 17:04:07,364 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        super.prepare();
    }

    @java.lang.Override
    public spoon.test.filters.testclasses.ITostada make() {
        return super.make();
    }
}
2018-07-17 17:04:07,364 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada$1()
2018-07-17 17:04:07,367 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada.1
2018-07-17 17:04:07,369 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-07-17 17:04:07,370 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,370 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,370 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,371 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,371 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,372 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: 1() {
}
2018-07-17 17:04:07,373 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-07-17 17:04:07,373 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-07-17 17:04:07,374 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-07-17 17:04:07,374 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,378 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,379 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,380 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,380 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    super.prepare();
}
2018-07-17 17:04:07,381 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-07-17 17:04:07,382 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,382 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,382 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,385 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,386 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,386 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    super.prepare();
}
2018-07-17 17:04:07,387 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-07-17 17:04:07,387 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-07-17 17:04:07,388 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-07-17 17:04:07,391 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,391 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,392 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-07-17 17:04:07,392 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,393 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,393 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,394 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return super.make();
}
2018-07-17 17:04:07,395 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-07-17 17:04:07,401 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,401 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,402 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,402 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,403 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-07-17 17:04:07,403 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,403 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return super.make();
}
2018-07-17 17:04:07,404 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return super.make()
2018-07-17 17:04:07,404 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.make()
2018-07-17 17:04:07,405 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-07-17 17:04:07,405 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-07-17 17:04:07,405 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,406 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,406 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: make()
2018-07-17 17:04:07,407 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,407 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,407 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-07-17 17:04:07,408 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,408 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public abstract void prepare();
2018-07-17 17:04:07,409 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,409 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void honey() {
}
2018-07-17 17:04:07,410 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,410 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-07-17 17:04:07,411 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-07-17 17:04:07,429 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-07-17 17:04:07,429 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,430 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Antojito() {
}
2018-07-17 17:04:07,430 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-07-17 17:04:07,430 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-07-17 17:04:07,430 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada()
2018-07-17 17:04:07,430 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-07-17 17:04:07,430 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,431 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-07-17 17:04:07,431 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,431 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    java.lang.System.out.println("Antojito");
}
2018-07-17 17:04:07,431 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-07-17 17:04:07,431 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,432 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,437 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,437 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,438 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,440 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("Antojito");
}
2018-07-17 17:04:07,441 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("Antojito")
2018-07-17 17:04:07,441 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-07-17 17:04:07,441 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-07-17 17:04:07,441 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-07-17 17:04:07,441 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,442 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-07-17 17:04:07,442 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-07-17 17:04:07,442 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,442 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-07-17 17:04:07,443 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-07-17 17:04:07,443 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-07-17 17:04:07,443 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-07-17 17:04:07,445 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-07-17 17:04:07,445 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,445 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-07-17 17:04:07,447 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,447 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "Antojito"
2018-07-17 17:04:07,447 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-07-17 17:04:07,448 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,449 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void prepare(java.lang.String ingredient) {
}
2018-07-17 17:04:07,449 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,449 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtParameterImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtParameterImpl: java.lang.String ingredient
2018-07-17 17:04:07,449 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-07-17 17:04:07,450 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,451 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-07-17 17:04:07,451 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-07-17 17:04:07,454 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-07-17 17:04:07,456 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-07-17 17:04:07,456 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtFieldImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldImpl: private int myfield = 0;
2018-07-17 17:04:07,457 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,457 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-07-17 17:04:07,457 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,458 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: FieldAccessFilterTacos() {
    super();
    this.myfield = 0;
}
2018-07-17 17:04:07,458 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    super();
    this.myfield = 0;
}
2018-07-17 17:04:07,458 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-07-17 17:04:07,458 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.util.ArrayList()
2018-07-17 17:04:07,458 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-07-17 17:04:07,459 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-07-17 17:04:07,459 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-07-17 17:04:07,459 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-07-17 17:04:07,459 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: this.myfield = 0
2018-07-17 17:04:07,459 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,460 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: this.myfield
2018-07-17 17:04:07,460 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: this
2018-07-17 17:04:07,460 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-07-17 17:04:07,460 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,460 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-07-17 17:04:07,469 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-07-17 17:04:07,470 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,470 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-07-17 17:04:07,470 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-07-17 17:04:07,470 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,471 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,471 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-07-17 17:04:07,471 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,472 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void m() {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2018-07-17 17:04:07,472 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,472 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    myfield = super.size();
    java.lang.Object o = super.get(myfield);
}
2018-07-17 17:04:07,473 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: myfield = super.size()
2018-07-17 17:04:07,473 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,473 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldWriteImpl: myfield
2018-07-17 17:04:07,473 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-07-17 17:04:07,474 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-07-17 17:04:07,474 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,474 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-07-17 17:04:07,474 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-07-17 17:04:07,474 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,475 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-07-17 17:04:07,475 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-07-17 17:04:07,475 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,475 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,475 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.size()
2018-07-17 17:04:07,476 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-07-17 17:04:07,476 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-07-17 17:04:07,476 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-07-17 17:04:07,476 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-07-17 17:04:07,476 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: size()
2018-07-17 17:04:07,476 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-07-17 17:04:07,477 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-07-17 17:04:07,477 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,477 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: java.lang.Object o = super.get(myfield)
2018-07-17 17:04:07,477 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-07-17 17:04:07,478 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,478 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.get(myfield)
2018-07-17 17:04:07,478 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-07-17 17:04:07,478 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-07-17 17:04:07,478 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-07-17 17:04:07,479 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-07-17 17:04:07,479 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: get(int)
2018-07-17 17:04:07,479 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-07-17 17:04:07,479 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-07-17 17:04:07,479 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-07-17 17:04:07,480 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,480 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,480 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: myfield
2018-07-17 17:04:07,481 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-07-17 17:04:07,481 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-07-17 17:04:07,481 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,481 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-07-17 17:04:07,482 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-07-17 17:04:07,482 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,482 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: myfield
2018-07-17 17:04:07,482 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.FieldAccessFilterTacos
2018-07-17 17:04:07,483 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,483 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,483 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-07-17 17:04:07,484 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.SuppressWarnings("bar")
2018-07-17 17:04:07,484 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-07-17 17:04:07,484 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,484 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-07-17 17:04:07,485 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,485 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "bar"
2018-07-17 17:04:07,485 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-07-17 17:04:07,485 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,486 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Foo() {
}
2018-07-17 17:04:07,486 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-07-17 17:04:07,486 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-07-17 17:04:07,487 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-07-17 17:04:07,487 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-07-17 17:04:07,487 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,487 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-07-17 17:04:07,488 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,488 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtFieldImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldImpl: int i;
2018-07-17 17:04:07,488 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,489 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void foo() {
    int x = 3;
    int z;
    z = x + (i);
    java.lang.System.out.println(z);
}
2018-07-17 17:04:07,489 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,490 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    int x = 3;
    int z;
    z = x + (i);
    java.lang.System.out.println(z);
}
2018-07-17 17:04:07,490 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int x = 3
2018-07-17 17:04:07,490 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,490 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-07-17 17:04:07,491 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,491 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int z
2018-07-17 17:04:07,491 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,492 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtAssignmentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAssignmentImpl: z = x + (i)
2018-07-17 17:04:07,492 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,492 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableWriteImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableWriteImpl: z
2018-07-17 17:04:07,492 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: z
2018-07-17 17:04:07,493 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,493 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: x + (i)
2018-07-17 17:04:07,493 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,494 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: x
2018-07-17 17:04:07,494 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: x
2018-07-17 17:04:07,494 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,494 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: (i)
2018-07-17 17:04:07,495 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-07-17 17:04:07,495 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-07-17 17:04:07,495 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,496 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.Foo
2018-07-17 17:04:07,496 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-07-17 17:04:07,496 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,496 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: i
2018-07-17 17:04:07,497 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-07-17 17:04:07,497 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,497 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,498 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println(z)
2018-07-17 17:04:07,498 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-07-17 17:04:07,498 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-07-17 17:04:07,499 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-07-17 17:04:07,499 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,499 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-07-17 17:04:07,499 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-07-17 17:04:07,500 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,500 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-07-17 17:04:07,500 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-07-17 17:04:07,501 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(int)
2018-07-17 17:04:07,501 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-07-17 17:04:07,501 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-07-17 17:04:07,501 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,502 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,502 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: z
2018-07-17 17:04:07,502 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: z
2018-07-17 17:04:07,502 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,503 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.SuppressWarnings("foo")
int bar() {
    if (0 == 1) {
        throw new java.lang.RuntimeException();
    }
    return i;
}
2018-07-17 17:04:07,503 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.SuppressWarnings("foo")
2018-07-17 17:04:07,503 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-07-17 17:04:07,504 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,504 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.SuppressWarnings
2018-07-17 17:04:07,504 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,504 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "foo"
2018-07-17 17:04:07,504 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-07-17 17:04:07,505 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,505 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,505 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    if (0 == 1) {
        throw new java.lang.RuntimeException();
    }
    return i;
}
2018-07-17 17:04:07,506 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtIfImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtIfImpl: if (0 == 1) {
    throw new java.lang.RuntimeException();
}
2018-07-17 17:04:07,506 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBinaryOperatorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBinaryOperatorImpl: 0 == 1
2018-07-17 17:04:07,506 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: boolean
2018-07-17 17:04:07,507 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 0
2018-07-17 17:04:07,507 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,507 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 1
2018-07-17 17:04:07,507 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,508 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    throw new java.lang.RuntimeException();
}
2018-07-17 17:04:07,508 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThrowImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThrowImpl: throw new java.lang.RuntimeException()
2018-07-17 17:04:07,508 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtConstructorCallImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorCallImpl: new java.lang.RuntimeException()
2018-07-17 17:04:07,508 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.RuntimeException()
2018-07-17 17:04:07,509 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.RuntimeException
2018-07-17 17:04:07,509 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,509 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.RuntimeException
2018-07-17 17:04:07,509 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,510 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return i
2018-07-17 17:04:07,510 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: i
2018-07-17 17:04:07,510 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtThisAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtThisAccessImpl: 
2018-07-17 17:04:07,510 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-07-17 17:04:07,511 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,511 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: spoon.test.filters.testclasses.Foo
2018-07-17 17:04:07,511 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-07-17 17:04:07,511 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,512 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: i
2018-07-17 17:04:07,512 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Foo
2018-07-17 17:04:07,512 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,512 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,512 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: interface Honey {
    void honey();
}
2018-07-17 17:04:07,513 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: void honey();
2018-07-17 17:04:07,513 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,513 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: interface IFoo {}
2018-07-17 17:04:07,513 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtInterfaceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInterfaceImpl: public interface ITostada extends spoon.test.filters.testclasses.IFoo {
    spoon.test.filters.testclasses.ITostada make();
}
2018-07-17 17:04:07,514 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.IFoo
2018-07-17 17:04:07,514 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,514 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: spoon.test.filters.testclasses.ITostada make();
2018-07-17 17:04:07,514 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-07-17 17:04:07,514 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,515 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-07-17 17:04:07,529 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,530 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,530 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: SubTostada() {
}
2018-07-17 17:04:07,530 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-07-17 17:04:07,530 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-07-17 17:04:07,530 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-07-17 17:04:07,530 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,531 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,531 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,531 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,531 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2018-07-17 17:04:07,531 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-07-17 17:04:07,531 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,532 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,532 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,532 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,532 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,532 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    java.lang.System.out.println("SubTostada");
    super.prepare();
}
2018-07-17 17:04:07,532 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: java.lang.System.out.println("SubTostada")
2018-07-17 17:04:07,533 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtFieldReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReadImpl: java.lang.System.out
2018-07-17 17:04:07,533 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtTypeAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeAccessImpl: java.lang.System
2018-07-17 17:04:07,533 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-07-17 17:04:07,533 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,533 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtFieldReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtFieldReferenceImpl: java.lang.System.out
2018-07-17 17:04:07,533 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.System
2018-07-17 17:04:07,533 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,534 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-07-17 17:04:07,534 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-07-17 17:04:07,542 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: println(java.lang.String)
2018-07-17 17:04:07,542 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.io.PrintStream
2018-07-17 17:04:07,542 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.io
2018-07-17 17:04:07,542 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,542 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-07-17 17:04:07,543 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,543 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: "SubTostada"
2018-07-17 17:04:07,543 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-07-17 17:04:07,543 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,543 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-07-17 17:04:07,543 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-07-17 17:04:07,543 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-07-17 17:04:07,543 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,544 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,544 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-07-17 17:04:07,544 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,544 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,544 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,545 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-07-17 17:04:07,549 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-07-17 17:04:07,550 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,550 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Tacos() {
}
2018-07-17 17:04:07,550 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-07-17 17:04:07,551 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-07-17 17:04:07,551 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.lang.Object()
2018-07-17 17:04:07,551 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-07-17 17:04:07,551 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,552 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Object
2018-07-17 17:04:07,552 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,552 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return null;
}
2018-07-17 17:04:07,555 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-07-17 17:04:07,558 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,558 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,559 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,559 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,559 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-07-17 17:04:07,560 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,561 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return null;
}
2018-07-17 17:04:07,562 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return null
2018-07-17 17:04:07,564 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: null
2018-07-17 17:04:07,564 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: <nulltype>
2018-07-17 17:04:07,565 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void prepare() {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2018-07-17 17:04:07,565 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,565 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>();
    strings.size();
}
2018-07-17 17:04:07,566 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: final java.util.ArrayList<java.lang.String> strings = new java.util.ArrayList<java.lang.String>()
2018-07-17 17:04:07,566 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-07-17 17:04:07,566 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-07-17 17:04:07,569 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-07-17 17:04:07,570 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,570 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtConstructorCallImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorCallImpl: new java.util.ArrayList<java.lang.String>()
2018-07-17 17:04:07,570 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: java.util.ArrayList()
2018-07-17 17:04:07,571 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-07-17 17:04:07,571 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-07-17 17:04:07,571 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-07-17 17:04:07,572 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-07-17 17:04:07,572 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-07-17 17:04:07,572 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,573 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: strings.size()
2018-07-17 17:04:07,573 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtVariableReadImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtVariableReadImpl: strings
2018-07-17 17:04:07,573 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: strings
2018-07-17 17:04:07,573 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList<java.lang.String>
2018-07-17 17:04:07,574 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-07-17 17:04:07,574 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-07-17 17:04:07,574 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,575 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: size()
2018-07-17 17:04:07,575 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.util.ArrayList
2018-07-17 17:04:07,575 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.util
2018-07-17 17:04:07,575 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,576 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
2018-07-17 17:04:07,578 INFO spoon.Launcher - Step 6) Skipped element, because CtFunction#accept(input) returned false
Parameter 1) CtMethodImpl: void honey();
2018-07-17 17:04:07,578 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-07-17 17:04:07,578 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,578 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Honey
2018-07-17 17:04:07,578 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,579 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: Tostada() {
}
2018-07-17 17:04:07,579 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-07-17 17:04:07,579 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-07-17 17:04:07,579 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.AbstractTostada()
2018-07-17 17:04:07,579 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-07-17 17:04:07,579 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,580 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.AbstractTostada
2018-07-17 17:04:07,580 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,580 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public spoon.test.filters.testclasses.ITostada make() {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2018-07-17 17:04:07,580 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-07-17 17:04:07,580 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,580 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,581 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,581 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,581 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.ITostada
2018-07-17 17:04:07,581 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,581 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return new spoon.test.filters.testclasses.Tostada() {
        @java.lang.Override
        public void prepare() {
            int a = 3;
            super.prepare();
        }
    };
}
2018-07-17 17:04:07,583 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2018-07-17 17:04:07,583 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtNewClassImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtNewClassImpl: new spoon.test.filters.testclasses.Tostada() {
    @java.lang.Override
    public void prepare() {
        int a = 3;
        super.prepare();
    }
}
2018-07-17 17:04:07,583 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada$1()
2018-07-17 17:04:07,584 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada.1
2018-07-17 17:04:07,585 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,585 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,585 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,585 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,585 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,586 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,586 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtConstructorImpl: 1() {
}
2018-07-17 17:04:07,586 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-07-17 17:04:07,586 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super()
2018-07-17 17:04:07,586 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: spoon.test.filters.testclasses.Tostada()
2018-07-17 17:04:07,586 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,586 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
    int a = 3;
    super.prepare();
}
2018-07-17 17:04:07,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-07-17 17:04:07,587 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    int a = 3;
    super.prepare();
}
2018-07-17 17:04:07,588 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLocalVariableImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableImpl: int a = 3
2018-07-17 17:04:07,589 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,589 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: 3
2018-07-17 17:04:07,589 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: int
2018-07-17 17:04:07,589 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtInvocationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtInvocationImpl: super.prepare()
2018-07-17 17:04:07,589 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtSuperAccessImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtSuperAccessImpl: super
2018-07-17 17:04:07,589 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtLocalVariableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLocalVariableReferenceImpl: 
2018-07-17 17:04:07,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtExecutableReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtExecutableReferenceImpl: prepare()
2018-07-17 17:04:07,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: spoon.test.filters.testclasses.Tostada
2018-07-17 17:04:07,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: spoon.test.filters.testclasses
2018-07-17 17:04:07,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,590 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void prepare() {
}
2018-07-17 17:04:07,591 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-07-17 17:04:07,591 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,591 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-07-17 17:04:07,597 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public java.lang.String toString() {
    return "";
}
2018-07-17 17:04:07,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-07-17 17:04:07,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-07-17 17:04:07,598 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,599 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
    return "";
}
2018-07-17 17:04:07,604 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtReturnImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtReturnImpl: return ""
2018-07-17 17:04:07,604 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtLiteralImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtLiteralImpl: ""
2018-07-17 17:04:07,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.String
2018-07-17 17:04:07,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: @java.lang.Override
public void honey() {
}
2018-07-17 17:04:07,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtAnnotationImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtAnnotationImpl: @java.lang.Override
2018-07-17 17:04:07,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,612 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: java.lang.Override
2018-07-17 17:04:07,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtPackageReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtPackageReferenceImpl: java.lang
2018-07-17 17:04:07,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-07-17 17:04:07,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.declaration.CtMethodImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtMethodImpl: public void foo() {
}
2018-07-17 17:04:07,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.reference.CtTypeReferenceImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtTypeReferenceImpl: void
2018-07-17 17:04:07,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtBlockImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtBlockImpl: {
}
2018-07-17 17:04:07,613 INFO spoon.Launcher - Step filter CtClass only) spoon.support.reflect.code.CtCommentImpl cannot be cast to spoon.reflect.declaration.CtClass
Parameter 1) CtCommentImpl: /**
 * Copyright (C) 2006-2015 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
[INFO] Tests run: 43, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.494 s - in spoon.test.filters.FilterTest
[INFO] Running spoon.test.filters.CUFilterTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.252 s - in spoon.test.filters.CUFilterTest
[INFO] Running spoon.test.constructorcallnewclass.NewClassTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.946 s - in spoon.test.constructorcallnewclass.NewClassTest
[INFO] Running spoon.test.constructorcallnewclass.ConstructorCallTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.5 s - in spoon.test.constructorcallnewclass.ConstructorCallTest
[INFO] Running spoon.test.constructor.ConstructorTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.811 s - in spoon.test.constructor.ConstructorTest
[INFO] Running spoon.test.targeted.TargetedExpressionTest
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.293 s - in spoon.test.targeted.TargetedExpressionTest
[INFO] Running spoon.test.visibility.VisibilityTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.012 s - in spoon.test.visibility.VisibilityTest
[INFO] Running spoon.test.secondaryclasses.ClassesTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.613 s - in spoon.test.secondaryclasses.ClassesTest
[INFO] Running spoon.test.factory.ExecutableFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.factory.ExecutableFactoryTest
[INFO] Running spoon.test.factory.FactoryTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.278 s - in spoon.test.factory.FactoryTest
[INFO] Running spoon.test.factory.TypeFactoryTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.247 s - in spoon.test.factory.TypeFactoryTest
[INFO] Running spoon.test.factory.CodeFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in spoon.test.factory.CodeFactoryTest
[INFO] Running spoon.test.factory.ConstructorFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.1 s - in spoon.test.factory.ConstructorFactoryTest
[INFO] Running spoon.test.factory.FieldFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.351 s - in spoon.test.factory.FieldFactoryTest
[INFO] Running spoon.test.factory.ClassFactoryTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in spoon.test.factory.ClassFactoryTest
[INFO] Running spoon.test.factory.AnnotationFactoryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.078 s - in spoon.test.factory.AnnotationFactoryTest
[INFO] Running spoon.test.methodreference.MethodReferenceTest
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.057 s - in spoon.test.methodreference.MethodReferenceTest
[INFO] Running spoon.test.serializable.SerializableTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.248 s - in spoon.test.serializable.SerializableTest
[INFO] Running spoon.test.serializable.ModelStreamerTest
[ERROR] Tests run: 3, Failures: 0, Errors: 3, Skipped: 0, Time elapsed: 3.442 s <<< FAILURE! - in spoon.test.serializable.ModelStreamerTest
[ERROR] testDefaultCompressionType(spoon.test.serializable.ModelStreamerTest)  Time elapsed: 1.094 s  <<< ERROR!
spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:reflect
	CtPackageImpl:declaration
	CtInterfaceImpl:CtAnnotation
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/declaration/CtAnnotation.java:38) failed
	at spoon.test.serializable.ModelStreamerTest.compareFactoryModels(ModelStreamerTest.java:77)
	at spoon.test.serializable.ModelStreamerTest.testDefaultCompressionType(ModelStreamerTest.java:45)
Caused by: java.lang.NullPointerException
	at spoon.test.serializable.ModelStreamerTest.compareFactoryModels(ModelStreamerTest.java:77)
	at spoon.test.serializable.ModelStreamerTest.testDefaultCompressionType(ModelStreamerTest.java:45)

[ERROR] testNoneCompressionType(spoon.test.serializable.ModelStreamerTest)  Time elapsed: 1.476 s  <<< ERROR!
spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:reflect
	CtPackageImpl:declaration
	CtInterfaceImpl:CtAnnotation
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/declaration/CtAnnotation.java:38) failed
	at spoon.test.serializable.ModelStreamerTest.compareFactoryModels(ModelStreamerTest.java:77)
	at spoon.test.serializable.ModelStreamerTest.testNoneCompressionType(ModelStreamerTest.java:61)
Caused by: java.lang.NullPointerException
	at spoon.test.serializable.ModelStreamerTest.compareFactoryModels(ModelStreamerTest.java:77)
	at spoon.test.serializable.ModelStreamerTest.testNoneCompressionType(ModelStreamerTest.java:61)

[ERROR] testGZipCompressionType(spoon.test.serializable.ModelStreamerTest)  Time elapsed: 0.869 s  <<< ERROR!
spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:reflect
	CtPackageImpl:declaration
	CtInterfaceImpl:CtAnnotation
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/declaration/CtAnnotation.java:38) failed
	at spoon.test.serializable.ModelStreamerTest.compareFactoryModels(ModelStreamerTest.java:77)
	at spoon.test.serializable.ModelStreamerTest.testGZipCompressionType(ModelStreamerTest.java:53)
Caused by: java.lang.NullPointerException
	at spoon.test.serializable.ModelStreamerTest.compareFactoryModels(ModelStreamerTest.java:77)
	at spoon.test.serializable.ModelStreamerTest.testGZipCompressionType(ModelStreamerTest.java:53)

[INFO] Running spoon.test.serializable.SourcePositionTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.056 s - in spoon.test.serializable.SourcePositionTest
[INFO] Running spoon.test.processing.ProcessingTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.709 s - in spoon.test.processing.ProcessingTest
[INFO] Running spoon.test.ctElement.MetadataTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.064 s - in spoon.test.ctElement.MetadataTest
[INFO] Running spoon.test.ctElement.ElementTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.ctElement.ElementTest
[INFO] Running spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.82 s - in spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest
[INFO] Running spoon.test.replace.ReplaceTest
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.318 s - in spoon.test.replace.ReplaceTest
[INFO] Running spoon.test.replace.ReplaceParametrizedTest
[ERROR] Tests run: 80, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 0.289 s <<< FAILURE! - in spoon.test.replace.ReplaceParametrizedTest
[ERROR] testContract[CtJavaDoc](spoon.test.replace.ReplaceParametrizedTest)  Time elapsed: 0.004 s  <<< ERROR!
java.lang.IllegalArgumentException: cannot instantiate spoon.reflect.code.CtJavadocDescription
	at spoon.test.replace.ReplaceParametrizedTest.testContract(ReplaceParametrizedTest.java:91)

[ERROR] testContract[CtJavaDocTag](spoon.test.replace.ReplaceParametrizedTest)  Time elapsed: 0.001 s  <<< ERROR!
java.lang.IllegalArgumentException: cannot instantiate spoon.reflect.code.CtJavadocDescription
	at spoon.test.replace.ReplaceParametrizedTest.testContract(ReplaceParametrizedTest.java:91)

[INFO] Running spoon.test.labels.TestLabels
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.067 s - in spoon.test.labels.TestLabels
[INFO] Running spoon.test.lambda.LambdaTest
2018-07-17 17:04:27,500 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Strings at (/root/workspace/INRIA/spoon/404936373/src/test/resources/noclasspath/lambdas/TypeAccessInLambda.java:6)
[INFO] Tests run: 23, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.752 s - in spoon.test.lambda.LambdaTest
[INFO] Running spoon.test.limits.utils.InternalTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.13 s - in spoon.test.limits.utils.InternalTest
[INFO] Running spoon.test.ctType.CtTypeTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.578 s - in spoon.test.ctType.CtTypeTest
[INFO] Running spoon.test.ctType.CtTypeParameterTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.172 s - in spoon.test.ctType.CtTypeParameterTest
[INFO] Running spoon.test.interfaces.InterfaceTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.421 s - in spoon.test.interfaces.InterfaceTest
[INFO] Running spoon.test.interfaces.TestInterfaceWithoutSetup
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.135 s - in spoon.test.interfaces.TestInterfaceWithoutSetup
[INFO] Running spoon.test.parent.ContractOnSettersParametrizedTest
[ERROR] Tests run: 67, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.413 s <<< FAILURE! - in spoon.test.parent.ContractOnSettersParametrizedTest
[ERROR] testContract[public interface CtJavaDoc extends spoon.reflect.code.CtComment {
    @spoon.support.DerivedProperty
    java.lang.String getShortDescription();

    @spoon.support.DerivedProperty
    java.lang.String getLongDescription();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    java.util.List<spoon.reflect.code.CtJavaDocTag> getTags();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E removeTag(spoon.reflect.code.CtJavaDocTag arg0);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E removeTag(int arg0);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E addTag(spoon.reflect.code.CtJavaDocTag arg0);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E addTag(int arg0, spoon.reflect.code.CtJavaDocTag arg1);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.JAVADOC_CONTENT)
    spoon.reflect.code.CtJavadocDescription getContentDescription();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.JAVADOC_CONTENT)
    <E extends spoon.reflect.code.CtJavaDoc> E setContentDescription(spoon.reflect.code.CtJavadocDescription arg0);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E setTags(java.util.List<spoon.reflect.code.CtJavaDocTag> arg0);

    spoon.reflect.code.CtJavaDoc clone();

    @spoon.support.DerivedProperty
    java.lang.String getContent();
}](spoon.test.parent.ContractOnSettersParametrizedTest)  Time elapsed: 0.023 s  <<< ERROR!
java.lang.IllegalArgumentException: cannot instantiate spoon.reflect.code.CtJavadocDescription
	at spoon.test.parent.ContractOnSettersParametrizedTest.createCompatibleObject(ContractOnSettersParametrizedTest.java:99)
	at spoon.test.parent.ContractOnSettersParametrizedTest.testContract(ContractOnSettersParametrizedTest.java:114)

[INFO] Running spoon.test.parent.ParentTest
[WARNING] Tests run: 11, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.981 s - in spoon.test.parent.ParentTest
[INFO] Running spoon.test.parent.NullParentTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.433 s - in spoon.test.parent.NullParentTest
[INFO] Running spoon.test.parent.SetParentTest
[INFO] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.094 s - in spoon.test.parent.SetParentTest
[INFO] Running spoon.test.parent.TopLevelTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.029 s - in spoon.test.parent.TopLevelTypeTest
[INFO] Running spoon.test.arrays.ArraysTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.561 s - in spoon.test.arrays.ArraysTest
[INFO] Running spoon.test.query_function.testclasses.VariableReferencesModelTest
[INFO] Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 s - in spoon.test.query_function.testclasses.VariableReferencesModelTest
[INFO] Running spoon.test.query_function.VariableReferencesTest
2018-07-17 17:04:34,319 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:34,319 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:34,320 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:34,320 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:34,320 INFO spoon.Launcher - start processing...
2018-07-17 17:04:34,391 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:34,392 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:34,453 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:34,453 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:34,454 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:34,468 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:34,469 INFO spoon.Launcher - start processing...
2018-07-17 17:04:34,559 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:34,559 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:34,610 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:34,610 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:34,610 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:34,610 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:34,610 INFO spoon.Launcher - start processing...
2018-07-17 17:04:34,685 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:34,686 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:34,692 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:34,693 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:34,693 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:34,694 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:34,694 INFO spoon.Launcher - start processing...
2018-07-17 17:04:34,784 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:34,784 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:34,837 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:34,837 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:34,838 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:34,839 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:34,839 INFO spoon.Launcher - start processing...
2018-07-17 17:04:34,909 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:34,909 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:34,921 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:34,921 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:34,922 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:34,922 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:34,922 INFO spoon.Launcher - start processing...
2018-07-17 17:04:34,979 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:34,979 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:34,990 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:34,990 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:34,990 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:34,991 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:34,991 INFO spoon.Launcher - start processing...
2018-07-17 17:04:35,066 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:35,067 INFO spoon.Launcher - no errors, no warnings
2018-07-17 17:04:35,118 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:35,119 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:35,120 INFO spoon.Launcher - Spoon version 7.1.0-SNAPSHOT
2018-07-17 17:04:35,120 INFO spoon.Launcher - running Spoon...
2018-07-17 17:04:35,120 INFO spoon.Launcher - start processing...
2018-07-17 17:04:35,197 INFO spoon.Launcher - end of processing: 
2018-07-17 17:04:35,219 INFO spoon.Launcher - no errors, no warnings
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.014 s - in spoon.test.query_function.VariableReferencesTest
[INFO] Running spoon.test.enums.EnumsTypeTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.09 s - in spoon.test.enums.EnumsTypeTest
[INFO] Running spoon.test.enums.EnumsTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.456 s - in spoon.test.enums.EnumsTest
[INFO] Running spoon.test.modifiers.TestModifiers
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.615 s - in spoon.test.modifiers.TestModifiers
[INFO] Running spoon.test.signature.SignatureTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.847 s - in spoon.test.signature.SignatureTest
[INFO] Running spoon.test.eval.EvalTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.991 s - in spoon.test.eval.EvalTest
[INFO] Running spoon.test.strings.StringTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.064 s - in spoon.test.strings.StringTest
[INFO] Running spoon.test.strings.StringLiteralTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.064 s - in spoon.test.strings.StringLiteralTest
[INFO] Running spoon.test.sourcePosition.SourcePositionTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.172 s - in spoon.test.sourcePosition.SourcePositionTest
[INFO] Running spoon.test.parameters.ParameterTest
2018-07-17 17:04:38,874 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable typeRatingFilters at (/root/workspace/INRIA/spoon/404936373/src/test/resources/noclasspath/Tacos.java:4)
[ERROR] Tests run: 3, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.221 s <<< FAILURE! - in spoon.test.parameters.ParameterTest
[ERROR] testParameterInNoClasspath(spoon.test.parameters.ParameterTest)  Time elapsed: 0.082 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:org
	CtPackageImpl:eclipse
	CtPackageImpl:draw2d
	CtPackageImpl:text
	CtClassImpl:FlowUtilities
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/parameter/FlowUtilities.java:25) failed
	at spoon.test.parameters.ParameterTest.testParameterInNoClasspath(ParameterTest.java:25)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:org
	CtPackageImpl:eclipse
	CtPackageImpl:draw2d
	CtPackageImpl:text
	CtClassImpl:FlowUtilities
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/parameter/FlowUtilities.java:25) failed
	at spoon.test.parameters.ParameterTest.testParameterInNoClasspath(ParameterTest.java:25)
Caused by: java.lang.NullPointerException
	at spoon.test.parameters.ParameterTest.testParameterInNoClasspath(ParameterTest.java:25)

[INFO] Running spoon.test.support.ResourceTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.359 s - in spoon.test.support.ResourceTest
[INFO] Running spoon.test.literal.LiteralTest
2018-07-17 17:04:39,486 ERROR spoon.support.compiler.jdt.JDTTreeBuilder - Could not find declaration for variable Longs at (/root/workspace/INRIA/spoon/404936373/src/test/resources/noclasspath/SecondaryIndexManager.java:611)
[ERROR] Tests run: 5, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.576 s <<< FAILURE! - in spoon.test.literal.LiteralTest
[ERROR] testCharLiteralInNoClasspath(spoon.test.literal.LiteralTest)  Time elapsed: 0.343 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:org
	CtPackageImpl:apache
	CtPackageImpl:cassandra
	CtPackageImpl:index
	CtClassImpl:SecondaryIndexManager
	CtMethodImpl:addIndex
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/noclasspath/SecondaryIndexManager.java:165) failed
	at spoon.test.literal.LiteralTest.testCharLiteralInNoClasspath(LiteralTest.java:30)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:org
	CtPackageImpl:apache
	CtPackageImpl:cassandra
	CtPackageImpl:index
	CtClassImpl:SecondaryIndexManager
	CtMethodImpl:addIndex
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/noclasspath/SecondaryIndexManager.java:165) failed
	at spoon.test.literal.LiteralTest.testCharLiteralInNoClasspath(LiteralTest.java:30)
Caused by: java.lang.NullPointerException
	at spoon.test.literal.LiteralTest.testCharLiteralInNoClasspath(LiteralTest.java:30)

[INFO] Running spoon.test.method.MethodTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.354 s - in spoon.test.method.MethodTest
[INFO] Running spoon.test.delete.DeleteTest
[INFO] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.828 s - in spoon.test.delete.DeleteTest
[INFO] Running spoon.test.OutputTypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in spoon.test.OutputTypeTest
[INFO] Running spoon.test.casts.CastTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.306 s - in spoon.test.casts.CastTest
[INFO] Running spoon.test.initializers.InitializerTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.118 s - in spoon.test.initializers.InitializerTest
[INFO] Running spoon.test.varargs.VarArgsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.059 s - in spoon.test.varargs.VarArgsTest
[INFO] Running spoon.test.reflect.visitor.ReferenceQueryTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.062 s - in spoon.test.reflect.visitor.ReferenceQueryTest
[INFO] Running spoon.test.condition.ConditionalTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.227 s - in spoon.test.condition.ConditionalTest
[INFO] Running spoon.test.invocations.InvocationTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.249 s - in spoon.test.invocations.InvocationTest
[INFO] Running spoon.test.ctClass.CtClassTest
[ERROR] Tests run: 8, Failures: 0, Errors: 3, Skipped: 0, Time elapsed: 1.782 s <<< FAILURE! - in spoon.test.ctClass.CtClassTest
[ERROR] testParentOfTheEnclosingClassOfStaticClass(spoon.test.ctClass.CtClassTest)  Time elapsed: 0.76 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:daikon
	CtPackageImpl:tools
	CtClassImpl:InvariantChecker
	CtMethodImpl:mainHelper
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/noclasspath/InvariantChecker.java:88) failed
	at spoon.test.ctClass.CtClassTest.testParentOfTheEnclosingClassOfStaticClass(CtClassTest.java:100)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:daikon
	CtPackageImpl:tools
	CtClassImpl:InvariantChecker
	CtMethodImpl:mainHelper
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/noclasspath/InvariantChecker.java:88) failed
	at spoon.test.ctClass.CtClassTest.testParentOfTheEnclosingClassOfStaticClass(CtClassTest.java:100)
Caused by: java.lang.NullPointerException
	at spoon.test.ctClass.CtClassTest.testParentOfTheEnclosingClassOfStaticClass(CtClassTest.java:100)

[ERROR] testDefaultConstructorAreOk(spoon.test.ctClass.CtClassTest)  Time elapsed: 0.093 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:ctClass
	CtPackageImpl:testclasses
	CtPackageImpl:issue1306
	CtPackageImpl:internal
	CtClassImpl:BooleanArrays
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/ctClass/testclasses/issue1306/internal/BooleanArrays.java:4) failed
	at spoon.test.ctClass.CtClassTest.testDefaultConstructorAreOk(CtClassTest.java:204)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:ctClass
	CtPackageImpl:testclasses
	CtPackageImpl:issue1306
	CtPackageImpl:internal
	CtClassImpl:BooleanArrays
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/ctClass/testclasses/issue1306/internal/BooleanArrays.java:4) failed
	at spoon.test.ctClass.CtClassTest.testDefaultConstructorAreOk(CtClassTest.java:204)
Caused by: java.lang.NullPointerException
	at spoon.test.ctClass.CtClassTest.testDefaultConstructorAreOk(CtClassTest.java:204)

[ERROR] testNoClasspathWithSuperClassOfAClassInAnInterface(spoon.test.ctClass.CtClassTest)  Time elapsed: 0.241 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:org
	CtPackageImpl:eclipse
	CtPackageImpl:draw2d
	CtPackageImpl:parts
	CtClassImpl:ScrollableThumbnail
	CtConstructorImpl:<init>
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/noclasspath/draw2d/org/eclipse/draw2d/parts/ScrollableThumbnail.java:190) failed
	at spoon.test.ctClass.CtClassTest.testNoClasspathWithSuperClassOfAClassInAnInterface(CtClassTest.java:123)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:org
	CtPackageImpl:eclipse
	CtPackageImpl:draw2d
	CtPackageImpl:parts
	CtClassImpl:ScrollableThumbnail
	CtConstructorImpl:<init>
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/noclasspath/draw2d/org/eclipse/draw2d/parts/ScrollableThumbnail.java:190) failed
	at spoon.test.ctClass.CtClassTest.testNoClasspathWithSuperClassOfAClassInAnInterface(CtClassTest.java:123)
Caused by: java.lang.NullPointerException
	at spoon.test.ctClass.CtClassTest.testNoClasspathWithSuperClassOfAClassInAnInterface(CtClassTest.java:123)

[INFO] Running spoon.test.field.FieldTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.537 s - in spoon.test.field.FieldTest
[INFO] Running spoon.test.type.TypeTest
[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.313 s - in spoon.test.type.TypeTest
[INFO] Running spoon.test.logging.LogTest
2018-07-17 17:04:45,772 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:45,772 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:45,772 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/404936373/spooned-classes
2018-07-17 17:04:45,772 DEBUG spoon.Launcher - source classpath: null
2018-07-17 17:04:45,773 DEBUG spoon.Launcher - template classpath: []
2018-07-17 17:04:45,773 INFO spoon.Launcher - Log info
2018-07-17 17:04:45,774 WARN spoon.Launcher - Log warn
2018-07-17 17:04:45,774 ERROR spoon.Launcher - Log error
2018-07-17 17:04:45,774 DEBUG spoon.Launcher - Log debug
2018-07-17 17:04:45,775 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:45,785 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:45,785 DEBUG spoon.Launcher - destination: /root/workspace/INRIA/spoon/404936373/spooned-classes
2018-07-17 17:04:45,806 DEBUG spoon.Launcher - source classpath: null
2018-07-17 17:04:45,806 DEBUG spoon.Launcher - template classpath: []
2018-07-17 17:04:45,807 INFO spoon.Launcher - Log info
2018-07-17 17:04:45,807 WARN spoon.Launcher - Log warn
2018-07-17 17:04:45,807 ERROR spoon.Launcher - Log error
2018-07-17 17:04:45,807 DEBUG spoon.Launcher - Log debug
2018-07-17 17:04:45,808 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:45,808 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:45,809 INFO spoon.Launcher - Log info
2018-07-17 17:04:45,809 WARN spoon.Launcher - Log warn
2018-07-17 17:04:45,809 ERROR spoon.Launcher - Log error
2018-07-17 17:04:45,810 WARN spoon.Launcher - Spoon is now using the 'no classpath mode' by default. If you want to ensure using Spoon in full classpath mode, please use the new flag: --cpmode fullclasspath.
2018-07-17 17:04:45,811 WARN spoon.Launcher - Spoon now parse by default the comments. Consider using the option --disable-comments if you want the old behaviour.
2018-07-17 17:04:45,811 WARN spoon.Launcher - Log warn
2018-07-17 17:04:45,811 ERROR spoon.Launcher - Log error
2018-07-17 17:04:45,813 ERROR spoon.Launcher - Log error
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.057 s - in spoon.test.logging.LogTest
[INFO] Running spoon.test.javadoc.JavaDocTest
[ERROR] Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.211 s <<< FAILURE! - in spoon.test.javadoc.JavaDocTest
[ERROR] testJavaDocReprint(spoon.test.javadoc.JavaDocTest)  Time elapsed: 0.14 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:javadoc
	CtPackageImpl:testclasses
	CtClassImpl:Bar
	CtMethodImpl:create
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/javadoc/testclasses/Bar.java:9) failed
	at spoon.test.javadoc.JavaDocTest.testJavaDocReprint(JavaDocTest.java:27)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:test
	CtPackageImpl:javadoc
	CtPackageImpl:testclasses
	CtClassImpl:Bar
	CtMethodImpl:create
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/javadoc/testclasses/Bar.java:9) failed
	at spoon.test.javadoc.JavaDocTest.testJavaDocReprint(JavaDocTest.java:27)
Caused by: java.lang.NullPointerException
	at spoon.test.javadoc.JavaDocTest.testJavaDocReprint(JavaDocTest.java:27)

[INFO] Running spoon.test.comparison.EqualTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.518 s - in spoon.test.comparison.EqualTest
[INFO] Running spoon.test.ctBodyHolder.CtBodyHolderTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.637 s - in spoon.test.ctBodyHolder.CtBodyHolderTest
[INFO] Running spoon.test.properties.PropertiesTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.071 s - in spoon.test.properties.PropertiesTest
[INFO] Running spoon.test.compilationunit.GetBinaryFilesTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.751 s - in spoon.test.compilationunit.GetBinaryFilesTest
[INFO] Running spoon.test.compilationunit.TestCompilationUnit
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.584 s - in spoon.test.compilationunit.TestCompilationUnit
[INFO] Running spoon.test.ctBlock.TestCtBlock
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.222 s - in spoon.test.ctBlock.TestCtBlock
[INFO] Running spoon.test.path.PathTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.641 s - in spoon.test.path.PathTest
[INFO] Running spoon.test.compilation.CompilationTest
>> Hello: Bar <<
>> Hello: FooEx <<
>> Hello: IBar <<
>> Hello: SimpleProcessor <<
[ERROR] Tests run: 13, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 6.919 s <<< FAILURE! - in spoon.test.compilation.CompilationTest
[ERROR] testPrecompile(spoon.test.compilation.CompilationTest)  Time elapsed: 0.273 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:compilation
	CtClassImpl:SimpleProcessor
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/compilation/SimpleProcessor.java:6) failed
	at spoon.test.compilation.CompilationTest.testPrecompile(CompilationTest.java:274)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:compilation
	CtClassImpl:SimpleProcessor
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/test/resources/compilation/SimpleProcessor.java:6) failed
	at spoon.test.compilation.CompilationTest.testPrecompile(CompilationTest.java:274)
Caused by: java.lang.NullPointerException
	at spoon.test.compilation.CompilationTest.testPrecompile(CompilationTest.java:274)

[INFO] Running spoon.test.ctCase.SwitchCaseTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.075 s - in spoon.test.ctCase.SwitchCaseTest
[INFO] Running spoon.test.role.TestCtRole
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in spoon.test.role.TestCtRole
[INFO] Running spoon.test.main.MainTest
[ERROR] Tests run: 14, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 257.598 s <<< FAILURE! - in spoon.test.main.MainTest
[ERROR] testMain_ModelPrintAndCompile(spoon.test.main.MainTest)  Time elapsed: 0.034 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:compiler
	CtInterfaceImpl:Environment
	CtMethodImpl:report
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/compiler/Environment.java:92) failed
	at spoon.test.main.MainTest.testMain_ModelPrintAndCompile(MainTest.java:108)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:compiler
	CtInterfaceImpl:Environment
	CtMethodImpl:report
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/compiler/Environment.java:92) failed
	at spoon.test.main.MainTest.testMain_ModelPrintAndCompile(MainTest.java:108)
Caused by: java.lang.NullPointerException
	at spoon.test.main.MainTest.testMain_ModelPrintAndCompile(MainTest.java:108)

[INFO] Running spoon.test.jar.JarTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.183 s - in spoon.test.jar.JarTest
[INFO] Running spoon.test.change.ChangeCollectorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.06 s - in spoon.test.change.ChangeCollectorTest
[INFO] Running spoon.test.snippets.SnippetTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.49 s - in spoon.test.snippets.SnippetTest
[INFO] Running spoon.test.architecture.SpoonArchitectureEnforcerTest
2018-07-17 17:09:54,037 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c2 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:14)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.Launcher.buildModel(Launcher.java:769)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:09:54,038 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c5 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:17)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.Launcher.buildModel(Launcher.java:769)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:09:54,039 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - /* c6 */ is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:18)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.Launcher.buildModel(Launcher.java:769)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
2018-07-17 17:09:54,040 ERROR spoon.support.compiler.jdt.JDTCommentBuilder - // c7 is not added into the AST
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for class spoon.support.reflect.code.CtCommentImpl (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/position/testclasses/Expressions.java:19)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:365)
	at spoon.support.compiler.jdt.JDTCommentBuilder.insertCommentInAST(JDTCommentBuilder.java:485)
	at spoon.support.compiler.jdt.JDTCommentBuilder.buildComment(JDTCommentBuilder.java:156)
	at spoon.support.compiler.jdt.JDTCommentBuilder.build(JDTCommentBuilder.java:112)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildModel(JDTBasedSpoonCompiler.java:480)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildUnitsAndModel(JDTBasedSpoonCompiler.java:391)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.buildSources(JDTBasedSpoonCompiler.java:340)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:129)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.build(JDTBasedSpoonCompiler.java:113)
	at spoon.Launcher.buildModel(Launcher.java:769)
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testGoodTestClassNames(SpoonArchitectureEnforcerTest.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
[ERROR] Tests run: 8, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 52.359 s <<< FAILURE! - in spoon.test.architecture.SpoonArchitectureEnforcerTest
[ERROR] metamodelPackageRule(spoon.test.architecture.SpoonArchitectureEnforcerTest)  Time elapsed: 2.13 s  <<< ERROR!
java.lang.NullPointerException
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.metamodelPackageRule(SpoonArchitectureEnforcerTest.java:212)

[ERROR] testFactorySubFactory(spoon.test.architecture.SpoonArchitectureEnforcerTest)  Time elapsed: 1.203 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:reflect
	CtPackageImpl:factory
	CtClassImpl:AnnotationFactory
	CtConstructorImpl:<init>
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/factory/AnnotationFactory.java:38) failed
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testFactorySubFactory(SpoonArchitectureEnforcerTest.java:125)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:reflect
	CtPackageImpl:factory
	CtClassImpl:AnnotationFactory
	CtConstructorImpl:<init>
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/factory/AnnotationFactory.java:38) failed
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testFactorySubFactory(SpoonArchitectureEnforcerTest.java:125)
Caused by: java.lang.NullPointerException
	at spoon.test.architecture.SpoonArchitectureEnforcerTest.testFactorySubFactory(SpoonArchitectureEnforcerTest.java:125)

[INFO] Running spoon.testing.AbstractAssertTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.481 s - in spoon.testing.AbstractAssertTest
[INFO] Running spoon.testing.CtElementAssertTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.491 s - in spoon.testing.CtElementAssertTest
[INFO] Running spoon.testing.FileAssertTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.293 s - in spoon.testing.FileAssertTest
[INFO] Running spoon.testing.CtPackageAssertTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.187 s - in spoon.testing.CtPackageAssertTest
[INFO] Running spoon.reflect.declaration.UnknownDeclarationTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.067 s - in spoon.reflect.declaration.UnknownDeclarationTest
[INFO] Running spoon.reflect.declaration.CtTypeInformationTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.914 s - in spoon.reflect.declaration.CtTypeInformationTest
[INFO] Running spoon.reflect.ast.AstCheckerTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 9.644 s - in spoon.reflect.ast.AstCheckerTest
[INFO] Running spoon.reflect.ast.CloneTest
[ERROR] Tests run: 5, Failures: 1, Errors: 1, Skipped: 0, Time elapsed: 6.428 s <<< FAILURE! - in spoon.reflect.ast.CloneTest
[ERROR] testCloneMethodsDeclaredInAST(spoon.reflect.ast.CloneTest)  Time elapsed: 5.169 s  <<< FAILURE!
java.lang.AssertionError: spoon.reflect.code.CtJavadocDescription hasn't clone method.
	at spoon.reflect.ast.CloneTest.testCloneMethodsDeclaredInAST(CloneTest.java:92)

[ERROR] testCloneListener(spoon.reflect.ast.CloneTest)  Time elapsed: 0.657 s  <<< ERROR!
spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:reflect
	CtPackageImpl:visitor
	CtClassImpl:DefaultJavaPrettyPrinter
	CtMethodImpl:getLineSeparator
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java:234) failed
	at spoon.reflect.ast.CloneTest.lambda$testCloneListener$0(CloneTest.java:152)
	at spoon.reflect.ast.CloneTest.testCloneListener(CloneTest.java:149)
Caused by: java.lang.NullPointerException
	at spoon.reflect.ast.CloneTest.lambda$testCloneListener$0(CloneTest.java:152)
	at spoon.reflect.ast.CloneTest.testCloneListener(CloneTest.java:149)

[INFO] Running spoon.reflect.visitor.CtInheritanceScannerTest
[INFO] Tests run: 82, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.382 s - in spoon.reflect.visitor.CtInheritanceScannerTest
[INFO] Running spoon.reflect.visitor.CtIteratorTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.394 s - in spoon.reflect.visitor.CtIteratorTest
[INFO] Running spoon.reflect.visitor.CtScannerTest
[ERROR] Tests run: 3, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 4.276 s <<< FAILURE! - in spoon.reflect.visitor.CtScannerTest
[ERROR] testScannerContract(spoon.reflect.visitor.CtScannerTest)  Time elapsed: 1.891 s  <<< ERROR!
java.lang.NullPointerException
	at spoon.reflect.visitor.CtScannerTest.testScannerContract(CtScannerTest.java:81)

[ERROR] testScannerCallsAllProperties(spoon.reflect.visitor.CtScannerTest)  Time elapsed: 2.268 s  <<< ERROR!
spoon.SpoonException: 
spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:reflect
	CtPackageImpl:annotations
	CtAnnotationTypeImpl:PropertyGetter
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/annotations/PropertyGetter.java:26) failed
	at spoon.reflect.visitor.CtScannerTest.testScannerCallsAllProperties(CtScannerTest.java:119)
Caused by: spoon.SpoonException: 
Printing of spoon.support.reflect.code.CtJavaDocImpl on path 
	CtPackageImpl:spoon
	CtPackageImpl:reflect
	CtPackageImpl:annotations
	CtAnnotationTypeImpl:PropertyGetter
	CtJavaDocImpl
at position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/annotations/PropertyGetter.java:26) failed
	at spoon.reflect.visitor.CtScannerTest.testScannerCallsAllProperties(CtScannerTest.java:119)
Caused by: java.lang.NullPointerException
	at spoon.reflect.visitor.CtScannerTest.testScannerCallsAllProperties(CtScannerTest.java:119)

[INFO] Running spoon.reflect.visitor.CtInheritanceScannerMethodsTest
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.611 s <<< FAILURE! - in spoon.reflect.visitor.CtInheritanceScannerMethodsTest
[ERROR] testMethodsInInheritanceScanner(spoon.reflect.visitor.CtInheritanceScannerMethodsTest)  Time elapsed: 1.611 s  <<< ERROR!
java.lang.NullPointerException
	at spoon.reflect.visitor.CtInheritanceScannerMethodsTest.testMethodsInInheritanceScanner(CtInheritanceScannerMethodsTest.java:42)

[INFO] Running spoon.reflect.visitor.CtVisitorTest
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.517 s <<< FAILURE! - in spoon.reflect.visitor.CtVisitorTest
[ERROR] testMethodsInVisitor(spoon.reflect.visitor.CtVisitorTest)  Time elapsed: 1.517 s  <<< ERROR!
java.lang.NullPointerException
	at spoon.reflect.visitor.CtVisitorTest.testMethodsInVisitor(CtVisitorTest.java:42)

[INFO] Running spoon.MavenLauncherTest
2018-07-17 17:10:35,072 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,072 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-07-17 17:10:35,082 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-07-17 17:10:35,082 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-07-17 17:10:35,082 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-07-17 17:10:35,082 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-07-17 17:10:35,083 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-07-17 17:10:35,083 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/zaxxer/HikariCP/2.6.1
2018-07-17 17:10:35,083 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-07-17 17:10:35,083 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-07-17 17:10:35,083 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-07-17 17:10:35,083 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,083 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,084 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,084 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-07-17 17:10:35,084 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-07-17 17:10:35,084 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-07-17 17:10:35,084 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,084 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-config/3.0.0-SNAPSHOT
2018-07-17 17:10:35,084 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-07-17 17:10:35,084 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-07-17 17:10:35,085 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-openid/3.0.0-SNAPSHOT
2018-07-17 17:10:35,085 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-07-17 17:10:35,085 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-07-17 17:10:35,085 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-gae/3.0.0-SNAPSHOT
2018-07-17 17:10:35,085 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-07-17 17:10:35,085 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-jwt/3.0.0-SNAPSHOT
2018-07-17 17:10:35,085 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-07-17 17:10:35,086 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-07-17 17:10:35,086 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-mongo/3.0.0-SNAPSHOT
2018-07-17 17:10:35,086 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-couch/3.0.0-SNAPSHOT
2018-07-17 17:10:35,086 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-kerberos/3.0.0-SNAPSHOT
2018-07-17 17:10:35,086 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/slf4j-api/1.7.25
2018-07-17 17:10:35,086 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-07-17 17:10:35,086 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-07-17 17:10:35,087 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-07-17 17:10:35,087 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-07-17 17:10:35,087 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,087 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-07-17 17:10:35,087 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-07-17 17:10:35,087 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,092 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-07-17 17:10:35,092 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,092 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-07-17 17:10:35,092 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-07-17 17:10:35,093 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-07-17 17:10:35,093 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-07-17 17:10:35,093 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-07-17 17:10:35,093 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-07-17 17:10:35,093 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/zaxxer/HikariCP/2.6.1
2018-07-17 17:10:35,093 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-07-17 17:10:35,093 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-07-17 17:10:35,094 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-07-17 17:10:35,094 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,094 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,094 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,094 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-07-17 17:10:35,094 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-07-17 17:10:35,094 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-07-17 17:10:35,094 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,095 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-07-17 17:10:35,095 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/github/scribejava/scribejava-apis/3.3.0
2018-07-17 17:10:35,095 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-07-17 17:10:35,095 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-07-17 17:10:35,095 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,104 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,104 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,104 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,104 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-core/3.4.1
2018-07-17 17:10:35,104 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-support-saml/3.4.1
2018-07-17 17:10:35,105 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-07-17 17:10:35,105 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-07-17 17:10:35,105 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,105 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,105 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,105 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,105 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/openid4java/openid4java/1.0.0
2018-07-17 17:10:35,105 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-07-17 17:10:35,106 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xml-apis/xml-apis/2.0.2
2018-07-17 17:10:35,106 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-07-17 17:10:35,106 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,106 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,106 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,106 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,106 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-07-17 17:10:35,107 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-07-17 17:10:35,107 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,107 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,108 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,108 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-07-17 17:10:35,108 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-07-17 17:10:35,108 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/nanohttpd/nanohttpd/2.3.1
2018-07-17 17:10:35,108 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,108 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-core/3.3.0
2018-07-17 17:10:35,108 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/shibboleth/utilities/java-support/7.3.0
2018-07-17 17:10:35,108 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-api/3.3.0
2018-07-17 17:10:35,109 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-impl/3.3.0
2018-07-17 17:10:35,109 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-soap-api/3.3.0
2018-07-17 17:10:35,109 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-api/3.3.0
2018-07-17 17:10:35,109 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-api/3.3.0
2018-07-17 17:10:35,109 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-impl/3.3.0
2018-07-17 17:10:35,109 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-api/3.3.0
2018-07-17 17:10:35,109 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-impl/3.3.0
2018-07-17 17:10:35,109 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-api/3.3.0
2018-07-17 17:10:35,115 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-impl/3.3.0
2018-07-17 17:10:35,115 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-impl/3.3.0
2018-07-17 17:10:35,115 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-07-17 17:10:35,115 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/cryptacular/cryptacular/1.1.0
2018-07-17 17:10:35,115 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/joda-time/joda-time/2.9.2
2018-07-17 17:10:35,116 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xalan/xalan/2.7.2
2018-07-17 17:10:35,116 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/velocity/velocity/1.7
2018-07-17 17:10:35,116 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-collections/commons-collections/3.2.2
2018-07-17 17:10:35,116 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-07-17 17:10:35,116 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-07-17 17:10:35,116 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-07-17 17:10:35,116 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,116 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,117 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,117 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-07-17 17:10:35,117 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-web/4.3.7.RELEASE
2018-07-17 17:10:35,117 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-07-17 17:10:35,117 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,117 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-1.0-sdk/1.9.50
2018-07-17 17:10:35,117 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-jsr107cache/1.9.50
2018-07-17 17:10:35,117 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/sf/jsr107cache/jsr107cache/1.1
2018-07-17 17:10:35,118 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-07-17 17:10:35,118 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,118 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,118 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,118 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-testing/1.9.50
2018-07-17 17:10:35,118 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-labs/1.9.50
2018-07-17 17:10:35,118 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-stubs/1.9.50
2018-07-17 17:10:35,118 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,119 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/oauth2-oidc-sdk/5.24.2
2018-07-17 17:10:35,119 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-07-17 17:10:35,125 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,125 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,125 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,125 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,126 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-07-17 17:10:35,126 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.56
2018-07-17 17:10:35,126 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,126 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,126 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,126 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-07-17 17:10:35,126 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,126 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ldaptive/ldaptive/1.2.1
2018-07-17 17:10:35,127 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,127 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,127 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,127 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-07-17 17:10:35,127 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,127 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jdbi/jdbi/2.78
2018-07-17 17:10:35,127 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,128 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,128 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-07-17 17:10:35,128 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/h2database/h2/1.4.194
2018-07-17 17:10:35,128 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,128 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mongodb/mongo-java-driver/3.4.2
2018-07-17 17:10:35,128 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,128 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,129 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,129 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-07-17 17:10:35,129 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/de/flapdoodle/embed/de.flapdoodle.embed.mongo/2.0.0
2018-07-17 17:10:35,129 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,129 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ektorp/org.ektorp/1.4.4
2018-07-17 17:10:35,129 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.3.3
2018-07-17 17:10:35,129 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,129 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/io/bdrc/mcouch-ektorp/1.0.0
2018-07-17 17:10:35,130 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,130 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,130 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-07-17 17:10:35,130 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,130 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-07-17 17:10:35,130 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,130 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,131 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,131 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-07-17 17:10:35,131 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-07-17 17:10:35,131 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerby-kdc/1.0.0
2018-07-17 17:10:35,131 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-simplekdc/1.0.0
2018-07-17 17:10:35,131 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-client/1.0.0
2018-07-17 17:10:35,131 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/token-provider/1.0.0
2018-07-17 17:10:35,132 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/integration-test/1.0.0
2018-07-17 17:10:35,170 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,171 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-config/3.0.0-SNAPSHOT
2018-07-17 17:10:35,172 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-07-17 17:10:35,172 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-07-17 17:10:35,173 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-openid/3.0.0-SNAPSHOT
2018-07-17 17:10:35,173 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-07-17 17:10:35,173 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-07-17 17:10:35,173 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-gae/3.0.0-SNAPSHOT
2018-07-17 17:10:35,173 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-07-17 17:10:35,173 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-jwt/3.0.0-SNAPSHOT
2018-07-17 17:10:35,173 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-07-17 17:10:35,173 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-07-17 17:10:35,174 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-mongo/3.0.0-SNAPSHOT
2018-07-17 17:10:35,174 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-couch/3.0.0-SNAPSHOT
2018-07-17 17:10:35,174 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-kerberos/3.0.0-SNAPSHOT
2018-07-17 17:10:35,174 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/slf4j-api/1.7.25
2018-07-17 17:10:35,174 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-07-17 17:10:35,174 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-07-17 17:10:35,174 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-07-17 17:10:35,174 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-07-17 17:10:35,175 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,175 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-07-17 17:10:35,175 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-07-17 17:10:35,175 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,175 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-07-17 17:10:35,175 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,175 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-cas/3.0.0-SNAPSHOT
2018-07-17 17:10:35,175 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-saml/3.0.0-SNAPSHOT
2018-07-17 17:10:35,176 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-07-17 17:10:35,176 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oidc/3.0.0-SNAPSHOT
2018-07-17 17:10:35,176 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-07-17 17:10:35,176 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-http/3.0.0-SNAPSHOT
2018-07-17 17:10:35,176 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/zaxxer/HikariCP/2.6.1
2018-07-17 17:10:35,176 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-07-17 17:10:35,176 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-07-17 17:10:35,176 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-07-17 17:10:35,177 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,177 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,177 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,177 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-ldap/3.0.0-SNAPSHOT
2018-07-17 17:10:35,177 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-07-17 17:10:35,177 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-sql/3.0.0-SNAPSHOT
2018-07-17 17:10:35,177 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,177 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-07-17 17:10:35,178 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/github/scribejava/scribejava-apis/3.3.0
2018-07-17 17:10:35,178 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-07-17 17:10:35,178 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-07-17 17:10:35,178 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,178 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,178 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,178 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,178 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-core/3.4.1
2018-07-17 17:10:35,183 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jasig/cas/client/cas-client-support-saml/3.4.1
2018-07-17 17:10:35,183 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-07-17 17:10:35,183 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-07-17 17:10:35,184 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,184 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,184 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,184 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,184 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/openid4java/openid4java/1.0.0
2018-07-17 17:10:35,184 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-07-17 17:10:35,184 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xml-apis/xml-apis/2.0.2
2018-07-17 17:10:35,184 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-07-17 17:10:35,184 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,185 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,185 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,185 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,185 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-codec/commons-codec/1.10
2018-07-17 17:10:35,185 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.8.7
2018-07-17 17:10:35,185 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,185 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,185 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,186 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-07-17 17:10:35,186 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-07-17 17:10:35,186 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/nanohttpd/nanohttpd/2.3.1
2018-07-17 17:10:35,186 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,186 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-core/3.3.0
2018-07-17 17:10:35,186 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/shibboleth/utilities/java-support/7.3.0
2018-07-17 17:10:35,186 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-api/3.3.0
2018-07-17 17:10:35,186 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-saml-impl/3.3.0
2018-07-17 17:10:35,186 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-soap-api/3.3.0
2018-07-17 17:10:35,187 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-api/3.3.0
2018-07-17 17:10:35,187 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-api/3.3.0
2018-07-17 17:10:35,187 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-security-impl/3.3.0
2018-07-17 17:10:35,187 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-api/3.3.0
2018-07-17 17:10:35,187 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-profile-impl/3.3.0
2018-07-17 17:10:35,187 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-api/3.3.0
2018-07-17 17:10:35,187 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-messaging-impl/3.3.0
2018-07-17 17:10:35,187 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/opensaml/opensaml-xmlsec-impl/3.3.0
2018-07-17 17:10:35,187 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/guava/guava/21.0
2018-07-17 17:10:35,188 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/cryptacular/cryptacular/1.1.0
2018-07-17 17:10:35,188 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/joda-time/joda-time/2.9.2
2018-07-17 17:10:35,188 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/xalan/xalan/2.7.2
2018-07-17 17:10:35,188 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/velocity/velocity/1.7
2018-07-17 17:10:35,188 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-collections/commons-collections/3.2.2
2018-07-17 17:10:35,188 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/slf4j/jcl-over-slf4j/1.7.25
2018-07-17 17:10:35,188 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-07-17 17:10:35,188 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-07-17 17:10:35,188 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,189 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,189 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,189 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-test/4.3.7.RELEASE
2018-07-17 17:10:35,189 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-web/4.3.7.RELEASE
2018-07-17 17:10:35,189 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-07-17 17:10:35,189 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,189 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-1.0-sdk/1.9.50
2018-07-17 17:10:35,189 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-jsr107cache/1.9.50
2018-07-17 17:10:35,189 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/net/sf/jsr107cache/jsr107cache/1.1
2018-07-17 17:10:35,190 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-07-17 17:10:35,190 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,190 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,190 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,190 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-testing/1.9.50
2018-07-17 17:10:35,190 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-labs/1.9.50
2018-07-17 17:10:35,190 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/google/appengine/appengine-api-stubs/1.9.50
2018-07-17 17:10:35,190 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,191 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/oauth2-oidc-sdk/5.24.2
2018-07-17 17:10:35,191 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-07-17 17:10:35,191 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,191 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,191 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,191 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,191 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/nimbusds/nimbus-jose-jwt/4.35
2018-07-17 17:10:35,191 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/bouncycastle/bcprov-jdk15on/1.56
2018-07-17 17:10:35,191 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,192 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,192 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,192 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-oauth/3.0.0-SNAPSHOT
2018-07-17 17:10:35,192 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,192 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ldaptive/ldaptive/1.2.1
2018-07-17 17:10:35,192 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,192 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,192 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,193 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/unboundid/unboundid-ldapsdk/3.2.1
2018-07-17 17:10:35,193 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,193 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/jdbi/jdbi/2.78
2018-07-17 17:10:35,193 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,193 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,193 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/security/spring-security-crypto/4.2.2.RELEASE
2018-07-17 17:10:35,193 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/h2database/h2/1.4.194
2018-07-17 17:10:35,193 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,193 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mongodb/mongo-java-driver/3.4.2
2018-07-17 17:10:35,194 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,194 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,194 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,194 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-07-17 17:10:35,194 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/de/flapdoodle/embed/de.flapdoodle.embed.mongo/2.0.0
2018-07-17 17:10:35,194 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,194 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/ektorp/org.ektorp/1.4.4
2018-07-17 17:10:35,194 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.3.3
2018-07-17 17:10:35,195 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,195 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/io/bdrc/mcouch-ektorp/1.0.0
2018-07-17 17:10:35,195 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,195 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,195 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/shiro/shiro-core/1.3.2
2018-07-17 17:10:35,195 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,195 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/springframework/spring-core/4.3.7.RELEASE
2018-07-17 17:10:35,195 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/pac4j/pac4j-core/3.0.0-SNAPSHOT
2018-07-17 17:10:35,195 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/junit/junit/4.12
2018-07-17 17:10:35,195 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/ch/qos/logback/logback-classic/1.2.2
2018-07-17 17:10:35,196 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/mockito/mockito-core/2.7.19
2018-07-17 17:10:35,196 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/javax/servlet/javax.servlet-api/3.1.0
2018-07-17 17:10:35,196 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerby-kdc/1.0.0
2018-07-17 17:10:35,196 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-simplekdc/1.0.0
2018-07-17 17:10:35,196 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/kerb-client/1.0.0
2018-07-17 17:10:35,196 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/token-provider/1.0.0
2018-07-17 17:10:35,196 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/kerby/integration-test/1.0.0
2018-07-17 17:10:35,337 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/eclipse/jdt/org.eclipse.jdt.core/3.13.102
2018-07-17 17:10:35,338 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/martiansoftware/jsap/2.1
2018-07-17 17:10:35,338 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/log4j/log4j/1.2.17
2018-07-17 17:10:35,338 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/commons-io/commons-io/2.5
2018-07-17 17:10:35,338 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/maven/maven-model/3.3.9
2018-07-17 17:10:35,338 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/org/apache/commons/commons-lang3/3.5
2018-07-17 17:10:35,338 ERROR spoon.Launcher - Dependency not found at /root/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.2
[ERROR] Tests run: 6, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.438 s <<< FAILURE! - in spoon.MavenLauncherTest
[ERROR] mavenLauncherTestMultiModulesAndVariables(spoon.MavenLauncherTest)  Time elapsed: 0.234 s  <<< FAILURE!
java.lang.AssertionError: Content of classpath: 
	at spoon.MavenLauncherTest.mavenLauncherTestMultiModulesAndVariables(MavenLauncherTest.java:76)

[ERROR] spoonMavenLauncherTest(spoon.MavenLauncherTest)  Time elapsed: 0.141 s  <<< FAILURE!
java.lang.AssertionError: expected:<23> but was:<0>
	at spoon.MavenLauncherTest.spoonMavenLauncherTest(MavenLauncherTest.java:20)

[INFO] Running spoon.support.visitor.java.JavaReflectionTreeBuilderTest
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.815 s - in spoon.support.visitor.java.JavaReflectionTreeBuilderTest
[INFO] Running spoon.support.compiler.jdt.JDTBatchCompilerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.156 s - in spoon.support.compiler.jdt.JDTBatchCompilerTest
[INFO] Running spoon.support.compiler.jdt.JDTBuilderTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.support.compiler.jdt.JDTBuilderTest
[INFO] Running spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.677 s - in spoon.support.compiler.jdt.JDTBasedSpoonCompilerTest
[INFO] Running spoon.support.compiler.jdt.ExtendedStringLiteralTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.088 s - in spoon.support.compiler.jdt.ExtendedStringLiteralTest
[INFO] Running spoon.support.compiler.classpath.ComputeClasspathTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in spoon.support.compiler.classpath.ComputeClasspathTest
[INFO] Running spoon.LauncherTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.286 s - in spoon.LauncherTest
[INFO] Running spoon.processing.CtGenerationTest
[ERROR] Tests run: 4, Failures: 2, Errors: 2, Skipped: 0, Time elapsed: 60.848 s <<< FAILURE! - in spoon.processing.CtGenerationTest
[ERROR] testGenerateCtBiScanner(spoon.processing.CtGenerationTest)  Time elapsed: 2.051 s  <<< FAILURE!
java.lang.AssertionError
	at spoon.processing.CtGenerationTest.testGenerateCtBiScanner(CtGenerationTest.java:110)

[ERROR] testGenerateRoleHandler(spoon.processing.CtGenerationTest)  Time elapsed: 2.194 s  <<< ERROR!
spoon.SpoonException: The element of class interface spoon.reflect.code.CtJavaDoc does not have CtRole.JAVADOC_CONTENT
	at spoon.processing.CtGenerationTest.testGenerateRoleHandler(CtGenerationTest.java:187)

[ERROR] testGenerateReplacementVisitor(spoon.processing.CtGenerationTest)  Time elapsed: 14.284 s  <<< FAILURE!
org.junit.ComparisonFailure: 
ReplacementVisitor different expected:<...nerator
    class Ct[ImportReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtReference> {
        private final spoon.reflect.declaration.CtImport element;

        CtImportReferenceReplaceListener(spoon.reflect.declaration.CtImport element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtReference replace) {
            this.element.setReference(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtModuleModuleDirectivesReplaceListener implements spoon.support.visitor.replace.ReplaceListListener<java.util.List> {
        private final spoon.reflect.declaration.CtModule element;

        CtModuleModuleDirectivesReplaceListener(spoon.reflect.declaration.CtModule element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.util.List replace) {
            this.element.setModuleDirectives(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtModuleRootPackageReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.declaration.CtPackage> {
        private final spoon.reflect.declaration.CtModule element;

        CtModuleRootPackageReplaceListener(spoon.reflect.declaration.CtModule element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.declaration.CtPackage replace) {
            this.element.setRootPackage(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtPackageExportPackageReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtPackageReference> {
        private final spoon.reflect.declaration.CtPackageExport element;

        CtPackageExportPackageReferenceReplaceListener(spoon.reflect.declaration.CtPackageExport element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtPackageReference replace) {
            this.element.setPackageReference(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtPackageExportTargetExportReplaceListener implements spoon.support.visitor.replace.ReplaceListListener<java.util.List> {
        private final spoon.reflect.declaration.CtPackageExport element;

        CtPackageExportTargetExportReplaceListener(spoon.reflect.declaration.CtPackageExport element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.util.List replace) {
            this.element.setTargetExport(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtModuleRequirementModuleReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtModuleReference> {
        private final spoon.reflect.declaration.CtModuleRequirement element;

        CtModuleRequirementModuleReferenceReplaceListener(spoon.reflect.declaration.CtModuleRequirement element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtModuleReference replace) {
            this.element.setModuleReference(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtProvidedServiceServiceTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtTypeReference> {
        private final spoon.reflect.declaration.CtProvidedService element;

        CtProvidedServiceServiceTypeReplaceListener(spoon.reflect.declaration.CtProvidedService element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtTypeReference replace) {
            this.element.setServiceType(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtProvidedServiceImplementationTypesReplaceListener implements spoon.support.visitor.replace.ReplaceListListener<java.util.List> {
        private final spoon.reflect.declaration.CtProvidedService element;

        CtProvidedServiceImplementationTypesReplaceListener(spoon.reflect.declaration.CtProvidedService element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.util.List replace) {
            this.element.setImplementationTypes(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtUsedServiceServiceTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtTypeReference> {
        private final spoon.reflect.declaration.CtUsedService element;

        CtUsedServiceServiceTypeReplaceListener(spoon.reflect.declaration.CtUsedService element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtTypeReference replace) {
            this.element.setServiceType(replace);
        }
    }

    public static void replace(spoon.reflect.declaration.CtElement original, spoon.reflect.declaration.CtElement replace) {
        try {
            new spoon.support.visitor.replace.ReplacementVisitor(original, (replace == null ? spoon.support.visitor.replace.ReplacementVisitor.EMPTY : new spoon.reflect.declaration.CtElement[]{ replace })).scan(original.getParent());
        } catch (spoon.support.visitor.replace.InvalidReplaceException e) {
            throw e;
        } catch (spoon.SpoonException ignore) {
        }
    }

    public static <E extends spoon.reflect.declaration.CtElement> void replace(spoon.reflect.declaration.CtElement original, java.util.Collection<E> replaces) {
        try {
            new spoon.support.visitor.replace.ReplacementVisitor(original, replaces.toArray(new spoon.reflect.declaration.CtElement[replaces.size()])).scan(original.getParent());
        } catch (spoon.support.visitor.replace.InvalidReplaceException e) {
            throw e;
        } catch (spoon.SpoonException ignore) {
        }
    }

    private spoon.reflect.declaration.CtElement original;

    private spoon.reflect.declaration.CtElement[] replace;

    private static final spoon.reflect.declaration.CtElement[] EMPTY = new spoon.reflect.declaration.CtElement[0];

    private ReplacementVisitor(spoon.reflect.declaration.CtElement original, spoon.reflect.declaration.CtElement... replace) {
        this.original = original;
        this.replace = (replace == null) ? spoon.support.visitor.replace.ReplacementVisitor.EMPTY : replace;
    }

    private <K, V extends spoon.reflect.declaration.CtElement> void replaceInMapIfExist(java.util.Map<K, V> mapProtected, spoon.support.visitor.replace.ReplaceMapListener listener) {
        java.util.Map<K, V> map = new java.util.HashMap<>(mapProtected);
        V shouldBeDeleted = null;
        K key = null;
        for (java.util.Map.Entry<K, V> entry : map.entrySet()) {
            if ((entry.getValue()) == (original)) {
                shouldBeDeleted = entry.getValue();
                key = entry.getKey();
                break;
            }
        }
        if (shouldBeDeleted != null) {
            if ((replace.length) > 0) {
                if ((replace.length) > 1) {
                    throw new spoon.support.visitor.replace.InvalidReplaceException(("Cannot replace single value by multiple values in " + (listener.getClass().getSimpleName())));
                }
                V val = ((V) (replace[0]));
                if (val != null) {
                    map.put(key, val);
                    val.setParent(shouldBeDeleted.getParent());
                }else {
                    map.remove(key);
                }
            }else {
                map.remove(key);
            }
            listener.set(map);
        }
    }

    private <T extends spoon.reflect.declaration.CtElement> void replaceInSetIfExist(java.util.Set<T> setProtected, spoon.support.visitor.replace.ReplaceSetListener listener) {
        java.util.Set<T> set = new java.util.HashSet<>(setProtected);
        T shouldBeDeleted = null;
        for (T element : set) {
            if (element == (original)) {
                shouldBeDeleted = element;
                break;
            }
        }
        if (shouldBeDeleted != null) {
            set.remove(shouldBeDeleted);
            for (spoon.reflect.declaration.CtElement ele : replace) {
                if (ele != null) {
                    set.add(((T) (ele)));
                    ele.setParent(shouldBeDeleted.getParent());
                }
            }
            listener.set(set);
        }
    }

    private <T extends spoon.reflect.declaration.CtElement> void replaceInListIfExist(java.util.List<T> listProtected, spoon.support.visitor.replace.ReplaceListListener listener) {
        java.util.List<T> list = new java.util.ArrayList<>(listProtected);
        T shouldBeDeleted = null;
        int index = 0;
        for (int i = 0; i < (list.size()); i++) {
            if ((list.get(i)) == (original)) {
                index = i;
                shouldBeDeleted = list.get(i);
                break;
            }
        }
        if (shouldBeDeleted != null) {
            list.remove(index);
            if ((replace.length) > 0) {
                for (int i = 0; i < (replace.length); i++) {
                    T ele = ((T) (replace[i]));
                    if (ele != null) {
                        list.add(index, ele);
                        ele.setParent(shouldBeDeleted.getParent());
                        index = index + 1;
                    }
                }
            }
            listener.set(list);
        }
    }

    private void replaceElementIfExist(spoon.reflect.declaration.CtElement candidate, spoon.support.visitor.replace.ReplaceListener listener) {
        if (candidate == (original)) {
            spoon.reflect.declaration.CtElement val = null;
            if ((replace.length) > 0) {
                if ((replace.length) > 1) {
                    throw new spoon.support.visitor.replace.InvalidReplaceException(("Cannot replace single value by multiple values in " + (listener.getClass().getSimpleName())));
                }
                val = replace[0];
            }
            if (val != null) {
                val.setParent(candidate.getParent());
            }
            listener.set(val);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <A extends java.lang.annotation.Annotation> void visitCtAnnotation(final spoon.reflect.declaration.CtAnnotation<A> annotation) {
        replaceElementIfExist(annotation.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(annotation));
        replaceInListIfExist(annotation.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotation));
        replaceElementIfExist(annotation.getAnnotationType(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationAnnotationTypeReplaceListener(annotation));
        replaceInListIfExist(annotation.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotation));
        replaceInMapIfExist(annotation.getValues(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationValuesReplaceListener(annotation));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <A extends java.lang.annotation.Annotation> void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType<A> annotationType) {
        replaceInListIfExist(annotationType.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationType));
        replaceInListIfExist(annotationType.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(annotationType));
        replaceInListIfExist(annotationType.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationType));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {
        replaceInListIfExist(anonymousExec.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(anonymousExec));
        replaceElementIfExist(anonymousExec.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(anonymousExec));
        replaceInListIfExist(anonymousExec.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(anonymousExec));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayRead(final spoon.reflect.code.CtArrayRead<T> arrayRead) {
        replaceInListIfExist(arrayRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(arrayRead));
        replaceElementIfExist(arrayRead.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(arrayRead));
        replaceInListIfExist(arrayRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(arrayRead));
        replaceElementIfExist(arrayRead.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(arrayRead));
        replaceElementIfExist(arrayRead.getIndexExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayAccessIndexExpressionReplaceListener(arrayRead));
        replaceInListIfExist(arrayRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(arrayRead));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite<T> arrayWrite) {
        replaceInListIfExist(arrayWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(arrayWrite));
        replaceElementIfExist(arrayWrite.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(arrayWrite));
        replaceInListIfExist(arrayWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(arrayWrite));
        replaceElementIfExist(arrayWrite.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(arrayWrite));
        replaceElementIfExist(arrayWrite.getIndexExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayAccessIndexExpressionReplaceListener(arrayWrite));
        replaceInListIfExist(arrayWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(arrayWrite));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference<T> reference) {
        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));
        replaceElementIfExist(reference.getComponentType(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayTypeReferenceComponentTypeReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAssert(final spoon.reflect.code.CtAssert<T> asserted) {
        replaceInListIfExist(asserted.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(asserted));
        replaceElementIfExist(asserted.getAssertExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssertAssertExpressionReplaceListener(asserted));
        replaceElementIfExist(asserted.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssertExpressionReplaceListener(asserted));
        replaceInListIfExist(asserted.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(asserted));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T, A extends T> void visitCtAssignment(final spoon.reflect.code.CtAssignment<T, A> assignement) {
        replaceInListIfExist(assignement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(assignement));
        replaceElementIfExist(assignement.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(assignement));
        replaceInListIfExist(assignement.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(assignement));
        replaceElementIfExist(assignement.getAssigned(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssignmentAssignedReplaceListener(assignement));
        replaceElementIfExist(assignement.getAssignment(), new spoon.support.visitor.replace.ReplacementVisitor.CtRHSReceiverAssignmentReplaceListener(assignement));
        replaceInListIfExist(assignement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(assignement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator<T> operator) {
        replaceInListIfExist(operator.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(operator));
        replaceElementIfExist(operator.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(operator));
        replaceInListIfExist(operator.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(operator));
        replaceElementIfExist(operator.getLeftHandOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorLeftHandOperandReplaceListener(operator));
        replaceElementIfExist(operator.getRightHandOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorRightHandOperandReplaceListener(operator));
        replaceInListIfExist(operator.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(operator));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <R> void visitCtBlock(final spoon.reflect.code.CtBlock<R> block) {
        replaceInListIfExist(block.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(block));
        replaceInListIfExist(block.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(block));
        replaceInListIfExist(block.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(block));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {
        replaceInListIfExist(breakStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(breakStatement));
        replaceInListIfExist(breakStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(breakStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <S> void visitCtCase(final spoon.reflect.code.CtCase<S> caseStatement) {
        replaceInListIfExist(caseStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(caseStatement));
        replaceElementIfExist(caseStatement.getCaseExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtCaseCaseExpressionReplaceListener(caseStatement));
        replaceInListIfExist(caseStatement.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(caseStatement));
        replaceInListIfExist(caseStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(caseStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {
        replaceInListIfExist(catchBlock.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(catchBlock));
        replaceElementIfExist(catchBlock.getParameter(), new spoon.support.visitor.replace.ReplacementVisitor.CtCatchParameterReplaceListener(catchBlock));
        replaceElementIfExist(catchBlock.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtCatchBodyReplaceListener(catchBlock));
        replaceInListIfExist(catchBlock.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(catchBlock));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtClass(final spoon.reflect.declaration.CtClass<T> ctClass) {
        replaceInListIfExist(ctClass.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctClass));
        replaceElementIfExist(ctClass.getSuperclass(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperclassReplaceListener(ctClass));
        replaceInSetIfExist(ctClass.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(ctClass));
        replaceInListIfExist(ctClass.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(ctClass));
        replaceInListIfExist(ctClass.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(ctClass));
        replaceInListIfExist(ctClass.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctClass));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {
        replaceInListIfExist(typeParameter.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(typeParameter));
        replaceElementIfExist(typeParameter.getSuperclass(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperclassReplaceListener(typeParameter));
        replaceInListIfExist(typeParameter.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(typeParameter));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConditional(final spoon.reflect.code.CtConditional<T> conditional) {
        replaceElementIfExist(conditional.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(conditional));
        replaceInListIfExist(conditional.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(conditional));
        replaceElementIfExist(conditional.getCondition(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalConditionReplaceListener(conditional));
        replaceElementIfExist(conditional.getThenExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalThenExpressionReplaceListener(conditional));
        replaceElementIfExist(conditional.getElseExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalElseExpressionReplaceListener(conditional));
        replaceInListIfExist(conditional.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(conditional));
        replaceInListIfExist(conditional.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(conditional));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConstructor(final spoon.reflect.declaration.CtConstructor<T> c) {
        replaceInListIfExist(c.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(c));
        replaceInListIfExist(c.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(c));
        replaceInSetIfExist(c.getThrownTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableThrownTypesReplaceListener(c));
        replaceInListIfExist(c.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(c));
        replaceElementIfExist(c.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(c));
        replaceInListIfExist(c.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(c));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {
        replaceInListIfExist(continueStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(continueStatement));
        replaceInListIfExist(continueStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(continueStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {
        replaceInListIfExist(doLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(doLoop));
        replaceElementIfExist(doLoop.getLoopingExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtDoLoopingExpressionReplaceListener(doLoop));
        replaceElementIfExist(doLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(doLoop));
        replaceInListIfExist(doLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(doLoop));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T extends java.lang.Enum<?>> void visitCtEnum(final spoon.reflect.declaration.CtEnum<T> ctEnum) {
        replaceInListIfExist(ctEnum.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctEnum));
        replaceInSetIfExist(ctEnum.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(ctEnum));
        replaceInListIfExist(ctEnum.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(ctEnum));
        replaceInListIfExist(ctEnum.getEnumValues(), new spoon.support.visitor.replace.ReplacementVisitor.CtEnumEnumValuesReplaceListener(ctEnum));
        replaceInListIfExist(ctEnum.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctEnum));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference<T> reference) {
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceDeclaringTypeReplaceListener(reference));
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceParametersReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
        replaceInListIfExist(reference.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtField(final spoon.reflect.declaration.CtField<T> f) {
        replaceInListIfExist(f.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(f));
        replaceElementIfExist(f.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(f));
        replaceElementIfExist(f.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(f));
        replaceInListIfExist(f.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(f));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue<T> enumValue) {
        replaceInListIfExist(enumValue.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(enumValue));
        replaceElementIfExist(enumValue.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(enumValue));
        replaceElementIfExist(enumValue.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(enumValue));
        replaceInListIfExist(enumValue.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(enumValue));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtThisAccess(final spoon.reflect.code.CtThisAccess<T> thisAccess) {
        replaceInListIfExist(thisAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(thisAccess));
        replaceInListIfExist(thisAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(thisAccess));
        replaceElementIfExist(thisAccess.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(thisAccess));
        replaceInListIfExist(thisAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(thisAccess));
        replaceElementIfExist(thisAccess.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(thisAccess));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess<T> annotationFieldAccess) {
        replaceInListIfExist(annotationFieldAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationFieldAccess));
        replaceInListIfExist(annotationFieldAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationFieldAccess));
        replaceInListIfExist(annotationFieldAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(annotationFieldAccess));
        replaceElementIfExist(annotationFieldAccess.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(annotationFieldAccess));
        replaceElementIfExist(annotationFieldAccess.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationFieldAccessVariableReplaceListener(annotationFieldAccess));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference<T> reference) {
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldReferenceDeclaringTypeReplaceListener(reference));
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {
        replaceInListIfExist(forLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(forLoop));
        replaceInListIfExist(forLoop.getForInit(), new spoon.support.visitor.replace.ReplacementVisitor.CtForForInitReplaceListener(forLoop));
        replaceElementIfExist(forLoop.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtForExpressionReplaceListener(forLoop));
        replaceInListIfExist(forLoop.getForUpdate(), new spoon.support.visitor.replace.ReplacementVisitor.CtForForUpdateReplaceListener(forLoop));
        replaceElementIfExist(forLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(forLoop));
        replaceInListIfExist(forLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(forLoop));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {
        replaceInListIfExist(foreach.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(foreach));
        replaceElementIfExist(foreach.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtForEachVariableReplaceListener(foreach));
        replaceElementIfExist(foreach.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtForEachExpressionReplaceListener(foreach));
        replaceElementIfExist(foreach.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(foreach));
        replaceInListIfExist(foreach.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(foreach));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {
        replaceInListIfExist(ifElement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ifElement));
        replaceElementIfExist(ifElement.getCondition(), new spoon.support.visitor.replace.ReplacementVisitor.CtIfConditionReplaceListener(ifElement));
        replaceElementIfExist(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement())), new spoon.support.visitor.replace.ReplacementVisitor.CtIfThenStatementReplaceListener(ifElement));
        replaceElementIfExist(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement())), new spoon.support.visitor.replace.ReplacementVisitor.CtIfElseStatementReplaceListener(ifElement));
        replaceInListIfExist(ifElement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ifElement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtInterface(final spoon.reflect.declaration.CtInterface<T> intrface) {
        replaceInListIfExist(intrface.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(intrface));
        replaceInSetIfExist(intrface.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(intrface));
        replaceInListIfExist(intrface.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(intrface));
        replaceInListIfExist(intrface.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(intrface));
        replaceInListIfExist(intrface.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(intrface));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtInvocation(final spoon.reflect.code.CtInvocation<T> invocation) {
        replaceInListIfExist(invocation.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(invocation));
        replaceInListIfExist(invocation.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(invocation));
        replaceElementIfExist(invocation.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(invocation));
        replaceElementIfExist(invocation.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(invocation));
        replaceInListIfExist(invocation.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(invocation));
        replaceInListIfExist(invocation.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(invocation));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLiteral(final spoon.reflect.code.CtLiteral<T> literal) {
        replaceInListIfExist(literal.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(literal));
        replaceElementIfExist(literal.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(literal));
        replaceInListIfExist(literal.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(literal));
        replaceInListIfExist(literal.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(literal));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable<T> localVariable) {
        replaceInListIfExist(localVariable.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(localVariable));
        replaceElementIfExist(localVariable.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(localVariable));
        replaceElementIfExist(localVariable.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(localVariable));
        replaceInListIfExist(localVariable.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(localVariable));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable<T> catchVariable) {
        replaceInListIfExist(catchVariable.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(catchVariable));
        replaceInListIfExist(catchVariable.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(catchVariable));
        replaceInListIfExist(catchVariable.getMultiTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtMultiTypedElementMultiTypesReplaceListener(catchVariable));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtMethod(final spoon.reflect.declaration.CtMethod<T> m) {
        replaceInListIfExist(m.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(m));
        replaceInListIfExist(m.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(m));
        replaceElementIfExist(m.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(m));
        replaceInListIfExist(m.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(m));
        replaceInSetIfExist(m.getThrownTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableThrownTypesReplaceListener(m));
        replaceElementIfExist(m.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(m));
        replaceInListIfExist(m.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(m));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod<T> annotationMethod) {
        replaceInListIfExist(annotationMethod.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationMethod));
        replaceElementIfExist(annotationMethod.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(annotationMethod));
        replaceElementIfExist(annotationMethod.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationMethodDefaultExpressionReplaceListener(annotationMethod));
        replaceInListIfExist(annotationMethod.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationMethod));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtNewArray(final spoon.reflect.code.CtNewArray<T> newArray) {
        replaceInListIfExist(newArray.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(newArray));
        replaceElementIfExist(newArray.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(newArray));
        replaceInListIfExist(newArray.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(newArray));
        replaceInListIfExist(newArray.getElements(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayElementsReplaceListener(newArray));
        replaceInListIfExist(newArray.getDimensionExpressions(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayDimensionExpressionsReplaceListener(newArray));
        replaceInListIfExist(newArray.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(newArray));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall<T> ctConstructorCall) {
        replaceInListIfExist(ctConstructorCall.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctConstructorCall));
        replaceInListIfExist(ctConstructorCall.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(ctConstructorCall));
        replaceElementIfExist(ctConstructorCall.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(ctConstructorCall));
        replaceElementIfExist(ctConstructorCall.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(ctConstructorCall));
        replaceInListIfExist(ctConstructorCall.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(ctConstructorCall));
        replaceInListIfExist(ctConstructorCall.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctConstructorCall));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtNewClass(final spoon.reflect.code.CtNewClass<T> newClass) {
        replaceInListIfExist(newClass.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(newClass));
        replaceInListIfExist(newClass.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(newClass));
        replaceElementIfExist(newClass.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(newClass));
        replaceElementIfExist(newClass.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(newClass));
        replaceInListIfExist(newClass.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(newClass));
        replaceElementIfExist(newClass.getAnonymousClass(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewClassAnonymousClassReplaceListener(newClass));
        replaceInListIfExist(newClass.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(newClass));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLambda(final spoon.reflect.code.CtLambda<T> lambda) {
        replaceInListIfExist(lambda.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(lambda));
        replaceElementIfExist(lambda.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(lambda));
        replaceInListIfExist(lambda.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(lambda));
        replaceInListIfExist(lambda.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(lambda));
        replaceElementIfExist(lambda.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(lambda));
        replaceElementIfExist(lambda.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtLambdaExpressionReplaceListener(lambda));
        replaceInListIfExist(lambda.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(lambda));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T, E extends spoon.reflect.code.CtExpression<?>> void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression<T, E> expression) {
        replaceInListIfExist(expression.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(expression));
        replaceInListIfExist(expression.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(expression));
        replaceElementIfExist(expression.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(expression));
        replaceInListIfExist(expression.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(expression));
        replaceElementIfExist(expression.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceExpressionExecutableReplaceListener(expression));
        replaceElementIfExist(expression.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(expression));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T, A extends T> void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment<T, A> assignment) {
        replaceInListIfExist(assignment.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(assignment));
        replaceElementIfExist(assignment.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(assignment));
        replaceInListIfExist(assignment.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(assignment));
        replaceElementIfExist(assignment.getAssigned(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssignmentAssignedReplaceListener(assignment));
        replaceElementIfExist(assignment.getAssignment(), new spoon.support.visitor.replace.ReplacementVisitor.CtRHSReceiverAssignmentReplaceListener(assignment));
        replaceInListIfExist(assignment.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(assignment));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {
        replaceInListIfExist(ctPackage.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctPackage));
        replaceInSetIfExist(ctPackage.getPackages(), new spoon.support.visitor.replace.ReplacementVisitor.CtPackagePackagesReplaceListener(ctPackage));
        replaceInSetIfExist(ctPackage.getTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtPackageTypesReplaceListener(ctPackage));
        replaceInListIfExist(ctPackage.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctPackage));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtParameter(final spoon.reflect.declaration.CtParameter<T> parameter) {
        replaceInListIfExist(parameter.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(parameter));
        replaceElementIfExist(parameter.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(parameter));
        replaceInListIfExist(parameter.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(parameter));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <R> void visitCtReturn(final spoon.reflect.code.CtReturn<R> returnStatement) {
        replaceInListIfExist(returnStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(returnStatement));
        replaceElementIfExist(returnStatement.getReturnedExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtReturnReturnedExpressionReplaceListener(returnStatement));
        replaceInListIfExist(returnStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(returnStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <R> void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {
        replaceInListIfExist(statements.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(statements));
        replaceInListIfExist(statements.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(statements));
        replaceInListIfExist(statements.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(statements));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <S> void visitCtSwitch(final spoon.reflect.code.CtSwitch<S> switchStatement) {
        replaceInListIfExist(switchStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(switchStatement));
        replaceElementIfExist(switchStatement.getSelector(), new spoon.support.visitor.replace.ReplacementVisitor.CtSwitchSelectorReplaceListener(switchStatement));
        replaceInListIfExist(switchStatement.getCases(), new spoon.support.visitor.replace.ReplacementVisitor.CtSwitchCasesReplaceListener(switchStatement));
        replaceInListIfExist(switchStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(switchStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {
        replaceInListIfExist(synchro.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(synchro));
        replaceElementIfExist(synchro.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedExpressionReplaceListener(synchro));
        replaceElementIfExist(synchro.getBlock(), new spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedBlockReplaceListener(synchro));
        replaceInListIfExist(synchro.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(synchro));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {
        replaceInListIfExist(throwStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(throwStatement));
        replaceElementIfExist(throwStatement.getThrownExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtThrowThrownExpressionReplaceListener(throwStatement));
        replaceInListIfExist(throwStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(throwStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {
        replaceInListIfExist(tryBlock.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(tryBlock));
        replaceElementIfExist(tryBlock.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryBodyReplaceListener(tryBlock));
        replaceInListIfExist(tryBlock.getCatchers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryCatchersReplaceListener(tryBlock));
        replaceElementIfExist(tryBlock.getFinalizer(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryFinalizerReplaceListener(tryBlock));
        replaceInListIfExist(tryBlock.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(tryBlock));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {
        replaceInListIfExist(tryWithResource.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(tryWithResource));
        replaceInListIfExist(tryWithResource.getResources(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryWithResourceResourcesReplaceListener(tryWithResource));
        replaceElementIfExist(tryWithResource.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryBodyReplaceListener(tryWithResource));
        replaceInListIfExist(tryWithResource.getCatchers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryCatchersReplaceListener(tryWithResource));
        replaceElementIfExist(tryWithResource.getFinalizer(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryFinalizerReplaceListener(tryWithResource));
        replaceInListIfExist(tryWithResource.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(tryWithResource));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {
        replaceElementIfExist(ref.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(ref));
        replaceElementIfExist(ref.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(ref));
        replaceInListIfExist(ref.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ref));
        replaceElementIfExist(ref.getBoundingType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeParameterReferenceBoundingTypeReplaceListener(ref));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {
        replaceElementIfExist(wildcardReference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(wildcardReference));
        replaceElementIfExist(wildcardReference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(wildcardReference));
        replaceInListIfExist(wildcardReference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(wildcardReference));
        replaceElementIfExist(wildcardReference.getBoundingType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeParameterReferenceBoundingTypeReplaceListener(wildcardReference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference<T> reference) {
        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
        replaceInListIfExist(reference.getBounds(), new spoon.support.visitor.replace.ReplacementVisitor.CtIntersectionTypeReferenceBoundsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference<T> reference) {
        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
        replaceInListIfExist(reference.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess<T> typeAccess) {
        replaceInListIfExist(typeAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(typeAccess));
        replaceInListIfExist(typeAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(typeAccess));
        replaceElementIfExist(typeAccess.getAccessedType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeAccessAccessedTypeReplaceListener(typeAccess));
        replaceInListIfExist(typeAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(typeAccess));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator<T> operator) {
        replaceInListIfExist(operator.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(operator));
        replaceElementIfExist(operator.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(operator));
        replaceInListIfExist(operator.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(operator));
        replaceElementIfExist(operator.getOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtUnaryOperatorOperandReplaceListener(operator));
        replaceInListIfExist(operator.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(operator));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableRead(final spoon.reflect.code.CtVariableRead<T> variableRead) {
        replaceInListIfExist(variableRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(variableRead));
        replaceInListIfExist(variableRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(variableRead));
        replaceElementIfExist(variableRead.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(variableRead));
        replaceInListIfExist(variableRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(variableRead));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite<T> variableWrite) {
        replaceInListIfExist(variableWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(variableWrite));
        replaceInListIfExist(variableWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(variableWrite));
        replaceElementIfExist(variableWrite.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(variableWrite));
        replaceInListIfExist(variableWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(variableWrite));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {
        replaceInListIfExist(whileLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(whileLoop));
        replaceElementIfExist(whileLoop.getLoopingExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtWhileLoopingExpressionReplaceListener(whileLoop));
        replaceElementIfExist(whileLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(whileLoop));
        replaceInListIfExist(whileLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(whileLoop));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression<T> expression) {
        replaceElementIfExist(expression.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(expression));
        replaceInListIfExist(expression.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(expression));
        replaceInListIfExist(expression.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(expression));
        replaceInListIfExist(expression.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(expression));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {
        replaceInListIfExist(statement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(statement));
        replaceInListIfExist(statement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(statement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtUnboundVariableReference(final spoon.reflect.reference.CtUnboundVariableReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtFieldRead(final spoon.reflect.code.CtFieldRead<T> fieldRead) {
        replaceInListIfExist(fieldRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(fieldRead));
        replaceInListIfExist(fieldRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(fieldRead));
        replaceElementIfExist(fieldRead.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(fieldRead));
        replaceElementIfExist(fieldRead.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldAccessVariableReplaceListener(fieldRead));
        replaceInListIfExist(fieldRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(fieldRead));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtFieldWrite(final spoon.reflect.code.CtFieldWrite<T> fieldWrite) {
        replaceInListIfExist(fieldWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(fieldWrite));
        replaceInListIfExist(fieldWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(fieldWrite));
        replaceElementIfExist(fieldWrite.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(fieldWrite));
        replaceElementIfExist(fieldWrite.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldAccessVariableReplaceListener(fieldWrite));
        replaceInListIfExist(fieldWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(fieldWrite));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtSuperAccess(final spoon.reflect.code.CtSuperAccess<T> f) {
        replaceInListIfExist(f.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(f));
        replaceInListIfExist(f.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(f));
        replaceInListIfExist(f.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(f));
        replaceElementIfExist(f.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(f));
        replaceElementIfExist(f.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(f));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtComment(final spoon.reflect.code.CtComment comment) {
        replaceInListIfExist(comment.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(comment));
        replaceInListIfExist(comment.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(comment));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtJavaDoc(final spoon.reflect.code.CtJavaDoc javaDoc) {
        replaceInListIfExist(javaDoc.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(javaDoc));
        replaceInListIfExist(javaDoc.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(javaDoc));
        replaceInListIfExist(javaDoc.getTags(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavaDocTagsReplaceListener(javaDoc));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtJavaDocTag(final spoon.reflect.code.CtJavaDocTag docTag) {
        replaceInListIfExist(docTag.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(docTag));
        replaceInListIfExist(docTag.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(docTag]));
    }

    // au...> but was:<...nerator
    class Ct[JavadocDescriptionDescriptionElementsReplaceListener implements spoon.support.visitor.replace.ReplaceListListener<java.util.List> {
        private final spoon.reflect.code.CtJavadocDescription element;

        CtJavadocDescriptionDescriptionElementsReplaceListener(spoon.reflect.code.CtJavadocDescription element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.util.List replace) {
            this.element.setDescriptionElements(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtJavadocInlineTagTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.code.CtJavadocInlineTag.TagType> {
        private final spoon.reflect.code.CtJavadocInlineTag element;

        CtJavadocInlineTagTypeReplaceListener(spoon.reflect.code.CtJavadocInlineTag element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.code.CtJavadocInlineTag.TagType replace) {
            this.element.setType(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtJavadocInlineTagContentReplaceListener implements spoon.support.visitor.replace.ReplaceListener<java.lang.String> {
        private final spoon.reflect.code.CtJavadocInlineTag element;

        CtJavadocInlineTagContentReplaceListener(spoon.reflect.code.CtJavadocInlineTag element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.lang.String replace) {
            this.element.setContent(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtJavadocDescriptionElementContentReplaceListener implements spoon.support.visitor.replace.ReplaceListener<java.lang.String> {
        private final spoon.reflect.code.CtJavadocSnippetDescription element;

        CtJavadocDescriptionElementContentReplaceListener(spoon.reflect.code.CtJavadocSnippetDescription element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.lang.String replace) {
            this.element.setContent(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtImportReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtReference> {
        private final spoon.reflect.declaration.CtImport element;

        CtImportReferenceReplaceListener(spoon.reflect.declaration.CtImport element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtReference replace) {
            this.element.setReference(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtModuleModuleDirectivesReplaceListener implements spoon.support.visitor.replace.ReplaceListListener<java.util.List> {
        private final spoon.reflect.declaration.CtModule element;

        CtModuleModuleDirectivesReplaceListener(spoon.reflect.declaration.CtModule element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.util.List replace) {
            this.element.setModuleDirectives(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtModuleRootPackageReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.declaration.CtPackage> {
        private final spoon.reflect.declaration.CtModule element;

        CtModuleRootPackageReplaceListener(spoon.reflect.declaration.CtModule element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.declaration.CtPackage replace) {
            this.element.setRootPackage(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtPackageExportPackageReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtPackageReference> {
        private final spoon.reflect.declaration.CtPackageExport element;

        CtPackageExportPackageReferenceReplaceListener(spoon.reflect.declaration.CtPackageExport element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtPackageReference replace) {
            this.element.setPackageReference(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtPackageExportTargetExportReplaceListener implements spoon.support.visitor.replace.ReplaceListListener<java.util.List> {
        private final spoon.reflect.declaration.CtPackageExport element;

        CtPackageExportTargetExportReplaceListener(spoon.reflect.declaration.CtPackageExport element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.util.List replace) {
            this.element.setTargetExport(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtModuleRequirementModuleReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtModuleReference> {
        private final spoon.reflect.declaration.CtModuleRequirement element;

        CtModuleRequirementModuleReferenceReplaceListener(spoon.reflect.declaration.CtModuleRequirement element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtModuleReference replace) {
            this.element.setModuleReference(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtProvidedServiceServiceTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtTypeReference> {
        private final spoon.reflect.declaration.CtProvidedService element;

        CtProvidedServiceServiceTypeReplaceListener(spoon.reflect.declaration.CtProvidedService element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtTypeReference replace) {
            this.element.setServiceType(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtProvidedServiceImplementationTypesReplaceListener implements spoon.support.visitor.replace.ReplaceListListener<java.util.List> {
        private final spoon.reflect.declaration.CtProvidedService element;

        CtProvidedServiceImplementationTypesReplaceListener(spoon.reflect.declaration.CtProvidedService element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.util.List replace) {
            this.element.setImplementationTypes(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtUsedServiceServiceTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtTypeReference> {
        private final spoon.reflect.declaration.CtUsedService element;

        CtUsedServiceServiceTypeReplaceListener(spoon.reflect.declaration.CtUsedService element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtTypeReference replace) {
            this.element.setServiceType(replace);
        }
    }

    public static void replace(spoon.reflect.declaration.CtElement original, spoon.reflect.declaration.CtElement replace) {
        try {
            new spoon.support.visitor.replace.ReplacementVisitor(original, (replace == null ? spoon.support.visitor.replace.ReplacementVisitor.EMPTY : new spoon.reflect.declaration.CtElement[]{ replace })).scan(original.getParent());
        } catch (spoon.support.visitor.replace.InvalidReplaceException e) {
            throw e;
        } catch (spoon.SpoonException ignore) {
        }
    }

    public static <E extends spoon.reflect.declaration.CtElement> void replace(spoon.reflect.declaration.CtElement original, java.util.Collection<E> replaces) {
        try {
            new spoon.support.visitor.replace.ReplacementVisitor(original, replaces.toArray(new spoon.reflect.declaration.CtElement[replaces.size()])).scan(original.getParent());
        } catch (spoon.support.visitor.replace.InvalidReplaceException e) {
            throw e;
        } catch (spoon.SpoonException ignore) {
        }
    }

    private spoon.reflect.declaration.CtElement original;

    private spoon.reflect.declaration.CtElement[] replace;

    private static final spoon.reflect.declaration.CtElement[] EMPTY = new spoon.reflect.declaration.CtElement[0];

    private ReplacementVisitor(spoon.reflect.declaration.CtElement original, spoon.reflect.declaration.CtElement... replace) {
        this.original = original;
        this.replace = (replace == null) ? spoon.support.visitor.replace.ReplacementVisitor.EMPTY : replace;
    }

    private <K, V extends spoon.reflect.declaration.CtElement> void replaceInMapIfExist(java.util.Map<K, V> mapProtected, spoon.support.visitor.replace.ReplaceMapListener listener) {
        java.util.Map<K, V> map = new java.util.HashMap<>(mapProtected);
        V shouldBeDeleted = null;
        K key = null;
        for (java.util.Map.Entry<K, V> entry : map.entrySet()) {
            if ((entry.getValue()) == (original)) {
                shouldBeDeleted = entry.getValue();
                key = entry.getKey();
                break;
            }
        }
        if (shouldBeDeleted != null) {
            if ((replace.length) > 0) {
                if ((replace.length) > 1) {
                    throw new spoon.support.visitor.replace.InvalidReplaceException(("Cannot replace single value by multiple values in " + (listener.getClass().getSimpleName())));
                }
                V val = ((V) (replace[0]));
                if (val != null) {
                    map.put(key, val);
                    val.setParent(shouldBeDeleted.getParent());
                }else {
                    map.remove(key);
                }
            }else {
                map.remove(key);
            }
            listener.set(map);
        }
    }

    private <T extends spoon.reflect.declaration.CtElement> void replaceInSetIfExist(java.util.Set<T> setProtected, spoon.support.visitor.replace.ReplaceSetListener listener) {
        java.util.Set<T> set = new java.util.HashSet<>(setProtected);
        T shouldBeDeleted = null;
        for (T element : set) {
            if (element == (original)) {
                shouldBeDeleted = element;
                break;
            }
        }
        if (shouldBeDeleted != null) {
            set.remove(shouldBeDeleted);
            for (spoon.reflect.declaration.CtElement ele : replace) {
                if (ele != null) {
                    set.add(((T) (ele)));
                    ele.setParent(shouldBeDeleted.getParent());
                }
            }
            listener.set(set);
        }
    }

    private <T extends spoon.reflect.declaration.CtElement> void replaceInListIfExist(java.util.List<T> listProtected, spoon.support.visitor.replace.ReplaceListListener listener) {
        java.util.List<T> list = new java.util.ArrayList<>(listProtected);
        T shouldBeDeleted = null;
        int index = 0;
        for (int i = 0; i < (list.size()); i++) {
            if ((list.get(i)) == (original)) {
                index = i;
                shouldBeDeleted = list.get(i);
                break;
            }
        }
        if (shouldBeDeleted != null) {
            list.remove(index);
            if ((replace.length) > 0) {
                for (int i = 0; i < (replace.length); i++) {
                    T ele = ((T) (replace[i]));
                    if (ele != null) {
                        list.add(index, ele);
                        ele.setParent(shouldBeDeleted.getParent());
                        index = index + 1;
                    }
                }
            }
            listener.set(list);
        }
    }

    private void replaceElementIfExist(spoon.reflect.declaration.CtElement candidate, spoon.support.visitor.replace.ReplaceListener listener) {
        if (candidate == (original)) {
            spoon.reflect.declaration.CtElement val = null;
            if ((replace.length) > 0) {
                if ((replace.length) > 1) {
                    throw new spoon.support.visitor.replace.InvalidReplaceException(("Cannot replace single value by multiple values in " + (listener.getClass().getSimpleName())));
                }
                val = replace[0];
            }
            if (val != null) {
                val.setParent(candidate.getParent());
            }
            listener.set(val);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <A extends java.lang.annotation.Annotation> void visitCtAnnotation(final spoon.reflect.declaration.CtAnnotation<A> annotation) {
        replaceElementIfExist(annotation.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(annotation));
        replaceInListIfExist(annotation.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotation));
        replaceElementIfExist(annotation.getAnnotationType(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationAnnotationTypeReplaceListener(annotation));
        replaceInListIfExist(annotation.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotation));
        replaceInMapIfExist(annotation.getValues(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationValuesReplaceListener(annotation));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <A extends java.lang.annotation.Annotation> void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType<A> annotationType) {
        replaceInListIfExist(annotationType.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationType));
        replaceInListIfExist(annotationType.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(annotationType));
        replaceInListIfExist(annotationType.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationType));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {
        replaceInListIfExist(anonymousExec.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(anonymousExec));
        replaceElementIfExist(anonymousExec.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(anonymousExec));
        replaceInListIfExist(anonymousExec.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(anonymousExec));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayRead(final spoon.reflect.code.CtArrayRead<T> arrayRead) {
        replaceInListIfExist(arrayRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(arrayRead));
        replaceElementIfExist(arrayRead.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(arrayRead));
        replaceInListIfExist(arrayRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(arrayRead));
        replaceElementIfExist(arrayRead.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(arrayRead));
        replaceElementIfExist(arrayRead.getIndexExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayAccessIndexExpressionReplaceListener(arrayRead));
        replaceInListIfExist(arrayRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(arrayRead));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite<T> arrayWrite) {
        replaceInListIfExist(arrayWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(arrayWrite));
        replaceElementIfExist(arrayWrite.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(arrayWrite));
        replaceInListIfExist(arrayWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(arrayWrite));
        replaceElementIfExist(arrayWrite.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(arrayWrite));
        replaceElementIfExist(arrayWrite.getIndexExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayAccessIndexExpressionReplaceListener(arrayWrite));
        replaceInListIfExist(arrayWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(arrayWrite));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference<T> reference) {
        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));
        replaceElementIfExist(reference.getComponentType(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayTypeReferenceComponentTypeReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAssert(final spoon.reflect.code.CtAssert<T> asserted) {
        replaceInListIfExist(asserted.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(asserted));
        replaceElementIfExist(asserted.getAssertExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssertAssertExpressionReplaceListener(asserted));
        replaceElementIfExist(asserted.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssertExpressionReplaceListener(asserted));
        replaceInListIfExist(asserted.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(asserted));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T, A extends T> void visitCtAssignment(final spoon.reflect.code.CtAssignment<T, A> assignement) {
        replaceInListIfExist(assignement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(assignement));
        replaceElementIfExist(assignement.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(assignement));
        replaceInListIfExist(assignement.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(assignement));
        replaceElementIfExist(assignement.getAssigned(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssignmentAssignedReplaceListener(assignement));
        replaceElementIfExist(assignement.getAssignment(), new spoon.support.visitor.replace.ReplacementVisitor.CtRHSReceiverAssignmentReplaceListener(assignement));
        replaceInListIfExist(assignement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(assignement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator<T> operator) {
        replaceInListIfExist(operator.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(operator));
        replaceElementIfExist(operator.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(operator));
        replaceInListIfExist(operator.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(operator));
        replaceElementIfExist(operator.getLeftHandOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorLeftHandOperandReplaceListener(operator));
        replaceElementIfExist(operator.getRightHandOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorRightHandOperandReplaceListener(operator));
        replaceInListIfExist(operator.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(operator));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <R> void visitCtBlock(final spoon.reflect.code.CtBlock<R> block) {
        replaceInListIfExist(block.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(block));
        replaceInListIfExist(block.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(block));
        replaceInListIfExist(block.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(block));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {
        replaceInListIfExist(breakStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(breakStatement));
        replaceInListIfExist(breakStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(breakStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <S> void visitCtCase(final spoon.reflect.code.CtCase<S> caseStatement) {
        replaceInListIfExist(caseStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(caseStatement));
        replaceElementIfExist(caseStatement.getCaseExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtCaseCaseExpressionReplaceListener(caseStatement));
        replaceInListIfExist(caseStatement.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(caseStatement));
        replaceInListIfExist(caseStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(caseStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {
        replaceInListIfExist(catchBlock.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(catchBlock));
        replaceElementIfExist(catchBlock.getParameter(), new spoon.support.visitor.replace.ReplacementVisitor.CtCatchParameterReplaceListener(catchBlock));
        replaceElementIfExist(catchBlock.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtCatchBodyReplaceListener(catchBlock));
        replaceInListIfExist(catchBlock.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(catchBlock));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtClass(final spoon.reflect.declaration.CtClass<T> ctClass) {
        replaceInListIfExist(ctClass.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctClass));
        replaceElementIfExist(ctClass.getSuperclass(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperclassReplaceListener(ctClass));
        replaceInSetIfExist(ctClass.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(ctClass));
        replaceInListIfExist(ctClass.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(ctClass));
        replaceInListIfExist(ctClass.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(ctClass));
        replaceInListIfExist(ctClass.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctClass));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {
        replaceInListIfExist(typeParameter.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(typeParameter));
        replaceElementIfExist(typeParameter.getSuperclass(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperclassReplaceListener(typeParameter));
        replaceInListIfExist(typeParameter.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(typeParameter));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConditional(final spoon.reflect.code.CtConditional<T> conditional) {
        replaceElementIfExist(conditional.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(conditional));
        replaceInListIfExist(conditional.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(conditional));
        replaceElementIfExist(conditional.getCondition(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalConditionReplaceListener(conditional));
        replaceElementIfExist(conditional.getThenExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalThenExpressionReplaceListener(conditional));
        replaceElementIfExist(conditional.getElseExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalElseExpressionReplaceListener(conditional));
        replaceInListIfExist(conditional.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(conditional));
        replaceInListIfExist(conditional.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(conditional));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConstructor(final spoon.reflect.declaration.CtConstructor<T> c) {
        replaceInListIfExist(c.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(c));
        replaceInListIfExist(c.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(c));
        replaceInSetIfExist(c.getThrownTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableThrownTypesReplaceListener(c));
        replaceInListIfExist(c.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(c));
        replaceElementIfExist(c.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(c));
        replaceInListIfExist(c.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(c));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {
        replaceInListIfExist(continueStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(continueStatement));
        replaceInListIfExist(continueStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(continueStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {
        replaceInListIfExist(doLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(doLoop));
        replaceElementIfExist(doLoop.getLoopingExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtDoLoopingExpressionReplaceListener(doLoop));
        replaceElementIfExist(doLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(doLoop));
        replaceInListIfExist(doLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(doLoop));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T extends java.lang.Enum<?>> void visitCtEnum(final spoon.reflect.declaration.CtEnum<T> ctEnum) {
        replaceInListIfExist(ctEnum.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctEnum));
        replaceInSetIfExist(ctEnum.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(ctEnum));
        replaceInListIfExist(ctEnum.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(ctEnum));
        replaceInListIfExist(ctEnum.getEnumValues(), new spoon.support.visitor.replace.ReplacementVisitor.CtEnumEnumValuesReplaceListener(ctEnum));
        replaceInListIfExist(ctEnum.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctEnum));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference<T> reference) {
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceDeclaringTypeReplaceListener(reference));
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceParametersReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
        replaceInListIfExist(reference.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtField(final spoon.reflect.declaration.CtField<T> f) {
        replaceInListIfExist(f.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(f));
        replaceElementIfExist(f.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(f));
        replaceElementIfExist(f.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(f));
        replaceInListIfExist(f.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(f));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue<T> enumValue) {
        replaceInListIfExist(enumValue.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(enumValue));
        replaceElementIfExist(enumValue.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(enumValue));
        replaceElementIfExist(enumValue.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(enumValue));
        replaceInListIfExist(enumValue.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(enumValue));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtThisAccess(final spoon.reflect.code.CtThisAccess<T> thisAccess) {
        replaceInListIfExist(thisAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(thisAccess));
        replaceInListIfExist(thisAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(thisAccess));
        replaceElementIfExist(thisAccess.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(thisAccess));
        replaceInListIfExist(thisAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(thisAccess));
        replaceElementIfExist(thisAccess.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(thisAccess));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess<T> annotationFieldAccess) {
        replaceInListIfExist(annotationFieldAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationFieldAccess));
        replaceInListIfExist(annotationFieldAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationFieldAccess));
        replaceInListIfExist(annotationFieldAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(annotationFieldAccess));
        replaceElementIfExist(annotationFieldAccess.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(annotationFieldAccess));
        replaceElementIfExist(annotationFieldAccess.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationFieldAccessVariableReplaceListener(annotationFieldAccess));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference<T> reference) {
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldReferenceDeclaringTypeReplaceListener(reference));
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {
        replaceInListIfExist(forLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(forLoop));
        replaceInListIfExist(forLoop.getForInit(), new spoon.support.visitor.replace.ReplacementVisitor.CtForForInitReplaceListener(forLoop));
        replaceElementIfExist(forLoop.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtForExpressionReplaceListener(forLoop));
        replaceInListIfExist(forLoop.getForUpdate(), new spoon.support.visitor.replace.ReplacementVisitor.CtForForUpdateReplaceListener(forLoop));
        replaceElementIfExist(forLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(forLoop));
        replaceInListIfExist(forLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(forLoop));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {
        replaceInListIfExist(foreach.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(foreach));
        replaceElementIfExist(foreach.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtForEachVariableReplaceListener(foreach));
        replaceElementIfExist(foreach.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtForEachExpressionReplaceListener(foreach));
        replaceElementIfExist(foreach.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(foreach));
        replaceInListIfExist(foreach.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(foreach));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {
        replaceInListIfExist(ifElement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ifElement));
        replaceElementIfExist(ifElement.getCondition(), new spoon.support.visitor.replace.ReplacementVisitor.CtIfConditionReplaceListener(ifElement));
        replaceElementIfExist(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement())), new spoon.support.visitor.replace.ReplacementVisitor.CtIfThenStatementReplaceListener(ifElement));
        replaceElementIfExist(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement())), new spoon.support.visitor.replace.ReplacementVisitor.CtIfElseStatementReplaceListener(ifElement));
        replaceInListIfExist(ifElement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ifElement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtInterface(final spoon.reflect.declaration.CtInterface<T> intrface) {
        replaceInListIfExist(intrface.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(intrface));
        replaceInSetIfExist(intrface.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(intrface));
        replaceInListIfExist(intrface.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(intrface));
        replaceInListIfExist(intrface.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(intrface));
        replaceInListIfExist(intrface.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(intrface));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtInvocation(final spoon.reflect.code.CtInvocation<T> invocation) {
        replaceInListIfExist(invocation.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(invocation));
        replaceInListIfExist(invocation.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(invocation));
        replaceElementIfExist(invocation.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(invocation));
        replaceElementIfExist(invocation.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(invocation));
        replaceInListIfExist(invocation.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(invocation));
        replaceInListIfExist(invocation.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(invocation));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLiteral(final spoon.reflect.code.CtLiteral<T> literal) {
        replaceInListIfExist(literal.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(literal));
        replaceElementIfExist(literal.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(literal));
        replaceInListIfExist(literal.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(literal));
        replaceInListIfExist(literal.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(literal));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable<T> localVariable) {
        replaceInListIfExist(localVariable.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(localVariable));
        replaceElementIfExist(localVariable.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(localVariable));
        replaceElementIfExist(localVariable.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(localVariable));
        replaceInListIfExist(localVariable.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(localVariable));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable<T> catchVariable) {
        replaceInListIfExist(catchVariable.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(catchVariable));
        replaceInListIfExist(catchVariable.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(catchVariable));
        replaceInListIfExist(catchVariable.getMultiTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtMultiTypedElementMultiTypesReplaceListener(catchVariable));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtMethod(final spoon.reflect.declaration.CtMethod<T> m) {
        replaceInListIfExist(m.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(m));
        replaceInListIfExist(m.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(m));
        replaceElementIfExist(m.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(m));
        replaceInListIfExist(m.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(m));
        replaceInSetIfExist(m.getThrownTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableThrownTypesReplaceListener(m));
        replaceElementIfExist(m.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(m));
        replaceInListIfExist(m.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(m));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod<T> annotationMethod) {
        replaceInListIfExist(annotationMethod.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationMethod));
        replaceElementIfExist(annotationMethod.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(annotationMethod));
        replaceElementIfExist(annotationMethod.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationMethodDefaultExpressionReplaceListener(annotationMethod));
        replaceInListIfExist(annotationMethod.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationMethod));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtNewArray(final spoon.reflect.code.CtNewArray<T> newArray) {
        replaceInListIfExist(newArray.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(newArray));
        replaceElementIfExist(newArray.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(newArray));
        replaceInListIfExist(newArray.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(newArray));
        replaceInListIfExist(newArray.getElements(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayElementsReplaceListener(newArray));
        replaceInListIfExist(newArray.getDimensionExpressions(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayDimensionExpressionsReplaceListener(newArray));
        replaceInListIfExist(newArray.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(newArray));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall<T> ctConstructorCall) {
        replaceInListIfExist(ctConstructorCall.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctConstructorCall));
        replaceInListIfExist(ctConstructorCall.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(ctConstructorCall));
        replaceElementIfExist(ctConstructorCall.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(ctConstructorCall));
        replaceElementIfExist(ctConstructorCall.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(ctConstructorCall));
        replaceInListIfExist(ctConstructorCall.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(ctConstructorCall));
        replaceInListIfExist(ctConstructorCall.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctConstructorCall));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtNewClass(final spoon.reflect.code.CtNewClass<T> newClass) {
        replaceInListIfExist(newClass.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(newClass));
        replaceInListIfExist(newClass.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(newClass));
        replaceElementIfExist(newClass.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(newClass));
        replaceElementIfExist(newClass.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(newClass));
        replaceInListIfExist(newClass.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(newClass));
        replaceElementIfExist(newClass.getAnonymousClass(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewClassAnonymousClassReplaceListener(newClass));
        replaceInListIfExist(newClass.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(newClass));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLambda(final spoon.reflect.code.CtLambda<T> lambda) {
        replaceInListIfExist(lambda.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(lambda));
        replaceElementIfExist(lambda.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(lambda));
        replaceInListIfExist(lambda.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(lambda));
        replaceInListIfExist(lambda.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(lambda));
        replaceElementIfExist(lambda.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(lambda));
        replaceElementIfExist(lambda.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtLambdaExpressionReplaceListener(lambda));
        replaceInListIfExist(lambda.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(lambda));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T, E extends spoon.reflect.code.CtExpression<?>> void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression<T, E> expression) {
        replaceInListIfExist(expression.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(expression));
        replaceInListIfExist(expression.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(expression));
        replaceElementIfExist(expression.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(expression));
        replaceInListIfExist(expression.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(expression));
        replaceElementIfExist(expression.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceExpressionExecutableReplaceListener(expression));
        replaceElementIfExist(expression.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(expression));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T, A extends T> void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment<T, A> assignment) {
        replaceInListIfExist(assignment.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(assignment));
        replaceElementIfExist(assignment.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(assignment));
        replaceInListIfExist(assignment.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(assignment));
        replaceElementIfExist(assignment.getAssigned(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssignmentAssignedReplaceListener(assignment));
        replaceElementIfExist(assignment.getAssignment(), new spoon.support.visitor.replace.ReplacementVisitor.CtRHSReceiverAssignmentReplaceListener(assignment));
        replaceInListIfExist(assignment.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(assignment));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {
        replaceInListIfExist(ctPackage.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctPackage));
        replaceInSetIfExist(ctPackage.getPackages(), new spoon.support.visitor.replace.ReplacementVisitor.CtPackagePackagesReplaceListener(ctPackage));
        replaceInSetIfExist(ctPackage.getTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtPackageTypesReplaceListener(ctPackage));
        replaceInListIfExist(ctPackage.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctPackage));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtParameter(final spoon.reflect.declaration.CtParameter<T> parameter) {
        replaceInListIfExist(parameter.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(parameter));
        replaceElementIfExist(parameter.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(parameter));
        replaceInListIfExist(parameter.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(parameter));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <R> void visitCtReturn(final spoon.reflect.code.CtReturn<R> returnStatement) {
        replaceInListIfExist(returnStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(returnStatement));
        replaceElementIfExist(returnStatement.getReturnedExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtReturnReturnedExpressionReplaceListener(returnStatement));
        replaceInListIfExist(returnStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(returnStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <R> void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {
        replaceInListIfExist(statements.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(statements));
        replaceInListIfExist(statements.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(statements));
        replaceInListIfExist(statements.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(statements));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <S> void visitCtSwitch(final spoon.reflect.code.CtSwitch<S> switchStatement) {
        replaceInListIfExist(switchStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(switchStatement));
        replaceElementIfExist(switchStatement.getSelector(), new spoon.support.visitor.replace.ReplacementVisitor.CtSwitchSelectorReplaceListener(switchStatement));
        replaceInListIfExist(switchStatement.getCases(), new spoon.support.visitor.replace.ReplacementVisitor.CtSwitchCasesReplaceListener(switchStatement));
        replaceInListIfExist(switchStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(switchStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {
        replaceInListIfExist(synchro.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(synchro));
        replaceElementIfExist(synchro.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedExpressionReplaceListener(synchro));
        replaceElementIfExist(synchro.getBlock(), new spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedBlockReplaceListener(synchro));
        replaceInListIfExist(synchro.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(synchro));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {
        replaceInListIfExist(throwStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(throwStatement));
        replaceElementIfExist(throwStatement.getThrownExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtThrowThrownExpressionReplaceListener(throwStatement));
        replaceInListIfExist(throwStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(throwStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {
        replaceInListIfExist(tryBlock.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(tryBlock));
        replaceElementIfExist(tryBlock.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryBodyReplaceListener(tryBlock));
        replaceInListIfExist(tryBlock.getCatchers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryCatchersReplaceListener(tryBlock));
        replaceElementIfExist(tryBlock.getFinalizer(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryFinalizerReplaceListener(tryBlock));
        replaceInListIfExist(tryBlock.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(tryBlock));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {
        replaceInListIfExist(tryWithResource.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(tryWithResource));
        replaceInListIfExist(tryWithResource.getResources(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryWithResourceResourcesReplaceListener(tryWithResource));
        replaceElementIfExist(tryWithResource.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryBodyReplaceListener(tryWithResource));
        replaceInListIfExist(tryWithResource.getCatchers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryCatchersReplaceListener(tryWithResource));
        replaceElementIfExist(tryWithResource.getFinalizer(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryFinalizerReplaceListener(tryWithResource));
        replaceInListIfExist(tryWithResource.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(tryWithResource));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {
        replaceElementIfExist(ref.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(ref));
        replaceElementIfExist(ref.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(ref));
        replaceInListIfExist(ref.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ref));
        replaceElementIfExist(ref.getBoundingType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeParameterReferenceBoundingTypeReplaceListener(ref));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {
        replaceElementIfExist(wildcardReference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(wildcardReference));
        replaceElementIfExist(wildcardReference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(wildcardReference));
        replaceInListIfExist(wildcardReference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(wildcardReference));
        replaceElementIfExist(wildcardReference.getBoundingType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeParameterReferenceBoundingTypeReplaceListener(wildcardReference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference<T> reference) {
        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
        replaceInListIfExist(reference.getBounds(), new spoon.support.visitor.replace.ReplacementVisitor.CtIntersectionTypeReferenceBoundsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference<T> reference) {
        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
        replaceInListIfExist(reference.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess<T> typeAccess) {
        replaceInListIfExist(typeAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(typeAccess));
        replaceInListIfExist(typeAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(typeAccess));
        replaceElementIfExist(typeAccess.getAccessedType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeAccessAccessedTypeReplaceListener(typeAccess));
        replaceInListIfExist(typeAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(typeAccess));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator<T> operator) {
        replaceInListIfExist(operator.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(operator));
        replaceElementIfExist(operator.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(operator));
        replaceInListIfExist(operator.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(operator));
        replaceElementIfExist(operator.getOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtUnaryOperatorOperandReplaceListener(operator));
        replaceInListIfExist(operator.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(operator));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableRead(final spoon.reflect.code.CtVariableRead<T> variableRead) {
        replaceInListIfExist(variableRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(variableRead));
        replaceInListIfExist(variableRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(variableRead));
        replaceElementIfExist(variableRead.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(variableRead));
        replaceInListIfExist(variableRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(variableRead));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite<T> variableWrite) {
        replaceInListIfExist(variableWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(variableWrite));
        replaceInListIfExist(variableWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(variableWrite));
        replaceElementIfExist(variableWrite.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(variableWrite));
        replaceInListIfExist(variableWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(variableWrite));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {
        replaceInListIfExist(whileLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(whileLoop));
        replaceElementIfExist(whileLoop.getLoopingExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtWhileLoopingExpressionReplaceListener(whileLoop));
        replaceElementIfExist(whileLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(whileLoop));
        replaceInListIfExist(whileLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(whileLoop));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression<T> expression) {
        replaceElementIfExist(expression.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(expression));
        replaceInListIfExist(expression.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(expression));
        replaceInListIfExist(expression.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(expression));
        replaceInListIfExist(expression.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(expression));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {
        replaceInListIfExist(statement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(statement));
        replaceInListIfExist(statement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(statement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtUnboundVariableReference(final spoon.reflect.reference.CtUnboundVariableReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtFieldRead(final spoon.reflect.code.CtFieldRead<T> fieldRead) {
        replaceInListIfExist(fieldRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(fieldRead));
        replaceInListIfExist(fieldRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(fieldRead));
        replaceElementIfExist(fieldRead.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(fieldRead));
        replaceElementIfExist(fieldRead.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldAccessVariableReplaceListener(fieldRead));
        replaceInListIfExist(fieldRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(fieldRead));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtFieldWrite(final spoon.reflect.code.CtFieldWrite<T> fieldWrite) {
        replaceInListIfExist(fieldWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(fieldWrite));
        replaceInListIfExist(fieldWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(fieldWrite));
        replaceElementIfExist(fieldWrite.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(fieldWrite));
        replaceElementIfExist(fieldWrite.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldAccessVariableReplaceListener(fieldWrite));
        replaceInListIfExist(fieldWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(fieldWrite));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtSuperAccess(final spoon.reflect.code.CtSuperAccess<T> f) {
        replaceInListIfExist(f.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(f));
        replaceInListIfExist(f.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(f));
        replaceInListIfExist(f.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(f));
        replaceElementIfExist(f.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(f));
        replaceElementIfExist(f.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(f));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtComment(final spoon.reflect.code.CtComment comment) {
        replaceInListIfExist(comment.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(comment));
        replaceInListIfExist(comment.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(comment));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtJavaDoc(final spoon.reflect.code.CtJavaDoc javaDoc) {
        replaceInListIfExist(javaDoc.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(javaDoc));
        replaceInListIfExist(javaDoc.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(javaDoc));
        replaceInListIfExist(javaDoc.getTags(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavaDocTagsReplaceListener(javaDoc));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtJavaDocTag(final spoon.reflect.code.CtJavaDocTag docTag) {
        replaceInListIfExist(docTag.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(docTag));
        replaceInListIfExist(docTag.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(docTag));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtJavadocDescription(spoon.reflect.code.CtJavadocDescription javadocDescription) {
        replaceInListIfExist(javadocDescription.getDescriptionElements(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavadocDescriptionDescriptionElementsReplaceListener(javadocDescription));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtJavaDocInlineTag(spoon.reflect.code.CtJavadocInlineTag javadocInlineTag) {
        replaceElementIfExist(javadocInlineTag.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavadocInlineTagTypeReplaceListener(javadocInlineTag));
        replaceElementIfExist(javadocInlineTag.getContent(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavadocInlineTagContentReplaceListener(javadocInlineTag));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtJavaDocSnippetDescription(spoon.reflect.code.CtJavadocSnippetDescription javadocSnippetDescription) {
        replaceElementIfExist(javadocSnippetDescription.getContent(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavadocDescriptionElementContentReplaceListener(javadocSnippetDescription]));
    }

    // au...>
	at spoon.processing.CtGenerationTest.testGenerateReplacementVisitor(CtGenerationTest.java:80)

[ERROR] testGenerateCloneVisitor(spoon.processing.CtGenerationTest)  Time elapsed: 42.319 s  <<< ERROR!
spoon.SpoonException: spoon.support.reflect.code.CtJavadocDescriptionImpl doesn't have declaration in the source path for visitCtJavadocDescription(spoon.reflect.code.CtJavadocDescription)
	at spoon.processing.CtGenerationTest.testGenerateCloneVisitor(CtGenerationTest.java:138)

[INFO] Running spoon.processing.ProcessingTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.049 s - in spoon.processing.ProcessingTest
[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   MavenLauncherTest.mavenLauncherTestMultiModulesAndVariables:76 Content of classpath: 
[ERROR]   MavenLauncherTest.spoonMavenLauncherTest:20 expected:<23> but was:<0>
[ERROR]   CtGenerationTest.testGenerateCtBiScanner:110
[ERROR]   CtGenerationTest.testGenerateReplacementVisitor:80 ReplacementVisitor different expected:<...nerator
    class Ct[ImportReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtReference> {
        private final spoon.reflect.declaration.CtImport element;

        CtImportReferenceReplaceListener(spoon.reflect.declaration.CtImport element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtReference replace) {
            this.element.setReference(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtModuleModuleDirectivesReplaceListener implements spoon.support.visitor.replace.ReplaceListListener<java.util.List> {
        private final spoon.reflect.declaration.CtModule element;

        CtModuleModuleDirectivesReplaceListener(spoon.reflect.declaration.CtModule element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.util.List replace) {
            this.element.setModuleDirectives(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtModuleRootPackageReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.declaration.CtPackage> {
        private final spoon.reflect.declaration.CtModule element;

        CtModuleRootPackageReplaceListener(spoon.reflect.declaration.CtModule element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.declaration.CtPackage replace) {
            this.element.setRootPackage(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtPackageExportPackageReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtPackageReference> {
        private final spoon.reflect.declaration.CtPackageExport element;

        CtPackageExportPackageReferenceReplaceListener(spoon.reflect.declaration.CtPackageExport element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtPackageReference replace) {
            this.element.setPackageReference(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtPackageExportTargetExportReplaceListener implements spoon.support.visitor.replace.ReplaceListListener<java.util.List> {
        private final spoon.reflect.declaration.CtPackageExport element;

        CtPackageExportTargetExportReplaceListener(spoon.reflect.declaration.CtPackageExport element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.util.List replace) {
            this.element.setTargetExport(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtModuleRequirementModuleReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtModuleReference> {
        private final spoon.reflect.declaration.CtModuleRequirement element;

        CtModuleRequirementModuleReferenceReplaceListener(spoon.reflect.declaration.CtModuleRequirement element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtModuleReference replace) {
            this.element.setModuleReference(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtProvidedServiceServiceTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtTypeReference> {
        private final spoon.reflect.declaration.CtProvidedService element;

        CtProvidedServiceServiceTypeReplaceListener(spoon.reflect.declaration.CtProvidedService element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtTypeReference replace) {
            this.element.setServiceType(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtProvidedServiceImplementationTypesReplaceListener implements spoon.support.visitor.replace.ReplaceListListener<java.util.List> {
        private final spoon.reflect.declaration.CtProvidedService element;

        CtProvidedServiceImplementationTypesReplaceListener(spoon.reflect.declaration.CtProvidedService element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.util.List replace) {
            this.element.setImplementationTypes(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtUsedServiceServiceTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtTypeReference> {
        private final spoon.reflect.declaration.CtUsedService element;

        CtUsedServiceServiceTypeReplaceListener(spoon.reflect.declaration.CtUsedService element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtTypeReference replace) {
            this.element.setServiceType(replace);
        }
    }

    public static void replace(spoon.reflect.declaration.CtElement original, spoon.reflect.declaration.CtElement replace) {
        try {
            new spoon.support.visitor.replace.ReplacementVisitor(original, (replace == null ? spoon.support.visitor.replace.ReplacementVisitor.EMPTY : new spoon.reflect.declaration.CtElement[]{ replace })).scan(original.getParent());
        } catch (spoon.support.visitor.replace.InvalidReplaceException e) {
            throw e;
        } catch (spoon.SpoonException ignore) {
        }
    }

    public static <E extends spoon.reflect.declaration.CtElement> void replace(spoon.reflect.declaration.CtElement original, java.util.Collection<E> replaces) {
        try {
            new spoon.support.visitor.replace.ReplacementVisitor(original, replaces.toArray(new spoon.reflect.declaration.CtElement[replaces.size()])).scan(original.getParent());
        } catch (spoon.support.visitor.replace.InvalidReplaceException e) {
            throw e;
        } catch (spoon.SpoonException ignore) {
        }
    }

    private spoon.reflect.declaration.CtElement original;

    private spoon.reflect.declaration.CtElement[] replace;

    private static final spoon.reflect.declaration.CtElement[] EMPTY = new spoon.reflect.declaration.CtElement[0];

    private ReplacementVisitor(spoon.reflect.declaration.CtElement original, spoon.reflect.declaration.CtElement... replace) {
        this.original = original;
        this.replace = (replace == null) ? spoon.support.visitor.replace.ReplacementVisitor.EMPTY : replace;
    }

    private <K, V extends spoon.reflect.declaration.CtElement> void replaceInMapIfExist(java.util.Map<K, V> mapProtected, spoon.support.visitor.replace.ReplaceMapListener listener) {
        java.util.Map<K, V> map = new java.util.HashMap<>(mapProtected);
        V shouldBeDeleted = null;
        K key = null;
        for (java.util.Map.Entry<K, V> entry : map.entrySet()) {
            if ((entry.getValue()) == (original)) {
                shouldBeDeleted = entry.getValue();
                key = entry.getKey();
                break;
            }
        }
        if (shouldBeDeleted != null) {
            if ((replace.length) > 0) {
                if ((replace.length) > 1) {
                    throw new spoon.support.visitor.replace.InvalidReplaceException(("Cannot replace single value by multiple values in " + (listener.getClass().getSimpleName())));
                }
                V val = ((V) (replace[0]));
                if (val != null) {
                    map.put(key, val);
                    val.setParent(shouldBeDeleted.getParent());
                }else {
                    map.remove(key);
                }
            }else {
                map.remove(key);
            }
            listener.set(map);
        }
    }

    private <T extends spoon.reflect.declaration.CtElement> void replaceInSetIfExist(java.util.Set<T> setProtected, spoon.support.visitor.replace.ReplaceSetListener listener) {
        java.util.Set<T> set = new java.util.HashSet<>(setProtected);
        T shouldBeDeleted = null;
        for (T element : set) {
            if (element == (original)) {
                shouldBeDeleted = element;
                break;
            }
        }
        if (shouldBeDeleted != null) {
            set.remove(shouldBeDeleted);
            for (spoon.reflect.declaration.CtElement ele : replace) {
                if (ele != null) {
                    set.add(((T) (ele)));
                    ele.setParent(shouldBeDeleted.getParent());
                }
            }
            listener.set(set);
        }
    }

    private <T extends spoon.reflect.declaration.CtElement> void replaceInListIfExist(java.util.List<T> listProtected, spoon.support.visitor.replace.ReplaceListListener listener) {
        java.util.List<T> list = new java.util.ArrayList<>(listProtected);
        T shouldBeDeleted = null;
        int index = 0;
        for (int i = 0; i < (list.size()); i++) {
            if ((list.get(i)) == (original)) {
                index = i;
                shouldBeDeleted = list.get(i);
                break;
            }
        }
        if (shouldBeDeleted != null) {
            list.remove(index);
            if ((replace.length) > 0) {
                for (int i = 0; i < (replace.length); i++) {
                    T ele = ((T) (replace[i]));
                    if (ele != null) {
                        list.add(index, ele);
                        ele.setParent(shouldBeDeleted.getParent());
                        index = index + 1;
                    }
                }
            }
            listener.set(list);
        }
    }

    private void replaceElementIfExist(spoon.reflect.declaration.CtElement candidate, spoon.support.visitor.replace.ReplaceListener listener) {
        if (candidate == (original)) {
            spoon.reflect.declaration.CtElement val = null;
            if ((replace.length) > 0) {
                if ((replace.length) > 1) {
                    throw new spoon.support.visitor.replace.InvalidReplaceException(("Cannot replace single value by multiple values in " + (listener.getClass().getSimpleName())));
                }
                val = replace[0];
            }
            if (val != null) {
                val.setParent(candidate.getParent());
            }
            listener.set(val);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <A extends java.lang.annotation.Annotation> void visitCtAnnotation(final spoon.reflect.declaration.CtAnnotation<A> annotation) {
        replaceElementIfExist(annotation.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(annotation));
        replaceInListIfExist(annotation.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotation));
        replaceElementIfExist(annotation.getAnnotationType(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationAnnotationTypeReplaceListener(annotation));
        replaceInListIfExist(annotation.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotation));
        replaceInMapIfExist(annotation.getValues(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationValuesReplaceListener(annotation));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <A extends java.lang.annotation.Annotation> void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType<A> annotationType) {
        replaceInListIfExist(annotationType.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationType));
        replaceInListIfExist(annotationType.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(annotationType));
        replaceInListIfExist(annotationType.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationType));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {
        replaceInListIfExist(anonymousExec.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(anonymousExec));
        replaceElementIfExist(anonymousExec.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(anonymousExec));
        replaceInListIfExist(anonymousExec.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(anonymousExec));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayRead(final spoon.reflect.code.CtArrayRead<T> arrayRead) {
        replaceInListIfExist(arrayRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(arrayRead));
        replaceElementIfExist(arrayRead.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(arrayRead));
        replaceInListIfExist(arrayRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(arrayRead));
        replaceElementIfExist(arrayRead.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(arrayRead));
        replaceElementIfExist(arrayRead.getIndexExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayAccessIndexExpressionReplaceListener(arrayRead));
        replaceInListIfExist(arrayRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(arrayRead));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite<T> arrayWrite) {
        replaceInListIfExist(arrayWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(arrayWrite));
        replaceElementIfExist(arrayWrite.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(arrayWrite));
        replaceInListIfExist(arrayWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(arrayWrite));
        replaceElementIfExist(arrayWrite.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(arrayWrite));
        replaceElementIfExist(arrayWrite.getIndexExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayAccessIndexExpressionReplaceListener(arrayWrite));
        replaceInListIfExist(arrayWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(arrayWrite));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference<T> reference) {
        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));
        replaceElementIfExist(reference.getComponentType(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayTypeReferenceComponentTypeReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAssert(final spoon.reflect.code.CtAssert<T> asserted) {
        replaceInListIfExist(asserted.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(asserted));
        replaceElementIfExist(asserted.getAssertExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssertAssertExpressionReplaceListener(asserted));
        replaceElementIfExist(asserted.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssertExpressionReplaceListener(asserted));
        replaceInListIfExist(asserted.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(asserted));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T, A extends T> void visitCtAssignment(final spoon.reflect.code.CtAssignment<T, A> assignement) {
        replaceInListIfExist(assignement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(assignement));
        replaceElementIfExist(assignement.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(assignement));
        replaceInListIfExist(assignement.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(assignement));
        replaceElementIfExist(assignement.getAssigned(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssignmentAssignedReplaceListener(assignement));
        replaceElementIfExist(assignement.getAssignment(), new spoon.support.visitor.replace.ReplacementVisitor.CtRHSReceiverAssignmentReplaceListener(assignement));
        replaceInListIfExist(assignement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(assignement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator<T> operator) {
        replaceInListIfExist(operator.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(operator));
        replaceElementIfExist(operator.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(operator));
        replaceInListIfExist(operator.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(operator));
        replaceElementIfExist(operator.getLeftHandOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorLeftHandOperandReplaceListener(operator));
        replaceElementIfExist(operator.getRightHandOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorRightHandOperandReplaceListener(operator));
        replaceInListIfExist(operator.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(operator));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <R> void visitCtBlock(final spoon.reflect.code.CtBlock<R> block) {
        replaceInListIfExist(block.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(block));
        replaceInListIfExist(block.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(block));
        replaceInListIfExist(block.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(block));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {
        replaceInListIfExist(breakStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(breakStatement));
        replaceInListIfExist(breakStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(breakStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <S> void visitCtCase(final spoon.reflect.code.CtCase<S> caseStatement) {
        replaceInListIfExist(caseStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(caseStatement));
        replaceElementIfExist(caseStatement.getCaseExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtCaseCaseExpressionReplaceListener(caseStatement));
        replaceInListIfExist(caseStatement.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(caseStatement));
        replaceInListIfExist(caseStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(caseStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {
        replaceInListIfExist(catchBlock.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(catchBlock));
        replaceElementIfExist(catchBlock.getParameter(), new spoon.support.visitor.replace.ReplacementVisitor.CtCatchParameterReplaceListener(catchBlock));
        replaceElementIfExist(catchBlock.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtCatchBodyReplaceListener(catchBlock));
        replaceInListIfExist(catchBlock.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(catchBlock));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtClass(final spoon.reflect.declaration.CtClass<T> ctClass) {
        replaceInListIfExist(ctClass.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctClass));
        replaceElementIfExist(ctClass.getSuperclass(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperclassReplaceListener(ctClass));
        replaceInSetIfExist(ctClass.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(ctClass));
        replaceInListIfExist(ctClass.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(ctClass));
        replaceInListIfExist(ctClass.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(ctClass));
        replaceInListIfExist(ctClass.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctClass));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {
        replaceInListIfExist(typeParameter.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(typeParameter));
        replaceElementIfExist(typeParameter.getSuperclass(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperclassReplaceListener(typeParameter));
        replaceInListIfExist(typeParameter.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(typeParameter));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConditional(final spoon.reflect.code.CtConditional<T> conditional) {
        replaceElementIfExist(conditional.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(conditional));
        replaceInListIfExist(conditional.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(conditional));
        replaceElementIfExist(conditional.getCondition(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalConditionReplaceListener(conditional));
        replaceElementIfExist(conditional.getThenExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalThenExpressionReplaceListener(conditional));
        replaceElementIfExist(conditional.getElseExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalElseExpressionReplaceListener(conditional));
        replaceInListIfExist(conditional.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(conditional));
        replaceInListIfExist(conditional.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(conditional));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConstructor(final spoon.reflect.declaration.CtConstructor<T> c) {
        replaceInListIfExist(c.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(c));
        replaceInListIfExist(c.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(c));
        replaceInSetIfExist(c.getThrownTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableThrownTypesReplaceListener(c));
        replaceInListIfExist(c.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(c));
        replaceElementIfExist(c.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(c));
        replaceInListIfExist(c.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(c));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {
        replaceInListIfExist(continueStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(continueStatement));
        replaceInListIfExist(continueStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(continueStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {
        replaceInListIfExist(doLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(doLoop));
        replaceElementIfExist(doLoop.getLoopingExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtDoLoopingExpressionReplaceListener(doLoop));
        replaceElementIfExist(doLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(doLoop));
        replaceInListIfExist(doLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(doLoop));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T extends java.lang.Enum<?>> void visitCtEnum(final spoon.reflect.declaration.CtEnum<T> ctEnum) {
        replaceInListIfExist(ctEnum.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctEnum));
        replaceInSetIfExist(ctEnum.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(ctEnum));
        replaceInListIfExist(ctEnum.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(ctEnum));
        replaceInListIfExist(ctEnum.getEnumValues(), new spoon.support.visitor.replace.ReplacementVisitor.CtEnumEnumValuesReplaceListener(ctEnum));
        replaceInListIfExist(ctEnum.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctEnum));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference<T> reference) {
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceDeclaringTypeReplaceListener(reference));
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceParametersReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
        replaceInListIfExist(reference.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtField(final spoon.reflect.declaration.CtField<T> f) {
        replaceInListIfExist(f.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(f));
        replaceElementIfExist(f.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(f));
        replaceElementIfExist(f.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(f));
        replaceInListIfExist(f.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(f));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue<T> enumValue) {
        replaceInListIfExist(enumValue.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(enumValue));
        replaceElementIfExist(enumValue.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(enumValue));
        replaceElementIfExist(enumValue.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(enumValue));
        replaceInListIfExist(enumValue.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(enumValue));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtThisAccess(final spoon.reflect.code.CtThisAccess<T> thisAccess) {
        replaceInListIfExist(thisAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(thisAccess));
        replaceInListIfExist(thisAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(thisAccess));
        replaceElementIfExist(thisAccess.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(thisAccess));
        replaceInListIfExist(thisAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(thisAccess));
        replaceElementIfExist(thisAccess.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(thisAccess));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess<T> annotationFieldAccess) {
        replaceInListIfExist(annotationFieldAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationFieldAccess));
        replaceInListIfExist(annotationFieldAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationFieldAccess));
        replaceInListIfExist(annotationFieldAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(annotationFieldAccess));
        replaceElementIfExist(annotationFieldAccess.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(annotationFieldAccess));
        replaceElementIfExist(annotationFieldAccess.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationFieldAccessVariableReplaceListener(annotationFieldAccess));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference<T> reference) {
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldReferenceDeclaringTypeReplaceListener(reference));
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {
        replaceInListIfExist(forLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(forLoop));
        replaceInListIfExist(forLoop.getForInit(), new spoon.support.visitor.replace.ReplacementVisitor.CtForForInitReplaceListener(forLoop));
        replaceElementIfExist(forLoop.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtForExpressionReplaceListener(forLoop));
        replaceInListIfExist(forLoop.getForUpdate(), new spoon.support.visitor.replace.ReplacementVisitor.CtForForUpdateReplaceListener(forLoop));
        replaceElementIfExist(forLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(forLoop));
        replaceInListIfExist(forLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(forLoop));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {
        replaceInListIfExist(foreach.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(foreach));
        replaceElementIfExist(foreach.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtForEachVariableReplaceListener(foreach));
        replaceElementIfExist(foreach.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtForEachExpressionReplaceListener(foreach));
        replaceElementIfExist(foreach.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(foreach));
        replaceInListIfExist(foreach.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(foreach));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {
        replaceInListIfExist(ifElement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ifElement));
        replaceElementIfExist(ifElement.getCondition(), new spoon.support.visitor.replace.ReplacementVisitor.CtIfConditionReplaceListener(ifElement));
        replaceElementIfExist(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement())), new spoon.support.visitor.replace.ReplacementVisitor.CtIfThenStatementReplaceListener(ifElement));
        replaceElementIfExist(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement())), new spoon.support.visitor.replace.ReplacementVisitor.CtIfElseStatementReplaceListener(ifElement));
        replaceInListIfExist(ifElement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ifElement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtInterface(final spoon.reflect.declaration.CtInterface<T> intrface) {
        replaceInListIfExist(intrface.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(intrface));
        replaceInSetIfExist(intrface.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(intrface));
        replaceInListIfExist(intrface.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(intrface));
        replaceInListIfExist(intrface.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(intrface));
        replaceInListIfExist(intrface.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(intrface));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtInvocation(final spoon.reflect.code.CtInvocation<T> invocation) {
        replaceInListIfExist(invocation.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(invocation));
        replaceInListIfExist(invocation.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(invocation));
        replaceElementIfExist(invocation.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(invocation));
        replaceElementIfExist(invocation.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(invocation));
        replaceInListIfExist(invocation.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(invocation));
        replaceInListIfExist(invocation.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(invocation));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLiteral(final spoon.reflect.code.CtLiteral<T> literal) {
        replaceInListIfExist(literal.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(literal));
        replaceElementIfExist(literal.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(literal));
        replaceInListIfExist(literal.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(literal));
        replaceInListIfExist(literal.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(literal));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable<T> localVariable) {
        replaceInListIfExist(localVariable.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(localVariable));
        replaceElementIfExist(localVariable.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(localVariable));
        replaceElementIfExist(localVariable.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(localVariable));
        replaceInListIfExist(localVariable.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(localVariable));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable<T> catchVariable) {
        replaceInListIfExist(catchVariable.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(catchVariable));
        replaceInListIfExist(catchVariable.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(catchVariable));
        replaceInListIfExist(catchVariable.getMultiTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtMultiTypedElementMultiTypesReplaceListener(catchVariable));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtMethod(final spoon.reflect.declaration.CtMethod<T> m) {
        replaceInListIfExist(m.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(m));
        replaceInListIfExist(m.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(m));
        replaceElementIfExist(m.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(m));
        replaceInListIfExist(m.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(m));
        replaceInSetIfExist(m.getThrownTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableThrownTypesReplaceListener(m));
        replaceElementIfExist(m.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(m));
        replaceInListIfExist(m.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(m));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod<T> annotationMethod) {
        replaceInListIfExist(annotationMethod.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationMethod));
        replaceElementIfExist(annotationMethod.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(annotationMethod));
        replaceElementIfExist(annotationMethod.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationMethodDefaultExpressionReplaceListener(annotationMethod));
        replaceInListIfExist(annotationMethod.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationMethod));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtNewArray(final spoon.reflect.code.CtNewArray<T> newArray) {
        replaceInListIfExist(newArray.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(newArray));
        replaceElementIfExist(newArray.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(newArray));
        replaceInListIfExist(newArray.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(newArray));
        replaceInListIfExist(newArray.getElements(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayElementsReplaceListener(newArray));
        replaceInListIfExist(newArray.getDimensionExpressions(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayDimensionExpressionsReplaceListener(newArray));
        replaceInListIfExist(newArray.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(newArray));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall<T> ctConstructorCall) {
        replaceInListIfExist(ctConstructorCall.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctConstructorCall));
        replaceInListIfExist(ctConstructorCall.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(ctConstructorCall));
        replaceElementIfExist(ctConstructorCall.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(ctConstructorCall));
        replaceElementIfExist(ctConstructorCall.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(ctConstructorCall));
        replaceInListIfExist(ctConstructorCall.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(ctConstructorCall));
        replaceInListIfExist(ctConstructorCall.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctConstructorCall));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtNewClass(final spoon.reflect.code.CtNewClass<T> newClass) {
        replaceInListIfExist(newClass.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(newClass));
        replaceInListIfExist(newClass.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(newClass));
        replaceElementIfExist(newClass.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(newClass));
        replaceElementIfExist(newClass.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(newClass));
        replaceInListIfExist(newClass.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(newClass));
        replaceElementIfExist(newClass.getAnonymousClass(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewClassAnonymousClassReplaceListener(newClass));
        replaceInListIfExist(newClass.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(newClass));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLambda(final spoon.reflect.code.CtLambda<T> lambda) {
        replaceInListIfExist(lambda.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(lambda));
        replaceElementIfExist(lambda.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(lambda));
        replaceInListIfExist(lambda.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(lambda));
        replaceInListIfExist(lambda.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(lambda));
        replaceElementIfExist(lambda.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(lambda));
        replaceElementIfExist(lambda.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtLambdaExpressionReplaceListener(lambda));
        replaceInListIfExist(lambda.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(lambda));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T, E extends spoon.reflect.code.CtExpression<?>> void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression<T, E> expression) {
        replaceInListIfExist(expression.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(expression));
        replaceInListIfExist(expression.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(expression));
        replaceElementIfExist(expression.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(expression));
        replaceInListIfExist(expression.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(expression));
        replaceElementIfExist(expression.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceExpressionExecutableReplaceListener(expression));
        replaceElementIfExist(expression.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(expression));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T, A extends T> void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment<T, A> assignment) {
        replaceInListIfExist(assignment.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(assignment));
        replaceElementIfExist(assignment.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(assignment));
        replaceInListIfExist(assignment.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(assignment));
        replaceElementIfExist(assignment.getAssigned(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssignmentAssignedReplaceListener(assignment));
        replaceElementIfExist(assignment.getAssignment(), new spoon.support.visitor.replace.ReplacementVisitor.CtRHSReceiverAssignmentReplaceListener(assignment));
        replaceInListIfExist(assignment.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(assignment));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {
        replaceInListIfExist(ctPackage.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctPackage));
        replaceInSetIfExist(ctPackage.getPackages(), new spoon.support.visitor.replace.ReplacementVisitor.CtPackagePackagesReplaceListener(ctPackage));
        replaceInSetIfExist(ctPackage.getTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtPackageTypesReplaceListener(ctPackage));
        replaceInListIfExist(ctPackage.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctPackage));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtParameter(final spoon.reflect.declaration.CtParameter<T> parameter) {
        replaceInListIfExist(parameter.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(parameter));
        replaceElementIfExist(parameter.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(parameter));
        replaceInListIfExist(parameter.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(parameter));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <R> void visitCtReturn(final spoon.reflect.code.CtReturn<R> returnStatement) {
        replaceInListIfExist(returnStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(returnStatement));
        replaceElementIfExist(returnStatement.getReturnedExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtReturnReturnedExpressionReplaceListener(returnStatement));
        replaceInListIfExist(returnStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(returnStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <R> void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {
        replaceInListIfExist(statements.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(statements));
        replaceInListIfExist(statements.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(statements));
        replaceInListIfExist(statements.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(statements));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <S> void visitCtSwitch(final spoon.reflect.code.CtSwitch<S> switchStatement) {
        replaceInListIfExist(switchStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(switchStatement));
        replaceElementIfExist(switchStatement.getSelector(), new spoon.support.visitor.replace.ReplacementVisitor.CtSwitchSelectorReplaceListener(switchStatement));
        replaceInListIfExist(switchStatement.getCases(), new spoon.support.visitor.replace.ReplacementVisitor.CtSwitchCasesReplaceListener(switchStatement));
        replaceInListIfExist(switchStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(switchStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {
        replaceInListIfExist(synchro.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(synchro));
        replaceElementIfExist(synchro.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedExpressionReplaceListener(synchro));
        replaceElementIfExist(synchro.getBlock(), new spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedBlockReplaceListener(synchro));
        replaceInListIfExist(synchro.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(synchro));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {
        replaceInListIfExist(throwStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(throwStatement));
        replaceElementIfExist(throwStatement.getThrownExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtThrowThrownExpressionReplaceListener(throwStatement));
        replaceInListIfExist(throwStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(throwStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {
        replaceInListIfExist(tryBlock.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(tryBlock));
        replaceElementIfExist(tryBlock.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryBodyReplaceListener(tryBlock));
        replaceInListIfExist(tryBlock.getCatchers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryCatchersReplaceListener(tryBlock));
        replaceElementIfExist(tryBlock.getFinalizer(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryFinalizerReplaceListener(tryBlock));
        replaceInListIfExist(tryBlock.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(tryBlock));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {
        replaceInListIfExist(tryWithResource.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(tryWithResource));
        replaceInListIfExist(tryWithResource.getResources(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryWithResourceResourcesReplaceListener(tryWithResource));
        replaceElementIfExist(tryWithResource.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryBodyReplaceListener(tryWithResource));
        replaceInListIfExist(tryWithResource.getCatchers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryCatchersReplaceListener(tryWithResource));
        replaceElementIfExist(tryWithResource.getFinalizer(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryFinalizerReplaceListener(tryWithResource));
        replaceInListIfExist(tryWithResource.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(tryWithResource));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {
        replaceElementIfExist(ref.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(ref));
        replaceElementIfExist(ref.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(ref));
        replaceInListIfExist(ref.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ref));
        replaceElementIfExist(ref.getBoundingType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeParameterReferenceBoundingTypeReplaceListener(ref));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {
        replaceElementIfExist(wildcardReference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(wildcardReference));
        replaceElementIfExist(wildcardReference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(wildcardReference));
        replaceInListIfExist(wildcardReference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(wildcardReference));
        replaceElementIfExist(wildcardReference.getBoundingType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeParameterReferenceBoundingTypeReplaceListener(wildcardReference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference<T> reference) {
        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
        replaceInListIfExist(reference.getBounds(), new spoon.support.visitor.replace.ReplacementVisitor.CtIntersectionTypeReferenceBoundsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference<T> reference) {
        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
        replaceInListIfExist(reference.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess<T> typeAccess) {
        replaceInListIfExist(typeAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(typeAccess));
        replaceInListIfExist(typeAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(typeAccess));
        replaceElementIfExist(typeAccess.getAccessedType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeAccessAccessedTypeReplaceListener(typeAccess));
        replaceInListIfExist(typeAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(typeAccess));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator<T> operator) {
        replaceInListIfExist(operator.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(operator));
        replaceElementIfExist(operator.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(operator));
        replaceInListIfExist(operator.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(operator));
        replaceElementIfExist(operator.getOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtUnaryOperatorOperandReplaceListener(operator));
        replaceInListIfExist(operator.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(operator));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableRead(final spoon.reflect.code.CtVariableRead<T> variableRead) {
        replaceInListIfExist(variableRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(variableRead));
        replaceInListIfExist(variableRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(variableRead));
        replaceElementIfExist(variableRead.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(variableRead));
        replaceInListIfExist(variableRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(variableRead));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite<T> variableWrite) {
        replaceInListIfExist(variableWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(variableWrite));
        replaceInListIfExist(variableWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(variableWrite));
        replaceElementIfExist(variableWrite.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(variableWrite));
        replaceInListIfExist(variableWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(variableWrite));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {
        replaceInListIfExist(whileLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(whileLoop));
        replaceElementIfExist(whileLoop.getLoopingExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtWhileLoopingExpressionReplaceListener(whileLoop));
        replaceElementIfExist(whileLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(whileLoop));
        replaceInListIfExist(whileLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(whileLoop));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression<T> expression) {
        replaceElementIfExist(expression.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(expression));
        replaceInListIfExist(expression.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(expression));
        replaceInListIfExist(expression.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(expression));
        replaceInListIfExist(expression.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(expression));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {
        replaceInListIfExist(statement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(statement));
        replaceInListIfExist(statement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(statement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtUnboundVariableReference(final spoon.reflect.reference.CtUnboundVariableReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtFieldRead(final spoon.reflect.code.CtFieldRead<T> fieldRead) {
        replaceInListIfExist(fieldRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(fieldRead));
        replaceInListIfExist(fieldRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(fieldRead));
        replaceElementIfExist(fieldRead.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(fieldRead));
        replaceElementIfExist(fieldRead.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldAccessVariableReplaceListener(fieldRead));
        replaceInListIfExist(fieldRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(fieldRead));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtFieldWrite(final spoon.reflect.code.CtFieldWrite<T> fieldWrite) {
        replaceInListIfExist(fieldWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(fieldWrite));
        replaceInListIfExist(fieldWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(fieldWrite));
        replaceElementIfExist(fieldWrite.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(fieldWrite));
        replaceElementIfExist(fieldWrite.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldAccessVariableReplaceListener(fieldWrite));
        replaceInListIfExist(fieldWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(fieldWrite));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtSuperAccess(final spoon.reflect.code.CtSuperAccess<T> f) {
        replaceInListIfExist(f.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(f));
        replaceInListIfExist(f.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(f));
        replaceInListIfExist(f.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(f));
        replaceElementIfExist(f.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(f));
        replaceElementIfExist(f.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(f));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtComment(final spoon.reflect.code.CtComment comment) {
        replaceInListIfExist(comment.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(comment));
        replaceInListIfExist(comment.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(comment));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtJavaDoc(final spoon.reflect.code.CtJavaDoc javaDoc) {
        replaceInListIfExist(javaDoc.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(javaDoc));
        replaceInListIfExist(javaDoc.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(javaDoc));
        replaceInListIfExist(javaDoc.getTags(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavaDocTagsReplaceListener(javaDoc));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtJavaDocTag(final spoon.reflect.code.CtJavaDocTag docTag) {
        replaceInListIfExist(docTag.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(docTag));
        replaceInListIfExist(docTag.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(docTag]));
    }

    // au...> but was:<...nerator
    class Ct[JavadocDescriptionDescriptionElementsReplaceListener implements spoon.support.visitor.replace.ReplaceListListener<java.util.List> {
        private final spoon.reflect.code.CtJavadocDescription element;

        CtJavadocDescriptionDescriptionElementsReplaceListener(spoon.reflect.code.CtJavadocDescription element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.util.List replace) {
            this.element.setDescriptionElements(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtJavadocInlineTagTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.code.CtJavadocInlineTag.TagType> {
        private final spoon.reflect.code.CtJavadocInlineTag element;

        CtJavadocInlineTagTypeReplaceListener(spoon.reflect.code.CtJavadocInlineTag element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.code.CtJavadocInlineTag.TagType replace) {
            this.element.setType(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtJavadocInlineTagContentReplaceListener implements spoon.support.visitor.replace.ReplaceListener<java.lang.String> {
        private final spoon.reflect.code.CtJavadocInlineTag element;

        CtJavadocInlineTagContentReplaceListener(spoon.reflect.code.CtJavadocInlineTag element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.lang.String replace) {
            this.element.setContent(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtJavadocDescriptionElementContentReplaceListener implements spoon.support.visitor.replace.ReplaceListener<java.lang.String> {
        private final spoon.reflect.code.CtJavadocSnippetDescription element;

        CtJavadocDescriptionElementContentReplaceListener(spoon.reflect.code.CtJavadocSnippetDescription element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.lang.String replace) {
            this.element.setContent(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtImportReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtReference> {
        private final spoon.reflect.declaration.CtImport element;

        CtImportReferenceReplaceListener(spoon.reflect.declaration.CtImport element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtReference replace) {
            this.element.setReference(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtModuleModuleDirectivesReplaceListener implements spoon.support.visitor.replace.ReplaceListListener<java.util.List> {
        private final spoon.reflect.declaration.CtModule element;

        CtModuleModuleDirectivesReplaceListener(spoon.reflect.declaration.CtModule element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.util.List replace) {
            this.element.setModuleDirectives(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtModuleRootPackageReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.declaration.CtPackage> {
        private final spoon.reflect.declaration.CtModule element;

        CtModuleRootPackageReplaceListener(spoon.reflect.declaration.CtModule element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.declaration.CtPackage replace) {
            this.element.setRootPackage(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtPackageExportPackageReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtPackageReference> {
        private final spoon.reflect.declaration.CtPackageExport element;

        CtPackageExportPackageReferenceReplaceListener(spoon.reflect.declaration.CtPackageExport element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtPackageReference replace) {
            this.element.setPackageReference(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtPackageExportTargetExportReplaceListener implements spoon.support.visitor.replace.ReplaceListListener<java.util.List> {
        private final spoon.reflect.declaration.CtPackageExport element;

        CtPackageExportTargetExportReplaceListener(spoon.reflect.declaration.CtPackageExport element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.util.List replace) {
            this.element.setTargetExport(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtModuleRequirementModuleReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtModuleReference> {
        private final spoon.reflect.declaration.CtModuleRequirement element;

        CtModuleRequirementModuleReferenceReplaceListener(spoon.reflect.declaration.CtModuleRequirement element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtModuleReference replace) {
            this.element.setModuleReference(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtProvidedServiceServiceTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtTypeReference> {
        private final spoon.reflect.declaration.CtProvidedService element;

        CtProvidedServiceServiceTypeReplaceListener(spoon.reflect.declaration.CtProvidedService element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtTypeReference replace) {
            this.element.setServiceType(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtProvidedServiceImplementationTypesReplaceListener implements spoon.support.visitor.replace.ReplaceListListener<java.util.List> {
        private final spoon.reflect.declaration.CtProvidedService element;

        CtProvidedServiceImplementationTypesReplaceListener(spoon.reflect.declaration.CtProvidedService element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(java.util.List replace) {
            this.element.setImplementationTypes(replace);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    class CtUsedServiceServiceTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener<spoon.reflect.reference.CtTypeReference> {
        private final spoon.reflect.declaration.CtUsedService element;

        CtUsedServiceServiceTypeReplaceListener(spoon.reflect.declaration.CtUsedService element) {
            this.element = element;
        }

        @java.lang.Override
        public void set(spoon.reflect.reference.CtTypeReference replace) {
            this.element.setServiceType(replace);
        }
    }

    public static void replace(spoon.reflect.declaration.CtElement original, spoon.reflect.declaration.CtElement replace) {
        try {
            new spoon.support.visitor.replace.ReplacementVisitor(original, (replace == null ? spoon.support.visitor.replace.ReplacementVisitor.EMPTY : new spoon.reflect.declaration.CtElement[]{ replace })).scan(original.getParent());
        } catch (spoon.support.visitor.replace.InvalidReplaceException e) {
            throw e;
        } catch (spoon.SpoonException ignore) {
        }
    }

    public static <E extends spoon.reflect.declaration.CtElement> void replace(spoon.reflect.declaration.CtElement original, java.util.Collection<E> replaces) {
        try {
            new spoon.support.visitor.replace.ReplacementVisitor(original, replaces.toArray(new spoon.reflect.declaration.CtElement[replaces.size()])).scan(original.getParent());
        } catch (spoon.support.visitor.replace.InvalidReplaceException e) {
            throw e;
        } catch (spoon.SpoonException ignore) {
        }
    }

    private spoon.reflect.declaration.CtElement original;

    private spoon.reflect.declaration.CtElement[] replace;

    private static final spoon.reflect.declaration.CtElement[] EMPTY = new spoon.reflect.declaration.CtElement[0];

    private ReplacementVisitor(spoon.reflect.declaration.CtElement original, spoon.reflect.declaration.CtElement... replace) {
        this.original = original;
        this.replace = (replace == null) ? spoon.support.visitor.replace.ReplacementVisitor.EMPTY : replace;
    }

    private <K, V extends spoon.reflect.declaration.CtElement> void replaceInMapIfExist(java.util.Map<K, V> mapProtected, spoon.support.visitor.replace.ReplaceMapListener listener) {
        java.util.Map<K, V> map = new java.util.HashMap<>(mapProtected);
        V shouldBeDeleted = null;
        K key = null;
        for (java.util.Map.Entry<K, V> entry : map.entrySet()) {
            if ((entry.getValue()) == (original)) {
                shouldBeDeleted = entry.getValue();
                key = entry.getKey();
                break;
            }
        }
        if (shouldBeDeleted != null) {
            if ((replace.length) > 0) {
                if ((replace.length) > 1) {
                    throw new spoon.support.visitor.replace.InvalidReplaceException(("Cannot replace single value by multiple values in " + (listener.getClass().getSimpleName())));
                }
                V val = ((V) (replace[0]));
                if (val != null) {
                    map.put(key, val);
                    val.setParent(shouldBeDeleted.getParent());
                }else {
                    map.remove(key);
                }
            }else {
                map.remove(key);
            }
            listener.set(map);
        }
    }

    private <T extends spoon.reflect.declaration.CtElement> void replaceInSetIfExist(java.util.Set<T> setProtected, spoon.support.visitor.replace.ReplaceSetListener listener) {
        java.util.Set<T> set = new java.util.HashSet<>(setProtected);
        T shouldBeDeleted = null;
        for (T element : set) {
            if (element == (original)) {
                shouldBeDeleted = element;
                break;
            }
        }
        if (shouldBeDeleted != null) {
            set.remove(shouldBeDeleted);
            for (spoon.reflect.declaration.CtElement ele : replace) {
                if (ele != null) {
                    set.add(((T) (ele)));
                    ele.setParent(shouldBeDeleted.getParent());
                }
            }
            listener.set(set);
        }
    }

    private <T extends spoon.reflect.declaration.CtElement> void replaceInListIfExist(java.util.List<T> listProtected, spoon.support.visitor.replace.ReplaceListListener listener) {
        java.util.List<T> list = new java.util.ArrayList<>(listProtected);
        T shouldBeDeleted = null;
        int index = 0;
        for (int i = 0; i < (list.size()); i++) {
            if ((list.get(i)) == (original)) {
                index = i;
                shouldBeDeleted = list.get(i);
                break;
            }
        }
        if (shouldBeDeleted != null) {
            list.remove(index);
            if ((replace.length) > 0) {
                for (int i = 0; i < (replace.length); i++) {
                    T ele = ((T) (replace[i]));
                    if (ele != null) {
                        list.add(index, ele);
                        ele.setParent(shouldBeDeleted.getParent());
                        index = index + 1;
                    }
                }
            }
            listener.set(list);
        }
    }

    private void replaceElementIfExist(spoon.reflect.declaration.CtElement candidate, spoon.support.visitor.replace.ReplaceListener listener) {
        if (candidate == (original)) {
            spoon.reflect.declaration.CtElement val = null;
            if ((replace.length) > 0) {
                if ((replace.length) > 1) {
                    throw new spoon.support.visitor.replace.InvalidReplaceException(("Cannot replace single value by multiple values in " + (listener.getClass().getSimpleName())));
                }
                val = replace[0];
            }
            if (val != null) {
                val.setParent(candidate.getParent());
            }
            listener.set(val);
        }
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <A extends java.lang.annotation.Annotation> void visitCtAnnotation(final spoon.reflect.declaration.CtAnnotation<A> annotation) {
        replaceElementIfExist(annotation.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(annotation));
        replaceInListIfExist(annotation.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotation));
        replaceElementIfExist(annotation.getAnnotationType(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationAnnotationTypeReplaceListener(annotation));
        replaceInListIfExist(annotation.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotation));
        replaceInMapIfExist(annotation.getValues(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationValuesReplaceListener(annotation));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <A extends java.lang.annotation.Annotation> void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType<A> annotationType) {
        replaceInListIfExist(annotationType.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationType));
        replaceInListIfExist(annotationType.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(annotationType));
        replaceInListIfExist(annotationType.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationType));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {
        replaceInListIfExist(anonymousExec.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(anonymousExec));
        replaceElementIfExist(anonymousExec.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(anonymousExec));
        replaceInListIfExist(anonymousExec.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(anonymousExec));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayRead(final spoon.reflect.code.CtArrayRead<T> arrayRead) {
        replaceInListIfExist(arrayRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(arrayRead));
        replaceElementIfExist(arrayRead.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(arrayRead));
        replaceInListIfExist(arrayRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(arrayRead));
        replaceElementIfExist(arrayRead.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(arrayRead));
        replaceElementIfExist(arrayRead.getIndexExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayAccessIndexExpressionReplaceListener(arrayRead));
        replaceInListIfExist(arrayRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(arrayRead));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite<T> arrayWrite) {
        replaceInListIfExist(arrayWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(arrayWrite));
        replaceElementIfExist(arrayWrite.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(arrayWrite));
        replaceInListIfExist(arrayWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(arrayWrite));
        replaceElementIfExist(arrayWrite.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(arrayWrite));
        replaceElementIfExist(arrayWrite.getIndexExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayAccessIndexExpressionReplaceListener(arrayWrite));
        replaceInListIfExist(arrayWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(arrayWrite));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference<T> reference) {
        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));
        replaceElementIfExist(reference.getComponentType(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayTypeReferenceComponentTypeReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAssert(final spoon.reflect.code.CtAssert<T> asserted) {
        replaceInListIfExist(asserted.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(asserted));
        replaceElementIfExist(asserted.getAssertExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssertAssertExpressionReplaceListener(asserted));
        replaceElementIfExist(asserted.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssertExpressionReplaceListener(asserted));
        replaceInListIfExist(asserted.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(asserted));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T, A extends T> void visitCtAssignment(final spoon.reflect.code.CtAssignment<T, A> assignement) {
        replaceInListIfExist(assignement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(assignement));
        replaceElementIfExist(assignement.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(assignement));
        replaceInListIfExist(assignement.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(assignement));
        replaceElementIfExist(assignement.getAssigned(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssignmentAssignedReplaceListener(assignement));
        replaceElementIfExist(assignement.getAssignment(), new spoon.support.visitor.replace.ReplacementVisitor.CtRHSReceiverAssignmentReplaceListener(assignement));
        replaceInListIfExist(assignement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(assignement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator<T> operator) {
        replaceInListIfExist(operator.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(operator));
        replaceElementIfExist(operator.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(operator));
        replaceInListIfExist(operator.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(operator));
        replaceElementIfExist(operator.getLeftHandOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorLeftHandOperandReplaceListener(operator));
        replaceElementIfExist(operator.getRightHandOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorRightHandOperandReplaceListener(operator));
        replaceInListIfExist(operator.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(operator));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <R> void visitCtBlock(final spoon.reflect.code.CtBlock<R> block) {
        replaceInListIfExist(block.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(block));
        replaceInListIfExist(block.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(block));
        replaceInListIfExist(block.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(block));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {
        replaceInListIfExist(breakStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(breakStatement));
        replaceInListIfExist(breakStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(breakStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <S> void visitCtCase(final spoon.reflect.code.CtCase<S> caseStatement) {
        replaceInListIfExist(caseStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(caseStatement));
        replaceElementIfExist(caseStatement.getCaseExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtCaseCaseExpressionReplaceListener(caseStatement));
        replaceInListIfExist(caseStatement.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(caseStatement));
        replaceInListIfExist(caseStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(caseStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {
        replaceInListIfExist(catchBlock.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(catchBlock));
        replaceElementIfExist(catchBlock.getParameter(), new spoon.support.visitor.replace.ReplacementVisitor.CtCatchParameterReplaceListener(catchBlock));
        replaceElementIfExist(catchBlock.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtCatchBodyReplaceListener(catchBlock));
        replaceInListIfExist(catchBlock.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(catchBlock));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtClass(final spoon.reflect.declaration.CtClass<T> ctClass) {
        replaceInListIfExist(ctClass.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctClass));
        replaceElementIfExist(ctClass.getSuperclass(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperclassReplaceListener(ctClass));
        replaceInSetIfExist(ctClass.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(ctClass));
        replaceInListIfExist(ctClass.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(ctClass));
        replaceInListIfExist(ctClass.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(ctClass));
        replaceInListIfExist(ctClass.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctClass));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {
        replaceInListIfExist(typeParameter.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(typeParameter));
        replaceElementIfExist(typeParameter.getSuperclass(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperclassReplaceListener(typeParameter));
        replaceInListIfExist(typeParameter.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(typeParameter));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConditional(final spoon.reflect.code.CtConditional<T> conditional) {
        replaceElementIfExist(conditional.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(conditional));
        replaceInListIfExist(conditional.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(conditional));
        replaceElementIfExist(conditional.getCondition(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalConditionReplaceListener(conditional));
        replaceElementIfExist(conditional.getThenExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalThenExpressionReplaceListener(conditional));
        replaceElementIfExist(conditional.getElseExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalElseExpressionReplaceListener(conditional));
        replaceInListIfExist(conditional.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(conditional));
        replaceInListIfExist(conditional.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(conditional));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConstructor(final spoon.reflect.declaration.CtConstructor<T> c) {
        replaceInListIfExist(c.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(c));
        replaceInListIfExist(c.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(c));
        replaceInSetIfExist(c.getThrownTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableThrownTypesReplaceListener(c));
        replaceInListIfExist(c.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(c));
        replaceElementIfExist(c.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(c));
        replaceInListIfExist(c.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(c));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {
        replaceInListIfExist(continueStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(continueStatement));
        replaceInListIfExist(continueStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(continueStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {
        replaceInListIfExist(doLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(doLoop));
        replaceElementIfExist(doLoop.getLoopingExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtDoLoopingExpressionReplaceListener(doLoop));
        replaceElementIfExist(doLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(doLoop));
        replaceInListIfExist(doLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(doLoop));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T extends java.lang.Enum<?>> void visitCtEnum(final spoon.reflect.declaration.CtEnum<T> ctEnum) {
        replaceInListIfExist(ctEnum.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctEnum));
        replaceInSetIfExist(ctEnum.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(ctEnum));
        replaceInListIfExist(ctEnum.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(ctEnum));
        replaceInListIfExist(ctEnum.getEnumValues(), new spoon.support.visitor.replace.ReplacementVisitor.CtEnumEnumValuesReplaceListener(ctEnum));
        replaceInListIfExist(ctEnum.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctEnum));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference<T> reference) {
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceDeclaringTypeReplaceListener(reference));
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceParametersReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
        replaceInListIfExist(reference.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtField(final spoon.reflect.declaration.CtField<T> f) {
        replaceInListIfExist(f.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(f));
        replaceElementIfExist(f.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(f));
        replaceElementIfExist(f.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(f));
        replaceInListIfExist(f.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(f));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue<T> enumValue) {
        replaceInListIfExist(enumValue.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(enumValue));
        replaceElementIfExist(enumValue.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(enumValue));
        replaceElementIfExist(enumValue.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(enumValue));
        replaceInListIfExist(enumValue.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(enumValue));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtThisAccess(final spoon.reflect.code.CtThisAccess<T> thisAccess) {
        replaceInListIfExist(thisAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(thisAccess));
        replaceInListIfExist(thisAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(thisAccess));
        replaceElementIfExist(thisAccess.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(thisAccess));
        replaceInListIfExist(thisAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(thisAccess));
        replaceElementIfExist(thisAccess.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(thisAccess));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess<T> annotationFieldAccess) {
        replaceInListIfExist(annotationFieldAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationFieldAccess));
        replaceInListIfExist(annotationFieldAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationFieldAccess));
        replaceInListIfExist(annotationFieldAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(annotationFieldAccess));
        replaceElementIfExist(annotationFieldAccess.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(annotationFieldAccess));
        replaceElementIfExist(annotationFieldAccess.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationFieldAccessVariableReplaceListener(annotationFieldAccess));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference<T> reference) {
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldReferenceDeclaringTypeReplaceListener(reference));
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {
        replaceInListIfExist(forLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(forLoop));
        replaceInListIfExist(forLoop.getForInit(), new spoon.support.visitor.replace.ReplacementVisitor.CtForForInitReplaceListener(forLoop));
        replaceElementIfExist(forLoop.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtForExpressionReplaceListener(forLoop));
        replaceInListIfExist(forLoop.getForUpdate(), new spoon.support.visitor.replace.ReplacementVisitor.CtForForUpdateReplaceListener(forLoop));
        replaceElementIfExist(forLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(forLoop));
        replaceInListIfExist(forLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(forLoop));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {
        replaceInListIfExist(foreach.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(foreach));
        replaceElementIfExist(foreach.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtForEachVariableReplaceListener(foreach));
        replaceElementIfExist(foreach.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtForEachExpressionReplaceListener(foreach));
        replaceElementIfExist(foreach.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(foreach));
        replaceInListIfExist(foreach.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(foreach));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {
        replaceInListIfExist(ifElement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ifElement));
        replaceElementIfExist(ifElement.getCondition(), new spoon.support.visitor.replace.ReplacementVisitor.CtIfConditionReplaceListener(ifElement));
        replaceElementIfExist(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement())), new spoon.support.visitor.replace.ReplacementVisitor.CtIfThenStatementReplaceListener(ifElement));
        replaceElementIfExist(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement())), new spoon.support.visitor.replace.ReplacementVisitor.CtIfElseStatementReplaceListener(ifElement));
        replaceInListIfExist(ifElement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ifElement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtInterface(final spoon.reflect.declaration.CtInterface<T> intrface) {
        replaceInListIfExist(intrface.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(intrface));
        replaceInSetIfExist(intrface.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(intrface));
        replaceInListIfExist(intrface.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(intrface));
        replaceInListIfExist(intrface.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(intrface));
        replaceInListIfExist(intrface.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(intrface));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtInvocation(final spoon.reflect.code.CtInvocation<T> invocation) {
        replaceInListIfExist(invocation.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(invocation));
        replaceInListIfExist(invocation.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(invocation));
        replaceElementIfExist(invocation.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(invocation));
        replaceElementIfExist(invocation.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(invocation));
        replaceInListIfExist(invocation.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(invocation));
        replaceInListIfExist(invocation.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(invocation));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLiteral(final spoon.reflect.code.CtLiteral<T> literal) {
        replaceInListIfExist(literal.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(literal));
        replaceElementIfExist(literal.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(literal));
        replaceInListIfExist(literal.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(literal));
        replaceInListIfExist(literal.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(literal));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable<T> localVariable) {
        replaceInListIfExist(localVariable.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(localVariable));
        replaceElementIfExist(localVariable.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(localVariable));
        replaceElementIfExist(localVariable.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(localVariable));
        replaceInListIfExist(localVariable.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(localVariable));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable<T> catchVariable) {
        replaceInListIfExist(catchVariable.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(catchVariable));
        replaceInListIfExist(catchVariable.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(catchVariable));
        replaceInListIfExist(catchVariable.getMultiTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtMultiTypedElementMultiTypesReplaceListener(catchVariable));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtMethod(final spoon.reflect.declaration.CtMethod<T> m) {
        replaceInListIfExist(m.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(m));
        replaceInListIfExist(m.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(m));
        replaceElementIfExist(m.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(m));
        replaceInListIfExist(m.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(m));
        replaceInSetIfExist(m.getThrownTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableThrownTypesReplaceListener(m));
        replaceElementIfExist(m.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(m));
        replaceInListIfExist(m.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(m));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod<T> annotationMethod) {
        replaceInListIfExist(annotationMethod.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationMethod));
        replaceElementIfExist(annotationMethod.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(annotationMethod));
        replaceElementIfExist(annotationMethod.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationMethodDefaultExpressionReplaceListener(annotationMethod));
        replaceInListIfExist(annotationMethod.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationMethod));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtNewArray(final spoon.reflect.code.CtNewArray<T> newArray) {
        replaceInListIfExist(newArray.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(newArray));
        replaceElementIfExist(newArray.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(newArray));
        replaceInListIfExist(newArray.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(newArray));
        replaceInListIfExist(newArray.getElements(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayElementsReplaceListener(newArray));
        replaceInListIfExist(newArray.getDimensionExpressions(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayDimensionExpressionsReplaceListener(newArray));
        replaceInListIfExist(newArray.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(newArray));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall<T> ctConstructorCall) {
        replaceInListIfExist(ctConstructorCall.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctConstructorCall));
        replaceInListIfExist(ctConstructorCall.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(ctConstructorCall));
        replaceElementIfExist(ctConstructorCall.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(ctConstructorCall));
        replaceElementIfExist(ctConstructorCall.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(ctConstructorCall));
        replaceInListIfExist(ctConstructorCall.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(ctConstructorCall));
        replaceInListIfExist(ctConstructorCall.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctConstructorCall));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtNewClass(final spoon.reflect.code.CtNewClass<T> newClass) {
        replaceInListIfExist(newClass.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(newClass));
        replaceInListIfExist(newClass.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(newClass));
        replaceElementIfExist(newClass.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(newClass));
        replaceElementIfExist(newClass.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(newClass));
        replaceInListIfExist(newClass.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(newClass));
        replaceElementIfExist(newClass.getAnonymousClass(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewClassAnonymousClassReplaceListener(newClass));
        replaceInListIfExist(newClass.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(newClass));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtLambda(final spoon.reflect.code.CtLambda<T> lambda) {
        replaceInListIfExist(lambda.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(lambda));
        replaceElementIfExist(lambda.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(lambda));
        replaceInListIfExist(lambda.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(lambda));
        replaceInListIfExist(lambda.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(lambda));
        replaceElementIfExist(lambda.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(lambda));
        replaceElementIfExist(lambda.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtLambdaExpressionReplaceListener(lambda));
        replaceInListIfExist(lambda.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(lambda));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T, E extends spoon.reflect.code.CtExpression<?>> void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression<T, E> expression) {
        replaceInListIfExist(expression.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(expression));
        replaceInListIfExist(expression.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(expression));
        replaceElementIfExist(expression.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(expression));
        replaceInListIfExist(expression.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(expression));
        replaceElementIfExist(expression.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceExpressionExecutableReplaceListener(expression));
        replaceElementIfExist(expression.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(expression));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T, A extends T> void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment<T, A> assignment) {
        replaceInListIfExist(assignment.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(assignment));
        replaceElementIfExist(assignment.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(assignment));
        replaceInListIfExist(assignment.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(assignment));
        replaceElementIfExist(assignment.getAssigned(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssignmentAssignedReplaceListener(assignment));
        replaceElementIfExist(assignment.getAssignment(), new spoon.support.visitor.replace.ReplacementVisitor.CtRHSReceiverAssignmentReplaceListener(assignment));
        replaceInListIfExist(assignment.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(assignment));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {
        replaceInListIfExist(ctPackage.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctPackage));
        replaceInSetIfExist(ctPackage.getPackages(), new spoon.support.visitor.replace.ReplacementVisitor.CtPackagePackagesReplaceListener(ctPackage));
        replaceInSetIfExist(ctPackage.getTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtPackageTypesReplaceListener(ctPackage));
        replaceInListIfExist(ctPackage.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctPackage));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtParameter(final spoon.reflect.declaration.CtParameter<T> parameter) {
        replaceInListIfExist(parameter.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(parameter));
        replaceElementIfExist(parameter.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(parameter));
        replaceInListIfExist(parameter.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(parameter));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <R> void visitCtReturn(final spoon.reflect.code.CtReturn<R> returnStatement) {
        replaceInListIfExist(returnStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(returnStatement));
        replaceElementIfExist(returnStatement.getReturnedExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtReturnReturnedExpressionReplaceListener(returnStatement));
        replaceInListIfExist(returnStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(returnStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <R> void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {
        replaceInListIfExist(statements.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(statements));
        replaceInListIfExist(statements.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(statements));
        replaceInListIfExist(statements.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(statements));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <S> void visitCtSwitch(final spoon.reflect.code.CtSwitch<S> switchStatement) {
        replaceInListIfExist(switchStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(switchStatement));
        replaceElementIfExist(switchStatement.getSelector(), new spoon.support.visitor.replace.ReplacementVisitor.CtSwitchSelectorReplaceListener(switchStatement));
        replaceInListIfExist(switchStatement.getCases(), new spoon.support.visitor.replace.ReplacementVisitor.CtSwitchCasesReplaceListener(switchStatement));
        replaceInListIfExist(switchStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(switchStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {
        replaceInListIfExist(synchro.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(synchro));
        replaceElementIfExist(synchro.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedExpressionReplaceListener(synchro));
        replaceElementIfExist(synchro.getBlock(), new spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedBlockReplaceListener(synchro));
        replaceInListIfExist(synchro.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(synchro));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {
        replaceInListIfExist(throwStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(throwStatement));
        replaceElementIfExist(throwStatement.getThrownExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtThrowThrownExpressionReplaceListener(throwStatement));
        replaceInListIfExist(throwStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(throwStatement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {
        replaceInListIfExist(tryBlock.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(tryBlock));
        replaceElementIfExist(tryBlock.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryBodyReplaceListener(tryBlock));
        replaceInListIfExist(tryBlock.getCatchers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryCatchersReplaceListener(tryBlock));
        replaceElementIfExist(tryBlock.getFinalizer(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryFinalizerReplaceListener(tryBlock));
        replaceInListIfExist(tryBlock.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(tryBlock));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {
        replaceInListIfExist(tryWithResource.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(tryWithResource));
        replaceInListIfExist(tryWithResource.getResources(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryWithResourceResourcesReplaceListener(tryWithResource));
        replaceElementIfExist(tryWithResource.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryBodyReplaceListener(tryWithResource));
        replaceInListIfExist(tryWithResource.getCatchers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryCatchersReplaceListener(tryWithResource));
        replaceElementIfExist(tryWithResource.getFinalizer(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryFinalizerReplaceListener(tryWithResource));
        replaceInListIfExist(tryWithResource.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(tryWithResource));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {
        replaceElementIfExist(ref.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(ref));
        replaceElementIfExist(ref.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(ref));
        replaceInListIfExist(ref.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ref));
        replaceElementIfExist(ref.getBoundingType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeParameterReferenceBoundingTypeReplaceListener(ref));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {
        replaceElementIfExist(wildcardReference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(wildcardReference));
        replaceElementIfExist(wildcardReference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(wildcardReference));
        replaceInListIfExist(wildcardReference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(wildcardReference));
        replaceElementIfExist(wildcardReference.getBoundingType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeParameterReferenceBoundingTypeReplaceListener(wildcardReference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference<T> reference) {
        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
        replaceInListIfExist(reference.getBounds(), new spoon.support.visitor.replace.ReplacementVisitor.CtIntersectionTypeReferenceBoundsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference<T> reference) {
        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));
        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));
        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));
        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));
        replaceInListIfExist(reference.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess<T> typeAccess) {
        replaceInListIfExist(typeAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(typeAccess));
        replaceInListIfExist(typeAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(typeAccess));
        replaceElementIfExist(typeAccess.getAccessedType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeAccessAccessedTypeReplaceListener(typeAccess));
        replaceInListIfExist(typeAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(typeAccess));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator<T> operator) {
        replaceInListIfExist(operator.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(operator));
        replaceElementIfExist(operator.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(operator));
        replaceInListIfExist(operator.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(operator));
        replaceElementIfExist(operator.getOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtUnaryOperatorOperandReplaceListener(operator));
        replaceInListIfExist(operator.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(operator));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableRead(final spoon.reflect.code.CtVariableRead<T> variableRead) {
        replaceInListIfExist(variableRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(variableRead));
        replaceInListIfExist(variableRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(variableRead));
        replaceElementIfExist(variableRead.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(variableRead));
        replaceInListIfExist(variableRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(variableRead));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite<T> variableWrite) {
        replaceInListIfExist(variableWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(variableWrite));
        replaceInListIfExist(variableWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(variableWrite));
        replaceElementIfExist(variableWrite.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(variableWrite));
        replaceInListIfExist(variableWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(variableWrite));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {
        replaceInListIfExist(whileLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(whileLoop));
        replaceElementIfExist(whileLoop.getLoopingExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtWhileLoopingExpressionReplaceListener(whileLoop));
        replaceElementIfExist(whileLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(whileLoop));
        replaceInListIfExist(whileLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(whileLoop));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression<T> expression) {
        replaceElementIfExist(expression.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(expression));
        replaceInListIfExist(expression.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(expression));
        replaceInListIfExist(expression.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(expression));
        replaceInListIfExist(expression.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(expression));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {
        replaceInListIfExist(statement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(statement));
        replaceInListIfExist(statement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(statement));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtUnboundVariableReference(final spoon.reflect.reference.CtUnboundVariableReference<T> reference) {
        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtFieldRead(final spoon.reflect.code.CtFieldRead<T> fieldRead) {
        replaceInListIfExist(fieldRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(fieldRead));
        replaceInListIfExist(fieldRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(fieldRead));
        replaceElementIfExist(fieldRead.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(fieldRead));
        replaceElementIfExist(fieldRead.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldAccessVariableReplaceListener(fieldRead));
        replaceInListIfExist(fieldRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(fieldRead));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtFieldWrite(final spoon.reflect.code.CtFieldWrite<T> fieldWrite) {
        replaceInListIfExist(fieldWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(fieldWrite));
        replaceInListIfExist(fieldWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(fieldWrite));
        replaceElementIfExist(fieldWrite.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(fieldWrite));
        replaceElementIfExist(fieldWrite.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldAccessVariableReplaceListener(fieldWrite));
        replaceInListIfExist(fieldWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(fieldWrite));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public <T> void visitCtSuperAccess(final spoon.reflect.code.CtSuperAccess<T> f) {
        replaceInListIfExist(f.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(f));
        replaceInListIfExist(f.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(f));
        replaceInListIfExist(f.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(f));
        replaceElementIfExist(f.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(f));
        replaceElementIfExist(f.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(f));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtComment(final spoon.reflect.code.CtComment comment) {
        replaceInListIfExist(comment.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(comment));
        replaceInListIfExist(comment.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(comment));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtJavaDoc(final spoon.reflect.code.CtJavaDoc javaDoc) {
        replaceInListIfExist(javaDoc.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(javaDoc));
        replaceInListIfExist(javaDoc.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(javaDoc));
        replaceInListIfExist(javaDoc.getTags(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavaDocTagsReplaceListener(javaDoc));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtJavaDocTag(final spoon.reflect.code.CtJavaDocTag docTag) {
        replaceInListIfExist(docTag.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(docTag));
        replaceInListIfExist(docTag.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(docTag));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtJavadocDescription(spoon.reflect.code.CtJavadocDescription javadocDescription) {
        replaceInListIfExist(javadocDescription.getDescriptionElements(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavadocDescriptionDescriptionElementsReplaceListener(javadocDescription));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtJavaDocInlineTag(spoon.reflect.code.CtJavadocInlineTag javadocInlineTag) {
        replaceElementIfExist(javadocInlineTag.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavadocInlineTagTypeReplaceListener(javadocInlineTag));
        replaceElementIfExist(javadocInlineTag.getContent(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavadocInlineTagContentReplaceListener(javadocInlineTag));
    }

    // auto-generated, see spoon.generating.ReplacementVisitorGenerator
    @java.lang.Override
    public void visitCtJavaDocSnippetDescription(spoon.reflect.code.CtJavadocSnippetDescription javadocSnippetDescription) {
        replaceElementIfExist(javadocSnippetDescription.getContent(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavadocDescriptionElementContentReplaceListener(javadocSnippetDescription]));
    }

    // au...>
[ERROR]   CloneTest.testCloneMethodsDeclaredInAST:92 spoon.reflect.code.CtJavadocDescription hasn't clone method.
[ERROR]   APITest.testSetterInNodes:411 Check the method setContentDescription(spoon.reflect.code.CtJavadocDescription) in the declaring class spoon.support.reflect.code.CtJavaDocImpl
[ERROR]   MetamodelTest.testGetAllMetamodelInterfacess:79 
Expected: <[spoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.CtSwitch, spoon.reflect.code.CtJavaDocTag, spoon.reflect.declaration.CtNamedElement, spoon.reflect.code.CtUnaryOperator, spoon.reflect.declaration.CtElement, spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.code.CtAssert, spoon.reflect.declaration.CtExecutable, spoon.reflect.code.CtThisAccess, spoon.reflect.declaration.CtImport, spoon.reflect.declaration.CtField, spoon.reflect.reference.CtTypeParameterReference, spoon.reflect.reference.CtParameterReference, spoon.reflect.code.CtCodeSnippetExpression, spoon.reflect.declaration.CtModule, spoon.reflect.code.CtJavadocDescription, spoon.reflect.reference.CtIntersectionTypeReference, spoon.reflect.code.CtFieldAccess, spoon.reflect.reference.CtVariableReference, spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtFieldWrite, spoon.reflect.code.CtSynchronized, spoon.reflect.declaration.CtMethod, spoon.reflect.code.CtLocalVariable, spoon.reflect.declaration.CtEnum, spoon.reflect.code.CtIf, spoon.reflect.code.CtThrow, spoon.reflect.declaration.CtPackage, spoon.reflect.reference.CtWildcardReference, spoon.reflect.code.CtBreak, spoon.reflect.code.CtStatement, spoon.reflect.reference.CtExecutableReference, spoon.reflect.declaration.CtEnumValue, spoon.reflect.code.CtExpression, spoon.reflect.code.CtNewArray, spoon.reflect.code.CtNewClass, spoon.reflect.reference.CtLocalVariableReference, spoon.reflect.code.CtLambda, spoon.reflect.declaration.CtConstructor, spoon.reflect.code.CtJavadocSnippetDescription, spoon.reflect.code.CtCodeSnippetStatement, spoon.reflect.code.CtTargetedExpression, spoon.reflect.declaration.CtVariable, spoon.reflect.declaration.CtModuleDirective, spoon.reflect.declaration.CtPackageExport, spoon.reflect.code.CtCase, spoon.reflect.code.CtConstructorCall, spoon.reflect.code.CtBodyHolder, spoon.reflect.declaration.ModifierKind, spoon.reflect.reference.CtUnboundVariableReference, spoon.reflect.code.CtFieldRead, spoon.reflect.declaration.CtProvidedService, spoon.reflect.code.CtTry, spoon.reflect.code.UnaryOperatorKind, spoon.reflect.code.CtLiteral, spoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtPackageReference, spoon.reflect.code.CtStatementList, spoon.reflect.code.CtSuperAccess, spoon.reflect.declaration.CtInterface, spoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtFor, spoon.reflect.code.CtVariableWrite, spoon.reflect.code.CtCatch, spoon.reflect.code.BinaryOperatorKind, spoon.reflect.code.CtArrayAccess, spoon.reflect.declaration.CtUsedService, spoon.reflect.code.CtConditional, spoon.reflect.code.CtArrayWrite, spoon.reflect.declaration.CtType, spoon.reflect.code.CtTypeAccess, spoon.reflect.code.CtContinue, spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtReference, spoon.reflect.declaration.ParentNotInitializedException, spoon.reflect.code.CtAnnotationFieldAccess, spoon.reflect.code.CtAssignment, spoon.reflect.declaration.CtModifiable, spoon.reflect.reference.CtCatchVariableReference, spoon.reflect.declaration.CtTypeInformation, spoon.reflect.code.CtLabelledFlowBreak, spoon.reflect.code.CtAbstractInvocation, spoon.reflect.code.CtVariableAccess, spoon.reflect.code.CtBlock, spoon.reflect.code.CtReturn, spoon.reflect.declaration.CtCodeSnippet, spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtParameter, spoon.reflect.declaration.CtTypeMember, spoon.reflect.code.CtComment, spoon.reflect.code.CtCatchVariable, spoon.reflect.code.CtCodeElement, spoon.reflect.code.CtJavaDoc, spoon.reflect.declaration.CtAnnotatedElementType, spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtModuleReference, spoon.reflect.declaration.CtShadowable, spoon.reflect.code.CtLoop, spoon.reflect.code.CtVariableRead, spoon.reflect.code.CtForEach, spoon.reflect.code.CtInvocation, spoon.reflect.declaration.CtImportKind, spoon.reflect.declaration.CtAnonymousExecutable, spoon.reflect.code.CtDo, spoon.reflect.code.CtJavadocInlineTag, spoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.declaration.CtTypeParameter, spoon.reflect.code.CtRHSReceiver, spoon.reflect.reference.CtTypeReference, spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtCFlowBreak, spoon.reflect.code.CtArrayRead, spoon.reflect.code.CtJavadocDescriptionElement, spoon.reflect.code.CtWhile, spoon.reflect.declaration.CtClass, spoon.reflect.reference.CtFieldReference, spoon.reflect.declaration.CtAnnotationType]>
     but: was <[spoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.CtSwitch, spoon.reflect.code.CtJavaDocTag, spoon.reflect.declaration.CtNamedElement, spoon.reflect.code.CtUnaryOperator, spoon.reflect.declaration.CtElement, spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.code.CtAssert, spoon.reflect.declaration.CtExecutable, spoon.reflect.code.CtThisAccess, spoon.reflect.declaration.CtImport, spoon.reflect.declaration.CtField, spoon.reflect.reference.CtTypeParameterReference, spoon.reflect.reference.CtParameterReference, spoon.reflect.code.CtCodeSnippetExpression, spoon.reflect.declaration.CtModule, spoon.reflect.reference.CtIntersectionTypeReference, spoon.reflect.code.CtFieldAccess, spoon.reflect.reference.CtVariableReference, spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtFieldWrite, spoon.reflect.code.CtSynchronized, spoon.reflect.declaration.CtMethod, spoon.reflect.code.CtLocalVariable, spoon.reflect.declaration.CtEnum, spoon.reflect.code.CtIf, spoon.reflect.reference.CtWildcardReference, spoon.reflect.declaration.CtPackage, spoon.reflect.code.CtThrow, spoon.reflect.code.CtStatement, spoon.reflect.code.CtBreak, spoon.reflect.reference.CtExecutableReference, spoon.reflect.declaration.CtEnumValue, spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression, spoon.reflect.code.CtNewClass, spoon.reflect.reference.CtLocalVariableReference, spoon.reflect.code.CtLambda, spoon.reflect.declaration.CtConstructor, spoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtCodeSnippetStatement, spoon.reflect.declaration.CtVariable, spoon.reflect.declaration.CtModuleDirective, spoon.reflect.declaration.CtPackageExport, spoon.reflect.code.CtCase, spoon.reflect.code.CtConstructorCall, spoon.reflect.reference.CtUnboundVariableReference, spoon.reflect.declaration.ModifierKind, spoon.reflect.code.CtBodyHolder, spoon.reflect.declaration.CtProvidedService, spoon.reflect.code.CtFieldRead, spoon.reflect.code.CtTry, spoon.reflect.code.UnaryOperatorKind, spoon.reflect.code.CtLiteral, spoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtPackageReference, spoon.reflect.code.CtSuperAccess, spoon.reflect.code.CtStatementList, spoon.reflect.declaration.CtInterface, spoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtVariableWrite, spoon.reflect.code.CtFor, spoon.reflect.code.CtCatch, spoon.reflect.code.CtArrayAccess, spoon.reflect.code.BinaryOperatorKind, spoon.reflect.declaration.CtUsedService, spoon.reflect.code.CtConditional, spoon.reflect.code.CtArrayWrite, spoon.reflect.declaration.CtType, spoon.reflect.code.CtTypeAccess, spoon.reflect.code.CtContinue, spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtReference, spoon.reflect.declaration.ParentNotInitializedException, spoon.reflect.code.CtAssignment, spoon.reflect.code.CtAnnotationFieldAccess, spoon.reflect.reference.CtCatchVariableReference, spoon.reflect.declaration.CtModifiable, spoon.reflect.declaration.CtTypeInformation, spoon.reflect.code.CtLabelledFlowBreak, spoon.reflect.code.CtAbstractInvocation, spoon.reflect.code.CtVariableAccess, spoon.reflect.declaration.CtCodeSnippet, spoon.reflect.code.CtBlock, spoon.reflect.code.CtReturn, spoon.reflect.declaration.CtParameter, spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeMember, spoon.reflect.code.CtComment, spoon.reflect.code.CtCodeElement, spoon.reflect.code.CtCatchVariable, spoon.reflect.code.CtJavaDoc, spoon.reflect.declaration.CtAnnotatedElementType, spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtModuleReference, spoon.reflect.declaration.CtShadowable, spoon.reflect.code.CtLoop, spoon.reflect.code.CtVariableRead, spoon.reflect.code.CtForEach, spoon.reflect.code.CtInvocation, spoon.reflect.declaration.CtImportKind, spoon.reflect.declaration.CtAnonymousExecutable, spoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.code.CtDo, spoon.reflect.declaration.CtTypeParameter, spoon.reflect.code.CtRHSReceiver, spoon.reflect.reference.CtTypeReference, spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtCFlowBreak, spoon.reflect.code.CtWhile, spoon.reflect.code.CtArrayRead, spoon.reflect.declaration.CtClass, spoon.reflect.reference.CtFieldReference, spoon.reflect.declaration.CtAnnotationType]>
[ERROR]   MetamodelTest.testMetamodelWithoutSources:245 expected:<0> but was:<4>
[ERROR]   MetamodelTest.testRuntimeMetamodel:114 You might need to update api/Metamodel.java: Field CtJavaDoc#commentContent<java.lang.String>.derived hardcoded value = false but computed value is true
These Metamodel.Field instances are missing on Type CtJavaDoc: [javadocContent]
[ERROR]   CommentTest.testDocumentationContract:766->lambda$testDocumentationContract$0:769 CtJavadocDescription has no documentation
[ERROR] Errors: 
[ERROR]   CtGenerationTest.testGenerateCloneVisitor:138 » Spoon spoon.support.reflect.co...
[ERROR]   CtGenerationTest.testGenerateRoleHandler:187 » Spoon The element of class inte...
[ERROR]   CloneTest.testCloneListener:149->lambda$testCloneListener$0:152 » Spoon Printi...
[ERROR]   CtInheritanceScannerMethodsTest.testMethodsInInheritanceScanner:42 » NullPointer
[ERROR]   CtScannerTest.testScannerCallsAllProperties:119 » Spoon spoon.SpoonException: ...
[ERROR]   CtScannerTest.testScannerContract:81 » NullPointer
[ERROR]   CtVisitorTest.testMethodsInVisitor:42 » NullPointer
[ERROR]   APITest.testPrintNotAllSourcesInCommandLine:256 » Spoon spoon.SpoonException: ...
[ERROR]   APITest.testPrintNotAllSourcesWithFilter:223 » Spoon spoon.SpoonException: Pri...
[ERROR]   APITest.testPrintNotAllSourcesWithNames:242 » Spoon spoon.SpoonException: Prin...
[ERROR]   SpoonArchitectureEnforcerTest.metamodelPackageRule:212 NullPointer
[ERROR]   SpoonArchitectureEnforcerTest.testFactorySubFactory:125 » Spoon spoon.SpoonExc...
[ERROR]   CommentTest.testBlockComment:458->getSpoonFactory:81 » Spoon spoon.SpoonExcept...
[ERROR]   CommentTest.testCodeFactory:673->getSpoonFactory:81 » Spoon spoon.SpoonExcepti...
[ERROR]   CommentTest.testCombinedPackageInfoComment:99->getSpoonFactory:81 » Spoon spoo...
[ERROR]   CommentTest.testCommentsInComment1And2:830->getSpoonFactory:81 » Spoon spoon.S...
[ERROR]   CommentTest.testCommentsInResourcesWithWindowsEOL:861 » Spoon spoon.SpoonExcep...
[ERROR]   CommentTest.testCoreFactory:655->getSpoonFactory:81 » Spoon spoon.SpoonExcepti...
[ERROR]   CommentTest.testInLineComment:259->getSpoonFactory:81 » Spoon spoon.SpoonExcep...
[ERROR]   CommentTest.testInsertNewComment:621->getSpoonFactory:81 » Spoon spoon.SpoonEx...
[ERROR]   CommentTest.testJavaDocCommentOnMac:149 » Spoon spoon.SpoonException: Printing...
[ERROR]   CommentTest.testJavaDocCommentOnUnix:128->getSpoonFactory:81 » Spoon spoon.Spo...
[ERROR]   CommentTest.testJavaDocEmptyCommentAndTag:231->getSpoonFactory:81 » Spoon spoo...
[ERROR]   CommentTest.testJavadocShortAndLongComment:136->getSpoonFactory:81 » Spoon spo...
[ERROR]   CommentTest.testRemoveComment:249->getSpoonFactory:81 » Spoon spoon.SpoonExcep...
[ERROR]   CommentTest.testWildComments:901->getSpoonFactory:81 » Spoon spoon.SpoonExcept...
[ERROR]   CompilationTest.testPrecompile:274 » Spoon spoon.SpoonException: Printing of s...
[ERROR]   CtClassTest.testDefaultConstructorAreOk:204 » Spoon spoon.SpoonException: Prin...
[ERROR]   CtClassTest.testNoClasspathWithSuperClassOfAClassInAnInterface:123 » Spoon spo...
[ERROR]   CtClassTest.testParentOfTheEnclosingClassOfStaticClass:100 » Spoon spoon.Spoon...
[ERROR]   ExecutableRefTest.testSameTypeInConstructorCallBetweenItsObjectAndItsExecutable:84 » Spoon
[ERROR]   ImportScannerTest.testImportOnSpoon:73 » Spoon Printing of spoon.support.refle...
[ERROR]   ImportTest.testSortingOfImports:1144 » Spoon spoon.SpoonException: Printing of...
[ERROR]   ImportTest.testStaticMethodWithDifferentClassSameNameCollision:1119 » Spoon sp...
[ERROR]   ImportTest.testStaticMethodWithDifferentClassSameNameJava3NoCollision:1089 » Spoon
[ERROR]   ImportTest.testStaticMethodWithDifferentClassSameNameJava7NoCollision:1059 » Spoon
[ERROR]   OneCanCallSetterWithNullParameterizedTest.data:49 » IllegalArgument cannot ins...
[ERROR]   JavaDocTest.testJavaDocReprint:27 » Spoon spoon.SpoonException: Printing of sp...
[ERROR]   LiteralTest.testCharLiteralInNoClasspath:30 » Spoon spoon.SpoonException: Prin...
[ERROR]   MainTest.testMain_ModelPrintAndCompile:108 » Spoon spoon.SpoonException: Print...
[ERROR]   ParameterTest.testParameterInNoClasspath:25 » Spoon spoon.SpoonException: Prin...
[ERROR]   ContractOnSettersParametrizedTest.testContract:114->createCompatibleObject:99 IllegalArgument
[ERROR]   MethodsRefactoringTest.testCtParameterRemoveRefactoring:335 » Spoon Printing o...
[ERROR]   RefactoringTest.testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned:28 » Spoon
[ERROR]   RefactoringTest.testThisInConstructor:67 » Spoon spoon.SpoonException: Printin...
[ERROR]   RefactoringTest.testThisInConstructorAfterATransformation:87 » Spoon spoon.Spo...
[ERROR]   RefactoringTest.testTransformedInstanceofAfterATransformation:106 » Spoon spoo...
[ERROR]   ReplaceParametrizedTest.testContract:91 » IllegalArgument cannot instantiate s...
[ERROR]   ReplaceParametrizedTest.testContract:91 » IllegalArgument cannot instantiate s...
[ERROR]   ModelStreamerTest.testDefaultCompressionType:45->compareFactoryModels:77 » Spoon
[ERROR]   ModelStreamerTest.testGZipCompressionType:53->compareFactoryModels:77 » Spoon ...
[ERROR]   ModelStreamerTest.testNoneCompressionType:61->compareFactoryModels:77 » Spoon ...
[ERROR]   TemplateTest.testAnotherFieldAccessNameSubstitution:1105 » Spoon The element o...
[ERROR]   TemplateTest.testTemplateInheritance:142 » Spoon The element of class interfac...
[ERROR]   TryCatchTest.testCompileMultiTryCatchWithCustomExceptions:197 » Spoon spoon.Sp...
[INFO] 
[ERROR] Tests run: 1420, Failures: 10, Errors: 55, Skipped: 4
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 11:10 min
[INFO] Finished at: 2018-07-17T17:11:46+02:00
[INFO] Final Memory: 23M/514M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.21.0:test (default-test) on project spoon-core: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/INRIA/spoon/404936373/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
