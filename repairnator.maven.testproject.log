[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Calcite
[INFO] Calcite Linq4j
[INFO] Calcite Core
[INFO] Calcite Babel
[INFO] Calcite Cassandra
[INFO] Calcite Druid
[INFO] Calcite Elasticsearch
[INFO] Calcite Examples
[INFO] Calcite Example CSV
[INFO] Calcite Example Function
[INFO] Calcite File
[INFO] Calcite Geode
[INFO] Calcite MongoDB
[INFO] Calcite Pig
[INFO] Calcite Piglet
[INFO] Calcite Plus
[INFO] Calcite Server
[INFO] Calcite Spark
[INFO] Calcite Splunk
[INFO] Calcite Ubenchmark
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Calcite 1.18.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-checkstyle-plugin:3.0.0:check (validate) @ calcite ---
[INFO] 
[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (enforce-java) @ calcite ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (enforce-maven-version) @ calcite ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-resource (add-resource) @ calcite ---
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-test-resource (add-resource) @ calcite ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.5:process (process-resource-bundles) @ calcite ---
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-test-source (add-test-sources) @ calcite ---
[INFO] Test Source directory: /root/workspace/apache/calcite/432115269/target/generated-test-sources/javacc added.
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Calcite Linq4j 1.18.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-checkstyle-plugin:3.0.0:check (validate) @ calcite-linq4j ---
[INFO] 
[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (enforce-java) @ calcite-linq4j ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (enforce-maven-version) @ calcite-linq4j ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-resource (add-resource) @ calcite-linq4j ---
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-test-resource (add-resource) @ calcite-linq4j ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.5:process (process-resource-bundles) @ calcite-linq4j ---
[INFO] 
[INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ calcite-linq4j ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/apache/calcite/432115269/linq4j/src/main/resources
[INFO] Copying 2 resources to META-INF
[INFO] Copying 1 resource to META-INF
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ calcite-linq4j ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-test-source (add-test-sources) @ calcite-linq4j ---
[INFO] Test Source directory: /root/workspace/apache/calcite/432115269/linq4j/target/generated-test-sources/javacc added.
[INFO] 
[INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ calcite-linq4j ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/apache/calcite/432115269/linq4j/src/test/resources
[INFO] Copying 2 resources to META-INF
[INFO] Copying 1 resource to META-INF
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ calcite-linq4j ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.0:test (default-test) @ calcite-linq4j ---
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit47/2.22.0/surefire-junit47-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit47/2.22.0/surefire-junit47-2.22.0.pom (7 KB at 14.7 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.22.0/surefire-providers-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.22.0/surefire-providers-2.22.0.pom (3 KB at 65.7 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit48/2.22.0/common-junit48-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit48/2.22.0/common-junit48-2.22.0.pom (4 KB at 85.5 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit4/2.22.0/common-junit4-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit4/2.22.0/common-junit4-2.22.0.pom (3 KB at 54.8 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit3/2.22.0/common-junit3-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit3/2.22.0/common-junit3-2.22.0.pom (2 KB at 41.7 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/2.22.0/common-java5-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/2.22.0/common-java5-2.22.0.pom (3 KB at 72.6 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/0.9/maven-shared-utils-0.9.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/0.9/maven-shared-utils-0.9.pom (7 KB at 164.3 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-grouper/2.22.0/surefire-grouper-2.22.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-grouper/2.22.0/surefire-grouper-2.22.0.pom (3 KB at 73.5 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit3/2.22.0/common-junit3-2.22.0.jar
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/2.22.0/common-java5-2.22.0.jar
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit4/2.22.0/common-junit4-2.22.0.jar
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit47/2.22.0/surefire-junit47-2.22.0.jar
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit48/2.22.0/common-junit48-2.22.0.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit3/2.22.0/common-junit3-2.22.0.jar (12 KB at 210.6 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/0.9/maven-shared-utils-0.9.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit48/2.22.0/common-junit48-2.22.0.jar (22 KB at 243.5 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-grouper/2.22.0/surefire-grouper-2.22.0.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-java5/2.22.0/common-java5-2.22.0.jar (50 KB at 476.1 KB/sec)
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/common-junit4/2.22.0/common-junit4-2.22.0.jar (28 KB at 249.6 KB/sec)
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit47/2.22.0/surefire-junit47-2.22.0.jar (157 KB at 1150.7 KB/sec)
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/shared/maven-shared-utils/0.9/maven-shared-utils-0.9.jar (168 KB at 1842.3 KB/sec)
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-grouper/2.22.0/surefire-grouper-2.22.0.jar (40 KB at 813.4 KB/sec)
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running org.apache.calcite.linq4j.test.PrimitiveTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.1 s - in org.apache.calcite.linq4j.test.PrimitiveTest
[INFO] Running org.apache.calcite.linq4j.test.ExpressionTest
[INFO] Tests run: 32, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.123 s - in org.apache.calcite.linq4j.test.ExpressionTest
[INFO] Running org.apache.calcite.linq4j.test.OptimizerTest
[INFO] Tests run: 80, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.047 s - in org.apache.calcite.linq4j.test.OptimizerTest
[INFO] Running org.apache.calcite.linq4j.test.Linq4jTest
[INFO] Tests run: 115, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.135 s - in org.apache.calcite.linq4j.test.Linq4jTest
[INFO] Running org.apache.calcite.linq4j.test.LookupImplTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.015 s - in org.apache.calcite.linq4j.test.LookupImplTest
[INFO] Running org.apache.calcite.linq4j.test.InlinerTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in org.apache.calcite.linq4j.test.InlinerTest
[INFO] Running org.apache.calcite.linq4j.test.DeterministicTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.024 s - in org.apache.calcite.linq4j.test.DeterministicTest
[INFO] Running org.apache.calcite.linq4j.test.BlockBuilderTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in org.apache.calcite.linq4j.test.BlockBuilderTest
[INFO] Running org.apache.calcite.linq4j.tree.TypeTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in org.apache.calcite.linq4j.tree.TypeTest
[INFO] Running org.apache.calcite.linq4j.test.CorrelateJoinTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in org.apache.calcite.linq4j.test.CorrelateJoinTest
[INFO] Running org.apache.calcite.linq4j.function.FunctionTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 s - in org.apache.calcite.linq4j.function.FunctionTest
[INFO] 
[INFO] Results:
[INFO] 
[INFO] Tests run: 277, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Calcite Core 1.18.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- drill-fmpp-maven-plugin:1.14.0:generate (generate-fmpp-sources) @ calcite-core ---
[INFO] Freemarker generation:
 scope: compile,
 config: /root/workspace/apache/calcite/432115269/core/src/main/codegen/config.fmpp,
 templates: /root/workspace/apache/calcite/432115269/core/src/main/codegen/templates
[INFO] Adding maven data loader
.
[INFO] Freemarker generation took 571ms
[INFO] Incremental output update took 0ms
[INFO] new: 0
[INFO] changed: 0
[INFO] unchanged: 1
[INFO] 
[INFO] --- drill-fmpp-maven-plugin:1.14.0:generate (generate-fmpp-test-sources) @ calcite-core ---
[INFO] Freemarker generation:
 scope: test,
 config: /root/workspace/apache/calcite/432115269/core/src/test/codegen/config.fmpp,
 templates: /root/workspace/apache/calcite/432115269/core/src/main/codegen/templates
[INFO] Adding maven data loader
.
[INFO] Freemarker generation took 88ms
[INFO] Incremental output update took 0ms
[INFO] new: 0
[INFO] changed: 0
[INFO] unchanged: 1
[INFO] 
[INFO] --- maven-checkstyle-plugin:3.0.0:check (validate) @ calcite-core ---
[INFO] 
[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (enforce-java) @ calcite-core ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (enforce-maven-version) @ calcite-core ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- javacc-maven-plugin:2.4:javacc (javacc) @ calcite-core ---
[INFO] Skipping - all grammars up to date
[INFO] 
[INFO] --- hydromatic-resource-maven-plugin:0.6:generate-sources (default) @ calcite-core ---
[INFO] /root/workspace/apache/calcite/432115269/core/target/generated-sources/resgen/org/apache/calcite/runtime/Resources.java is up to date
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-resource (add-resource) @ calcite-core ---
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-test-resource (add-resource) @ calcite-core ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.5:process (process-resource-bundles) @ calcite-core ---
[INFO] 
[INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ calcite-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] Copying 4 resources to codegen
[INFO] Copying 1 resource
[INFO] Copying 2 resources to META-INF
[INFO] Copying 1 resource to META-INF
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ calcite-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- build-helper-maven-plugin:3.0.0:add-test-source (add-test-sources) @ calcite-core ---
[INFO] Test Source directory: /root/workspace/apache/calcite/432115269/core/target/generated-test-sources/javacc added.
[INFO] 
[INFO] --- javacc-maven-plugin:2.4:javacc (javacc-test) @ calcite-core ---
[INFO] Skipping - all grammars up to date
[INFO] 
[INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ calcite-core ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 27 resources
[INFO] Copying 2 resources to META-INF
[INFO] Copying 1 resource to META-INF
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ calcite-core ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.22.0:test (default-test) @ calcite-core ---
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running org.apache.calcite.util.graph.DirectedGraphTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.05 s - in org.apache.calcite.util.graph.DirectedGraphTest
[INFO] Running org.apache.calcite.util.BitSetsTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.119 s - in org.apache.calcite.util.BitSetsTest
2018-09-23 14:16:15,525 [pool-1-thread-7] INFO  - open start - state modified
2018-09-23 14:16:15,561 [pool-1-thread-7] INFO  - Checkpoint start
2018-09-23 14:16:15,561 [pool-1-thread-7] INFO  - Checkpoint end - txts: 25
[INFO] Running org.apache.calcite.util.ReflectVisitorTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 s - in org.apache.calcite.util.ReflectVisitorTest
[INFO] Running org.apache.calcite.adapter.clone.ArrayTableTest
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.158 s - in org.apache.calcite.adapter.clone.ArrayTableTest
[INFO] Running org.apache.calcite.plan.RelOptUtilTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in org.apache.calcite.plan.RelOptUtilTest
[INFO] Running org.apache.calcite.rel.RelCollationTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in org.apache.calcite.rel.RelCollationTest
[INFO] Running org.apache.calcite.util.ImmutableBitSetTest
[INFO] Tests run: 26, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.418 s - in org.apache.calcite.util.ImmutableBitSetTest
[INFO] Running org.apache.calcite.util.SourceTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.044 s - in org.apache.calcite.util.SourceTest
[INFO] Running org.apache.calcite.util.PrecedenceClimbingParserTest
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 s - in org.apache.calcite.util.PrecedenceClimbingParserTest
[INFO] Running org.apache.calcite.test.FilteratorTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in org.apache.calcite.test.FilteratorTest
[INFO] Running org.apache.calcite.util.PermutationTestCase
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in org.apache.calcite.util.PermutationTestCase
[INFO] Running org.apache.calcite.util.mapping.MappingTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.02 s - in org.apache.calcite.util.mapping.MappingTest
[INFO] Running org.apache.calcite.sql.test.SqlTypeNameTest
[INFO] Tests run: 36, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in org.apache.calcite.sql.test.SqlTypeNameTest
[INFO] Running org.apache.calcite.test.CalciteResourceTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in org.apache.calcite.test.CalciteResourceTest
[INFO] Running org.apache.calcite.test.SqlFunctionsTest
[INFO] Tests run: 34, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.021 s - in org.apache.calcite.test.SqlFunctionsTest
[INFO] Running org.apache.calcite.test.ModelTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.616 s - in org.apache.calcite.test.ModelTest
[INFO] Running org.apache.calcite.test.SqlValidatorFeatureTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.133 s - in org.apache.calcite.test.SqlValidatorFeatureTest
[INFO] Running org.apache.calcite.plan.volcano.VolcanoPlannerTraitTest
[WARNING] Tests run: 3, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.22 s - in org.apache.calcite.plan.volcano.VolcanoPlannerTraitTest
[INFO] Running org.apache.calcite.util.TestUtilTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in org.apache.calcite.util.TestUtilTest
[INFO] Running org.apache.calcite.test.InterpreterTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.308 s - in org.apache.calcite.test.InterpreterTest
[INFO] Running org.apache.calcite.plan.RelWriterTest
rel#508:LogicalAggregate#508
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.024 s - in org.apache.calcite.plan.RelWriterTest
[INFO] Running org.apache.calcite.plan.volcano.TraitPropagationTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.14 s - in org.apache.calcite.plan.volcano.TraitPropagationTest
[INFO] Running org.apache.calcite.test.SqlOperatorBindingTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in org.apache.calcite.test.SqlOperatorBindingTest
[INFO] Running org.apache.calcite.test.RexTransformerTest
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.026 s - in org.apache.calcite.test.RexTransformerTest
[INFO] Running org.apache.calcite.runtime.BinarySearchTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in org.apache.calcite.runtime.BinarySearchTest
[INFO] Running org.apache.calcite.runtime.EnumerablesTest
[INFO] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 s - in org.apache.calcite.runtime.EnumerablesTest
[INFO] Running org.apache.calcite.test.RexProgramTest
[WARNING] Tests run: 44, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.333 s - in org.apache.calcite.test.RexProgramTest
[INFO] Running org.apache.calcite.rel.RelDistributionTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in org.apache.calcite.rel.RelDistributionTest
[INFO] Running org.apache.calcite.plan.RelOptPlanReaderTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in org.apache.calcite.plan.RelOptPlanReaderTest
[INFO] Running org.apache.calcite.test.InduceGroupingTypeTest
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in org.apache.calcite.test.InduceGroupingTypeTest
[INFO] Running org.apache.calcite.rex.RexBuilderTest
[INFO] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 s - in org.apache.calcite.rex.RexBuilderTest
[INFO] Running org.apache.calcite.test.ExceptionMessageTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.189 s - in org.apache.calcite.test.ExceptionMessageTest
[INFO] Running org.apache.calcite.sql.type.SqlTypeFactoryTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 s - in org.apache.calcite.sql.type.SqlTypeFactoryTest
[INFO] Running org.apache.calcite.sql.type.SqlTypeUtilTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in org.apache.calcite.sql.type.SqlTypeUtilTest
[INFO] Running org.apache.calcite.sql.validate.SqlValidatorUtilTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in org.apache.calcite.sql.validate.SqlValidatorUtilTest
[INFO] Running org.apache.calcite.sql.parser.SqlParserTest
[WARNING] Tests run: 315, Failures: 0, Errors: 0, Skipped: 4, Time elapsed: 0.7 s - in org.apache.calcite.sql.parser.SqlParserTest
[INFO] Running org.apache.calcite.test.HepPlannerTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.371 s - in org.apache.calcite.test.HepPlannerTest
[INFO] Running org.apache.calcite.sql.SqlSetOptionOperatorTest
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in org.apache.calcite.sql.SqlSetOptionOperatorTest
[INFO] Running org.apache.calcite.sql.test.SqlPrettyWriterTest
[WARNING] Tests run: 21, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.05 s - in org.apache.calcite.sql.test.SqlPrettyWriterTest
[INFO] Running org.apache.calcite.util.UtilTest
[INFO] Tests run: 69, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.23 s - in org.apache.calcite.util.UtilTest
[INFO] Running org.apache.calcite.test.SqlValidatorDynamicTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.023 s - in org.apache.calcite.test.SqlValidatorDynamicTest
[INFO] Running org.apache.calcite.test.SqlValidatorMatchTest
[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.021 s - in org.apache.calcite.test.SqlValidatorMatchTest
[INFO] Running org.apache.calcite.sql.test.SqlAdvisorTest
[WARNING] Tests run: 37, Failures: 0, Errors: 0, Skipped: 3, Time elapsed: 0.25 s - in org.apache.calcite.sql.test.SqlAdvisorTest
[INFO] Running org.apache.calcite.rel.rules.DateRangeRulesTest
[INFO] Tests run: 27, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.09 s - in org.apache.calcite.rel.rules.DateRangeRulesTest
[INFO] Running org.apache.calcite.test.SqlValidatorTest
[WARNING] Tests run: 385, Failures: 0, Errors: 0, Skipped: 5, Time elapsed: 2.321 s - in org.apache.calcite.test.SqlValidatorTest
[INFO] Running org.apache.calcite.test.RelOptRulesTest
[WARNING] Tests run: 305, Failures: 0, Errors: 0, Skipped: 8, Time elapsed: 9.454 s - in org.apache.calcite.test.RelOptRulesTest
[INFO] Running org.apache.calcite.test.SqlLimitsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 s - in org.apache.calcite.test.SqlLimitsTest
[INFO] Running org.apache.calcite.test.JdbcFrontLinqBackTest
[WARNING] Tests run: 19, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.569 s - in org.apache.calcite.test.JdbcFrontLinqBackTest
[INFO] Running org.apache.calcite.test.JdbcFrontJdbcBackTest
2018-09-23 14:16:33,054 [pool-1-thread-4] INFO  - open start - state modified
2018-09-23 14:16:44,870 [pool-1-thread-4] INFO  - Checkpoint start
2018-09-23 14:16:44,870 [pool-1-thread-4] INFO  - Checkpoint end - txts: 279
[WARNING] Tests run: 6, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 12.237 s - in org.apache.calcite.test.JdbcFrontJdbcBackTest
[INFO] Running org.apache.calcite.rex.RexExecutorTest
[INFO] Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.067 s - in org.apache.calcite.rex.RexExecutorTest
[INFO] Running org.apache.calcite.test.SqlToRelConverterTest
[WARNING] Tests run: 342, Failures: 0, Errors: 0, Skipped: 4, Time elapsed: 13.209 s - in org.apache.calcite.test.SqlToRelConverterTest
[INFO] Running org.apache.calcite.rel.rel2sql.RelToSqlConverterTest
[INFO] Tests run: 142, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.478 s - in org.apache.calcite.rel.rel2sql.RelToSqlConverterTest
[INFO] Running org.apache.calcite.tools.FrameworksTest
[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.089 s - in org.apache.calcite.tools.FrameworksTest
[INFO] Running org.apache.calcite.sql.test.SqlOperatorTest
[WARNING] Tests run: 227, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 1.55 s - in org.apache.calcite.sql.test.SqlOperatorTest
[INFO] Running org.apache.calcite.prepare.LookupOperatorOverloadsTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 s - in org.apache.calcite.prepare.LookupOperatorOverloadsTest
[INFO] Running org.apache.calcite.sql.validate.LexCaseSensitiveTest
[INFO] Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.081 s - in org.apache.calcite.sql.validate.LexCaseSensitiveTest
[INFO] Running org.apache.calcite.plan.volcano.CollationConversionTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.066 s - in org.apache.calcite.plan.volcano.CollationConversionTest
[INFO] Running org.apache.calcite.plan.volcano.TraitConversionTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.07 s - in org.apache.calcite.plan.volcano.TraitConversionTest
[INFO] Running org.apache.calcite.test.MutableRelTest
[INFO] Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 s - in org.apache.calcite.test.MutableRelTest
[INFO] Running org.apache.calcite.test.UdtTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.015 s - in org.apache.calcite.test.UdtTest
[INFO] Running org.apache.calcite.test.TableFunctionTest
[WARNING] Tests run: 18, Failures: 0, Errors: 0, Skipped: 3, Time elapsed: 0.206 s - in org.apache.calcite.test.TableFunctionTest
[INFO] Running org.apache.calcite.test.UdfTest
[WARNING] Tests run: 25, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.974 s - in org.apache.calcite.test.UdfTest
[INFO] Running org.apache.calcite.tools.PlannerTest
[WARNING] Tests run: 39, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 2.841 s - in org.apache.calcite.tools.PlannerTest
[INFO] Running org.apache.calcite.test.RelBuilderTest
[WARNING] Tests run: 98, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 1.155 s - in org.apache.calcite.test.RelBuilderTest
[INFO] Running org.apache.calcite.test.PigRelBuilderTest
[INFO] Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.075 s - in org.apache.calcite.test.PigRelBuilderTest
[INFO] Running org.apache.calcite.util.ChunkListTest
[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.47 s - in org.apache.calcite.util.ChunkListTest
[INFO] Running org.apache.calcite.test.RexImplicationCheckerTest
2018-09-23 14:16:53,647 [pool-1-thread-1] WARN  - BOOLEAN for value of class class java.lang.Boolean is being handled in default way
2018-09-23 14:16:53,650 [pool-1-thread-7] WARN  - $11 is not handled for null for checking implication
2018-09-23 14:16:53,651 [pool-1-thread-7] WARN  - $11 is not handled for null for checking implication
2018-09-23 14:16:53,657 [pool-1-thread-7] WARN  - $11 is not handled for null for checking implication
2018-09-23 14:16:53,657 [pool-1-thread-7] WARN  - $11 is not handled for null for checking implication
2018-09-23 14:16:53,658 [pool-1-thread-7] WARN  - $11 is not handled for null for checking implication
[INFO] Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.104 s - in org.apache.calcite.test.RexImplicationCheckerTest
[INFO] Running org.apache.calcite.test.LinqFrontJdbcBackTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.06 s - in org.apache.calcite.test.LinqFrontJdbcBackTest
[INFO] Running org.apache.calcite.test.JdbcFrontJdbcBackLinqMiddleTest
[WARNING] Tests run: 14, Failures: 0, Errors: 0, Skipped: 4, Time elapsed: 0.708 s - in org.apache.calcite.test.JdbcFrontJdbcBackLinqMiddleTest
[INFO] Running org.apache.calcite.test.fuzzer.RexProgramFuzzyTest
2018-09-23 14:17:26,724 [pool-1-thread-4] INFO  - Using seed 44 for rex fuzzing
2018-09-23 14:17:26,760 [pool-1-thread-4] INFO  - Rex fuzzing results: number of cases tested=18, failed cases=0, duplicate failures=0, fuzz rate=514 per second
2018-09-23 14:17:26,845 [pool-1-thread-4] INFO  - Rex fuzzing results: number of cases tested=51, failed cases=1, duplicate failures=0, fuzz rate=607 per second
2018-09-23 14:17:26,852 [pool-1-thread-4] INFO  - Randomized test identified a potential defect. Feel free to fix that issue
java.lang.AssertionError: COALESCE(COALESCE(-(CASE(IS NOT TRUE(false), -(+(null)), ?0.notNullBool1, null, -(?0.notNullInt0))), COALESCE(+(COALESCE(COALESCE(?0.notNullInt1, null, ?0.int1), ?0.notNullInt0, CASE(false, CAST(100500):INTEGER, null)), ?0.notNullInt1), +(-(+(-1, null)), *(COALESCE(null, ?0.int1, ?0.int0), CASE(=(0, ?0.notNullInt1), ?0.notNullInt0, CAST(100500):INTEGER))))), +(CASE(=(COALESCE(*(CAST(100500):INTEGER, null), COALESCE(?0.notNullInt0, CAST(100500):INTEGER, ?0.notNullInt0, null), -(CAST(1):INTEGER, ?0.int1), -(1)), -(+(-1230213298))), CASE(?0.notNullBool1, CASE(true, CASE(true, CAST(0):INTEGER, null), COALESCE(?0.int0, 1)), OR(?0.bool1, true, true), +(-(CAST(100500):INTEGER)), +(?0.int0, null)), =(COALESCE(*(CAST(100500):INTEGER, null), COALESCE(?0.notNullInt0, CAST(100500):INTEGER, ?0.notNullInt0, null), -(CAST(1):INTEGER, ?0.int1), -(1)), ?0.int1), ?0.notNullInt0, +(1))), CASE(COALESCE(CASE(false, <>(-1, ?0.int0), IS NOT UNKNOWN(null)), AND(true, CASE(=(?0.bool0, ?0.bool0), ?0.notNullBool0, true), IS NOT UNKNOWN(?0.bool0), COALESCE(true, false, false, ?0.notNullBool0))), COALESCE(1, COALESCE(+(-(null), -(0, null)), CASE(=(true, ?0.notNullBool0), CAST(-1):INTEGER, =(true, false), *(?0.int1, -1), -(null)), CASE(false, COALESCE(null, CAST(-1):INTEGER, null, ?0.int1), ?0.bool1, COALESCE(?0.int0, CAST(100500):INTEGER, ?0.notNullInt1), COALESCE(CAST(100500):INTEGER, null, CAST(100500):INTEGER)), *(COALESCE(null, null), COALESCE(null, CAST(0):INTEGER))), -(CASE(=(?0.notNullBool1, ?0.notNullBool1), CASE(false, null, ?0.int0), =(?0.notNullBool1, ?0.bool1), null, =(?0.notNullBool1, true), -(CAST(-1797052751):INTEGER), COALESCE(-1, ?0.int1))), COALESCE(+(CASE(true, null, ?0.notNullInt1)), null, 1)), CASE(COALESCE(false, ?0.bool0), true, AND(?0.notNullBool1, false, false), >=(<=(true, true), OR(true, true, true, true)), >(?0.notNullBool1, ?0.notNullBool0), =(NOT(true), IS FALSE(?0.notNullBool1)), IS TRUE(IS UNKNOWN(?0.bool0))), +(+(?0.notNullInt0)), COALESCE(COALESCE(CASE(=(null, CAST(-1):INTEGER), null, COALESCE(0, null)), *(-(null), CASE(?0.bool0, null, ?0.int0)), CASE(true, ?0.notNullInt1, true, +(null, 729302871), ?0.notNullBool1, +(?0.int1, null), CAST(0):INTEGER), +(*(null, ?0.int1), COALESCE(null, 1, ?0.notNullInt1, ?0.int1))), CASE(IS NOT TRUE(?0.bool1), null, AND(?0.notNullBool1, ?0.bool0, true, false), +(-(?0.notNullInt1, null)), COALESCE(CASE(=(true, ?0.notNullBool1), ?0.int0, CAST(1432957831):INTEGER), +(-790886151))), CASE(<(null, CAST(0):INTEGER), +(CASE(?0.notNullBool0, null, -1)), null), COALESCE(COALESCE(null, +(null), CASE(?0.notNullBool0, ?0.int1, ?0.notNullInt0), -(?0.notNullInt0, ?0.notNullInt1)), COALESCE(COALESCE(?0.notNullInt0, ?0.notNullInt1, ?0.notNullInt1, CAST(100500):INTEGER), null, +(null), CASE(?0.notNullBool1, 0, ?0.notNullInt0)), null))))
coalesce(coalesce(unaryMinus(case_(isNotTrue(falseLiteral), unaryMinus(unaryPlus(nullInt)), vBoolNotNull(1), nullInt, unaryMinus(vIntNotNull(0)))), coalesce(plus(coalesce(coalesce(vIntNotNull(1), nullInt, vInt(1)), vIntNotNull(0), case_(falseLiteral, rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(100500)), nullInt)), vIntNotNull(1)), plus(unaryMinus(plus(literal(-1), nullInt)), rexBuilder.makeCall(SqlStdOperatorTable.*, coalesce(nullInt, vInt(1), vInt(0)), case_(eq(literal(0), vIntNotNull(1)), vIntNotNull(0), rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(100500))))))), unaryPlus(case_(eq(coalesce(rexBuilder.makeCall(SqlStdOperatorTable.*, rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(100500)), nullInt), coalesce(vIntNotNull(0), rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(100500)), vIntNotNull(0), nullInt), sub(rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(1)), vInt(1)), unaryMinus(literal(1))), unaryMinus(unaryPlus(literal(-1230213298)))), case_(vBoolNotNull(1), case_(trueLiteral, case_(trueLiteral, rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(0)), nullInt), coalesce(vInt(0), literal(1))), or(vBool(1), trueLiteral, trueLiteral), unaryPlus(unaryMinus(rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(100500)))), plus(vInt(0), nullInt)), eq(coalesce(rexBuilder.makeCall(SqlStdOperatorTable.*, rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(100500)), nullInt), coalesce(vIntNotNull(0), rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(100500)), vIntNotNull(0), nullInt), sub(rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(1)), vInt(1)), unaryMinus(literal(1))), vInt(1)), vIntNotNull(0), unaryPlus(literal(1)))), case_(coalesce(case_(falseLiteral, ne(literal(-1), vInt(0)), rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_UNKNOWN, nullInt)), and(trueLiteral, case_(eq(vBool(0), vBool(0)), vBoolNotNull(0), trueLiteral), rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_UNKNOWN, vBool(0)), coalesce(trueLiteral, falseLiteral, falseLiteral, vBoolNotNull(0)))), coalesce(literal(1), coalesce(plus(unaryMinus(nullInt), sub(literal(0), nullInt)), case_(eq(trueLiteral, vBoolNotNull(0)), rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(-1)), eq(trueLiteral, falseLiteral), rexBuilder.makeCall(SqlStdOperatorTable.*, vInt(1), literal(-1)), unaryMinus(nullInt)), case_(falseLiteral, coalesce(nullInt, rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(-1)), nullInt, vInt(1)), vBool(1), coalesce(vInt(0), rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(100500)), vIntNotNull(1)), coalesce(rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(100500)), nullInt, rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(100500)))), rexBuilder.makeCall(SqlStdOperatorTable.*, coalesce(nullInt, nullInt), coalesce(nullInt, rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(0))))), unaryMinus(case_(eq(vBoolNotNull(1), vBoolNotNull(1)), case_(falseLiteral, nullInt, vInt(0)), eq(vBoolNotNull(1), vBool(1)), nullInt, eq(vBoolNotNull(1), trueLiteral), unaryMinus(rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(-1797052751))), coalesce(literal(-1), vInt(1)))), coalesce(unaryPlus(case_(trueLiteral, nullInt, vIntNotNull(1))), nullInt, literal(1))), case_(coalesce(falseLiteral, vBool(0)), trueLiteral, and(vBoolNotNull(1), falseLiteral, falseLiteral), ge(le(trueLiteral, trueLiteral), or(trueLiteral, trueLiteral, trueLiteral, trueLiteral)), gt(vBoolNotNull(1), vBoolNotNull(0)), eq(not(trueLiteral), isFalse(vBoolNotNull(1))), isTrue(isUnknown(vBool(0)))), unaryPlus(unaryPlus(vIntNotNull(0))), coalesce(coalesce(case_(eq(nullInt, rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(-1))), nullInt, coalesce(literal(0), nullInt)), rexBuilder.makeCall(SqlStdOperatorTable.*, unaryMinus(nullInt), case_(vBool(0), nullInt, vInt(0))), case_(trueLiteral, vIntNotNull(1), trueLiteral, plus(nullInt, literal(729302871)), vBoolNotNull(1), plus(vInt(1), nullInt), rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(0))), plus(rexBuilder.makeCall(SqlStdOperatorTable.*, nullInt, vInt(1)), coalesce(nullInt, literal(1), vIntNotNull(1), vInt(1)))), case_(isNotTrue(vBool(1)), nullInt, and(vBoolNotNull(1), vBool(0), trueLiteral, falseLiteral), unaryPlus(sub(vIntNotNull(1), nullInt)), coalesce(case_(eq(trueLiteral, vBoolNotNull(1)), vInt(0), rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(1432957831))), unaryPlus(literal(-790886151)))), case_(lt(nullInt, rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(0))), unaryPlus(case_(vBoolNotNull(0), nullInt, literal(-1))), nullInt), coalesce(coalesce(nullInt, unaryPlus(nullInt), case_(vBoolNotNull(0), vInt(1), vIntNotNull(0)), sub(vIntNotNull(0), vIntNotNull(1))), coalesce(coalesce(vIntNotNull(0), vIntNotNull(1), vIntNotNull(1), rexBuilder.makeCall(SqlStdOperatorTable.CAST, literal(100500))), nullInt, unaryPlus(nullInt), case_(vBoolNotNull(1), literal(0), vIntNotNull(0))), nullInt)))) had non-nullable type INTEGER, and it was optimized to -(CASE(IS NOT TRUE(false), -(+(null)), ?0.notNullBool1, null, -(?0.notNullInt0)))
unaryMinus(case_(isNotTrue(falseLiteral), unaryMinus(unaryPlus(nullInt)), vBoolNotNull(1), nullInt, unaryMinus(vIntNotNull(0)))) that has nullable type INTEGER, unknownAsFalse 
	at org.junit.Assert.fail(Assert.java:88)
	at org.apache.calcite.test.fuzzer.RexProgramFuzzyTest.checkTrueFalse(RexProgramFuzzyTest.java:248)
	at org.apache.calcite.test.fuzzer.RexProgramFuzzyTest.checkTrueFalse(RexProgramFuzzyTest.java:163)
	at org.apache.calcite.test.fuzzer.RexProgramFuzzyTest.generateRexAndCheckTrueFalse(RexProgramFuzzyTest.java:382)
	Suppressed: org.apache.calcite.test.fuzzer.RexProgramFuzzyTest$1: seed 2008313044053126987
[WARNING] Tests run: 4, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.13 s - in org.apache.calcite.test.fuzzer.RexProgramFuzzyTest
[INFO] Running org.apache.calcite.test.CalciteSqlOperatorTest
[WARNING] Tests run: 227, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 16.51 s - in org.apache.calcite.test.CalciteSqlOperatorTest
[INFO] Running org.apache.calcite.profile.ProfilerTest
[WARNING] Tests run: 10, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.534 s - in org.apache.calcite.profile.ProfilerTest
[INFO] Running org.apache.calcite.test.ReflectiveSchemaTest
[WARNING] Tests run: 31, Failures: 0, Errors: 0, Skipped: 5, Time elapsed: 10.733 s - in org.apache.calcite.test.ReflectiveSchemaTest
[INFO] Running org.apache.calcite.test.SqlAdvisorJdbcTest
[INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.1 s - in org.apache.calcite.test.SqlAdvisorJdbcTest
2018-09-23 14:18:14,234 [pool-1-thread-2] INFO  - Logging initialized @120884ms
2018-09-23 14:18:14,349 [pool-1-thread-2] INFO  - jetty-9.2.19.v20160908
2018-09-23 14:18:14,427 [pool-1-thread-2] INFO  - Started ServerConnector@4e0df6a0{HTTP/1.1}{0.0.0.0:34082}
2018-09-23 14:18:14,428 [pool-1-thread-2] INFO  - Started @121078ms
2018-09-23 14:18:14,428 [pool-1-thread-2] INFO  - Service listening on port 34082.
2018-09-23 14:18:15,429 [pool-1-thread-2] INFO  - Service terminating.
2018-09-23 14:18:15,435 [pool-1-thread-2] INFO  - Stopped ServerConnector@4e0df6a0{HTTP/1.1}{0.0.0.0:0}
[INFO] Running org.apache.calcite.jdbc.CalciteRemoteDriverTest
[INFO] Tests run: 28, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.996 s - in org.apache.calcite.jdbc.CalciteRemoteDriverTest
[INFO] Running org.apache.calcite.test.TableInRootSchemaTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.016 s - in org.apache.calcite.test.TableInRootSchemaTest
[INFO] Running org.apache.calcite.test.RelMdColumnOriginsTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.034 s - in org.apache.calcite.test.RelMdColumnOriginsTest
[INFO] Running org.apache.calcite.test.MultiJdbcSchemaJoinTest
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.316 s - in org.apache.calcite.test.MultiJdbcSchemaJoinTest
[INFO] Running org.apache.calcite.test.SqlLineTest
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.067 s - in org.apache.calcite.test.SqlLineTest
[INFO] Running org.apache.calcite.test.CollectionTypeTest
[INFO] Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.1 s - in org.apache.calcite.test.CollectionTypeTest
[INFO] Running org.apache.calcite.test.SqlToRelConverterExtendedTest
[WARNING] Tests run: 342, Failures: 0, Errors: 0, Skipped: 4, Time elapsed: 10.128 s - in org.apache.calcite.test.SqlToRelConverterExtendedTest
[INFO] Running org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest
[WARNING] Tests run: 319, Failures: 0, Errors: 0, Skipped: 6, Time elapsed: 0.632 s - in org.apache.calcite.sql.parser.parserextensiontesting.ExtensionSqlParserTest
[INFO] Running org.apache.calcite.test.JdbcAdapterTest
[ERROR] Tests run: 34, Failures: 6, Errors: 0, Skipped: 0, Time elapsed: 1.942 s <<< FAILURE! - in org.apache.calcite.test.JdbcAdapterTest
[ERROR] testMixedJoinPlan(org.apache.calcite.test.JdbcAdapterTest)  Time elapsed: 0.04 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$2], ENAME=[$3], EMPNO0=[$2], ENAME0=[$3])\n    JdbcJoin(condition=[AND(=($4, $0), >($5, $1))], joinType=[inner])\n      JdbcProject(EMPNO=[$0], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$0], ENAME=[$1], EMPNO0=[$0], ENAME0=[$1])\n    JdbcJoin(condition=[AND(=($2, $4), >($3, $5))], joinType=[inner])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcProject(EMPNO=[$0], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n\n"
	at org.apache.calcite.test.JdbcAdapterTest.testMixedJoinPlan(JdbcAdapterTest.java:197)

[ERROR] testNonEquiJoinPlan(org.apache.calcite.test.JdbcAdapterTest)  Time elapsed: 0.04 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$3], ENAME=[$4], GRADE=[$0])\n    JdbcJoin(condition=[AND(>($5, $1), <($5, $2))], joinType=[inner])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$0], ENAME=[$1], GRADE=[$3])\n    JdbcJoin(condition=[AND(>($2, $4), <($2, $5))], joinType=[inner])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n\n"
	at org.apache.calcite.test.JdbcAdapterTest.testNonEquiJoinPlan(JdbcAdapterTest.java:156)

[ERROR] testJoin3TablesPlan(org.apache.calcite.test.JdbcAdapterTest)  Time elapsed: 0.045 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$3], ENAME=[$4], DNAME=[$8], GRADE=[$0])\n    JdbcJoin(condition=[AND(>($5, $1), <($5, $2))], joinType=[inner])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n      JdbcJoin(condition=[=($3, $4)], joinType=[inner])\n        JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5], DEPTNO=[$7])\n          JdbcTableScan(table=[[SCOTT, EMP]])\n        JdbcProject(DEPTNO=[$0], DNAME=[$1])\n          JdbcTableScan(table=[[SCOTT, DEPT]])"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$0], ENAME=[$1], DNAME=[$5], GRADE=[$6])\n    JdbcJoin(condition=[AND(>($2, $7), <($2, $8))], joinType=[inner])\n      JdbcJoin(condition=[=($3, $4)], joinType=[inner])\n        JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5], DEPTNO=[$7])\n          JdbcTableScan(table=[[SCOTT, EMP]])\n        JdbcProject(DEPTNO=[$0], DNAME=[$1])\n          JdbcTableScan(table=[[SCOTT, DEPT]])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n\n"
	at org.apache.calcite.test.JdbcAdapterTest.testJoin3TablesPlan(JdbcAdapterTest.java:246)

[ERROR] testEquiJoinPlan(org.apache.calcite.test.JdbcAdapterTest)  Time elapsed: 0.039 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$2], ENAME=[$3], DEPTNO=[$4], DNAME=[$1])\n    JdbcJoin(condition=[=($4, $0)], joinType=[inner])\n      JdbcProject(DEPTNO=[$0], DNAME=[$1])\n        JdbcTableScan(table=[[SCOTT, DEPT]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$2], DNAME=[$4])\n    JdbcJoin(condition=[=($2, $3)], joinType=[inner])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcProject(DEPTNO=[$0], DNAME=[$1])\n        JdbcTableScan(table=[[SCOTT, DEPT]])\n\n"
	at org.apache.calcite.test.JdbcAdapterTest.testEquiJoinPlan(JdbcAdapterTest.java:130)

[ERROR] testNonEquiJoinReverseConditionPlan(org.apache.calcite.test.JdbcAdapterTest)  Time elapsed: 0.062 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$3], ENAME=[$4], GRADE=[$0])\n    JdbcJoin(condition=[AND(<=($1, $5), >=($2, $5))], joinType=[inner])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$0], ENAME=[$1], GRADE=[$3])\n    JdbcJoin(condition=[AND(<=($4, $2), >=($5, $2))], joinType=[inner])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n\n"
	at org.apache.calcite.test.JdbcAdapterTest.testNonEquiJoinReverseConditionPlan(JdbcAdapterTest.java:177)

[ERROR] testMixedJoinWithOrPlan(org.apache.calcite.test.JdbcAdapterTest)  Time elapsed: 0.018 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$3], ENAME=[$4], EMPNO0=[$3], ENAME0=[$4])\n    JdbcJoin(condition=[AND(=($5, $0), OR(>($7, $2), >($1, $6)))], joinType=[inner])\n      JdbcProject(EMPNO=[$0], HIREDATE=[$4], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], HIREDATE=[$4], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$0], ENAME=[$1], EMPNO0=[$0], ENAME0=[$1])\n    JdbcJoin(condition=[AND(=($2, $5), OR(>($4, $7), >($6, $3)))], joinType=[inner])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], HIREDATE=[$4], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcProject(EMPNO=[$0], HIREDATE=[$4], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n\n"
	at org.apache.calcite.test.JdbcAdapterTest.testMixedJoinWithOrPlan(JdbcAdapterTest.java:220)

[INFO] Running org.apache.calcite.test.JdbcTest
[ERROR] Tests run: 279, Failures: 8, Errors: 0, Skipped: 18, Time elapsed: 10.656 s <<< FAILURE! - in org.apache.calcite.test.JdbcTest
[ERROR] testOrderByFetch(org.apache.calcite.test.JdbcTest)  Time elapsed: 0.131 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=EnumerableCalc(expr#0..23=[{inputs}], store_id=[$t0], grocery_sqft=[$t16])\n  EnumerableLimit(fetch=[5])\n    EnumerableCalc(expr#0..23=[{inputs}], expr#24=[10], expr#25=[<($t0, $t24)], proj#0..23=[{exprs}], $condition=[$t25])\n      EnumerableTableScan(table=[[foodmart2, store]])\n"
     but: was "PLAN=EnumerableLimit(fetch=[5])\n  EnumerableCalc(expr#0..23=[{inputs}], expr#24=[10], expr#25=[<($t0, $t24)], store_id=[$t0], grocery_sqft=[$t16], $condition=[$t25])\n    EnumerableTableScan(table=[[foodmart2, store]])\n\n"
	at org.apache.calcite.test.JdbcTest.testOrderByFetch(JdbcTest.java:3015)

[ERROR] testInnerJoinValues(org.apache.calcite.test.JdbcTest)  Time elapsed: 0.021 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableCalc(expr#0..1=[{inputs}], EMPNO=[$t1], DESC=[$t0])\n  EnumerableAggregate(group=[{1, 2}])\n    EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t3):INTEGER NOT NULL], expr#5=[=($t4, $t0)], expr#6=['SameName'], expr#7=[=($t1, $t6)], expr#8=[AND($t5, $t7)], proj#0..3=[{exprs}], $condition=[$t8])\n      EnumerableJoin(condition=[true], joinType=[inner])\n        EnumerableValues(tuples=[[{ 10, 'SameName' }]])\n        EnumerableTableScan(table=[[SALES, EMPS]])\n"
     but: was "PLAN=EnumerableAggregate(group=[{0, 3}])\n  EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t3):INTEGER NOT NULL], expr#5=[=($t4, $t0)], EMPNO=[$t2], DEPTNO=[$t3], ID=[$t0], DESC=[$t1], $condition=[$t5])\n    EnumerableJoin(condition=[true], joinType=[inner])\n      EnumerableCalc(expr#0..1=[{inputs}], expr#2=['SameName'], expr#3=[=($t1, $t2)], proj#0..1=[{exprs}], $condition=[$t3])\n        EnumerableValues(tuples=[[{ 10, 'SameName' }]])\n      EnumerableTableScan(table=[[SALES, EMPS]])\n\n"
	at org.apache.calcite.test.JdbcTest.testInnerJoinValues(JdbcTest.java:2578)

[ERROR] testMergeJoin(org.apache.calcite.test.JdbcTest)  Time elapsed: 0.021 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableCalc(expr#0..3=[{inputs}], empid=[$t2], deptno=[$t0], name=[$t1])\n  EnumerableJoin(condition=[=($0, $3)], joinType=[inner])\n    EnumerableCalc(expr#0..3=[{inputs}], proj#0..1=[{exprs}])\n      EnumerableTableScan(table=[[hr, depts]])\n    EnumerableCalc(expr#0..4=[{inputs}], proj#0..1=[{exprs}])\n      EnumerableTableScan(table=[[hr, emps]])"
     but: was "PLAN=EnumerableCalc(expr#0..3=[{inputs}], empid=[$t0], deptno=[$t2], name=[$t3])\n  EnumerableJoin(condition=[=($1, $2)], joinType=[inner])\n    EnumerableCalc(expr#0..4=[{inputs}], proj#0..1=[{exprs}])\n      EnumerableTableScan(table=[[hr, emps]])\n    EnumerableCalc(expr#0..3=[{inputs}], proj#0..1=[{exprs}])\n      EnumerableTableScan(table=[[hr, depts]])\n\n"
	at org.apache.calcite.test.JdbcTest.testMergeJoin(JdbcTest.java:2595)

[ERROR] testIntersectMismatchedVarchar(org.apache.calcite.test.JdbcTest)  Time elapsed: 0.262 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: is "C=12\n"
     but: was "C=2\nC=2\nC=2\nC=2\nC=2\nC=2\nC=2\nC=2\nC=2\nC=2\nC=2\nC=2\n"
	at org.apache.calcite.test.JdbcTest.testIntersectMismatchedVarchar(JdbcTest.java:4421)

[ERROR] testAggregateEmpty(org.apache.calcite.test.JdbcTest)  Time elapsed: 0.01 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[0], expr#3=[=($t0, $t2)], expr#4=[null], expr#5=[CASE($t3, $t4, $t1)], expr#6=[/($t5, $t0)], expr#7=[CAST($t6):JavaType(class java.lang.Integer)], CS=[$t0], C=[$t0], S=[$t5], A=[$t7])\n  EnumerableAggregate(group=[{}], CS=[COUNT()], S=[$SUM0($1)])\n    EnumerableCalc(expr#0..4=[{inputs}], expr#5=[0], expr#6=[<($t1, $t5)], proj#0..4=[{exprs}], $condition=[$t6])\n      EnumerableTableScan(table=[[hr, emps]])\n"
     but: was "PLAN=EnumerableCalc(expr#0..2=[{inputs}], expr#3=[0], expr#4=[=($t0, $t3)], expr#5=[null], expr#6=[CASE($t4, $t5, $t1)], expr#7=[/($t2, $t0)], expr#8=[CAST($t7):JavaType(class java.lang.Integer)], CS=[$t0], C=[$t0], S=[$t6], A=[$t8])\n  EnumerableAggregate(group=[{}], CS=[COUNT()], S=[$SUM0($1)], agg#2=[SUM($1)])\n    EnumerableCalc(expr#0..4=[{inputs}], expr#5=[0], expr#6=[<($t1, $t5)], proj#0..4=[{exprs}], $condition=[$t6])\n      EnumerableTableScan(table=[[hr, emps]])\n\n"
	at org.apache.calcite.test.JdbcTest.testAggregateEmpty(JdbcTest.java:3376)

[ERROR] testDistinctCount2(org.apache.calcite.test.JdbcTest)  Time elapsed: 0.778 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t0):INTEGER NOT NULL], u=[$t2], m0=[$t1])\n  EnumerableAggregate(group=[{1}], m0=[COUNT($0)])\n    EnumerableAggregate(group=[{2, 7}])\n      EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t0):INTEGER NOT NULL], u=[$t2], m0=[$t1])\n  EnumerableAggregate(group=[{0}], m0=[COUNT($1)])\n    EnumerableCalc(expr#0..1=[{inputs}], unit_sales=[$t1], customer_id=[$t0])\n      EnumerableAggregate(group=[{2, 7}])\n        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\n\n"
	at org.apache.calcite.test.JdbcTest.testDistinctCount2(JdbcTest.java:2640)

[ERROR] testSimpleIn(org.apache.calcite.test.JdbcTest)  Time elapsed: 0.112 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableSemiJoin(condition=[=($0, $5)], joinType=[inner])\n  EnumerableTableScan(table=[[hr, depts]])\n  EnumerableCalc(expr#0..4=[{inputs}], expr#5=[150], expr#6=[<($t0, $t5)], proj#0..4=[{exprs}], $condition=[$t6])\n    EnumerableTableScan(table=[[hr, emps]])"
     but: was "PLAN=EnumerableSemiJoin(condition=[=($0, $4)], joinType=[inner])\n  EnumerableTableScan(table=[[hr, depts]])\n  EnumerableCalc(expr#0..4=[{inputs}], expr#5=[150], expr#6=[<($t0, $t5)], deptno=[$t1], $condition=[$t6])\n    EnumerableTableScan(table=[[hr, emps]])\n\n"
	at org.apache.calcite.test.JdbcTest.testSimpleIn(JdbcTest.java:2731)

[ERROR] testReduceCountNotNullable(org.apache.calcite.test.JdbcTest)  Time elapsed: 0.007 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=EnumerableCalc(expr#0=[{inputs}], CS=[$t0], CS2=[$t0])\n  EnumerableAggregate(group=[{}], CS=[COUNT()])\n    EnumerableCalc(expr#0..4=[{inputs}], expr#5=[0], expr#6=[<($t1, $t5)], proj#0..4=[{exprs}], $condition=[$t6])\n      EnumerableTableScan(table=[[hr, emps]])\n"
     but: was "PLAN=EnumerableCalc(expr#0=[{inputs}], CS=[$t0], CS2=[$t0])\n  EnumerableAggregate(group=[{}], CS=[COUNT()])\n    EnumerableCalc(expr#0..4=[{inputs}], expr#5=[0], expr#6=[<($t1, $t5)], deptno=[$t1], $condition=[$t6])\n      EnumerableTableScan(table=[[hr, emps]])\n\n"
	at org.apache.calcite.test.JdbcTest.testReduceCountNotNullable(JdbcTest.java:3392)

[INFO] Running org.apache.calcite.test.CoreQuidemTest
[ERROR] Tests run: 16, Failures: 4, Errors: 1, Skipped: 0, Time elapsed: 18.827 s <<< FAILURE! - in org.apache.calcite.test.CoreQuidemTest
[ERROR] test[1: quidem(sql/misc.iq)](org.apache.calcite.test.CoreQuidemTest)  Time elapsed: 5.908 s  <<< ERROR!
java.lang.reflect.InvocationTargetException
	at org.apache.calcite.test.CoreQuidemTest.testSqlMisc(CoreQuidemTest.java:67)

[ERROR] test[3: quidem(sql/agg.iq)](org.apache.calcite.test.CoreQuidemTest)  Time elapsed: 6.154 s  <<< FAILURE!
java.lang.AssertionError: 
Files differ: /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/surefire/sql/agg.iq /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/agg.iq
1471,1475c1471,1476
<   EnumerableJoin(condition=[=($0, $2)], joinType=[inner])
<     EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
<       EnumerableTableScan(table=[[scott, DEPT]])
<     EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
<       EnumerableTableScan(table=[[scott, EMP]])
---
>   EnumerableCalc(expr#0..2=[{inputs}], EMPNO=[$t1], DEPTNO=[$t2], DEPTNO0=[$t0])
>     EnumerableJoin(condition=[=($0, $2)], joinType=[inner])
>       EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
>         EnumerableTableScan(table=[[scott, DEPT]])
>       EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
>         EnumerableTableScan(table=[[scott, EMP]])
1489,1494c1490,1496
< EnumerableAggregate(group=[{}], EXPR$0=[SUM($2)])
<   EnumerableJoin(condition=[=($0, $3)], joinType=[inner])
<     EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
<       EnumerableTableScan(table=[[scott, DEPT]])
<     EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], SAL=[$t5], DEPTNO=[$t7])
<       EnumerableTableScan(table=[[scott, EMP]])
---
> EnumerableCalc(expr#0..1=[{inputs}], expr#2=[0], expr#3=[=($t1, $t2)], expr#4=[null], expr#5=[CASE($t3, $t4, $t0)], EXPR$0=[$t5])
>   EnumerableAggregate(group=[{}], EXPR$0=[$SUM0($2)], agg#1=[COUNT($2)])
>     EnumerableJoin(condition=[=($0, $3)], joinType=[inner])
>       EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
>         EnumerableTableScan(table=[[scott, DEPT]])
>       EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], SAL=[$t5], DEPTNO=[$t7])
>         EnumerableTableScan(table=[[scott, EMP]])
1558,1563c1560,1566
<   EnumerableAggregate(group=[{3}], EXPR$0=[MIN($2)])
<     EnumerableJoin(condition=[=($0, $3)], joinType=[inner])
<       EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
<         EnumerableTableScan(table=[[scott, DEPT]])
<       EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], SAL=[$t5], DEPTNO=[$t7])
<         EnumerableTableScan(table=[[scott, EMP]])
---
>   EnumerableAggregate(group=[{2}], EXPR$0=[MIN($1)])
>     EnumerableCalc(expr#0..3=[{inputs}], EMPNO=[$t1], SAL=[$t2], DEPTNO=[$t3], DEPTNO0=[$t0])
>       EnumerableJoin(condition=[=($0, $3)], joinType=[inner])
>         EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
>           EnumerableTableScan(table=[[scott, DEPT]])
>         EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], SAL=[$t5], DEPTNO=[$t7])
>           EnumerableTableScan(table=[[scott, EMP]])
1577,1582c1580,1586
< EnumerableAggregate(group=[{}], C=[COUNT()], S=[SUM($2)])
<   EnumerableJoin(condition=[=($0, $3)], joinType=[inner])
<     EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
<       EnumerableTableScan(table=[[scott, DEPT]])
<     EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], SAL=[$t5], DEPTNO=[$t7])
<       EnumerableTableScan(table=[[scott, EMP]])
---
> EnumerableCalc(expr#0..2=[{inputs}], expr#3=[0], expr#4=[=($t2, $t3)], expr#5=[null], expr#6=[CASE($t4, $t5, $t1)], C=[$t0], S=[$t6])
>   EnumerableAggregate(group=[{}], C=[COUNT()], S=[$SUM0($2)], agg#2=[COUNT($2)])
>     EnumerableJoin(condition=[=($0, $3)], joinType=[inner])
>       EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
>         EnumerableTableScan(table=[[scott, DEPT]])
>       EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], SAL=[$t5], DEPTNO=[$t7])
>         EnumerableTableScan(table=[[scott, EMP]])


[ERROR] test[4: quidem(sql/join.iq)](org.apache.calcite.test.CoreQuidemTest)  Time elapsed: 0.71 s  <<< FAILURE!
java.lang.AssertionError: 
Files differ: /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/surefire/sql/join.iq /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/join.iq
125,130c125,132
< EnumerableAggregate(group=[{0, 2}])
<   EnumerableJoin(condition=[=($0, $2)], joinType=[inner])
<     EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
<       EnumerableTableScan(table=[[scott, DEPT]])
<     EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
<       EnumerableTableScan(table=[[scott, EMP]])
---
> EnumerableCalc(expr#0..1=[{inputs}], DEPTNO0=[$t1], DEPTNO=[$t0])
>   EnumerableAggregate(group=[{1, 2}])
>     EnumerableCalc(expr#0..2=[{inputs}], EMPNO=[$t1], DEPTNO=[$t2], DEPTNO0=[$t0])
>       EnumerableJoin(condition=[=($0, $2)], joinType=[inner])
>         EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
>           EnumerableTableScan(table=[[scott, DEPT]])
>         EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
>           EnumerableTableScan(table=[[scott, EMP]])
145,150c147,153
< EnumerableAggregate(group=[{0}])
<   EnumerableJoin(condition=[=($0, $2)], joinType=[inner])
<     EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
<       EnumerableTableScan(table=[[scott, DEPT]])
<     EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
<       EnumerableTableScan(table=[[scott, EMP]])
---
> EnumerableAggregate(group=[{2}])
>   EnumerableCalc(expr#0..2=[{inputs}], EMPNO=[$t1], DEPTNO=[$t2], DEPTNO0=[$t0])
>     EnumerableJoin(condition=[=($0, $2)], joinType=[inner])
>       EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
>         EnumerableTableScan(table=[[scott, DEPT]])
>       EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
>         EnumerableTableScan(table=[[scott, EMP]])
198,208c201,210
< EnumerableCalc(expr#0..1=[{inputs}], DEPTNO=[$t1], ENAME=[$t0])
<   EnumerableAggregate(group=[{1, 3}])
<     EnumerableJoin(condition=[=($2, $4)], joinType=[inner])
<       EnumerableCalc(expr#0..7=[{inputs}], expr#8=[10], expr#9=[+($t7, $t8)], proj#0..1=[{exprs}], $f8=[$t9])
<         EnumerableTableScan(table=[[scott, EMP]])
<       EnumerableCalc(expr#0..3=[{inputs}], expr#4=[+($t1, $t3)], expr#5=[CAST($t4):INTEGER], DEPTNO=[$t1], $f16=[$t5])
<         EnumerableJoin(condition=[=($1, $3)], joinType=[inner])
<           EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
<             EnumerableTableScan(table=[[scott, EMP]])
<           EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
<             EnumerableTableScan(table=[[scott, EMP]])
---
> EnumerableAggregate(group=[{0, 3}])
>   EnumerableJoin(condition=[=($1, $4)], joinType=[inner])
>     EnumerableCalc(expr#0..3=[{inputs}], expr#4=[+($t1, $t3)], expr#5=[CAST($t4):INTEGER], DEPTNO=[$t1], $f16=[$t5])
>       EnumerableJoin(condition=[=($1, $3)], joinType=[inner])
>         EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
>           EnumerableTableScan(table=[[scott, EMP]])
>         EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
>           EnumerableTableScan(table=[[scott, EMP]])
>     EnumerableCalc(expr#0..7=[{inputs}], expr#8=[10], expr#9=[+($t7, $t8)], proj#0..1=[{exprs}], $f8=[$t9])
>       EnumerableTableScan(table=[[scott, EMP]])


[ERROR] test[5: quidem(sql/sub-query.iq)](org.apache.calcite.test.CoreQuidemTest)  Time elapsed: 5.483 s  <<< FAILURE!
java.lang.AssertionError: 
Files differ: /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/surefire/sql/sub-query.iq /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/sub-query.iq
466,467c466,468
< EnumerableCalc(expr#0..2=[{inputs}], A=[$t1], B=[$t2])
<   EnumerableMergeJoin(condition=[=($0, $1)], joinType=[inner])
---
> EnumerableCalc(expr#0..2=[{inputs}], proj#0..1=[{exprs}])
>   EnumerableJoin(condition=[=($0, $2)], joinType=[inner])
>     EnumerableValues(tuples=[[{ 60, 'b' }]])
470d470
<     EnumerableValues(tuples=[[{ 60, 'b' }]])
624c624
< EnumerableSemiJoin(condition=[=($0, $10)], joinType=[inner])
---
> EnumerableSemiJoin(condition=[=($0, $3)], joinType=[inner])
626c626
<   EnumerableCalc(expr#0..7=[{inputs}], expr#8=[=($t7, $t7)], expr#9=['SMITH'], expr#10=[=($t1, $t9)], expr#11=[AND($t8, $t10)], proj#0..7=[{exprs}], $condition=[$t11])
---
>   EnumerableCalc(expr#0..7=[{inputs}], expr#8=[=($t7, $t7)], expr#9=['SMITH'], expr#10=[=($t1, $t9)], expr#11=[AND($t8, $t10)], DEPTNO=[$t7], $condition=[$t11])
833c833
<           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[false], expr#4=[123], expr#5=[null], expr#6=[=($t4, $t5)], expr#7=[IS NULL($t5)], expr#8=[OR($t6, $t7)], cs=[$t3], $condition=[$t8])
---
>           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[null], expr#4=[IS NOT NULL($t3)], expr#5=[123], expr#6=[=($t5, $t3)], expr#7=[IS NULL($t3)], expr#8=[OR($t6, $t7)], cs=[$t4], $condition=[$t8])
1011c1011
<           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[true], expr#4=[10], expr#5=[CAST($t0):TINYINT], expr#6=[=($t4, $t5)], cs=[$t3], $condition=[$t6])
---
>           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[CAST($t0):TINYINT], expr#4=[IS NOT NULL($t3)], expr#5=[10], expr#6=[=($t5, $t3)], expr#7=[IS NULL($t3)], expr#8=[OR($t6, $t7)], cs=[$t4], $condition=[$t8])
1083c1083
<           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[false], expr#4=[123], expr#5=[null], expr#6=[=($t4, $t5)], expr#7=[IS NULL($t5)], expr#8=[OR($t6, $t7)], cs=[$t3], $condition=[$t8])
---
>           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[null], expr#4=[IS NOT NULL($t3)], expr#5=[123], expr#6=[=($t5, $t3)], expr#7=[IS NULL($t3)], expr#8=[OR($t6, $t7)], cs=[$t4], $condition=[$t8])
1261c1261
<           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[true], expr#4=[10], expr#5=[CAST($t0):TINYINT], expr#6=[=($t4, $t5)], cs=[$t3], $condition=[$t6])
---
>           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[CAST($t0):TINYINT], expr#4=[IS NOT NULL($t3)], expr#5=[10], expr#6=[=($t5, $t3)], expr#7=[IS NULL($t3)], expr#8=[OR($t6, $t7)], cs=[$t4], $condition=[$t8])
1311c1311,1312
< EnumerableValues(tuples=[[]])
---
> EnumerableCalc(expr#0..2=[{inputs}], SAL=[$t1])
>   EnumerableValues(tuples=[[]])
1324c1325,1326
< EnumerableValues(tuples=[[]])
---
> EnumerableCalc(expr#0..2=[{inputs}], SAL=[$t1])
>   EnumerableValues(tuples=[[]])
1337c1339,1340
< EnumerableValues(tuples=[[]])
---
> EnumerableCalc(expr#0..2=[{inputs}], SAL=[$t1])
>   EnumerableValues(tuples=[[]])
1350c1353,1354
< EnumerableValues(tuples=[[]])
---
> EnumerableCalc(expr#0..2=[{inputs}], SAL=[$t1])
>   EnumerableValues(tuples=[[]])
1363c1367,1368
< EnumerableValues(tuples=[[]])
---
> EnumerableCalc(expr#0..2=[{inputs}], SAL=[$t1])
>   EnumerableValues(tuples=[[]])
1470c1475
<           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[false], expr#4=[123], expr#5=[null], expr#6=[=($t4, $t5)], expr#7=[IS NULL($t5)], expr#8=[OR($t6, $t7)], cs=[$t3], $condition=[$t8])
---
>           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[null], expr#4=[IS NOT NULL($t3)], expr#5=[123], expr#6=[=($t5, $t3)], expr#7=[IS NULL($t3)], expr#8=[OR($t6, $t7)], cs=[$t4], $condition=[$t8])
1575c1580
<           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[true], expr#4=[10], expr#5=[CAST($t0):TINYINT], expr#6=[=($t4, $t5)], expr#7=[IS NULL($t5)], expr#8=[OR($t6, $t7)], cs=[$t3], $condition=[$t8])
---
>           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[CAST($t0):TINYINT], expr#4=[IS NOT NULL($t3)], expr#5=[10], expr#6=[=($t5, $t3)], expr#7=[IS NULL($t3)], expr#8=[OR($t6, $t7)], cs=[$t4], $condition=[$t8])
1643c1648,1649
< EnumerableValues(tuples=[[]])
---
> EnumerableCalc(expr#0..3=[{inputs}], SAL=[$t1])
>   EnumerableValues(tuples=[[]])


[ERROR] test[7: quidem(sql/winagg.iq)](org.apache.calcite.test.CoreQuidemTest)  Time elapsed: 1.451 s  <<< FAILURE!
java.lang.AssertionError: 
Files differ: /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/surefire/sql/winagg.iq /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/winagg.iq
443c443
< |     10 | 110 | 110 |
---
> |     10 | 110 | 150 |


[INFO] Running org.apache.calcite.test.enumerable.EnumerableCorrelateTest
[ERROR] Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.276 s <<< FAILURE! - in org.apache.calcite.test.enumerable.EnumerableCorrelateTest
[ERROR] simpleCorrelateDecorrelated(org.apache.calcite.test.enumerable.EnumerableCorrelateTest)  Time elapsed: 0.196 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableCalc(expr#0..2=[{inputs}], empid=[$t0], name=[$t2])\n  EnumerableSemiJoin(condition=[=($1, $3)], joinType=[inner])\n    EnumerableCalc(expr#0..4=[{inputs}], proj#0..2=[{exprs}])\n      EnumerableTableScan(table=[[s, emps]])\n    EnumerableTableScan(table=[[s, depts]])"
     but: was "PLAN=EnumerableCalc(expr#0..2=[{inputs}], empid=[$t0], name=[$t2])\n  EnumerableSemiJoin(condition=[=($1, $3)], joinType=[inner])\n    EnumerableCalc(expr#0..4=[{inputs}], proj#0..2=[{exprs}])\n      EnumerableTableScan(table=[[s, emps]])\n    EnumerableCalc(expr#0..3=[{inputs}], deptno=[$t0])\n      EnumerableTableScan(table=[[s, depts]])\n\n"
	at org.apache.calcite.test.enumerable.EnumerableCorrelateTest.simpleCorrelateDecorrelated(EnumerableCorrelateTest.java:36)

[INFO] Running org.apache.calcite.test.StreamTest
[ERROR] Tests run: 9, Failures: 1, Errors: 1, Skipped: 2, Time elapsed: 0.13 s <<< FAILURE! - in org.apache.calcite.test.StreamTest
[ERROR] testStreamFilterProject(org.apache.calcite.test.StreamTest)  Time elapsed: 0.009 s  <<< ERROR!
java.lang.RuntimeException: exception while preparing [select stream product from orders where units > 6]
	at org.apache.calcite.test.StreamTest.testStreamFilterProject(StreamTest.java:131)
Caused by: java.lang.RuntimeException: With materializationsEnabled=false
	at org.apache.calcite.test.StreamTest.testStreamFilterProject(StreamTest.java:131)
Caused by: java.sql.SQLException: Error while preparing statement [select stream product from orders where units > 6]
	at org.apache.calcite.test.StreamTest.testStreamFilterProject(StreamTest.java:131)
Caused by: org.apache.calcite.plan.RelOptPlanner$CannotPlanException: 
Node [rel#684360:Subset#3.ENUMERABLE.[]] could not be implemented; planner state:

Root: rel#684360:Subset#3.ENUMERABLE.[]
Original rel:
LogicalDelta(subset=[rel#684360:Subset#3.ENUMERABLE.[]]): rowcount = 50.0, cumulative cost = {50.0 rows, 50.0 cpu, 0.0 io}, id = 684355
  LogicalProject(subset=[rel#684354:Subset#2.NONE.[]], PRODUCT=[$2]): rowcount = 50.0, cumulative cost = {50.0 rows, 50.0 cpu, 0.0 io}, id = 684353
    LogicalFilter(subset=[rel#684352:Subset#1.NONE.[0]], condition=[>($3, 6)]): rowcount = 50.0, cumulative cost = {50.0 rows, 100.0 cpu, 0.0 io}, id = 684351
      LogicalTableScan(subset=[rel#684350:Subset#0.NONE.[0]], table=[[STREAMS, ORDERS]]): rowcount = 100.0, cumulative cost = {100.0 rows, 101.0 cpu, 0.0 io}, id = 684338

Sets:
Set#0, type: RecordType(TIMESTAMP(0) ROWTIME, INTEGER ID, VARCHAR(10) PRODUCT, INTEGER UNITS)
	rel#684350:Subset#0.NONE.[0], best=null, importance=0.6561
		rel#684338:LogicalTableScan.NONE.[[0]](table=[STREAMS, ORDERS]), rowcount=100.0, cumulative cost={inf}
	rel#684401:Subset#0.ENUMERABLE.[0], best=rel#684440, importance=0.32805
		rel#684416:EnumerableTableScan.ENUMERABLE.[[0]](table=[STREAMS, ORDERS]), rowcount=100.0, cumulative cost={100.0 rows, 101.0 cpu, 0.0 io}
		rel#684440:EnumerableInterpreter.ENUMERABLE.[0](input=RelSubset#684410), rowcount=100.0, cumulative cost={51.0 rows, 51.01 cpu, 0.0 io}
		rel#684446:EnumerableInterpreter.ENUMERABLE.[[0]](input=RelSubset#684410), rowcount=100.0, cumulative cost={51.0 rows, 51.01 cpu, 0.0 io}
	rel#684410:Subset#0.BINDABLE.[0], best=rel#684405, importance=0.32805
		rel#684405:BindableTableScan.BINDABLE.[[0]](table=[STREAMS, ORDERS]), rowcount=100.0, cumulative cost={1.0 rows, 1.01 cpu, 0.0 io}
Set#1, type: RecordType(TIMESTAMP(0) ROWTIME, INTEGER ID, VARCHAR(10) PRODUCT, INTEGER UNITS)
	rel#684352:Subset#1.NONE.[0], best=null, importance=0.7290000000000001
		rel#684351:LogicalFilter.NONE.[[0]](input=RelSubset#684350,condition=>($3, 6)), rowcount=50.0, cumulative cost={inf}
	rel#684383:Subset#1.ENUMERABLE.[0], best=rel#684402, importance=0.36450000000000005
		rel#684402:EnumerableFilter.ENUMERABLE.[[0]](input=RelSubset#684401,condition=>($3, 6)), rowcount=50.0, cumulative cost={101.0 rows, 151.01 cpu, 0.0 io}
Set#2, type: RecordType(VARCHAR(10) PRODUCT)
	rel#684354:Subset#2.NONE.[], best=null, importance=0.81
		rel#684353:LogicalProject.NONE.[](input=RelSubset#684352,PRODUCT=$2), rowcount=50.0, cumulative cost={inf}
		rel#684379:LogicalProject.NONE.[](input=RelSubset#684378,PRODUCT=$0), rowcount=50.0, cumulative cost={inf}
	rel#684382:Subset#2.ENUMERABLE.[], best=rel#684384, importance=0.405
		rel#684381:EnumerableProject.ENUMERABLE.[](input=RelSubset#684380,PRODUCT=$0), rowcount=50.0, cumulative cost={201.0 rows, 301.01 cpu, 0.0 io}
		rel#684384:EnumerableProject.ENUMERABLE.[](input=RelSubset#684383,PRODUCT=$2), rowcount=50.0, cumulative cost={151.0 rows, 201.01 cpu, 0.0 io}
Set#3, type: RecordType(VARCHAR(10) PRODUCT)
	rel#684356:Subset#3.NONE.[], best=null, importance=0.9
		rel#684355:LogicalDelta.NONE.[](input=RelSubset#684354), rowcount=50.0, cumulative cost={inf}
		rel#684365:LogicalProject.NONE.[](input=RelSubset#684364,PRODUCT=$2), rowcount=50.0, cumulative cost={inf}
	rel#684360:Subset#3.ENUMERABLE.[], best=null, importance=1.0
		rel#684361:AbstractConverter.ENUMERABLE.[](input=RelSubset#684356,convention=ENUMERABLE,sort=[]), rowcount=50.0, cumulative cost={inf}
		rel#684367:EnumerableProject.ENUMERABLE.[](input=RelSubset#684366,PRODUCT=$2), rowcount=50.0, cumulative cost={inf}
Set#4, type: RecordType(TIMESTAMP(0) ROWTIME, INTEGER ID, VARCHAR(10) PRODUCT, INTEGER UNITS)
	rel#684364:Subset#4.NONE.[0], best=null, importance=0.81
		rel#684362:LogicalDelta.NONE.[0](input=RelSubset#684352), rowcount=50.0, cumulative cost={inf}
	rel#684366:Subset#4.ENUMERABLE.[0], best=null, importance=0.9
	rel#684372:Subset#4.NONE.[], best=null, importance=0.45
		rel#684362:LogicalDelta.NONE.[0](input=RelSubset#684352), rowcount=50.0, cumulative cost={inf}
		rel#684371:LogicalFilter.NONE.[](input=RelSubset#684370,condition=>($3, 6)), rowcount=50.0, cumulative cost={inf}
	rel#684438:Subset#4.ENUMERABLE.[], best=rel#684437, importance=0.45
		rel#684437:EnumerableFilter.ENUMERABLE.[](input=RelSubset#684435,condition=>($3, 6)), rowcount=50.0, cumulative cost={101.0 rows, 151.01 cpu, 0.0 io}
Set#5, type: RecordType(TIMESTAMP(0) ROWTIME, INTEGER ID, VARCHAR(10) PRODUCT, INTEGER UNITS)
	rel#684370:Subset#5.NONE.[0], best=null, importance=0.6187499999999999
		rel#684368:LogicalDelta.NONE.[0](input=RelSubset#684350), rowcount=100.0, cumulative cost={inf}
		rel#684425:LogicalTableScan.NONE.[[0]](table=[STREAMS, ORDERS, (STREAM)]), rowcount=100.0, cumulative cost={inf}
	rel#684430:Subset#5.BINDABLE.[0], best=rel#684429, importance=0.30937499999999996
		rel#684429:BindableTableScan.BINDABLE.[[0]](table=[STREAMS, ORDERS, (STREAM)]), rowcount=100.0, cumulative cost={1.0 rows, 1.01 cpu, 0.0 io}
	rel#684435:Subset#5.ENUMERABLE.[0], best=rel#684449, importance=0.30937499999999996
		rel#684449:EnumerableInterpreter.ENUMERABLE.[0](input=RelSubset#684430), rowcount=100.0, cumulative cost={51.0 rows, 51.01 cpu, 0.0 io}
		rel#684455:EnumerableInterpreter.ENUMERABLE.[[0]](input=RelSubset#684430), rowcount=100.0, cumulative cost={51.0 rows, 51.01 cpu, 0.0 io}
Set#6, type: RecordType(VARCHAR(10) PRODUCT, INTEGER UNITS)
	rel#684376:Subset#6.NONE.[], best=null, importance=0.6561
		rel#684373:LogicalProject.NONE.[](input=RelSubset#684350,PRODUCT=$2,UNITS=$3), rowcount=100.0, cumulative cost={inf}
	rel#684398:Subset#6.ENUMERABLE.[], best=rel#684456, importance=0.49499999999999994
		rel#684456:EnumerableProject.ENUMERABLE.[](input=RelSubset#684401,PRODUCT=$2,UNITS=$3), rowcount=100.0, cumulative cost={151.0 rows, 251.01 cpu, 0.0 io}
Set#7, type: RecordType(VARCHAR(10) PRODUCT, INTEGER UNITS)
	rel#684378:Subset#7.NONE.[], best=null, importance=0.7290000000000001
		rel#684377:LogicalFilter.NONE.[](input=RelSubset#684376,condition=>($1, 6)), rowcount=50.0, cumulative cost={inf}
		rel#684389:LogicalProject.NONE.[](input=RelSubset#684388,PRODUCT=$2,UNITS=$3), rowcount=50.0, cumulative cost={inf}
	rel#684380:Subset#7.ENUMERABLE.[], best=rel#684396, importance=0.49499999999999994
		rel#684396:EnumerableProject.ENUMERABLE.[](input=RelSubset#684395,PRODUCT=$2,UNITS=$3), rowcount=50.0, cumulative cost={151.0 rows, 251.01 cpu, 0.0 io}
		rel#684399:EnumerableFilter.ENUMERABLE.[](input=RelSubset#684398,condition=>($1, 6)), rowcount=50.0, cumulative cost={201.0 rows, 351.01 cpu, 0.0 io}
Set#8, type: RecordType(TIMESTAMP(0) ROWTIME, INTEGER ID, VARCHAR(10) PRODUCT, INTEGER UNITS)
	rel#684388:Subset#8.NONE.[], best=null, importance=0.6561
		rel#684385:LogicalFilter.NONE.[](input=RelSubset#684350,condition=>($3, 6)), rowcount=50.0, cumulative cost={inf}
	rel#684395:Subset#8.ENUMERABLE.[], best=rel#684420, importance=0.32805
		rel#684420:EnumerableFilter.ENUMERABLE.[](input=RelSubset#684401,condition=>($3, 6)), rowcount=50.0, cumulative cost={101.0 rows, 151.01 cpu, 0.0 io}


	at org.apache.calcite.test.StreamTest.testStreamFilterProject(StreamTest.java:131)

[ERROR] testStreamToRelationJoin(org.apache.calcite.test.StreamTest)  Time elapsed: 0.059 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableCalc(expr#0..6=[{inputs}], proj#0..1=[{exprs}], SUPPLIERID=[$t6])\n  EnumerableJoin(condition=[=($4, $5)], joinType=[inner])\n    EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t2):VARCHAR(32) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL], proj#0..4=[{exprs}])\n      EnumerableInterpreter\n        BindableTableScan(table=[[STREAM_JOINS, ORDERS, (STREAM)]])\n    EnumerableInterpreter\n      BindableTableScan(table=[[STREAM_JOINS, PRODUCTS]])"
     but: was "PLAN=EnumerableCalc(expr#0..6=[{inputs}], proj#0..1=[{exprs}], SUPPLIERID=[$t6])\n  EnumerableUnion(all=[true])\n    EnumerableValues(tuples=[[]])\n    EnumerableJoin(condition=[=($4, $5)], joinType=[inner])\n      EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t2):VARCHAR(32) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL], proj#0..4=[{exprs}])\n        EnumerableInterpreter\n          BindableTableScan(table=[[STREAM_JOINS, ORDERS, (STREAM)]])\n      EnumerableInterpreter\n        BindableTableScan(table=[[STREAM_JOINS, PRODUCTS]])\n\n"
	at org.apache.calcite.test.StreamTest.testStreamToRelationJoin(StreamTest.java:283)

[INFO] Running org.apache.calcite.util.PartiallyOrderedSetTest
[WARNING] Tests run: 15, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 1.044 s - in org.apache.calcite.util.PartiallyOrderedSetTest
[INFO] Running org.apache.calcite.plan.volcano.VolcanoPlannerTest
[ERROR] Tests run: 10, Failures: 2, Errors: 0, Skipped: 3, Time elapsed: 0.264 s <<< FAILURE! - in org.apache.calcite.plan.volcano.VolcanoPlannerTest
[ERROR] testOomProjectMergeRule(org.apache.calcite.plan.volcano.VolcanoPlannerTest)  Time elapsed: 0.253 s  <<< FAILURE!
java.lang.AssertionError: Too many rules fired. Output relation is rel#291:EnumerableValues.ENUMERABLE.[[0]](type=RecordType(CHAR(1) f),tuples=[{ '1' }]), expected id to be less than 100
	at org.apache.calcite.plan.volcano.VolcanoPlannerTest.testOomProjectMergeRule(VolcanoPlannerTest.java:521)

[ERROR] testRemoveSingleGood(org.apache.calcite.plan.volcano.VolcanoPlannerTest)  Time elapsed: 0.099 s  <<< FAILURE!
java.lang.AssertionError
	at org.apache.calcite.plan.volcano.VolcanoPlannerTest.testRemoveSingleGood(VolcanoPlannerTest.java:340)

[INFO] Running org.apache.calcite.test.MaterializationTest
[ERROR] Tests run: 130, Failures: 6, Errors: 0, Skipped: 17, Time elapsed: 18.986 s <<< FAILURE! - in org.apache.calcite.test.MaterializationTest
[ERROR] testJoinAggregateMaterializationAggregateFuncs11(org.apache.calcite.test.MaterializationTest)  Time elapsed: 3.173 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableAggregate(group=[{2}], agg#0=[COUNT()])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1], expr#3=[+($t1, $t2)], empid=[$t0], EXPR$1=[$t3])\n  EnumerableAggregate(group=[{0}], agg#0=[$SUM0($1)])\n    EnumerableUnion(all=[true])\n      EnumerableAggregate(group=[{1}], agg#0=[COUNT()])\n        EnumerableCalc(expr#0..2=[{inputs}], deptno=[$t1], empid=[$t2], deptno0=[$t0])\n          EnumerableJoin(condition=[=($0, $1)], joinType=[inner])\n            EnumerableCalc(expr#0..4=[{inputs}], expr#5=[11], expr#6=[>=($t5, $t1)], expr#7=[19], expr#8=[<=($t7, $t1)], expr#9=[OR($t6, $t8)], deptno=[$t1], $condition=[$t9])\n              EnumerableTableScan(table=[[hr, emps]])\n            EnumerableCalc(expr#0..3=[{inputs}], deptno=[$t1], empid=[$t2])\n              EnumerableJoin(condition=[=($0, $3)], joinType=[inner])\n                EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], name0=[$t2])\n                  EnumerableTableScan(table=[[hr, locations]])\n                EnumerableCalc(expr#0..4=[{inputs}], expr#5=[CAST($t3):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], deptno=[$t0], empid=[$t2], name10=[$t5])\n                  EnumerableJoin(condition=[=($1, $4)], joinType=[inner])\n                    EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], expr#5=[10], expr#6=[>($t0, $t5)], expr#7=[20], expr#8=[<($t0, $t7)], expr#9=[AND($t6, $t8)], deptno=[$t0], name0=[$t4], $condition=[$t9])\n                      EnumerableTableScan(table=[[hr, depts]])\n                    EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], proj#0..2=[{exprs}])\n                      EnumerableTableScan(table=[[hr, dependents]])\n      EnumerableAggregate(group=[{1}], agg#0=[$SUM0($2)])\n        EnumerableTableScan(table=[[hr, m0]])\n\n"
	at org.apache.calcite.test.MaterializationTest.checkThatMaterialize(MaterializationTest.java:232)
	at org.apache.calcite.test.MaterializationTest.checkMaterialize(MaterializationTest.java:207)
	at org.apache.calcite.test.MaterializationTest.checkMaterialize(MaterializationTest.java:200)
	at org.apache.calcite.test.MaterializationTest.testJoinAggregateMaterializationAggregateFuncs11(MaterializationTest.java:1636)

[ERROR] testJoinMaterializationUKFK5(org.apache.calcite.test.MaterializationTest)  Time elapsed: 5.644 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableCalc(expr#0..1=[{inputs}], empid0=[$t0])\n  EnumerableTableScan(table=[[hr, m0]])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], empid=[$t0])\n  EnumerableTableScan(table=[[hr, m0]])\n\n"
	at org.apache.calcite.test.MaterializationTest.checkThatMaterialize(MaterializationTest.java:232)
	at org.apache.calcite.test.MaterializationTest.checkMaterialize(MaterializationTest.java:207)
	at org.apache.calcite.test.MaterializationTest.checkMaterialize(MaterializationTest.java:200)
	at org.apache.calcite.test.MaterializationTest.testJoinMaterializationUKFK5(MaterializationTest.java:1872)

[ERROR] testJoinMaterializationUKFK6(org.apache.calcite.test.MaterializationTest)  Time elapsed: 15.034 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableCalc(expr#0..1=[{inputs}], empid0=[$t0])\n  EnumerableTableScan(table=[[hr, m0]])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], empid=[$t0])\n  EnumerableTableScan(table=[[hr, m0]])\n\n"
	at org.apache.calcite.test.MaterializationTest.checkThatMaterialize(MaterializationTest.java:232)
	at org.apache.calcite.test.MaterializationTest.checkMaterialize(MaterializationTest.java:207)
	at org.apache.calcite.test.MaterializationTest.checkMaterialize(MaterializationTest.java:200)
	at org.apache.calcite.test.MaterializationTest.testJoinMaterializationUKFK6(MaterializationTest.java:1887)

[ERROR] testJoinAggregateMaterializationAggregateFuncs5(org.apache.calcite.test.MaterializationTest)  Time elapsed: 0.242 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1], expr#3=[+($t1, $t2)], deptno=[$t0], S=[$t3])\n  EnumerableAggregate(group=[{1}], agg#0=[$SUM0($3)])\n    EnumerableCalc(expr#0..3=[{inputs}], expr#4=[10], expr#5=[<($t4, $t1)], proj#0..3=[{exprs}], $condition=[$t5])\n      EnumerableTableScan(table=[[hr, m0]])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1], expr#3=[+($t1, $t2)], deptno=[$t0], $f1=[$t3])\n  EnumerableAggregate(group=[{1}], agg#0=[$SUM0($3)])\n    EnumerableCalc(expr#0..3=[{inputs}], expr#4=[10], expr#5=[<($t4, $t1)], proj#0..3=[{exprs}], $condition=[$t5])\n      EnumerableTableScan(table=[[hr, m0]])\n\n"
	at org.apache.calcite.test.MaterializationTest.checkThatMaterialize(MaterializationTest.java:232)
	at org.apache.calcite.test.MaterializationTest.checkMaterialize(MaterializationTest.java:207)
	at org.apache.calcite.test.MaterializationTest.checkMaterialize(MaterializationTest.java:200)
	at org.apache.calcite.test.MaterializationTest.testJoinAggregateMaterializationAggregateFuncs5(MaterializationTest.java:1529)

[ERROR] testJoinAggregateMaterializationNoAggregateFuncs7(org.apache.calcite.test.MaterializationTest)  Time elapsed: 4.716 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableAggregate(group=[{2}])"
     but: was "PLAN=EnumerableAggregate(group=[{0}])\n  EnumerableUnion(all=[true])\n    EnumerableAggregate(group=[{1}])\n      EnumerableCalc(expr#0..2=[{inputs}], deptno=[$t1], empid=[$t2], deptno0=[$t0])\n        EnumerableJoin(condition=[=($0, $1)], joinType=[inner])\n          EnumerableCalc(expr#0..4=[{inputs}], expr#5=[11], expr#6=[>=($t5, $t1)], deptno=[$t1], $condition=[$t6])\n            EnumerableTableScan(table=[[hr, emps]])\n          EnumerableCalc(expr#0..3=[{inputs}], deptno=[$t1], empid=[$t2])\n            EnumerableJoin(condition=[=($0, $3)], joinType=[inner])\n              EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], name0=[$t2])\n                EnumerableTableScan(table=[[hr, locations]])\n              EnumerableCalc(expr#0..4=[{inputs}], expr#5=[CAST($t3):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], deptno=[$t0], empid=[$t2], name10=[$t5])\n                EnumerableJoin(condition=[=($1, $4)], joinType=[inner])\n                  EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], expr#5=[10], expr#6=[>($t0, $t5)], deptno=[$t0], name0=[$t4], $condition=[$t6])\n                    EnumerableTableScan(table=[[hr, depts]])\n                  EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], proj#0..2=[{exprs}])\n                    EnumerableTableScan(table=[[hr, dependents]])\n    EnumerableCalc(expr#0..1=[{inputs}], empid=[$t1])\n      EnumerableTableScan(table=[[hr, m0]])\n\n"
	at org.apache.calcite.test.MaterializationTest.checkThatMaterialize(MaterializationTest.java:232)
	at org.apache.calcite.test.MaterializationTest.checkMaterialize(MaterializationTest.java:207)
	at org.apache.calcite.test.MaterializationTest.checkMaterialize(MaterializationTest.java:200)
	at org.apache.calcite.test.MaterializationTest.testJoinAggregateMaterializationNoAggregateFuncs7(MaterializationTest.java:1376)

[ERROR] testJoinAggregateMaterializationNoAggregateFuncs9(org.apache.calcite.test.MaterializationTest)  Time elapsed: 1.419 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableAggregate(group=[{2}])"
     but: was "PLAN=EnumerableAggregate(group=[{0}])\n  EnumerableUnion(all=[true])\n    EnumerableAggregate(group=[{1}])\n      EnumerableCalc(expr#0..2=[{inputs}], deptno=[$t1], empid=[$t2], deptno0=[$t0])\n        EnumerableJoin(condition=[=($0, $1)], joinType=[inner])\n          EnumerableCalc(expr#0..4=[{inputs}], expr#5=[11], expr#6=[>=($t5, $t1)], expr#7=[19], expr#8=[<=($t7, $t1)], expr#9=[OR($t6, $t8)], deptno=[$t1], $condition=[$t9])\n            EnumerableTableScan(table=[[hr, emps]])\n          EnumerableCalc(expr#0..3=[{inputs}], deptno=[$t1], empid=[$t2])\n            EnumerableJoin(condition=[=($0, $3)], joinType=[inner])\n              EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], name0=[$t2])\n                EnumerableTableScan(table=[[hr, locations]])\n              EnumerableCalc(expr#0..4=[{inputs}], expr#5=[CAST($t3):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], deptno=[$t0], empid=[$t2], name10=[$t5])\n                EnumerableJoin(condition=[=($1, $4)], joinType=[inner])\n                  EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], expr#5=[10], expr#6=[>($t0, $t5)], expr#7=[20], expr#8=[<($t0, $t7)], expr#9=[AND($t6, $t8)], deptno=[$t0], name0=[$t4], $condition=[$t9])\n                    EnumerableTableScan(table=[[hr, depts]])\n                  EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], proj#0..2=[{exprs}])\n                    EnumerableTableScan(table=[[hr, dependents]])\n    EnumerableCalc(expr#0..1=[{inputs}], empid=[$t1])\n      EnumerableTableScan(table=[[hr, m0]])\n\n"
	at org.apache.calcite.test.MaterializationTest.checkThatMaterialize(MaterializationTest.java:232)
	at org.apache.calcite.test.MaterializationTest.checkMaterialize(MaterializationTest.java:207)
	at org.apache.calcite.test.MaterializationTest.checkMaterialize(MaterializationTest.java:200)
	at org.apache.calcite.test.MaterializationTest.testJoinAggregateMaterializationNoAggregateFuncs9(MaterializationTest.java:1420)

[INFO] Running org.apache.calcite.test.ScannableTableTest
[ERROR] Tests run: 16, Failures: 9, Errors: 0, Skipped: 0, Time elapsed: 0.306 s <<< FAILURE! - in org.apache.calcite.test.ScannableTableTest
[ERROR] testProjectableFilterableWithProjectAndFilter(org.apache.calcite.test.ScannableTableTest)  Time elapsed: 0.17 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=EnumerableInterpreter\n  BindableTableScan(table=[[s, beatles]], filters=[[=($0, 4)]], projects=[[2, 1]]"
     but: was "PLAN=EnumerableCalc(expr#0..2=[{inputs}], k=[$t2], j=[$t1])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles]], filters=[[=($0, 4)]])\n\n"
	at org.apache.calcite.test.ScannableTableTest.testProjectableFilterableWithProjectAndFilter(ScannableTableTest.java:182)

[ERROR] testPFTableRefusesFilterSingleColumn(org.apache.calcite.test.ScannableTableTest)  Time elapsed: 0.197 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=EnumerableInterpreter\n  BindableTableScan(table=[[s, beatles2]], filters=[[>($2, 1941)]], projects=[[2]])"
     but: was "PLAN=EnumerableCalc(expr#0=[{inputs}], expr#1=[1941], expr#2=[>($t0, $t1)], k=[$t0], $condition=[$t2])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles2]], projects=[[2]])\n\n"
	at org.apache.calcite.test.ScannableTableTest.testPFTableRefusesFilterSingleColumn(ScannableTableTest.java:315)

[ERROR] testPFPushDownProjectFilterAggregateNested(org.apache.calcite.test.ScannableTableTest)  Time elapsed: 0.262 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=EnumerableAggregate(group=[{0}], C=[COUNT()])\n  EnumerableAggregate(group=[{0, 1}])\n    EnumerableInterpreter\n      BindableTableScan(table=[[s, beatles]], filters=[[=($2, 1940)]], projects=[[2, 0]])"
     but: was "PLAN=EnumerableAggregate(group=[{0}], C=[COUNT()])\n  EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1940], expr#3=[=($t0, $t2)], proj#0..1=[{exprs}], $condition=[$t3])\n    EnumerableAggregate(group=[{0, 1}])\n      EnumerableInterpreter\n        BindableTableScan(table=[[s, beatles]], projects=[[2, 0]])\n\n"
	at org.apache.calcite.test.ScannableTableTest.testPFPushDownProjectFilterAggregateNested(ScannableTableTest.java:279)

[ERROR] testProjectableFilterableWithProjectFilterNonCooperative(org.apache.calcite.test.ScannableTableTest)  Time elapsed: 0.18 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=EnumerableInterpreter\n  BindableTableScan(table=[[s, beatles]], filters=[[>($2, 1941)]], projects=[[0, 2]])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1941], expr#3=[>($t1, $t2)], proj#0..1=[{exprs}], $condition=[$t3])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles]], projects=[[0, 2]])\n\n"
	at org.apache.calcite.test.ScannableTableTest.testProjectableFilterableWithProjectFilterNonCooperative(ScannableTableTest.java:202)

[ERROR] testPFTableRefusesFilterCooperative(org.apache.calcite.test.ScannableTableTest)  Time elapsed: 0.048 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=EnumerableInterpreter\n  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[2]])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[4], expr#3=[=($t0, $t2)], k=[$t1], $condition=[$t3])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles2]], projects=[[0, 2]])\n\n"
	at org.apache.calcite.test.ScannableTableTest.testPFTableRefusesFilterCooperative(ScannableTableTest.java:221)

[ERROR] testProjectableFilterableCooperative(org.apache.calcite.test.ScannableTableTest)  Time elapsed: 0.023 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=EnumerableInterpreter\n  BindableTableScan(table=[[s, beatles]], filters=[[=($0, 4)]], projects=[[1]])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[4], expr#3=[=($t0, $t2)], j=[$t1], $condition=[$t3])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles]], projects=[[0, 1]])\n\n"
	at org.apache.calcite.test.ScannableTableTest.testProjectableFilterableCooperative(ScannableTableTest.java:148)

[ERROR] testProjectableFilterableNonCooperative(org.apache.calcite.test.ScannableTableTest)  Time elapsed: 0.021 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=EnumerableInterpreter\n  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[1]]"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[4], expr#3=[=($t0, $t2)], j=[$t1], $condition=[$t3])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles2]], projects=[[0, 1]])\n\n"
	at org.apache.calcite.test.ScannableTableTest.testProjectableFilterableNonCooperative(ScannableTableTest.java:165)

[ERROR] testPFPushDownProjectFilterAggregateGroup(org.apache.calcite.test.ScannableTableTest)  Time elapsed: 0.038 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=EnumerableAggregate(group=[{0}], C=[COUNT()])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles]], filters=[[>($2, 1900)]], projects=[[0]])"
     but: was "PLAN=EnumerableAggregate(group=[{0}], C=[COUNT()])\n  EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1900], expr#3=[>($t1, $t2)], proj#0..1=[{exprs}], $condition=[$t3])\n    EnumerableInterpreter\n      BindableTableScan(table=[[s, beatles]], projects=[[0, 2]])\n\n"
	at org.apache.calcite.test.ScannableTableTest.testPFPushDownProjectFilterAggregateGroup(ScannableTableTest.java:256)

[ERROR] testPFPushDownProjectFilterInAggregateNoGroup(org.apache.calcite.test.ScannableTableTest)  Time elapsed: 0.034 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "PLAN=EnumerableAggregate(group=[{}], M=[MAX($0)])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles]], filters=[[>($0, 1)]], projects=[[2]])"
     but: was "PLAN=EnumerableAggregate(group=[{}], M=[MAX($1)])\n  EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1], expr#3=[>($t0, $t2)], proj#0..1=[{exprs}], $condition=[$t3])\n    EnumerableInterpreter\n      BindableTableScan(table=[[s, beatles]], projects=[[0, 2]])\n\n"
	at org.apache.calcite.test.ScannableTableTest.testPFPushDownProjectFilterInAggregateNoGroup(ScannableTableTest.java:237)

[INFO] Running org.apache.calcite.plan.volcano.ComboRuleTest
[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.053 s <<< FAILURE! - in org.apache.calcite.plan.volcano.ComboRuleTest
[ERROR] testCombo(org.apache.calcite.plan.volcano.ComboRuleTest)  Time elapsed: 0.053 s  <<< FAILURE!
java.lang.AssertionError
	at org.apache.calcite.plan.volcano.ComboRuleTest.testCombo(ComboRuleTest.java:70)

[INFO] Running org.apache.calcite.sql.parser.SqlUnParserTest
[WARNING] Tests run: 315, Failures: 0, Errors: 0, Skipped: 6, Time elapsed: 0.452 s - in org.apache.calcite.sql.parser.SqlUnParserTest
[INFO] Running org.apache.calcite.test.RelMetadataTest
[WARNING] Tests run: 140, Failures: 0, Errors: 0, Skipped: 7, Time elapsed: 4.272 s - in org.apache.calcite.test.RelMetadataTest
[INFO] Running org.apache.calcite.test.LatticeTest
2018-09-23 14:17:27,877 [pool-1-thread-8] WARN  - PoolableConnectionFactory not linked to pool. Calling setPool() to fix the configuration.
[ERROR] Tests run: 38, Failures: 7, Errors: 0, Skipped: 2, Time elapsed: 49.607 s <<< FAILURE! - in org.apache.calcite.test.LatticeTest
[ERROR] testTileAlgorithm2(org.apache.calcite.test.LatticeTest)  Time elapsed: 44.657 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableAggregate(group=[{0, 1}])\n  EnumerableTableScan(table=[[adhoc, m{27, 31, 32, 36, 37}]"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcAggregate(group=[{2, 3}])\n    JdbcJoin(condition=[=($0, $1)], joinType=[inner])\n      JdbcProject(time_id=[$1])\n        JdbcTableScan(table=[[foodmart, sales_fact_1997]])\n      JdbcProject(time_id=[$0], the_year=[$4], quarter=[$8])\n        JdbcTableScan(table=[[foodmart, time_by_day]])\n\n"
	at org.apache.calcite.test.LatticeTest.checkTileAlgorithm(LatticeTest.java:451)
	at org.apache.calcite.test.LatticeTest.testTileAlgorithm2(LatticeTest.java:423)

[ERROR] testTileAlgorithm3(org.apache.calcite.test.LatticeTest)  Time elapsed: 40.164 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableAggregate(group=[{0, 1}])\n  EnumerableTableScan(table=[[adhoc, m{27, 31, 32, 36, 37}]"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcAggregate(group=[{2, 3}])\n    JdbcJoin(condition=[=($0, $1)], joinType=[inner])\n      JdbcProject(time_id=[$1])\n        JdbcTableScan(table=[[foodmart, sales_fact_1997]])\n      JdbcProject(time_id=[$0], the_year=[$4], quarter=[$8])\n        JdbcTableScan(table=[[foodmart, time_by_day]])\n\n"
	at org.apache.calcite.test.LatticeTest.checkTileAlgorithm(LatticeTest.java:451)
	at org.apache.calcite.test.LatticeTest.testTileAlgorithm3(LatticeTest.java:434)

[ERROR] testLatticeWithPreDefinedTiles(org.apache.calcite.test.LatticeTest)  Time elapsed: 0.449 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableTableScan(table=[[adhoc, m{27, 31}"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcAggregate(group=[{2, 3}])\n    JdbcJoin(condition=[=($0, $1)], joinType=[inner])\n      JdbcProject(time_id=[$1])\n        JdbcTableScan(table=[[foodmart, sales_fact_1997]])\n      JdbcProject(time_id=[$0], the_year=[$4], quarter=[$8])\n        JdbcTableScan(table=[[foodmart, time_by_day]])\n\n"
	at org.apache.calcite.test.LatticeTest.testLatticeWithPreDefinedTiles(LatticeTest.java:356)

[ERROR] testLatticeWithPreDefinedTilesFewerMeasures(org.apache.calcite.test.LatticeTest)  Time elapsed: 0.448 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableCalc(expr#0..4=[{inputs}], proj#0..2=[{exprs}])\n  EnumerableTableScan(table=[[adhoc, m{27, 31}"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcAggregate(group=[{2, 3}], C=[COUNT()])\n    JdbcJoin(condition=[=($0, $1)], joinType=[inner])\n      JdbcProject(time_id=[$1])\n        JdbcTableScan(table=[[foodmart, sales_fact_1997]])\n      JdbcProject(time_id=[$0], the_year=[$4], quarter=[$8])\n        JdbcTableScan(table=[[foodmart, time_by_day]])\n\n"
	at org.apache.calcite.test.LatticeTest.testLatticeWithPreDefinedTilesFewerMeasures(LatticeTest.java:369)

[ERROR] testTileAlgorithm(org.apache.calcite.test.LatticeTest)  Time elapsed: 25.113 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableAggregate(group=[{2, 3}])\n  EnumerableTableScan(table=[[adhoc, m{16, 17, 27, 31, 32, 37}]])"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcAggregate(group=[{2, 3}])\n    JdbcJoin(condition=[=($0, $1)], joinType=[inner])\n      JdbcProject(time_id=[$1])\n        JdbcTableScan(table=[[foodmart, sales_fact_1997]])\n      JdbcProject(time_id=[$0], the_year=[$4], quarter=[$8])\n        JdbcTableScan(table=[[foodmart, time_by_day]])\n\n"
	at org.apache.calcite.test.LatticeTest.checkTileAlgorithm(LatticeTest.java:451)
	at org.apache.calcite.test.LatticeTest.testTileAlgorithm(LatticeTest.java:411)

[ERROR] testLatticeWithPreDefinedTilesRollUp(org.apache.calcite.test.LatticeTest)  Time elapsed: 0.359 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: a string containing "EnumerableCalc(expr#0..3=[{inputs}], expr#4=[10], expr#5=[*($t3, $t4)], proj#0..2=[{exprs}], US=[$t5])\n  EnumerableAggregate(group=[{0}], C=[$SUM0($2)], Q=[MIN($1)], agg#2=[$SUM0($4)])\n    EnumerableTableScan(table=[[adhoc, m{27, 31}"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcProject(the_year=[$0], C=[$1], Q=[$2], US=[*($3, 10)])\n    JdbcAggregate(group=[{1}], C=[COUNT()], Q=[MIN($2)], agg#2=[$SUM0($4)])\n      JdbcJoin(condition=[=($3, $0)], joinType=[inner])\n        JdbcProject(time_id=[$0], the_year=[$4], quarter=[$8])\n          JdbcTableScan(table=[[foodmart, time_by_day]])\n        JdbcProject(time_id=[$1], unit_sales=[$7])\n          JdbcTableScan(table=[[foodmart, sales_fact_1997]])\n\n"
	at org.apache.calcite.test.LatticeTest.testLatticeWithPreDefinedTilesRollUp(LatticeTest.java:392)

[ERROR] testLatticeRecognizeGroupJoin(org.apache.calcite.test.LatticeTest)  Time elapsed: 0.041 s  <<< FAILURE!
java.lang.AssertionError: 

Expected: <2>
     but: was <1>
	at org.apache.calcite.test.LatticeTest.testLatticeRecognizeGroupJoin(LatticeTest.java:321)

[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   ComboRuleTest.testCombo:70
[ERROR]   VolcanoPlannerTest.testOomProjectMergeRule:521 Too many rules fired. Output relation is rel#291:EnumerableValues.ENUMERABLE.[[0]](type=RecordType(CHAR(1) f),tuples=[{ '1' }]), expected id to be less than 100
[ERROR]   VolcanoPlannerTest.testRemoveSingleGood:340
[ERROR]   CoreQuidemTest>QuidemTest.test:197->QuidemTest.checkRun:164 Files differ: /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/surefire/sql/agg.iq /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/agg.iq
1471,1475c1471,1476
<   EnumerableJoin(condition=[=($0, $2)], joinType=[inner])
<     EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
<       EnumerableTableScan(table=[[scott, DEPT]])
<     EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
<       EnumerableTableScan(table=[[scott, EMP]])
---
>   EnumerableCalc(expr#0..2=[{inputs}], EMPNO=[$t1], DEPTNO=[$t2], DEPTNO0=[$t0])
>     EnumerableJoin(condition=[=($0, $2)], joinType=[inner])
>       EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
>         EnumerableTableScan(table=[[scott, DEPT]])
>       EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
>         EnumerableTableScan(table=[[scott, EMP]])
1489,1494c1490,1496
< EnumerableAggregate(group=[{}], EXPR$0=[SUM($2)])
<   EnumerableJoin(condition=[=($0, $3)], joinType=[inner])
<     EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
<       EnumerableTableScan(table=[[scott, DEPT]])
<     EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], SAL=[$t5], DEPTNO=[$t7])
<       EnumerableTableScan(table=[[scott, EMP]])
---
> EnumerableCalc(expr#0..1=[{inputs}], expr#2=[0], expr#3=[=($t1, $t2)], expr#4=[null], expr#5=[CASE($t3, $t4, $t0)], EXPR$0=[$t5])
>   EnumerableAggregate(group=[{}], EXPR$0=[$SUM0($2)], agg#1=[COUNT($2)])
>     EnumerableJoin(condition=[=($0, $3)], joinType=[inner])
>       EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
>         EnumerableTableScan(table=[[scott, DEPT]])
>       EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], SAL=[$t5], DEPTNO=[$t7])
>         EnumerableTableScan(table=[[scott, EMP]])
1558,1563c1560,1566
<   EnumerableAggregate(group=[{3}], EXPR$0=[MIN($2)])
<     EnumerableJoin(condition=[=($0, $3)], joinType=[inner])
<       EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
<         EnumerableTableScan(table=[[scott, DEPT]])
<       EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], SAL=[$t5], DEPTNO=[$t7])
<         EnumerableTableScan(table=[[scott, EMP]])
---
>   EnumerableAggregate(group=[{2}], EXPR$0=[MIN($1)])
>     EnumerableCalc(expr#0..3=[{inputs}], EMPNO=[$t1], SAL=[$t2], DEPTNO=[$t3], DEPTNO0=[$t0])
>       EnumerableJoin(condition=[=($0, $3)], joinType=[inner])
>         EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
>           EnumerableTableScan(table=[[scott, DEPT]])
>         EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], SAL=[$t5], DEPTNO=[$t7])
>           EnumerableTableScan(table=[[scott, EMP]])
1577,1582c1580,1586
< EnumerableAggregate(group=[{}], C=[COUNT()], S=[SUM($2)])
<   EnumerableJoin(condition=[=($0, $3)], joinType=[inner])
<     EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
<       EnumerableTableScan(table=[[scott, DEPT]])
<     EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], SAL=[$t5], DEPTNO=[$t7])
<       EnumerableTableScan(table=[[scott, EMP]])
---
> EnumerableCalc(expr#0..2=[{inputs}], expr#3=[0], expr#4=[=($t2, $t3)], expr#5=[null], expr#6=[CASE($t4, $t5, $t1)], C=[$t0], S=[$t6])
>   EnumerableAggregate(group=[{}], C=[COUNT()], S=[$SUM0($2)], agg#2=[COUNT($2)])
>     EnumerableJoin(condition=[=($0, $3)], joinType=[inner])
>       EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
>         EnumerableTableScan(table=[[scott, DEPT]])
>       EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], SAL=[$t5], DEPTNO=[$t7])
>         EnumerableTableScan(table=[[scott, EMP]])

[ERROR]   CoreQuidemTest>QuidemTest.test:197->QuidemTest.checkRun:164 Files differ: /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/surefire/sql/join.iq /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/join.iq
125,130c125,132
< EnumerableAggregate(group=[{0, 2}])
<   EnumerableJoin(condition=[=($0, $2)], joinType=[inner])
<     EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
<       EnumerableTableScan(table=[[scott, DEPT]])
<     EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
<       EnumerableTableScan(table=[[scott, EMP]])
---
> EnumerableCalc(expr#0..1=[{inputs}], DEPTNO0=[$t1], DEPTNO=[$t0])
>   EnumerableAggregate(group=[{1, 2}])
>     EnumerableCalc(expr#0..2=[{inputs}], EMPNO=[$t1], DEPTNO=[$t2], DEPTNO0=[$t0])
>       EnumerableJoin(condition=[=($0, $2)], joinType=[inner])
>         EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
>           EnumerableTableScan(table=[[scott, DEPT]])
>         EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
>           EnumerableTableScan(table=[[scott, EMP]])
145,150c147,153
< EnumerableAggregate(group=[{0}])
<   EnumerableJoin(condition=[=($0, $2)], joinType=[inner])
<     EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
<       EnumerableTableScan(table=[[scott, DEPT]])
<     EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
<       EnumerableTableScan(table=[[scott, EMP]])
---
> EnumerableAggregate(group=[{2}])
>   EnumerableCalc(expr#0..2=[{inputs}], EMPNO=[$t1], DEPTNO=[$t2], DEPTNO0=[$t0])
>     EnumerableJoin(condition=[=($0, $2)], joinType=[inner])
>       EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
>         EnumerableTableScan(table=[[scott, DEPT]])
>       EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
>         EnumerableTableScan(table=[[scott, EMP]])
198,208c201,210
< EnumerableCalc(expr#0..1=[{inputs}], DEPTNO=[$t1], ENAME=[$t0])
<   EnumerableAggregate(group=[{1, 3}])
<     EnumerableJoin(condition=[=($2, $4)], joinType=[inner])
<       EnumerableCalc(expr#0..7=[{inputs}], expr#8=[10], expr#9=[+($t7, $t8)], proj#0..1=[{exprs}], $f8=[$t9])
<         EnumerableTableScan(table=[[scott, EMP]])
<       EnumerableCalc(expr#0..3=[{inputs}], expr#4=[+($t1, $t3)], expr#5=[CAST($t4):INTEGER], DEPTNO=[$t1], $f16=[$t5])
<         EnumerableJoin(condition=[=($1, $3)], joinType=[inner])
<           EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
<             EnumerableTableScan(table=[[scott, EMP]])
<           EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
<             EnumerableTableScan(table=[[scott, EMP]])
---
> EnumerableAggregate(group=[{0, 3}])
>   EnumerableJoin(condition=[=($1, $4)], joinType=[inner])
>     EnumerableCalc(expr#0..3=[{inputs}], expr#4=[+($t1, $t3)], expr#5=[CAST($t4):INTEGER], DEPTNO=[$t1], $f16=[$t5])
>       EnumerableJoin(condition=[=($1, $3)], joinType=[inner])
>         EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
>           EnumerableTableScan(table=[[scott, EMP]])
>         EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
>           EnumerableTableScan(table=[[scott, EMP]])
>     EnumerableCalc(expr#0..7=[{inputs}], expr#8=[10], expr#9=[+($t7, $t8)], proj#0..1=[{exprs}], $f8=[$t9])
>       EnumerableTableScan(table=[[scott, EMP]])

[ERROR]   CoreQuidemTest>QuidemTest.test:197->QuidemTest.checkRun:164 Files differ: /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/surefire/sql/sub-query.iq /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/sub-query.iq
466,467c466,468
< EnumerableCalc(expr#0..2=[{inputs}], A=[$t1], B=[$t2])
<   EnumerableMergeJoin(condition=[=($0, $1)], joinType=[inner])
---
> EnumerableCalc(expr#0..2=[{inputs}], proj#0..1=[{exprs}])
>   EnumerableJoin(condition=[=($0, $2)], joinType=[inner])
>     EnumerableValues(tuples=[[{ 60, 'b' }]])
470d470
<     EnumerableValues(tuples=[[{ 60, 'b' }]])
624c624
< EnumerableSemiJoin(condition=[=($0, $10)], joinType=[inner])
---
> EnumerableSemiJoin(condition=[=($0, $3)], joinType=[inner])
626c626
<   EnumerableCalc(expr#0..7=[{inputs}], expr#8=[=($t7, $t7)], expr#9=['SMITH'], expr#10=[=($t1, $t9)], expr#11=[AND($t8, $t10)], proj#0..7=[{exprs}], $condition=[$t11])
---
>   EnumerableCalc(expr#0..7=[{inputs}], expr#8=[=($t7, $t7)], expr#9=['SMITH'], expr#10=[=($t1, $t9)], expr#11=[AND($t8, $t10)], DEPTNO=[$t7], $condition=[$t11])
833c833
<           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[false], expr#4=[123], expr#5=[null], expr#6=[=($t4, $t5)], expr#7=[IS NULL($t5)], expr#8=[OR($t6, $t7)], cs=[$t3], $condition=[$t8])
---
>           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[null], expr#4=[IS NOT NULL($t3)], expr#5=[123], expr#6=[=($t5, $t3)], expr#7=[IS NULL($t3)], expr#8=[OR($t6, $t7)], cs=[$t4], $condition=[$t8])
1011c1011
<           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[true], expr#4=[10], expr#5=[CAST($t0):TINYINT], expr#6=[=($t4, $t5)], cs=[$t3], $condition=[$t6])
---
>           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[CAST($t0):TINYINT], expr#4=[IS NOT NULL($t3)], expr#5=[10], expr#6=[=($t5, $t3)], expr#7=[IS NULL($t3)], expr#8=[OR($t6, $t7)], cs=[$t4], $condition=[$t8])
1083c1083
<           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[false], expr#4=[123], expr#5=[null], expr#6=[=($t4, $t5)], expr#7=[IS NULL($t5)], expr#8=[OR($t6, $t7)], cs=[$t3], $condition=[$t8])
---
>           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[null], expr#4=[IS NOT NULL($t3)], expr#5=[123], expr#6=[=($t5, $t3)], expr#7=[IS NULL($t3)], expr#8=[OR($t6, $t7)], cs=[$t4], $condition=[$t8])
1261c1261
<           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[true], expr#4=[10], expr#5=[CAST($t0):TINYINT], expr#6=[=($t4, $t5)], cs=[$t3], $condition=[$t6])
---
>           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[CAST($t0):TINYINT], expr#4=[IS NOT NULL($t3)], expr#5=[10], expr#6=[=($t5, $t3)], expr#7=[IS NULL($t3)], expr#8=[OR($t6, $t7)], cs=[$t4], $condition=[$t8])
1311c1311,1312
< EnumerableValues(tuples=[[]])
---
> EnumerableCalc(expr#0..2=[{inputs}], SAL=[$t1])
>   EnumerableValues(tuples=[[]])
1324c1325,1326
< EnumerableValues(tuples=[[]])
---
> EnumerableCalc(expr#0..2=[{inputs}], SAL=[$t1])
>   EnumerableValues(tuples=[[]])
1337c1339,1340
< EnumerableValues(tuples=[[]])
---
> EnumerableCalc(expr#0..2=[{inputs}], SAL=[$t1])
>   EnumerableValues(tuples=[[]])
1350c1353,1354
< EnumerableValues(tuples=[[]])
---
> EnumerableCalc(expr#0..2=[{inputs}], SAL=[$t1])
>   EnumerableValues(tuples=[[]])
1363c1367,1368
< EnumerableValues(tuples=[[]])
---
> EnumerableCalc(expr#0..2=[{inputs}], SAL=[$t1])
>   EnumerableValues(tuples=[[]])
1470c1475
<           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[false], expr#4=[123], expr#5=[null], expr#6=[=($t4, $t5)], expr#7=[IS NULL($t5)], expr#8=[OR($t6, $t7)], cs=[$t3], $condition=[$t8])
---
>           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[null], expr#4=[IS NOT NULL($t3)], expr#5=[123], expr#6=[=($t5, $t3)], expr#7=[IS NULL($t3)], expr#8=[OR($t6, $t7)], cs=[$t4], $condition=[$t8])
1575c1580
<           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[true], expr#4=[10], expr#5=[CAST($t0):TINYINT], expr#6=[=($t4, $t5)], expr#7=[IS NULL($t5)], expr#8=[OR($t6, $t7)], cs=[$t3], $condition=[$t8])
---
>           EnumerableCalc(expr#0..2=[{inputs}], expr#3=[CAST($t0):TINYINT], expr#4=[IS NOT NULL($t3)], expr#5=[10], expr#6=[=($t5, $t3)], expr#7=[IS NULL($t3)], expr#8=[OR($t6, $t7)], cs=[$t4], $condition=[$t8])
1643c1648,1649
< EnumerableValues(tuples=[[]])
---
> EnumerableCalc(expr#0..3=[{inputs}], SAL=[$t1])
>   EnumerableValues(tuples=[[]])

[ERROR]   CoreQuidemTest>QuidemTest.test:197->QuidemTest.checkRun:164 Files differ: /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/surefire/sql/winagg.iq /root/workspace/apache/calcite/432115269/core/target/test-classes/sql/winagg.iq
443c443
< |     10 | 110 | 110 |
---
> |     10 | 110 | 150 |

[ERROR]   JdbcAdapterTest.testEquiJoinPlan:130 
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$2], ENAME=[$3], DEPTNO=[$4], DNAME=[$1])\n    JdbcJoin(condition=[=($4, $0)], joinType=[inner])\n      JdbcProject(DEPTNO=[$0], DNAME=[$1])\n        JdbcTableScan(table=[[SCOTT, DEPT]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$2], DNAME=[$4])\n    JdbcJoin(condition=[=($2, $3)], joinType=[inner])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], DEPTNO=[$7])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcProject(DEPTNO=[$0], DNAME=[$1])\n        JdbcTableScan(table=[[SCOTT, DEPT]])\n\n"
[ERROR]   JdbcAdapterTest.testJoin3TablesPlan:246 
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$3], ENAME=[$4], DNAME=[$8], GRADE=[$0])\n    JdbcJoin(condition=[AND(>($5, $1), <($5, $2))], joinType=[inner])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n      JdbcJoin(condition=[=($3, $4)], joinType=[inner])\n        JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5], DEPTNO=[$7])\n          JdbcTableScan(table=[[SCOTT, EMP]])\n        JdbcProject(DEPTNO=[$0], DNAME=[$1])\n          JdbcTableScan(table=[[SCOTT, DEPT]])"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$0], ENAME=[$1], DNAME=[$5], GRADE=[$6])\n    JdbcJoin(condition=[AND(>($2, $7), <($2, $8))], joinType=[inner])\n      JdbcJoin(condition=[=($3, $4)], joinType=[inner])\n        JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5], DEPTNO=[$7])\n          JdbcTableScan(table=[[SCOTT, EMP]])\n        JdbcProject(DEPTNO=[$0], DNAME=[$1])\n          JdbcTableScan(table=[[SCOTT, DEPT]])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n\n"
[ERROR]   JdbcAdapterTest.testMixedJoinPlan:197 
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$2], ENAME=[$3], EMPNO0=[$2], ENAME0=[$3])\n    JdbcJoin(condition=[AND(=($4, $0), >($5, $1))], joinType=[inner])\n      JdbcProject(EMPNO=[$0], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$0], ENAME=[$1], EMPNO0=[$0], ENAME0=[$1])\n    JdbcJoin(condition=[AND(=($2, $4), >($3, $5))], joinType=[inner])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcProject(EMPNO=[$0], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n\n"
[ERROR]   JdbcAdapterTest.testMixedJoinWithOrPlan:220 
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$3], ENAME=[$4], EMPNO0=[$3], ENAME0=[$4])\n    JdbcJoin(condition=[AND(=($5, $0), OR(>($7, $2), >($1, $6)))], joinType=[inner])\n      JdbcProject(EMPNO=[$0], HIREDATE=[$4], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], HIREDATE=[$4], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$0], ENAME=[$1], EMPNO0=[$0], ENAME0=[$1])\n    JdbcJoin(condition=[AND(=($2, $5), OR(>($4, $7), >($6, $3)))], joinType=[inner])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], MGR=[$3], HIREDATE=[$4], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcProject(EMPNO=[$0], HIREDATE=[$4], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n\n"
[ERROR]   JdbcAdapterTest.testNonEquiJoinPlan:156 
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$3], ENAME=[$4], GRADE=[$0])\n    JdbcJoin(condition=[AND(>($5, $1), <($5, $2))], joinType=[inner])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$0], ENAME=[$1], GRADE=[$3])\n    JdbcJoin(condition=[AND(>($2, $4), <($2, $5))], joinType=[inner])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n\n"
[ERROR]   JdbcAdapterTest.testNonEquiJoinReverseConditionPlan:177 
Expected: a string containing "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$3], ENAME=[$4], GRADE=[$0])\n    JdbcJoin(condition=[AND(<=($1, $5), >=($2, $5))], joinType=[inner])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcProject(EMPNO=[$0], ENAME=[$1], GRADE=[$3])\n    JdbcJoin(condition=[AND(<=($4, $2), >=($5, $2))], joinType=[inner])\n      JdbcProject(EMPNO=[$0], ENAME=[$1], SAL=[$5])\n        JdbcTableScan(table=[[SCOTT, EMP]])\n      JdbcTableScan(table=[[SCOTT, SALGRADE]])\n\n"
[ERROR]   JdbcTest.testAggregateEmpty:3376 
Expected: a string containing "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[0], expr#3=[=($t0, $t2)], expr#4=[null], expr#5=[CASE($t3, $t4, $t1)], expr#6=[/($t5, $t0)], expr#7=[CAST($t6):JavaType(class java.lang.Integer)], CS=[$t0], C=[$t0], S=[$t5], A=[$t7])\n  EnumerableAggregate(group=[{}], CS=[COUNT()], S=[$SUM0($1)])\n    EnumerableCalc(expr#0..4=[{inputs}], expr#5=[0], expr#6=[<($t1, $t5)], proj#0..4=[{exprs}], $condition=[$t6])\n      EnumerableTableScan(table=[[hr, emps]])\n"
     but: was "PLAN=EnumerableCalc(expr#0..2=[{inputs}], expr#3=[0], expr#4=[=($t0, $t3)], expr#5=[null], expr#6=[CASE($t4, $t5, $t1)], expr#7=[/($t2, $t0)], expr#8=[CAST($t7):JavaType(class java.lang.Integer)], CS=[$t0], C=[$t0], S=[$t6], A=[$t8])\n  EnumerableAggregate(group=[{}], CS=[COUNT()], S=[$SUM0($1)], agg#2=[SUM($1)])\n    EnumerableCalc(expr#0..4=[{inputs}], expr#5=[0], expr#6=[<($t1, $t5)], proj#0..4=[{exprs}], $condition=[$t6])\n      EnumerableTableScan(table=[[hr, emps]])\n\n"
[ERROR]   JdbcTest.testDistinctCount2:2640 
Expected: a string containing "EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t0):INTEGER NOT NULL], u=[$t2], m0=[$t1])\n  EnumerableAggregate(group=[{1}], m0=[COUNT($0)])\n    EnumerableAggregate(group=[{2, 7}])\n      EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t0):INTEGER NOT NULL], u=[$t2], m0=[$t1])\n  EnumerableAggregate(group=[{0}], m0=[COUNT($1)])\n    EnumerableCalc(expr#0..1=[{inputs}], unit_sales=[$t1], customer_id=[$t0])\n      EnumerableAggregate(group=[{2, 7}])\n        EnumerableTableScan(table=[[foodmart2, sales_fact_1997]])\n\n"
[ERROR]   JdbcTest.testInnerJoinValues:2578 
Expected: a string containing "EnumerableCalc(expr#0..1=[{inputs}], EMPNO=[$t1], DESC=[$t0])\n  EnumerableAggregate(group=[{1, 2}])\n    EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t3):INTEGER NOT NULL], expr#5=[=($t4, $t0)], expr#6=['SameName'], expr#7=[=($t1, $t6)], expr#8=[AND($t5, $t7)], proj#0..3=[{exprs}], $condition=[$t8])\n      EnumerableJoin(condition=[true], joinType=[inner])\n        EnumerableValues(tuples=[[{ 10, 'SameName' }]])\n        EnumerableTableScan(table=[[SALES, EMPS]])\n"
     but: was "PLAN=EnumerableAggregate(group=[{0, 3}])\n  EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t3):INTEGER NOT NULL], expr#5=[=($t4, $t0)], EMPNO=[$t2], DEPTNO=[$t3], ID=[$t0], DESC=[$t1], $condition=[$t5])\n    EnumerableJoin(condition=[true], joinType=[inner])\n      EnumerableCalc(expr#0..1=[{inputs}], expr#2=['SameName'], expr#3=[=($t1, $t2)], proj#0..1=[{exprs}], $condition=[$t3])\n        EnumerableValues(tuples=[[{ 10, 'SameName' }]])\n      EnumerableTableScan(table=[[SALES, EMPS]])\n\n"
[ERROR]   JdbcTest.testIntersectMismatchedVarchar:4421 
Expected: is "C=12\n"
     but: was "C=2\nC=2\nC=2\nC=2\nC=2\nC=2\nC=2\nC=2\nC=2\nC=2\nC=2\nC=2\n"
[ERROR]   JdbcTest.testMergeJoin:2595 
Expected: a string containing "EnumerableCalc(expr#0..3=[{inputs}], empid=[$t2], deptno=[$t0], name=[$t1])\n  EnumerableJoin(condition=[=($0, $3)], joinType=[inner])\n    EnumerableCalc(expr#0..3=[{inputs}], proj#0..1=[{exprs}])\n      EnumerableTableScan(table=[[hr, depts]])\n    EnumerableCalc(expr#0..4=[{inputs}], proj#0..1=[{exprs}])\n      EnumerableTableScan(table=[[hr, emps]])"
     but: was "PLAN=EnumerableCalc(expr#0..3=[{inputs}], empid=[$t0], deptno=[$t2], name=[$t3])\n  EnumerableJoin(condition=[=($1, $2)], joinType=[inner])\n    EnumerableCalc(expr#0..4=[{inputs}], proj#0..1=[{exprs}])\n      EnumerableTableScan(table=[[hr, emps]])\n    EnumerableCalc(expr#0..3=[{inputs}], proj#0..1=[{exprs}])\n      EnumerableTableScan(table=[[hr, depts]])\n\n"
[ERROR]   JdbcTest.testOrderByFetch:3015 
Expected: a string containing "PLAN=EnumerableCalc(expr#0..23=[{inputs}], store_id=[$t0], grocery_sqft=[$t16])\n  EnumerableLimit(fetch=[5])\n    EnumerableCalc(expr#0..23=[{inputs}], expr#24=[10], expr#25=[<($t0, $t24)], proj#0..23=[{exprs}], $condition=[$t25])\n      EnumerableTableScan(table=[[foodmart2, store]])\n"
     but: was "PLAN=EnumerableLimit(fetch=[5])\n  EnumerableCalc(expr#0..23=[{inputs}], expr#24=[10], expr#25=[<($t0, $t24)], store_id=[$t0], grocery_sqft=[$t16], $condition=[$t25])\n    EnumerableTableScan(table=[[foodmart2, store]])\n\n"
[ERROR]   JdbcTest.testReduceCountNotNullable:3392 
Expected: a string containing "PLAN=EnumerableCalc(expr#0=[{inputs}], CS=[$t0], CS2=[$t0])\n  EnumerableAggregate(group=[{}], CS=[COUNT()])\n    EnumerableCalc(expr#0..4=[{inputs}], expr#5=[0], expr#6=[<($t1, $t5)], proj#0..4=[{exprs}], $condition=[$t6])\n      EnumerableTableScan(table=[[hr, emps]])\n"
     but: was "PLAN=EnumerableCalc(expr#0=[{inputs}], CS=[$t0], CS2=[$t0])\n  EnumerableAggregate(group=[{}], CS=[COUNT()])\n    EnumerableCalc(expr#0..4=[{inputs}], expr#5=[0], expr#6=[<($t1, $t5)], deptno=[$t1], $condition=[$t6])\n      EnumerableTableScan(table=[[hr, emps]])\n\n"
[ERROR]   JdbcTest.testSimpleIn:2731 
Expected: a string containing "EnumerableSemiJoin(condition=[=($0, $5)], joinType=[inner])\n  EnumerableTableScan(table=[[hr, depts]])\n  EnumerableCalc(expr#0..4=[{inputs}], expr#5=[150], expr#6=[<($t0, $t5)], proj#0..4=[{exprs}], $condition=[$t6])\n    EnumerableTableScan(table=[[hr, emps]])"
     but: was "PLAN=EnumerableSemiJoin(condition=[=($0, $4)], joinType=[inner])\n  EnumerableTableScan(table=[[hr, depts]])\n  EnumerableCalc(expr#0..4=[{inputs}], expr#5=[150], expr#6=[<($t0, $t5)], deptno=[$t1], $condition=[$t6])\n    EnumerableTableScan(table=[[hr, emps]])\n\n"
[ERROR]   LatticeTest.testLatticeRecognizeGroupJoin:321 
Expected: <2>
     but: was <1>
[ERROR]   LatticeTest.testLatticeWithPreDefinedTiles:356 
Expected: a string containing "EnumerableTableScan(table=[[adhoc, m{27, 31}"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcAggregate(group=[{2, 3}])\n    JdbcJoin(condition=[=($0, $1)], joinType=[inner])\n      JdbcProject(time_id=[$1])\n        JdbcTableScan(table=[[foodmart, sales_fact_1997]])\n      JdbcProject(time_id=[$0], the_year=[$4], quarter=[$8])\n        JdbcTableScan(table=[[foodmart, time_by_day]])\n\n"
[ERROR]   LatticeTest.testLatticeWithPreDefinedTilesFewerMeasures:369 
Expected: a string containing "EnumerableCalc(expr#0..4=[{inputs}], proj#0..2=[{exprs}])\n  EnumerableTableScan(table=[[adhoc, m{27, 31}"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcAggregate(group=[{2, 3}], C=[COUNT()])\n    JdbcJoin(condition=[=($0, $1)], joinType=[inner])\n      JdbcProject(time_id=[$1])\n        JdbcTableScan(table=[[foodmart, sales_fact_1997]])\n      JdbcProject(time_id=[$0], the_year=[$4], quarter=[$8])\n        JdbcTableScan(table=[[foodmart, time_by_day]])\n\n"
[ERROR]   LatticeTest.testLatticeWithPreDefinedTilesRollUp:392 
Expected: a string containing "EnumerableCalc(expr#0..3=[{inputs}], expr#4=[10], expr#5=[*($t3, $t4)], proj#0..2=[{exprs}], US=[$t5])\n  EnumerableAggregate(group=[{0}], C=[$SUM0($2)], Q=[MIN($1)], agg#2=[$SUM0($4)])\n    EnumerableTableScan(table=[[adhoc, m{27, 31}"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcProject(the_year=[$0], C=[$1], Q=[$2], US=[*($3, 10)])\n    JdbcAggregate(group=[{1}], C=[COUNT()], Q=[MIN($2)], agg#2=[$SUM0($4)])\n      JdbcJoin(condition=[=($3, $0)], joinType=[inner])\n        JdbcProject(time_id=[$0], the_year=[$4], quarter=[$8])\n          JdbcTableScan(table=[[foodmart, time_by_day]])\n        JdbcProject(time_id=[$1], unit_sales=[$7])\n          JdbcTableScan(table=[[foodmart, sales_fact_1997]])\n\n"
[ERROR]   LatticeTest.testTileAlgorithm:411->checkTileAlgorithm:451 
Expected: a string containing "EnumerableAggregate(group=[{2, 3}])\n  EnumerableTableScan(table=[[adhoc, m{16, 17, 27, 31, 32, 37}]])"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcAggregate(group=[{2, 3}])\n    JdbcJoin(condition=[=($0, $1)], joinType=[inner])\n      JdbcProject(time_id=[$1])\n        JdbcTableScan(table=[[foodmart, sales_fact_1997]])\n      JdbcProject(time_id=[$0], the_year=[$4], quarter=[$8])\n        JdbcTableScan(table=[[foodmart, time_by_day]])\n\n"
[ERROR]   LatticeTest.testTileAlgorithm2:423->checkTileAlgorithm:451 
Expected: a string containing "EnumerableAggregate(group=[{0, 1}])\n  EnumerableTableScan(table=[[adhoc, m{27, 31, 32, 36, 37}]"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcAggregate(group=[{2, 3}])\n    JdbcJoin(condition=[=($0, $1)], joinType=[inner])\n      JdbcProject(time_id=[$1])\n        JdbcTableScan(table=[[foodmart, sales_fact_1997]])\n      JdbcProject(time_id=[$0], the_year=[$4], quarter=[$8])\n        JdbcTableScan(table=[[foodmart, time_by_day]])\n\n"
[ERROR]   LatticeTest.testTileAlgorithm3:434->checkTileAlgorithm:451 
Expected: a string containing "EnumerableAggregate(group=[{0, 1}])\n  EnumerableTableScan(table=[[adhoc, m{27, 31, 32, 36, 37}]"
     but: was "PLAN=JdbcToEnumerableConverter\n  JdbcAggregate(group=[{2, 3}])\n    JdbcJoin(condition=[=($0, $1)], joinType=[inner])\n      JdbcProject(time_id=[$1])\n        JdbcTableScan(table=[[foodmart, sales_fact_1997]])\n      JdbcProject(time_id=[$0], the_year=[$4], quarter=[$8])\n        JdbcTableScan(table=[[foodmart, time_by_day]])\n\n"
[ERROR]   MaterializationTest.testJoinAggregateMaterializationAggregateFuncs11:1636->checkMaterialize:200->checkMaterialize:207->checkThatMaterialize:232 
Expected: a string containing "EnumerableAggregate(group=[{2}], agg#0=[COUNT()])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1], expr#3=[+($t1, $t2)], empid=[$t0], EXPR$1=[$t3])\n  EnumerableAggregate(group=[{0}], agg#0=[$SUM0($1)])\n    EnumerableUnion(all=[true])\n      EnumerableAggregate(group=[{1}], agg#0=[COUNT()])\n        EnumerableCalc(expr#0..2=[{inputs}], deptno=[$t1], empid=[$t2], deptno0=[$t0])\n          EnumerableJoin(condition=[=($0, $1)], joinType=[inner])\n            EnumerableCalc(expr#0..4=[{inputs}], expr#5=[11], expr#6=[>=($t5, $t1)], expr#7=[19], expr#8=[<=($t7, $t1)], expr#9=[OR($t6, $t8)], deptno=[$t1], $condition=[$t9])\n              EnumerableTableScan(table=[[hr, emps]])\n            EnumerableCalc(expr#0..3=[{inputs}], deptno=[$t1], empid=[$t2])\n              EnumerableJoin(condition=[=($0, $3)], joinType=[inner])\n                EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], name0=[$t2])\n                  EnumerableTableScan(table=[[hr, locations]])\n                EnumerableCalc(expr#0..4=[{inputs}], expr#5=[CAST($t3):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], deptno=[$t0], empid=[$t2], name10=[$t5])\n                  EnumerableJoin(condition=[=($1, $4)], joinType=[inner])\n                    EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], expr#5=[10], expr#6=[>($t0, $t5)], expr#7=[20], expr#8=[<($t0, $t7)], expr#9=[AND($t6, $t8)], deptno=[$t0], name0=[$t4], $condition=[$t9])\n                      EnumerableTableScan(table=[[hr, depts]])\n                    EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], proj#0..2=[{exprs}])\n                      EnumerableTableScan(table=[[hr, dependents]])\n      EnumerableAggregate(group=[{1}], agg#0=[$SUM0($2)])\n        EnumerableTableScan(table=[[hr, m0]])\n\n"
[ERROR]   MaterializationTest.testJoinAggregateMaterializationAggregateFuncs5:1529->checkMaterialize:200->checkMaterialize:207->checkThatMaterialize:232 
Expected: a string containing "EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1], expr#3=[+($t1, $t2)], deptno=[$t0], S=[$t3])\n  EnumerableAggregate(group=[{1}], agg#0=[$SUM0($3)])\n    EnumerableCalc(expr#0..3=[{inputs}], expr#4=[10], expr#5=[<($t4, $t1)], proj#0..3=[{exprs}], $condition=[$t5])\n      EnumerableTableScan(table=[[hr, m0]])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1], expr#3=[+($t1, $t2)], deptno=[$t0], $f1=[$t3])\n  EnumerableAggregate(group=[{1}], agg#0=[$SUM0($3)])\n    EnumerableCalc(expr#0..3=[{inputs}], expr#4=[10], expr#5=[<($t4, $t1)], proj#0..3=[{exprs}], $condition=[$t5])\n      EnumerableTableScan(table=[[hr, m0]])\n\n"
[ERROR]   MaterializationTest.testJoinAggregateMaterializationNoAggregateFuncs7:1376->checkMaterialize:200->checkMaterialize:207->checkThatMaterialize:232 
Expected: a string containing "EnumerableAggregate(group=[{2}])"
     but: was "PLAN=EnumerableAggregate(group=[{0}])\n  EnumerableUnion(all=[true])\n    EnumerableAggregate(group=[{1}])\n      EnumerableCalc(expr#0..2=[{inputs}], deptno=[$t1], empid=[$t2], deptno0=[$t0])\n        EnumerableJoin(condition=[=($0, $1)], joinType=[inner])\n          EnumerableCalc(expr#0..4=[{inputs}], expr#5=[11], expr#6=[>=($t5, $t1)], deptno=[$t1], $condition=[$t6])\n            EnumerableTableScan(table=[[hr, emps]])\n          EnumerableCalc(expr#0..3=[{inputs}], deptno=[$t1], empid=[$t2])\n            EnumerableJoin(condition=[=($0, $3)], joinType=[inner])\n              EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], name0=[$t2])\n                EnumerableTableScan(table=[[hr, locations]])\n              EnumerableCalc(expr#0..4=[{inputs}], expr#5=[CAST($t3):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], deptno=[$t0], empid=[$t2], name10=[$t5])\n                EnumerableJoin(condition=[=($1, $4)], joinType=[inner])\n                  EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], expr#5=[10], expr#6=[>($t0, $t5)], deptno=[$t0], name0=[$t4], $condition=[$t6])\n                    EnumerableTableScan(table=[[hr, depts]])\n                  EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], proj#0..2=[{exprs}])\n                    EnumerableTableScan(table=[[hr, dependents]])\n    EnumerableCalc(expr#0..1=[{inputs}], empid=[$t1])\n      EnumerableTableScan(table=[[hr, m0]])\n\n"
[ERROR]   MaterializationTest.testJoinAggregateMaterializationNoAggregateFuncs9:1420->checkMaterialize:200->checkMaterialize:207->checkThatMaterialize:232 
Expected: a string containing "EnumerableAggregate(group=[{2}])"
     but: was "PLAN=EnumerableAggregate(group=[{0}])\n  EnumerableUnion(all=[true])\n    EnumerableAggregate(group=[{1}])\n      EnumerableCalc(expr#0..2=[{inputs}], deptno=[$t1], empid=[$t2], deptno0=[$t0])\n        EnumerableJoin(condition=[=($0, $1)], joinType=[inner])\n          EnumerableCalc(expr#0..4=[{inputs}], expr#5=[11], expr#6=[>=($t5, $t1)], expr#7=[19], expr#8=[<=($t7, $t1)], expr#9=[OR($t6, $t8)], deptno=[$t1], $condition=[$t9])\n            EnumerableTableScan(table=[[hr, emps]])\n          EnumerableCalc(expr#0..3=[{inputs}], deptno=[$t1], empid=[$t2])\n            EnumerableJoin(condition=[=($0, $3)], joinType=[inner])\n              EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], name0=[$t2])\n                EnumerableTableScan(table=[[hr, locations]])\n              EnumerableCalc(expr#0..4=[{inputs}], expr#5=[CAST($t3):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], deptno=[$t0], empid=[$t2], name10=[$t5])\n                EnumerableJoin(condition=[=($1, $4)], joinType=[inner])\n                  EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], expr#5=[10], expr#6=[>($t0, $t5)], expr#7=[20], expr#8=[<($t0, $t7)], expr#9=[AND($t6, $t8)], deptno=[$t0], name0=[$t4], $condition=[$t9])\n                    EnumerableTableScan(table=[[hr, depts]])\n                  EnumerableCalc(expr#0..1=[{inputs}], expr#2=[CAST($t1):VARCHAR CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], proj#0..2=[{exprs}])\n                    EnumerableTableScan(table=[[hr, dependents]])\n    EnumerableCalc(expr#0..1=[{inputs}], empid=[$t1])\n      EnumerableTableScan(table=[[hr, m0]])\n\n"
[ERROR]   MaterializationTest.testJoinMaterializationUKFK5:1872->checkMaterialize:200->checkMaterialize:207->checkThatMaterialize:232 
Expected: a string containing "EnumerableCalc(expr#0..1=[{inputs}], empid0=[$t0])\n  EnumerableTableScan(table=[[hr, m0]])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], empid=[$t0])\n  EnumerableTableScan(table=[[hr, m0]])\n\n"
[ERROR]   MaterializationTest.testJoinMaterializationUKFK6:1887->checkMaterialize:200->checkMaterialize:207->checkThatMaterialize:232 
Expected: a string containing "EnumerableCalc(expr#0..1=[{inputs}], empid0=[$t0])\n  EnumerableTableScan(table=[[hr, m0]])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], empid=[$t0])\n  EnumerableTableScan(table=[[hr, m0]])\n\n"
[ERROR]   ScannableTableTest.testPFPushDownProjectFilterAggregateGroup:256 
Expected: a string containing "PLAN=EnumerableAggregate(group=[{0}], C=[COUNT()])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles]], filters=[[>($2, 1900)]], projects=[[0]])"
     but: was "PLAN=EnumerableAggregate(group=[{0}], C=[COUNT()])\n  EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1900], expr#3=[>($t1, $t2)], proj#0..1=[{exprs}], $condition=[$t3])\n    EnumerableInterpreter\n      BindableTableScan(table=[[s, beatles]], projects=[[0, 2]])\n\n"
[ERROR]   ScannableTableTest.testPFPushDownProjectFilterAggregateNested:279 
Expected: a string containing "PLAN=EnumerableAggregate(group=[{0}], C=[COUNT()])\n  EnumerableAggregate(group=[{0, 1}])\n    EnumerableInterpreter\n      BindableTableScan(table=[[s, beatles]], filters=[[=($2, 1940)]], projects=[[2, 0]])"
     but: was "PLAN=EnumerableAggregate(group=[{0}], C=[COUNT()])\n  EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1940], expr#3=[=($t0, $t2)], proj#0..1=[{exprs}], $condition=[$t3])\n    EnumerableAggregate(group=[{0, 1}])\n      EnumerableInterpreter\n        BindableTableScan(table=[[s, beatles]], projects=[[2, 0]])\n\n"
[ERROR]   ScannableTableTest.testPFPushDownProjectFilterInAggregateNoGroup:237 
Expected: a string containing "PLAN=EnumerableAggregate(group=[{}], M=[MAX($0)])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles]], filters=[[>($0, 1)]], projects=[[2]])"
     but: was "PLAN=EnumerableAggregate(group=[{}], M=[MAX($1)])\n  EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1], expr#3=[>($t0, $t2)], proj#0..1=[{exprs}], $condition=[$t3])\n    EnumerableInterpreter\n      BindableTableScan(table=[[s, beatles]], projects=[[0, 2]])\n\n"
[ERROR]   ScannableTableTest.testPFTableRefusesFilterCooperative:221 
Expected: a string containing "PLAN=EnumerableInterpreter\n  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[2]])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[4], expr#3=[=($t0, $t2)], k=[$t1], $condition=[$t3])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles2]], projects=[[0, 2]])\n\n"
[ERROR]   ScannableTableTest.testPFTableRefusesFilterSingleColumn:315 
Expected: a string containing "PLAN=EnumerableInterpreter\n  BindableTableScan(table=[[s, beatles2]], filters=[[>($2, 1941)]], projects=[[2]])"
     but: was "PLAN=EnumerableCalc(expr#0=[{inputs}], expr#1=[1941], expr#2=[>($t0, $t1)], k=[$t0], $condition=[$t2])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles2]], projects=[[2]])\n\n"
[ERROR]   ScannableTableTest.testProjectableFilterableCooperative:148 
Expected: a string containing "PLAN=EnumerableInterpreter\n  BindableTableScan(table=[[s, beatles]], filters=[[=($0, 4)]], projects=[[1]])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[4], expr#3=[=($t0, $t2)], j=[$t1], $condition=[$t3])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles]], projects=[[0, 1]])\n\n"
[ERROR]   ScannableTableTest.testProjectableFilterableNonCooperative:165 
Expected: a string containing "PLAN=EnumerableInterpreter\n  BindableTableScan(table=[[s, beatles2]], filters=[[=($0, 4)]], projects=[[1]]"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[4], expr#3=[=($t0, $t2)], j=[$t1], $condition=[$t3])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles2]], projects=[[0, 1]])\n\n"
[ERROR]   ScannableTableTest.testProjectableFilterableWithProjectAndFilter:182 
Expected: a string containing "PLAN=EnumerableInterpreter\n  BindableTableScan(table=[[s, beatles]], filters=[[=($0, 4)]], projects=[[2, 1]]"
     but: was "PLAN=EnumerableCalc(expr#0..2=[{inputs}], k=[$t2], j=[$t1])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles]], filters=[[=($0, 4)]])\n\n"
[ERROR]   ScannableTableTest.testProjectableFilterableWithProjectFilterNonCooperative:202 
Expected: a string containing "PLAN=EnumerableInterpreter\n  BindableTableScan(table=[[s, beatles]], filters=[[>($2, 1941)]], projects=[[0, 2]])"
     but: was "PLAN=EnumerableCalc(expr#0..1=[{inputs}], expr#2=[1941], expr#3=[>($t1, $t2)], proj#0..1=[{exprs}], $condition=[$t3])\n  EnumerableInterpreter\n    BindableTableScan(table=[[s, beatles]], projects=[[0, 2]])\n\n"
[ERROR]   StreamTest.testStreamToRelationJoin:283 
Expected: a string containing "EnumerableCalc(expr#0..6=[{inputs}], proj#0..1=[{exprs}], SUPPLIERID=[$t6])\n  EnumerableJoin(condition=[=($4, $5)], joinType=[inner])\n    EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t2):VARCHAR(32) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL], proj#0..4=[{exprs}])\n      EnumerableInterpreter\n        BindableTableScan(table=[[STREAM_JOINS, ORDERS, (STREAM)]])\n    EnumerableInterpreter\n      BindableTableScan(table=[[STREAM_JOINS, PRODUCTS]])"
     but: was "PLAN=EnumerableCalc(expr#0..6=[{inputs}], proj#0..1=[{exprs}], SUPPLIERID=[$t6])\n  EnumerableUnion(all=[true])\n    EnumerableValues(tuples=[[]])\n    EnumerableJoin(condition=[=($4, $5)], joinType=[inner])\n      EnumerableCalc(expr#0..3=[{inputs}], expr#4=[CAST($t2):VARCHAR(32) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL], proj#0..4=[{exprs}])\n        EnumerableInterpreter\n          BindableTableScan(table=[[STREAM_JOINS, ORDERS, (STREAM)]])\n      EnumerableInterpreter\n        BindableTableScan(table=[[STREAM_JOINS, PRODUCTS]])\n\n"
[ERROR]   EnumerableCorrelateTest.simpleCorrelateDecorrelated:36 
Expected: a string containing "EnumerableCalc(expr#0..2=[{inputs}], empid=[$t0], name=[$t2])\n  EnumerableSemiJoin(condition=[=($1, $3)], joinType=[inner])\n    EnumerableCalc(expr#0..4=[{inputs}], proj#0..2=[{exprs}])\n      EnumerableTableScan(table=[[s, emps]])\n    EnumerableTableScan(table=[[s, depts]])"
     but: was "PLAN=EnumerableCalc(expr#0..2=[{inputs}], empid=[$t0], name=[$t2])\n  EnumerableSemiJoin(condition=[=($1, $3)], joinType=[inner])\n    EnumerableCalc(expr#0..4=[{inputs}], proj#0..2=[{exprs}])\n      EnumerableTableScan(table=[[s, emps]])\n    EnumerableCalc(expr#0..3=[{inputs}], deptno=[$t0])\n      EnumerableTableScan(table=[[s, depts]])\n\n"
[ERROR] Errors: 
[ERROR]   CoreQuidemTest>QuidemTest.test:195 » InvocationTarget
[ERROR]   StreamTest.testStreamFilterProject:131 » Runtime exception while preparing [se...
[INFO] 
[ERROR] Tests run: 4557, Failures: 45, Errors: 2, Skipped: 118
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Calcite ............................................ SUCCESS [  1.318 s]
[INFO] Calcite Linq4j ..................................... SUCCESS [  4.309 s]
[INFO] Calcite Core ....................................... FAILURE [02:24 min]
[INFO] Calcite Babel ...................................... SKIPPED
[INFO] Calcite Cassandra .................................. SKIPPED
[INFO] Calcite Druid ...................................... SKIPPED
[INFO] Calcite Elasticsearch .............................. SKIPPED
[INFO] Calcite Examples ................................... SKIPPED
[INFO] Calcite Example CSV ................................ SKIPPED
[INFO] Calcite Example Function ........................... SKIPPED
[INFO] Calcite File ....................................... SKIPPED
[INFO] Calcite Geode ...................................... SKIPPED
[INFO] Calcite MongoDB .................................... SKIPPED
[INFO] Calcite Pig ........................................ SKIPPED
[INFO] Calcite Piglet ..................................... SKIPPED
[INFO] Calcite Plus ....................................... SKIPPED
[INFO] Calcite Server ..................................... SKIPPED
[INFO] Calcite Spark ...................................... SKIPPED
[INFO] Calcite Splunk ..................................... SKIPPED
[INFO] Calcite Ubenchmark ................................. SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 02:30 min
[INFO] Finished at: 2018-09-23T14:18:34+02:00
[INFO] Final Memory: 35M/575M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.0:test (default-test) on project calcite-core: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/apache/calcite/432115269/core/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :calcite-core
