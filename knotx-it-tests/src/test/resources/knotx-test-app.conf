########## GLOBALS ##########

globals.routingOperations.handlers {
  request = [
    {
      name = cookieHandler
    },
    {
      name = bodyHandler
    },
    {
      name = knotContextHandler
    }
  ],
  response = [
    {
      name = headerHandler
      config.name = X-Server
      config.value = Knot.x
    },
    {
      name = writerHandler
      config.allowedResponseHeaders = [
        "Access-Control-Allow-Origin",
        "Allow",
        "Cache-Control",
        "Content-Disposition",
        "Content-Encoding",
        "Content-Language",
        "Content-Location",
        "Content-MD5",
        "Content-Range",
        "Content-Type",
        "Content-Length",
        "Content-Security-Policy",
        "Date",
        "Edge-Control",
        "ETag",
        "Expires",
        "Last-Modified",
        "Location",
        "Pragma",
        "Proxy-Authenticate",
        "Server",
        "Set-Cookie",
        "Status",
        "Surrogate-Control",
        "Vary",
        "Via",
        "X-Frame-Options",
        "X-XSRF-TOKEN",
        "X-XSS-Protection",
        "X-Content-Type-Options",
        "X-UA-Compatible",
        "X-Request-ID",
        "X-Server"
      ]
    }
  ]
}

modules = [
  "server=io.knotx.server.KnotxServerVerticle",
  "httpRepo=io.knotx.repository.http.HttpRepositoryConnectorVerticle",
  "fsRepo=io.knotx.repository.fs.FilesystemRepositoryConnectorVerticle",
  "splitter=io.knotx.splitter.FragmentSplitterVerticle",
  "assembler=io.knotx.assembler.FragmentAssemblerVerticle",
  "hbsKnot=io.knotx.knot.templating.HandlebarsKnotVerticle",
  "serviceKnot=io.knotx.knot.service.ServiceKnotVerticle",
  "actionKnot=io.knotx.knot.action.ActionKnotVerticle",
  "serviceAdapter=io.knotx.adapter.service.http.HttpServiceAdapterVerticle",
  "mockRepo=io.knotx.mocks.MockRemoteRepositoryVerticle",
  "mockService=io.knotx.mocks.MockServiceVerticle"
],

config.server.options.config {
  serverOptions.port = 9092
  routingSpecificationLocation = /openapi.yaml
  routingOperations = [
    {
      operationId = local-get
      handlers = ${globals.routingOperations.handlers.request} [
        {
          name = repositoryHandler
          config.proxyAddress = knotx.core.repository.filesystem
        },
        {
          name = splitterHandler
          config.proxyAddress = knotx.core.splitter
        },
        {
          name = knotEngineHandler
          config.routing = {
            proxyAddress = knotx.knot.action,
            onTransition.next {
              address = knotx.knot.service,
              onTransition.next {
                address = knotx.knot.handlebars
              }
            }
          }
        },
        {
          name = assemblerHandler
          config.proxyAddress = knotx.core.assembler
        }
      ] ${globals.routingOperations.handlers.response}
    },
    {
      operationId = local-post
      handlers = ${globals.routingOperations.handlers.request} [
        {
          name = repositoryHandler
          config.proxyAddress = knotx.core.repository.filesystem
        },
        {
          name = splitterHandler
          config.proxyAddress = knotx.core.splitter
        },
        {
          name = knotEngineHandler
          config.routing = {
            proxyAddress = knotx.knot.action,
            onTransition.next {
              address = knotx.knot.service,
              onTransition.next {
                address = knotx.knot.handlebars
              }
            }
          }
        },
        {
          name = assemblerHandler
          config.proxyAddress = knotx.core.assembler
        }
      ] ${globals.routingOperations.handlers.response}
    },
    {
      operationId = remote-get
      handlers = ${globals.routingOperations.handlers.request} [
        {
          name = repositoryHandler
          config.proxyAddress = knotx.core.repository.http
        },
        {
          name = splitterHandler
          config.proxyAddress = knotx.core.splitter
        },
        {
          name = knotEngineHandler
          config.routing = {
            proxyAddress = knotx.knot.action,
            onTransition.next {
              address = knotx.knot.service,
              onTransition.next {
                address = knotx.knot.handlebars
              }
            }
          }
        },
        {
          name = assemblerHandler
          config.proxyAddress = knotx.core.assembler
        }
      ] ${globals.routingOperations.handlers.response}
    }
  ]
}

config.mockRepo.options.config {
  mockDataRoot = mock/repository,
  httpPort = 4001
},


config.mockService.options.config {
  mockDataRoot = mock/service,
  bouncing = true,
  httpPort = 4000
}


config.actionAdapter.options.config {
  address = mock.action.adapter,
  clientOptions {
    maxPoolSize = 1000,
    keepAlive = false
  },
  customRequestHeader {
    name = Server-User-Agent,
    value = Knot.x
  },
  services = [
    {
      path = "/service/mock/.*",
      scheme = http,
      domain = localhost,
      port = 4000,
      allowedRequestHeaders = [
        "Content-Type",
        "X-*"
      ]
    },
    {
      scheme = http,
      path = "/service/.*",
      domain = localhost,
      port = 8080,
      allowedRequestHeaders = [
        "Content-Type",
        "X-*"
      ]
    }
  ]
}

config.actionKnot.options.config {
  formIdentifierName = _frmId,
  adapters = [
    {
      name = subscribe-competition,
      address = mock.action.adapter,
      params.path = /service/mock/post-competition.json
      allowedRequestHeaders = [
        "Cookie"
      ],
      allowedResponseHeaders = [
        "Set-Cookie",
        "Location"
      ]
    },
    {
      name = subscribe-newsletter,
      address = mock.action.adapter,
      params.path = /service/mock/post-newsletter.json
      allowedRequestHeaders = [
        "Cookie"
      ],
      allowedResponseHeaders = [
        "Set-Cookie",
        "Location"
      ]
    },
    {
      name = step1,
      address = mock.action.adapter,
      params.path = /service/mock/post-step-1.json
      allowedRequestHeaders =  [
        "Cookie",
        "Content-Type",
        "Content-Length"
      ],
      allowedResponseHeaders = [
        "Set-Cookie",
        "Location"
      ]
    },
    {
      name = step2,
      address = mock.action.adapter,
      params.path = /service/mock/post-step-2.json
      allowedRequestHeaders = [
        "Cookie",
        "Content-Type",
        "Content-Length"
      ],
      allowedResponseHeaders = [
        "Set-Cookie",
        "Location"
      ]
    }
  ]
}

config.httpRepo.options.config.clientDestination {
  scheme = http,
  domain = localhost,
  port = 4001
}

config.serviceKnot.options.config.services = [
  {
    name = first-service,
    address = knotx.adapter.service.http,
    params.path = /service/mock/first.json
    cacheKey = first
  },
  {
    name = second-service,
    address = knotx.adapter.service.http,
    params.path = /service/mock/second.json
  },
  {
    name = third-service,
    address = knotx.adapter.service.http,
    params.path = /service/mock/third.json
  },
  {
    name = labelsRepository,
    address = knotx.adapter.service.http
  }
]


config.serviceAdapter.options.config.services = [
  {
    path = "/service/mock/.*",
    scheme = http,
    domain = localhost,
    port = 4000,
    allowedRequestHeaders = [
      "Content-Type",
      "X-*"
    ]
  },
  {
    path = "/service/.*",
    scheme = http,
    domain = localhost,
    port = 8080,
    allowedRequestHeaders = [
      "Content-Type",
      "X-*"
    ]
  }
]

config.hbsKnot.options.config.cacheSize = 1000

config.splitter.options.config.snippetOptions {
  tagName = script,
  paramsPrefix = data-knotx-
}

config.assembler.options.config.snippetOptions {
  tagName = script,
  paramsPrefix = data-knotx-
}
