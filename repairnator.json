{
  "bugType": "only_fail",
  "hostname": "cyclone1",
  "repo": "JMRI/JMRI",
  "metrics": {
    "ReproductionDate": "Oct 3, 2018 10:04:02 AM",
    "BuggyBuildId": 436503218,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/JMRI/JMRI/builds/436503218",
    "BuggyBuildDate": "Oct 3, 2018 10:03:49 AM",
    "BugCommit": "fb5f2331bc21a95852157a7c8dced7ca4cac1ebc",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 138,
    "NbFileApp": 4089,
    "NbFileTests": 4554,
    "NbCPU": 8,
    "FreeMemory": 1310708336,
    "TotalMemory": 2431123456,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 79020464,
      "ComputeClasspath": 230329888,
      "ComputeTestDir": 214708152,
      "BuildProject": 68214536,
      "InitRepoToPush": 234247712,
      "ComputeSourceDir": 1282910536,
      "ComputeModules": 1282908448,
      "CloneRepository": 180234032,
      "CheckoutPatchedBuild": 1310708336,
      "TestProject": 301932816,
      "AssertFixer": 651666608,
      "GatherTestInformation": 349988208,
      "CommitPatch": 1310708336
    },
    "NbSucceedingTests": 34281,
    "BugCommitUrl": "http://github.com/JMRI/JMRI/commit/fb5f2331bc21a95852157a7c8dced7ca4cac1ebc",
    "NbFailingTests": 3,
    "NbErroringTests": 32,
    "NbSkippingTests": 2144,
    "NbRunningTests": 34316,
    "FailureNames": [
      "java.lang.AssertionError",
      "java.lang.NoClassDefFoundError",
      "java.lang.ExceptionInInitializerError"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 26,
      "ComputeClasspath": 10,
      "ComputeTestDir": 0,
      "BuildProject": 106,
      "InitRepoToPush": 56,
      "ComputeSourceDir": 0,
      "ComputeModules": 0,
      "CloneRepository": 248,
      "CheckoutPatchedBuild": 0,
      "TestProject": 1180,
      "AssertFixer": 170,
      "GatherTestInformation": 2,
      "CommitPatch": 47
    }
  },
  "failing-test-cases": [
    {
      "className": "jmri.jmrit.logix.LogixActionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testLogixAction"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "jmri.jmrit.ussctc.OsIndicatorTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIntantiateNoLock",
        "testIntantiateLocked",
        "testInvokeNoLock"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "jmri.implementation.JmriTwoStatePropertyListenerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCTor"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "jmri.implementation.JmriSimplePropertyListenerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCTor"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "jmri.ConditionalVariableTest",
      "failingMethods": [],
      "erroringMethods": [
        "testState",
        "testCompare",
        "testDataString",
        "testEvaluate",
        "testStringToVariableTest",
        "testGetOpernString",
        "testCtor",
        "testGetTestTypeString",
        "testEquals",
        "testConditionalType_toString"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "jmri.jmrix.nce.NceConsistTest",
      "failingMethods": [
        "testCtor2"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Unexpected ERROR or higher messages emitted",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "jmri.implementation.DefaultConditionalTest",
      "failingMethods": [
        "testActionPlaySound"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Unexpected ERROR or higher messages emitted",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "jmri.implementation.JmriMultiStatePropertyListenerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCTor"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "jmri.configurexml.LoadAndStoreTest",
      "failingMethods": [],
      "erroringMethods": [
        "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/LoadFileTest295.xml (pass\u003dtrue)]",
        "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/LoadFileTest295-4.7.4.xml (pass\u003dtrue)]",
        "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/PanelFileSchemaTest382-4.7.4.xml (pass\u003dtrue)]",
        "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/LoadFileTest277.xml (pass\u003dtrue)]",
        "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/PanelFileSchemaTest382.xml (pass\u003dtrue)]",
        "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/PanelFileSchemaTest.xml (pass\u003dtrue)]",
        "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/LoadFileTest.xml (pass\u003dtrue)]",
        "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/PanelFileSchemaTest295.xml (pass\u003dtrue)]",
        "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/LoadFileTest-4.7.4.xml (pass\u003dtrue)]",
        "loadLoadStoreFileCheck[java/test/jmri/configurexml/load/LoadFileTest277-4.7.4.xml (pass\u003dtrue)]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "jmri.jmrix.loconet.spjfile.SpjFileTest",
      "failingMethods": [
        "testPlayWav"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Level mismatch when looking for WARN message: \"line not supported: interface SourceDataLine supporting format PCM_UNSIGNED 11200.0 Hz, 8 bit, mono, 1 bytes/frame, \" found \"error opening line: javax.sound.sampled.LineUnavailableException\"",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "jmri.ConditionalTest",
      "failingMethods": [],
      "erroringMethods": [
        "testEnums",
        "testArrays"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "jmri.implementation.JmriMemoryPropertyListenerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCTor"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "jmri.implementation.JmriClockPropertyListenerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCTor"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "jmri.managers.LogixSystemTest",
      "failingMethods": [],
      "erroringMethods": [
        "testLogixReferenceSetup"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class jmri.Conditional$Type",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ],
  "failingModule": "/root/workspace/JMRI/JMRI/436503218"
}