{
  "bugType": "only_fail",
  "hostname": "cyclone1",
  "repo": "INRIA/spoon",
  "metrics": {
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/a0a356ba2cf78a582aa0354002fe3633613c45f0",
    "NbFailingTests": 6,
    "NbErroringTests": 7,
    "NbSkippingTests": 6,
    "NbRunningTests": 1568,
    "FailureNames": [
      "spoon.SpoonException",
      "java.lang.AssertionError",
      "java.io.NotSerializableException",
      "java.lang.NullPointerException",
      "org.junit.ComparisonFailure"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 6,
      "ComputeClasspath": 7,
      "ComputeTestDir": 0,
      "BuildProject": 79,
      "InitRepoToPush": 5,
      "ComputeSourceDir": 0,
      "ComputeModules": 0,
      "CloneRepository": 9,
      "CheckoutPatchedBuild": 0,
      "TestProject": 439,
      "AssertFixer": 14,
      "GatherTestInformation": 0,
      "CommitPatch": 3
    },
    "ReproductionDate": "Oct 13, 2018 11:03:52 AM",
    "BuggyBuildId": 440945119,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/440945119",
    "BuggyBuildDate": "Oct 13, 2018 11:04:19 AM",
    "BugCommit": "a0a356ba2cf78a582aa0354002fe3633613c45f0",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 34,
    "NbFileApp": 652,
    "NbFileTests": 708,
    "NbCPU": 8,
    "FreeMemory": 212108384,
    "TotalMemory": 602406912,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 49127944,
      "ComputeClasspath": 69552000,
      "ComputeTestDir": 61879688,
      "BuildProject": 40525728,
      "InitRepoToPush": 70309072,
      "ComputeSourceDir": 210121456,
      "ComputeModules": 208361424,
      "CloneRepository": 98673920,
      "CheckoutPatchedBuild": 212108384,
      "TestProject": 92856016,
      "AssertFixer": 155663488,
      "GatherTestInformation": 69575224,
      "CommitPatch": 212108384
    },
    "NbSucceedingTests": 1555
  },
  "failing-test-cases": [
    {
      "className": "spoon.test.parent.ContractOnSettersParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "testContract[public interface CtJavaDoc extends spoon.reflect.code.CtComment {\n    @spoon.support.DerivedProperty\n    java.lang.String getShortDescription();\n\n    @spoon.support.DerivedProperty\n    java.lang.String getLongDescription();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    java.util.List\u003cspoon.reflect.code.CtJavaDocTag\u003e getTags();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E removeTag(int arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E removeTag(spoon.reflect.code.CtJavaDocTag arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E addTag(spoon.reflect.code.CtJavaDocTag arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E addTag(int arg0, spoon.reflect.code.CtJavaDocTag arg1);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E setTags(java.util.List\u003cspoon.reflect.code.CtJavaDocTag\u003e arg0);\n\n    spoon.reflect.code.CtJavaDoc clone();\n}]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [
        "testSrcMainJava",
        "testSpecPackage"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "6 public methods should be documented with proper API documentation: \nspoon.reflect.visitor.CommentHelper#printComment(spoon.reflect.visitor.PrinterHelper,spoon.reflect.code.CtComment)\nspoon.support.javadoc.Javadoc#parse(java.lang.String)\nspoon.support.javadoc.JavadocBlockTag#toText()\nspoon.support.javadoc.JavadocDescription#parseText(java.lang.String)\nspoon.support.javadoc.JavadocDescriptionElement#toText()\nspoon.support.javadoc.JavadocInlineTag#fromText(java.lang.String)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "you have created a new package or removed an existing one, please declare it explicitly in SpoonArchitectureEnforcerTest#testSpecPackage\n\nDetails: Package spoon.support.javadoc presents in computed but not expected set.",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.api.MetamodelTest",
      "failingMethods": [
        "testRoleOnField"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[]\u003e but was:\u003c[/**\nparsed version of the javadoc */\nspoon.support.javadoc.Javadoc javadoc;]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGenerateCloneVisitor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Get more than one setter. Please make an more ingenious method to get setter method. 0 /**\nparsed version of the javadoc */\nspoon.support.javadoc.Javadoc javadoc;",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.serializable.ModelStreamerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGZipCompressionType",
        "testDefaultCompressionType",
        "testNoneCompressionType"
      ],
      "failures": [
        {
          "failureName": "java.io.NotSerializableException",
          "failureDetail": "spoon.support.javadoc.Javadoc",
          "isError": true
        },
        {
          "failureName": "java.io.NotSerializableException",
          "failureDetail": "spoon.support.javadoc.Javadoc",
          "isError": true
        },
        {
          "failureName": "java.io.NotSerializableException",
          "failureDetail": "spoon.support.javadoc.Javadoc",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.imports.ImportScannerTest",
      "failingMethods": [
        "testImportOnSpoon"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Import scanner missed 11 imports expected:\u003c0\u003e but was:\u003c11\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.enums.EnumsTest",
      "failingMethods": [
        "testPrintEnumValues"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.parent.SetParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "testContract[public interface CtJavaDoc extends spoon.reflect.code.CtComment {\n    @spoon.support.DerivedProperty\n    java.lang.String getShortDescription();\n\n    @spoon.support.DerivedProperty\n    java.lang.String getLongDescription();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    java.util.List\u003cspoon.reflect.code.CtJavaDocTag\u003e getTags();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E removeTag(int arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E removeTag(spoon.reflect.code.CtJavaDocTag arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E addTag(spoon.reflect.code.CtJavaDocTag arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E addTag(int arg0, spoon.reflect.code.CtJavaDocTag arg1);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E setTags(java.util.List\u003cspoon.reflect.code.CtJavaDocTag\u003e arg0);\n\n    spoon.reflect.code.CtJavaDoc clone();\n}]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.replace.ReplaceParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "testContract[CtJavaDoc]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.javadoc.JavaDocTest",
      "failingMethods": [
        "testJavaDocReprint"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...s Bar {\n    /**\n    [ * Creates an annotation type.\n     *\n     * @param owner\n     *   the package of the annotation type\n     * @param simpleName\n    ] *   the name of ann...\u003e but was:\u003c...s Bar {\n    /**\n    [Creates an annotation type. *\n     * @param owner *   the package of the annotation type\n     * @param simpleName] *   the name of ann...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ],
  "failingModule": "/root/workspace/INRIA/spoon/440945119"
}