{
  "bugType": "only_fail",
  "hostname": "cyclone1",
  "repo": "INRIA/spoon",
  "metrics": {
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 8,
      "ComputeClasspath": 13,
      "ComputeTestDir": 0,
      "BuildProject": 102,
      "InitRepoToPush": 7,
      "ComputeSourceDir": 1,
      "ComputeModules": 0,
      "CloneRepository": 15,
      "CheckoutPatchedBuild": 0,
      "TestProject": 674,
      "AssertFixer": 37,
      "GatherTestInformation": 2,
      "CommitPatch": 4
    },
    "NbErroringTests": 55,
    "NbSkippingTests": 4,
    "NbRunningTests": 1416,
    "NbFailingTests": 10,
    "FailureNames": [
      "spoon.SpoonException",
      "java.lang.AssertionError",
      "java.lang.IllegalArgumentException",
      "java.lang.NullPointerException",
      "org.junit.ComparisonFailure"
    ],
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/dd847ed33e44cff7d620633761449a8db4092792",
    "ReproductionDate": "Jul 17, 2018 4:58:27 PM",
    "BuggyBuildId": 404936373,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/404936373",
    "BuggyBuildDate": "Jul 17, 2018 4:55:08 PM",
    "BugCommit": "dd847ed33e44cff7d620633761449a8db4092792",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 30,
    "NbFileApp": 621,
    "NbFileTests": 696,
    "NbCPU": 8,
    "FreeMemory": 535206312,
    "TotalMemory": 1112014848,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 235970160,
      "ComputeClasspath": 338317872,
      "ComputeTestDir": 332989088,
      "BuildProject": 225659536,
      "InitRepoToPush": 343426600,
      "ComputeSourceDir": 528288248,
      "ComputeModules": 528288248,
      "CloneRepository": 97781216,
      "CheckoutPatchedBuild": 535206312,
      "TestProject": 205203656,
      "AssertFixer": 606888304,
      "GatherTestInformation": 180306416,
      "CommitPatch": 535206312
    },
    "NbSucceedingTests": 1351
  },
  "failing-test-cases": [
    {
      "className": "spoon.test.trycatch.TryCatchTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCompileMultiTryCatchWithCustomExceptions"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:trycatch\n CtPackageImpl:testclasses\n CtClassImpl:Statement\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/trycatch/testclasses/Statement.java:4) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.api.MetamodelTest",
      "failingMethods": [
        "testGetAllMetamodelInterfacess",
        "testRuntimeMetamodel",
        "testMetamodelWithoutSources"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "You might need to update api/Metamodel.java: Field CtJavaDoc#commentContent\u003cjava.lang.String\u003e.derived hardcoded value \u003d false but computed value is true\nThese Metamodel.Field instances are missing on Type CtJavaDoc: [javadocContent]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c4\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: \u003c[spoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.CtSwitch, spoon.reflect.code.CtJavaDocTag, spoon.reflect.declaration.CtNamedElement, spoon.reflect.code.CtUnaryOperator, spoon.reflect.declaration.CtElement, spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.code.CtAssert, spoon.reflect.declaration.CtExecutable, spoon.reflect.code.CtThisAccess, spoon.reflect.declaration.CtImport, spoon.reflect.declaration.CtField, spoon.reflect.reference.CtTypeParameterReference, spoon.reflect.reference.CtParameterReference, spoon.reflect.code.CtCodeSnippetExpression, spoon.reflect.declaration.CtModule, spoon.reflect.code.CtJavadocDescription, spoon.reflect.reference.CtIntersectionTypeReference, spoon.reflect.code.CtFieldAccess, spoon.reflect.reference.CtVariableReference, spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtFieldWrite, spoon.reflect.code.CtSynchronized, spoon.reflect.declaration.CtMethod, spoon.reflect.code.CtLocalVariable, spoon.reflect.declaration.CtEnum, spoon.reflect.code.CtIf, spoon.reflect.code.CtThrow, spoon.reflect.declaration.CtPackage, spoon.reflect.reference.CtWildcardReference, spoon.reflect.code.CtBreak, spoon.reflect.code.CtStatement, spoon.reflect.reference.CtExecutableReference, spoon.reflect.declaration.CtEnumValue, spoon.reflect.code.CtExpression, spoon.reflect.code.CtNewArray, spoon.reflect.code.CtNewClass, spoon.reflect.reference.CtLocalVariableReference, spoon.reflect.code.CtLambda, spoon.reflect.declaration.CtConstructor, spoon.reflect.code.CtJavadocSnippetDescription, spoon.reflect.code.CtCodeSnippetStatement, spoon.reflect.code.CtTargetedExpression, spoon.reflect.declaration.CtVariable, spoon.reflect.declaration.CtModuleDirective, spoon.reflect.declaration.CtPackageExport, spoon.reflect.code.CtCase, spoon.reflect.code.CtConstructorCall, spoon.reflect.code.CtBodyHolder, spoon.reflect.declaration.ModifierKind, spoon.reflect.reference.CtUnboundVariableReference, spoon.reflect.code.CtFieldRead, spoon.reflect.declaration.CtProvidedService, spoon.reflect.code.CtTry, spoon.reflect.code.UnaryOperatorKind, spoon.reflect.code.CtLiteral, spoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtPackageReference, spoon.reflect.code.CtStatementList, spoon.reflect.code.CtSuperAccess, spoon.reflect.declaration.CtInterface, spoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtFor, spoon.reflect.code.CtVariableWrite, spoon.reflect.code.CtCatch, spoon.reflect.code.BinaryOperatorKind, spoon.reflect.code.CtArrayAccess, spoon.reflect.declaration.CtUsedService, spoon.reflect.code.CtConditional, spoon.reflect.code.CtArrayWrite, spoon.reflect.declaration.CtType, spoon.reflect.code.CtTypeAccess, spoon.reflect.code.CtContinue, spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtReference, spoon.reflect.declaration.ParentNotInitializedException, spoon.reflect.code.CtAnnotationFieldAccess, spoon.reflect.code.CtAssignment, spoon.reflect.declaration.CtModifiable, spoon.reflect.reference.CtCatchVariableReference, spoon.reflect.declaration.CtTypeInformation, spoon.reflect.code.CtLabelledFlowBreak, spoon.reflect.code.CtAbstractInvocation, spoon.reflect.code.CtVariableAccess, spoon.reflect.code.CtBlock, spoon.reflect.code.CtReturn, spoon.reflect.declaration.CtCodeSnippet, spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtParameter, spoon.reflect.declaration.CtTypeMember, spoon.reflect.code.CtComment, spoon.reflect.code.CtCatchVariable, spoon.reflect.code.CtCodeElement, spoon.reflect.code.CtJavaDoc, spoon.reflect.declaration.CtAnnotatedElementType, spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtModuleReference, spoon.reflect.declaration.CtShadowable, spoon.reflect.code.CtLoop, spoon.reflect.code.CtVariableRead, spoon.reflect.code.CtForEach, spoon.reflect.code.CtInvocation, spoon.reflect.declaration.CtImportKind, spoon.reflect.declaration.CtAnonymousExecutable, spoon.reflect.code.CtDo, spoon.reflect.code.CtJavadocInlineTag, spoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.declaration.CtTypeParameter, spoon.reflect.code.CtRHSReceiver, spoon.reflect.reference.CtTypeReference, spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtCFlowBreak, spoon.reflect.code.CtArrayRead, spoon.reflect.code.CtJavadocDescriptionElement, spoon.reflect.code.CtWhile, spoon.reflect.declaration.CtClass, spoon.reflect.reference.CtFieldReference, spoon.reflect.declaration.CtAnnotationType]\u003e\n     but: was \u003c[spoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.CtSwitch, spoon.reflect.code.CtJavaDocTag, spoon.reflect.declaration.CtNamedElement, spoon.reflect.code.CtUnaryOperator, spoon.reflect.declaration.CtElement, spoon.reflect.declaration.CtModuleRequirement, spoon.reflect.code.CtAssert, spoon.reflect.declaration.CtExecutable, spoon.reflect.code.CtThisAccess, spoon.reflect.declaration.CtImport, spoon.reflect.declaration.CtField, spoon.reflect.reference.CtTypeParameterReference, spoon.reflect.reference.CtParameterReference, spoon.reflect.code.CtCodeSnippetExpression, spoon.reflect.declaration.CtModule, spoon.reflect.reference.CtIntersectionTypeReference, spoon.reflect.code.CtFieldAccess, spoon.reflect.reference.CtVariableReference, spoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtFieldWrite, spoon.reflect.code.CtSynchronized, spoon.reflect.declaration.CtMethod, spoon.reflect.code.CtLocalVariable, spoon.reflect.declaration.CtEnum, spoon.reflect.code.CtIf, spoon.reflect.reference.CtWildcardReference, spoon.reflect.declaration.CtPackage, spoon.reflect.code.CtThrow, spoon.reflect.code.CtStatement, spoon.reflect.code.CtBreak, spoon.reflect.reference.CtExecutableReference, spoon.reflect.declaration.CtEnumValue, spoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression, spoon.reflect.code.CtNewClass, spoon.reflect.reference.CtLocalVariableReference, spoon.reflect.code.CtLambda, spoon.reflect.declaration.CtConstructor, spoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtCodeSnippetStatement, spoon.reflect.declaration.CtVariable, spoon.reflect.declaration.CtModuleDirective, spoon.reflect.declaration.CtPackageExport, spoon.reflect.code.CtCase, spoon.reflect.code.CtConstructorCall, spoon.reflect.reference.CtUnboundVariableReference, spoon.reflect.declaration.ModifierKind, spoon.reflect.code.CtBodyHolder, spoon.reflect.declaration.CtProvidedService, spoon.reflect.code.CtFieldRead, spoon.reflect.code.CtTry, spoon.reflect.code.UnaryOperatorKind, spoon.reflect.code.CtLiteral, spoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtPackageReference, spoon.reflect.code.CtSuperAccess, spoon.reflect.code.CtStatementList, spoon.reflect.declaration.CtInterface, spoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtVariableWrite, spoon.reflect.code.CtFor, spoon.reflect.code.CtCatch, spoon.reflect.code.CtArrayAccess, spoon.reflect.code.BinaryOperatorKind, spoon.reflect.declaration.CtUsedService, spoon.reflect.code.CtConditional, spoon.reflect.code.CtArrayWrite, spoon.reflect.declaration.CtType, spoon.reflect.code.CtTypeAccess, spoon.reflect.code.CtContinue, spoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtReference, spoon.reflect.declaration.ParentNotInitializedException, spoon.reflect.code.CtAssignment, spoon.reflect.code.CtAnnotationFieldAccess, spoon.reflect.reference.CtCatchVariableReference, spoon.reflect.declaration.CtModifiable, spoon.reflect.declaration.CtTypeInformation, spoon.reflect.code.CtLabelledFlowBreak, spoon.reflect.code.CtAbstractInvocation, spoon.reflect.code.CtVariableAccess, spoon.reflect.declaration.CtCodeSnippet, spoon.reflect.code.CtBlock, spoon.reflect.code.CtReturn, spoon.reflect.declaration.CtParameter, spoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeMember, spoon.reflect.code.CtComment, spoon.reflect.code.CtCodeElement, spoon.reflect.code.CtCatchVariable, spoon.reflect.code.CtJavaDoc, spoon.reflect.declaration.CtAnnotatedElementType, spoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtModuleReference, spoon.reflect.declaration.CtShadowable, spoon.reflect.code.CtLoop, spoon.reflect.code.CtVariableRead, spoon.reflect.code.CtForEach, spoon.reflect.code.CtInvocation, spoon.reflect.declaration.CtImportKind, spoon.reflect.declaration.CtAnonymousExecutable, spoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.code.CtDo, spoon.reflect.declaration.CtTypeParameter, spoon.reflect.code.CtRHSReceiver, spoon.reflect.reference.CtTypeReference, spoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtCFlowBreak, spoon.reflect.code.CtWhile, spoon.reflect.code.CtArrayRead, spoon.reflect.declaration.CtClass, spoon.reflect.reference.CtFieldReference, spoon.reflect.declaration.CtAnnotationType]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c23\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [],
      "erroringMethods": [
        "testStaticMethodWithDifferentClassSameNameJava7NoCollision",
        "testStaticMethodWithDifferentClassSameNameCollision",
        "testStaticMethodWithDifferentClassSameNameJava3NoCollision",
        "testSortingOfImports"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:imports\n CtPackageImpl:testclasses2\n CtPackageImpl:apachetestsuite\n CtPackageImpl:staticjava3\n CtClassImpl:AllLangTestJava3\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/staticjava3/AllLangTestJava3.java:30) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:imports\n CtPackageImpl:testclasses2\n CtPackageImpl:apachetestsuite\n CtPackageImpl:staticmethod\n CtClassImpl:AllLangTestSuiteStaticMethod\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/staticmethod/AllLangTestSuiteStaticMethod.java:31) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:reflect\n CtPackageImpl:visitor\n CtClassImpl:DefaultJavaPrettyPrinter\n CtMethodImpl:getLineSeparator\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java:234) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:imports\n CtPackageImpl:testclasses2\n CtPackageImpl:apachetestsuite\n CtPackageImpl:staticcollision\n CtClassImpl:AllLangTestSuite\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/staticcollision/AllLangTestSuite.java:31) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.reflect.visitor.CtScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testScannerCallsAllProperties",
        "testScannerContract"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:reflect\n CtPackageImpl:annotations\n CtAnnotationTypeImpl:PropertyGetter\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/annotations/PropertyGetter.java:26) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.refactoring.RefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned",
        "testThisInConstructorAfterATransformation",
        "testTransformedInstanceofAfterATransformation",
        "testThisInConstructor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:refactoring\n CtPackageImpl:testclasses\n CtAnnotationTypeImpl:TestTryRename\n CtAnnotationMethodImpl:value\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/refactoring/testclasses/TestTryRename.java:11) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:refactoring\n CtPackageImpl:testclasses\n CtAnnotationTypeImpl:TestTryRename\n CtAnnotationMethodImpl:value\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/refactoring/testclasses/TestTryRename.java:11) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:refactoring\n CtPackageImpl:testclasses\n CtAnnotationTypeImpl:TestTryRename\n CtAnnotationMethodImpl:value\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/refactoring/testclasses/TestTryRename.java:11) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:refactoring\n CtPackageImpl:testclasses\n CtAnnotationTypeImpl:TestTryRename\n CtAnnotationMethodImpl:value\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/refactoring/testclasses/TestTryRename.java:11) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.refactoring.MethodsRefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCtParameterRemoveRefactoring"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:refactoring\n CtPackageImpl:parameter\n CtPackageImpl:testclasses\n CtAnnotationTypeImpl:TestHierarchy\n CtAnnotationMethodImpl:value\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/refactoring/parameter/testclasses/TestHierarchy.java:11) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.api.APITest",
      "failingMethods": [
        "testSetterInNodes"
      ],
      "erroringMethods": [
        "testPrintNotAllSourcesWithFilter",
        "testPrintNotAllSourcesWithNames",
        "testPrintNotAllSourcesInCommandLine"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:template\n CtClassImpl:AbstractTemplate\n CtMethodImpl:isAddGeneratedBy\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/template/AbstractTemplate.java:62) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:template\n CtClassImpl:AbstractTemplate\n CtMethodImpl:isAddGeneratedBy\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/template/AbstractTemplate.java:62) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:template\n CtClassImpl:AbstractTemplate\n CtMethodImpl:isAddGeneratedBy\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/template/AbstractTemplate.java:62) failed",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Check the method setContentDescription(spoon.reflect.code.CtJavadocDescription) in the declaring class spoon.support.reflect.code.CtJavaDocImpl",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.template.TemplateTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTemplateInheritance",
        "testAnotherFieldAccessNameSubstitution"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element of class interface spoon.reflect.code.CtJavaDoc does not have CtRole.JAVADOC_CONTENT",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element of class interface spoon.reflect.code.CtJavaDoc does not have CtRole.JAVADOC_CONTENT",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.serializable.ModelStreamerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGZipCompressionType",
        "testDefaultCompressionType",
        "testNoneCompressionType"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:reflect\n CtPackageImpl:declaration\n CtInterfaceImpl:CtAnnotation\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/declaration/CtAnnotation.java:38) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:reflect\n CtPackageImpl:declaration\n CtInterfaceImpl:CtAnnotation\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/declaration/CtAnnotation.java:38) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:reflect\n CtPackageImpl:declaration\n CtInterfaceImpl:CtAnnotation\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/declaration/CtAnnotation.java:38) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.reflect.visitor.CtVisitorTest",
      "failingMethods": [],
      "erroringMethods": [
        "testMethodsInVisitor"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parent.ContractOnSettersParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "testContract[public interface CtJavaDoc extends spoon.reflect.code.CtComment {\n    @spoon.support.DerivedProperty\n    java.lang.String getShortDescription();\n\n    @spoon.support.DerivedProperty\n    java.lang.String getLongDescription();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    java.util.List\u003cspoon.reflect.code.CtJavaDocTag\u003e getTags();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E removeTag(spoon.reflect.code.CtJavaDocTag arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E removeTag(int arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E addTag(spoon.reflect.code.CtJavaDocTag arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E addTag(int arg0, spoon.reflect.code.CtJavaDocTag arg1);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.JAVADOC_CONTENT)\n    spoon.reflect.code.CtJavadocDescription getContentDescription();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.JAVADOC_CONTENT)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E setContentDescription(spoon.reflect.code.CtJavadocDescription arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E setTags(java.util.List\u003cspoon.reflect.code.CtJavaDocTag\u003e arg0);\n\n    spoon.reflect.code.CtJavaDoc clone();\n\n    @spoon.support.DerivedProperty\n    java.lang.String getContent();\n}]"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "cannot instantiate spoon.reflect.code.CtJavadocDescription",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [],
      "erroringMethods": [
        "metamodelPackageRule",
        "testFactorySubFactory"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:reflect\n CtPackageImpl:factory\n CtClassImpl:AnnotationFactory\n CtConstructorImpl:\u003cinit\u003e\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/factory/AnnotationFactory.java:38) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [
        "testGenerateReplacementVisitor",
        "testGenerateCtBiScanner"
      ],
      "erroringMethods": [
        "testGenerateCloneVisitor",
        "testGenerateRoleHandler"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element of class interface spoon.reflect.code.CtJavaDoc does not have CtRole.JAVADOC_CONTENT",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "ReplacementVisitor different expected:\u003c...nerator\n    class Ct[ImportReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cspoon.reflect.reference.CtReference\u003e {\n        private final spoon.reflect.declaration.CtImport element;\n\n        CtImportReferenceReplaceListener(spoon.reflect.declaration.CtImport element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(spoon.reflect.reference.CtReference replace) {\n            this.element.setReference(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtModuleModuleDirectivesReplaceListener implements spoon.support.visitor.replace.ReplaceListListener\u003cjava.util.List\u003e {\n        private final spoon.reflect.declaration.CtModule element;\n\n        CtModuleModuleDirectivesReplaceListener(spoon.reflect.declaration.CtModule element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(java.util.List replace) {\n            this.element.setModuleDirectives(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtModuleRootPackageReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cspoon.reflect.declaration.CtPackage\u003e {\n        private final spoon.reflect.declaration.CtModule element;\n\n        CtModuleRootPackageReplaceListener(spoon.reflect.declaration.CtModule element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(spoon.reflect.declaration.CtPackage replace) {\n            this.element.setRootPackage(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtPackageExportPackageReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cspoon.reflect.reference.CtPackageReference\u003e {\n        private final spoon.reflect.declaration.CtPackageExport element;\n\n        CtPackageExportPackageReferenceReplaceListener(spoon.reflect.declaration.CtPackageExport element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(spoon.reflect.reference.CtPackageReference replace) {\n            this.element.setPackageReference(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtPackageExportTargetExportReplaceListener implements spoon.support.visitor.replace.ReplaceListListener\u003cjava.util.List\u003e {\n        private final spoon.reflect.declaration.CtPackageExport element;\n\n        CtPackageExportTargetExportReplaceListener(spoon.reflect.declaration.CtPackageExport element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(java.util.List replace) {\n            this.element.setTargetExport(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtModuleRequirementModuleReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cspoon.reflect.reference.CtModuleReference\u003e {\n        private final spoon.reflect.declaration.CtModuleRequirement element;\n\n        CtModuleRequirementModuleReferenceReplaceListener(spoon.reflect.declaration.CtModuleRequirement element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(spoon.reflect.reference.CtModuleReference replace) {\n            this.element.setModuleReference(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtProvidedServiceServiceTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cspoon.reflect.reference.CtTypeReference\u003e {\n        private final spoon.reflect.declaration.CtProvidedService element;\n\n        CtProvidedServiceServiceTypeReplaceListener(spoon.reflect.declaration.CtProvidedService element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(spoon.reflect.reference.CtTypeReference replace) {\n            this.element.setServiceType(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtProvidedServiceImplementationTypesReplaceListener implements spoon.support.visitor.replace.ReplaceListListener\u003cjava.util.List\u003e {\n        private final spoon.reflect.declaration.CtProvidedService element;\n\n        CtProvidedServiceImplementationTypesReplaceListener(spoon.reflect.declaration.CtProvidedService element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(java.util.List replace) {\n            this.element.setImplementationTypes(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtUsedServiceServiceTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cspoon.reflect.reference.CtTypeReference\u003e {\n        private final spoon.reflect.declaration.CtUsedService element;\n\n        CtUsedServiceServiceTypeReplaceListener(spoon.reflect.declaration.CtUsedService element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(spoon.reflect.reference.CtTypeReference replace) {\n            this.element.setServiceType(replace);\n        }\n    }\n\n    public static void replace(spoon.reflect.declaration.CtElement original, spoon.reflect.declaration.CtElement replace) {\n        try {\n            new spoon.support.visitor.replace.ReplacementVisitor(original, (replace \u003d\u003d null ? spoon.support.visitor.replace.ReplacementVisitor.EMPTY : new spoon.reflect.declaration.CtElement[]{ replace })).scan(original.getParent());\n        } catch (spoon.support.visitor.replace.InvalidReplaceException e) {\n            throw e;\n        } catch (spoon.SpoonException ignore) {\n        }\n    }\n\n    public static \u003cE extends spoon.reflect.declaration.CtElement\u003e void replace(spoon.reflect.declaration.CtElement original, java.util.Collection\u003cE\u003e replaces) {\n        try {\n            new spoon.support.visitor.replace.ReplacementVisitor(original, replaces.toArray(new spoon.reflect.declaration.CtElement[replaces.size()])).scan(original.getParent());\n        } catch (spoon.support.visitor.replace.InvalidReplaceException e) {\n            throw e;\n        } catch (spoon.SpoonException ignore) {\n        }\n    }\n\n    private spoon.reflect.declaration.CtElement original;\n\n    private spoon.reflect.declaration.CtElement[] replace;\n\n    private static final spoon.reflect.declaration.CtElement[] EMPTY \u003d new spoon.reflect.declaration.CtElement[0];\n\n    private ReplacementVisitor(spoon.reflect.declaration.CtElement original, spoon.reflect.declaration.CtElement... replace) {\n        this.original \u003d original;\n        this.replace \u003d (replace \u003d\u003d null) ? spoon.support.visitor.replace.ReplacementVisitor.EMPTY : replace;\n    }\n\n    private \u003cK, V extends spoon.reflect.declaration.CtElement\u003e void replaceInMapIfExist(java.util.Map\u003cK, V\u003e mapProtected, spoon.support.visitor.replace.ReplaceMapListener listener) {\n        java.util.Map\u003cK, V\u003e map \u003d new java.util.HashMap\u003c\u003e(mapProtected);\n        V shouldBeDeleted \u003d null;\n        K key \u003d null;\n        for (java.util.Map.Entry\u003cK, V\u003e entry : map.entrySet()) {\n            if ((entry.getValue()) \u003d\u003d (original)) {\n                shouldBeDeleted \u003d entry.getValue();\n                key \u003d entry.getKey();\n                break;\n            }\n        }\n        if (shouldBeDeleted !\u003d null) {\n            if ((replace.length) \u003e 0) {\n                if ((replace.length) \u003e 1) {\n                    throw new spoon.support.visitor.replace.InvalidReplaceException((\"Cannot replace single value by multiple values in \" + (listener.getClass().getSimpleName())));\n                }\n                V val \u003d ((V) (replace[0]));\n                if (val !\u003d null) {\n                    map.put(key, val);\n                    val.setParent(shouldBeDeleted.getParent());\n                }else {\n                    map.remove(key);\n                }\n            }else {\n                map.remove(key);\n            }\n            listener.set(map);\n        }\n    }\n\n    private \u003cT extends spoon.reflect.declaration.CtElement\u003e void replaceInSetIfExist(java.util.Set\u003cT\u003e setProtected, spoon.support.visitor.replace.ReplaceSetListener listener) {\n        java.util.Set\u003cT\u003e set \u003d new java.util.HashSet\u003c\u003e(setProtected);\n        T shouldBeDeleted \u003d null;\n        for (T element : set) {\n            if (element \u003d\u003d (original)) {\n                shouldBeDeleted \u003d element;\n                break;\n            }\n        }\n        if (shouldBeDeleted !\u003d null) {\n            set.remove(shouldBeDeleted);\n            for (spoon.reflect.declaration.CtElement ele : replace) {\n                if (ele !\u003d null) {\n                    set.add(((T) (ele)));\n                    ele.setParent(shouldBeDeleted.getParent());\n                }\n            }\n            listener.set(set);\n        }\n    }\n\n    private \u003cT extends spoon.reflect.declaration.CtElement\u003e void replaceInListIfExist(java.util.List\u003cT\u003e listProtected, spoon.support.visitor.replace.ReplaceListListener listener) {\n        java.util.List\u003cT\u003e list \u003d new java.util.ArrayList\u003c\u003e(listProtected);\n        T shouldBeDeleted \u003d null;\n        int index \u003d 0;\n        for (int i \u003d 0; i \u003c (list.size()); i++) {\n            if ((list.get(i)) \u003d\u003d (original)) {\n                index \u003d i;\n                shouldBeDeleted \u003d list.get(i);\n                break;\n            }\n        }\n        if (shouldBeDeleted !\u003d null) {\n            list.remove(index);\n            if ((replace.length) \u003e 0) {\n                for (int i \u003d 0; i \u003c (replace.length); i++) {\n                    T ele \u003d ((T) (replace[i]));\n                    if (ele !\u003d null) {\n                        list.add(index, ele);\n                        ele.setParent(shouldBeDeleted.getParent());\n                        index \u003d index + 1;\n                    }\n                }\n            }\n            listener.set(list);\n        }\n    }\n\n    private void replaceElementIfExist(spoon.reflect.declaration.CtElement candidate, spoon.support.visitor.replace.ReplaceListener listener) {\n        if (candidate \u003d\u003d (original)) {\n            spoon.reflect.declaration.CtElement val \u003d null;\n            if ((replace.length) \u003e 0) {\n                if ((replace.length) \u003e 1) {\n                    throw new spoon.support.visitor.replace.InvalidReplaceException((\"Cannot replace single value by multiple values in \" + (listener.getClass().getSimpleName())));\n                }\n                val \u003d replace[0];\n            }\n            if (val !\u003d null) {\n                val.setParent(candidate.getParent());\n            }\n            listener.set(val);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cA extends java.lang.annotation.Annotation\u003e void visitCtAnnotation(final spoon.reflect.declaration.CtAnnotation\u003cA\u003e annotation) {\n        replaceElementIfExist(annotation.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(annotation));\n        replaceInListIfExist(annotation.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotation));\n        replaceElementIfExist(annotation.getAnnotationType(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationAnnotationTypeReplaceListener(annotation));\n        replaceInListIfExist(annotation.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotation));\n        replaceInMapIfExist(annotation.getValues(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationValuesReplaceListener(annotation));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cA extends java.lang.annotation.Annotation\u003e void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType\u003cA\u003e annotationType) {\n        replaceInListIfExist(annotationType.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationType));\n        replaceInListIfExist(annotationType.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(annotationType));\n        replaceInListIfExist(annotationType.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationType));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {\n        replaceInListIfExist(anonymousExec.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(anonymousExec));\n        replaceElementIfExist(anonymousExec.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(anonymousExec));\n        replaceInListIfExist(anonymousExec.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(anonymousExec));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtArrayRead(final spoon.reflect.code.CtArrayRead\u003cT\u003e arrayRead) {\n        replaceInListIfExist(arrayRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(arrayRead));\n        replaceElementIfExist(arrayRead.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(arrayRead));\n        replaceInListIfExist(arrayRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(arrayRead));\n        replaceElementIfExist(arrayRead.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(arrayRead));\n        replaceElementIfExist(arrayRead.getIndexExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayAccessIndexExpressionReplaceListener(arrayRead));\n        replaceInListIfExist(arrayRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(arrayRead));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite\u003cT\u003e arrayWrite) {\n        replaceInListIfExist(arrayWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(arrayWrite));\n        replaceElementIfExist(arrayWrite.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(arrayWrite));\n        replaceInListIfExist(arrayWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(arrayWrite));\n        replaceElementIfExist(arrayWrite.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(arrayWrite));\n        replaceElementIfExist(arrayWrite.getIndexExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayAccessIndexExpressionReplaceListener(arrayWrite));\n        replaceInListIfExist(arrayWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(arrayWrite));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));\n        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));\n        replaceElementIfExist(reference.getComponentType(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayTypeReferenceComponentTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtAssert(final spoon.reflect.code.CtAssert\u003cT\u003e asserted) {\n        replaceInListIfExist(asserted.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(asserted));\n        replaceElementIfExist(asserted.getAssertExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssertAssertExpressionReplaceListener(asserted));\n        replaceElementIfExist(asserted.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssertExpressionReplaceListener(asserted));\n        replaceInListIfExist(asserted.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(asserted));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT, A extends T\u003e void visitCtAssignment(final spoon.reflect.code.CtAssignment\u003cT, A\u003e assignement) {\n        replaceInListIfExist(assignement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(assignement));\n        replaceElementIfExist(assignement.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(assignement));\n        replaceInListIfExist(assignement.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(assignement));\n        replaceElementIfExist(assignement.getAssigned(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssignmentAssignedReplaceListener(assignement));\n        replaceElementIfExist(assignement.getAssignment(), new spoon.support.visitor.replace.ReplacementVisitor.CtRHSReceiverAssignmentReplaceListener(assignement));\n        replaceInListIfExist(assignement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(assignement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator\u003cT\u003e operator) {\n        replaceInListIfExist(operator.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(operator));\n        replaceElementIfExist(operator.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(operator));\n        replaceInListIfExist(operator.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(operator));\n        replaceElementIfExist(operator.getLeftHandOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorLeftHandOperandReplaceListener(operator));\n        replaceElementIfExist(operator.getRightHandOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorRightHandOperandReplaceListener(operator));\n        replaceInListIfExist(operator.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(operator));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cR\u003e void visitCtBlock(final spoon.reflect.code.CtBlock\u003cR\u003e block) {\n        replaceInListIfExist(block.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(block));\n        replaceInListIfExist(block.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(block));\n        replaceInListIfExist(block.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(block));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {\n        replaceInListIfExist(breakStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(breakStatement));\n        replaceInListIfExist(breakStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(breakStatement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cS\u003e void visitCtCase(final spoon.reflect.code.CtCase\u003cS\u003e caseStatement) {\n        replaceInListIfExist(caseStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(caseStatement));\n        replaceElementIfExist(caseStatement.getCaseExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtCaseCaseExpressionReplaceListener(caseStatement));\n        replaceInListIfExist(caseStatement.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(caseStatement));\n        replaceInListIfExist(caseStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(caseStatement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {\n        replaceInListIfExist(catchBlock.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(catchBlock));\n        replaceElementIfExist(catchBlock.getParameter(), new spoon.support.visitor.replace.ReplacementVisitor.CtCatchParameterReplaceListener(catchBlock));\n        replaceElementIfExist(catchBlock.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtCatchBodyReplaceListener(catchBlock));\n        replaceInListIfExist(catchBlock.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(catchBlock));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtClass(final spoon.reflect.declaration.CtClass\u003cT\u003e ctClass) {\n        replaceInListIfExist(ctClass.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctClass));\n        replaceElementIfExist(ctClass.getSuperclass(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperclassReplaceListener(ctClass));\n        replaceInSetIfExist(ctClass.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(ctClass));\n        replaceInListIfExist(ctClass.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(ctClass));\n        replaceInListIfExist(ctClass.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(ctClass));\n        replaceInListIfExist(ctClass.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctClass));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {\n        replaceInListIfExist(typeParameter.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(typeParameter));\n        replaceElementIfExist(typeParameter.getSuperclass(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperclassReplaceListener(typeParameter));\n        replaceInListIfExist(typeParameter.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(typeParameter));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConditional(final spoon.reflect.code.CtConditional\u003cT\u003e conditional) {\n        replaceElementIfExist(conditional.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(conditional));\n        replaceInListIfExist(conditional.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(conditional));\n        replaceElementIfExist(conditional.getCondition(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalConditionReplaceListener(conditional));\n        replaceElementIfExist(conditional.getThenExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalThenExpressionReplaceListener(conditional));\n        replaceElementIfExist(conditional.getElseExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalElseExpressionReplaceListener(conditional));\n        replaceInListIfExist(conditional.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(conditional));\n        replaceInListIfExist(conditional.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(conditional));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConstructor(final spoon.reflect.declaration.CtConstructor\u003cT\u003e c) {\n        replaceInListIfExist(c.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(c));\n        replaceInListIfExist(c.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(c));\n        replaceInSetIfExist(c.getThrownTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableThrownTypesReplaceListener(c));\n        replaceInListIfExist(c.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(c));\n        replaceElementIfExist(c.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(c));\n        replaceInListIfExist(c.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(c));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {\n        replaceInListIfExist(continueStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(continueStatement));\n        replaceInListIfExist(continueStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(continueStatement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {\n        replaceInListIfExist(doLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(doLoop));\n        replaceElementIfExist(doLoop.getLoopingExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtDoLoopingExpressionReplaceListener(doLoop));\n        replaceElementIfExist(doLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(doLoop));\n        replaceInListIfExist(doLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(doLoop));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT extends java.lang.Enum\u003c?\u003e\u003e void visitCtEnum(final spoon.reflect.declaration.CtEnum\u003cT\u003e ctEnum) {\n        replaceInListIfExist(ctEnum.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctEnum));\n        replaceInSetIfExist(ctEnum.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(ctEnum));\n        replaceInListIfExist(ctEnum.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(ctEnum));\n        replaceInListIfExist(ctEnum.getEnumValues(), new spoon.support.visitor.replace.ReplacementVisitor.CtEnumEnumValuesReplaceListener(ctEnum));\n        replaceInListIfExist(ctEnum.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctEnum));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceDeclaringTypeReplaceListener(reference));\n        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceParametersReplaceListener(reference));\n        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n        replaceInListIfExist(reference.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtField(final spoon.reflect.declaration.CtField\u003cT\u003e f) {\n        replaceInListIfExist(f.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(f));\n        replaceElementIfExist(f.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(f));\n        replaceElementIfExist(f.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(f));\n        replaceInListIfExist(f.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(f));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue\u003cT\u003e enumValue) {\n        replaceInListIfExist(enumValue.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(enumValue));\n        replaceElementIfExist(enumValue.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(enumValue));\n        replaceElementIfExist(enumValue.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(enumValue));\n        replaceInListIfExist(enumValue.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(enumValue));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtThisAccess(final spoon.reflect.code.CtThisAccess\u003cT\u003e thisAccess) {\n        replaceInListIfExist(thisAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(thisAccess));\n        replaceInListIfExist(thisAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(thisAccess));\n        replaceElementIfExist(thisAccess.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(thisAccess));\n        replaceInListIfExist(thisAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(thisAccess));\n        replaceElementIfExist(thisAccess.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(thisAccess));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess\u003cT\u003e annotationFieldAccess) {\n        replaceInListIfExist(annotationFieldAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationFieldAccess));\n        replaceInListIfExist(annotationFieldAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationFieldAccess));\n        replaceInListIfExist(annotationFieldAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(annotationFieldAccess));\n        replaceElementIfExist(annotationFieldAccess.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(annotationFieldAccess));\n        replaceElementIfExist(annotationFieldAccess.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationFieldAccessVariableReplaceListener(annotationFieldAccess));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldReferenceDeclaringTypeReplaceListener(reference));\n        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {\n        replaceInListIfExist(forLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(forLoop));\n        replaceInListIfExist(forLoop.getForInit(), new spoon.support.visitor.replace.ReplacementVisitor.CtForForInitReplaceListener(forLoop));\n        replaceElementIfExist(forLoop.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtForExpressionReplaceListener(forLoop));\n        replaceInListIfExist(forLoop.getForUpdate(), new spoon.support.visitor.replace.ReplacementVisitor.CtForForUpdateReplaceListener(forLoop));\n        replaceElementIfExist(forLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(forLoop));\n        replaceInListIfExist(forLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(forLoop));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {\n        replaceInListIfExist(foreach.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(foreach));\n        replaceElementIfExist(foreach.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtForEachVariableReplaceListener(foreach));\n        replaceElementIfExist(foreach.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtForEachExpressionReplaceListener(foreach));\n        replaceElementIfExist(foreach.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(foreach));\n        replaceInListIfExist(foreach.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(foreach));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {\n        replaceInListIfExist(ifElement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ifElement));\n        replaceElementIfExist(ifElement.getCondition(), new spoon.support.visitor.replace.ReplacementVisitor.CtIfConditionReplaceListener(ifElement));\n        replaceElementIfExist(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement())), new spoon.support.visitor.replace.ReplacementVisitor.CtIfThenStatementReplaceListener(ifElement));\n        replaceElementIfExist(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement())), new spoon.support.visitor.replace.ReplacementVisitor.CtIfElseStatementReplaceListener(ifElement));\n        replaceInListIfExist(ifElement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ifElement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtInterface(final spoon.reflect.declaration.CtInterface\u003cT\u003e intrface) {\n        replaceInListIfExist(intrface.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(intrface));\n        replaceInSetIfExist(intrface.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(intrface));\n        replaceInListIfExist(intrface.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(intrface));\n        replaceInListIfExist(intrface.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(intrface));\n        replaceInListIfExist(intrface.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(intrface));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtInvocation(final spoon.reflect.code.CtInvocation\u003cT\u003e invocation) {\n        replaceInListIfExist(invocation.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(invocation));\n        replaceInListIfExist(invocation.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(invocation));\n        replaceElementIfExist(invocation.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(invocation));\n        replaceElementIfExist(invocation.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(invocation));\n        replaceInListIfExist(invocation.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(invocation));\n        replaceInListIfExist(invocation.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(invocation));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLiteral(final spoon.reflect.code.CtLiteral\u003cT\u003e literal) {\n        replaceInListIfExist(literal.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(literal));\n        replaceElementIfExist(literal.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(literal));\n        replaceInListIfExist(literal.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(literal));\n        replaceInListIfExist(literal.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(literal));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable\u003cT\u003e localVariable) {\n        replaceInListIfExist(localVariable.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(localVariable));\n        replaceElementIfExist(localVariable.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(localVariable));\n        replaceElementIfExist(localVariable.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(localVariable));\n        replaceInListIfExist(localVariable.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(localVariable));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable\u003cT\u003e catchVariable) {\n        replaceInListIfExist(catchVariable.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(catchVariable));\n        replaceInListIfExist(catchVariable.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(catchVariable));\n        replaceInListIfExist(catchVariable.getMultiTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtMultiTypedElementMultiTypesReplaceListener(catchVariable));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtMethod(final spoon.reflect.declaration.CtMethod\u003cT\u003e m) {\n        replaceInListIfExist(m.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(m));\n        replaceInListIfExist(m.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(m));\n        replaceElementIfExist(m.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(m));\n        replaceInListIfExist(m.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(m));\n        replaceInSetIfExist(m.getThrownTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableThrownTypesReplaceListener(m));\n        replaceElementIfExist(m.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(m));\n        replaceInListIfExist(m.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(m));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod\u003cT\u003e annotationMethod) {\n        replaceInListIfExist(annotationMethod.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationMethod));\n        replaceElementIfExist(annotationMethod.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(annotationMethod));\n        replaceElementIfExist(annotationMethod.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationMethodDefaultExpressionReplaceListener(annotationMethod));\n        replaceInListIfExist(annotationMethod.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationMethod));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtNewArray(final spoon.reflect.code.CtNewArray\u003cT\u003e newArray) {\n        replaceInListIfExist(newArray.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(newArray));\n        replaceElementIfExist(newArray.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(newArray));\n        replaceInListIfExist(newArray.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(newArray));\n        replaceInListIfExist(newArray.getElements(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayElementsReplaceListener(newArray));\n        replaceInListIfExist(newArray.getDimensionExpressions(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayDimensionExpressionsReplaceListener(newArray));\n        replaceInListIfExist(newArray.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(newArray));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall\u003cT\u003e ctConstructorCall) {\n        replaceInListIfExist(ctConstructorCall.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctConstructorCall));\n        replaceInListIfExist(ctConstructorCall.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(ctConstructorCall));\n        replaceElementIfExist(ctConstructorCall.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(ctConstructorCall));\n        replaceElementIfExist(ctConstructorCall.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(ctConstructorCall));\n        replaceInListIfExist(ctConstructorCall.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(ctConstructorCall));\n        replaceInListIfExist(ctConstructorCall.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctConstructorCall));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtNewClass(final spoon.reflect.code.CtNewClass\u003cT\u003e newClass) {\n        replaceInListIfExist(newClass.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(newClass));\n        replaceInListIfExist(newClass.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(newClass));\n        replaceElementIfExist(newClass.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(newClass));\n        replaceElementIfExist(newClass.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(newClass));\n        replaceInListIfExist(newClass.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(newClass));\n        replaceElementIfExist(newClass.getAnonymousClass(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewClassAnonymousClassReplaceListener(newClass));\n        replaceInListIfExist(newClass.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(newClass));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLambda(final spoon.reflect.code.CtLambda\u003cT\u003e lambda) {\n        replaceInListIfExist(lambda.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(lambda));\n        replaceElementIfExist(lambda.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(lambda));\n        replaceInListIfExist(lambda.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(lambda));\n        replaceInListIfExist(lambda.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(lambda));\n        replaceElementIfExist(lambda.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(lambda));\n        replaceElementIfExist(lambda.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtLambdaExpressionReplaceListener(lambda));\n        replaceInListIfExist(lambda.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(lambda));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT, E extends spoon.reflect.code.CtExpression\u003c?\u003e\u003e void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression\u003cT, E\u003e expression) {\n        replaceInListIfExist(expression.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(expression));\n        replaceInListIfExist(expression.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(expression));\n        replaceElementIfExist(expression.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(expression));\n        replaceInListIfExist(expression.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(expression));\n        replaceElementIfExist(expression.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceExpressionExecutableReplaceListener(expression));\n        replaceElementIfExist(expression.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(expression));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT, A extends T\u003e void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e assignment) {\n        replaceInListIfExist(assignment.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(assignment));\n        replaceElementIfExist(assignment.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(assignment));\n        replaceInListIfExist(assignment.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(assignment));\n        replaceElementIfExist(assignment.getAssigned(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssignmentAssignedReplaceListener(assignment));\n        replaceElementIfExist(assignment.getAssignment(), new spoon.support.visitor.replace.ReplacementVisitor.CtRHSReceiverAssignmentReplaceListener(assignment));\n        replaceInListIfExist(assignment.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(assignment));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {\n        replaceInListIfExist(ctPackage.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctPackage));\n        replaceInSetIfExist(ctPackage.getPackages(), new spoon.support.visitor.replace.ReplacementVisitor.CtPackagePackagesReplaceListener(ctPackage));\n        replaceInSetIfExist(ctPackage.getTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtPackageTypesReplaceListener(ctPackage));\n        replaceInListIfExist(ctPackage.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctPackage));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtParameter(final spoon.reflect.declaration.CtParameter\u003cT\u003e parameter) {\n        replaceInListIfExist(parameter.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(parameter));\n        replaceElementIfExist(parameter.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(parameter));\n        replaceInListIfExist(parameter.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(parameter));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cR\u003e void visitCtReturn(final spoon.reflect.code.CtReturn\u003cR\u003e returnStatement) {\n        replaceInListIfExist(returnStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(returnStatement));\n        replaceElementIfExist(returnStatement.getReturnedExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtReturnReturnedExpressionReplaceListener(returnStatement));\n        replaceInListIfExist(returnStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(returnStatement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cR\u003e void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {\n        replaceInListIfExist(statements.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(statements));\n        replaceInListIfExist(statements.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(statements));\n        replaceInListIfExist(statements.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(statements));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cS\u003e void visitCtSwitch(final spoon.reflect.code.CtSwitch\u003cS\u003e switchStatement) {\n        replaceInListIfExist(switchStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(switchStatement));\n        replaceElementIfExist(switchStatement.getSelector(), new spoon.support.visitor.replace.ReplacementVisitor.CtSwitchSelectorReplaceListener(switchStatement));\n        replaceInListIfExist(switchStatement.getCases(), new spoon.support.visitor.replace.ReplacementVisitor.CtSwitchCasesReplaceListener(switchStatement));\n        replaceInListIfExist(switchStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(switchStatement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {\n        replaceInListIfExist(synchro.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(synchro));\n        replaceElementIfExist(synchro.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedExpressionReplaceListener(synchro));\n        replaceElementIfExist(synchro.getBlock(), new spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedBlockReplaceListener(synchro));\n        replaceInListIfExist(synchro.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(synchro));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {\n        replaceInListIfExist(throwStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(throwStatement));\n        replaceElementIfExist(throwStatement.getThrownExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtThrowThrownExpressionReplaceListener(throwStatement));\n        replaceInListIfExist(throwStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(throwStatement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {\n        replaceInListIfExist(tryBlock.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(tryBlock));\n        replaceElementIfExist(tryBlock.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryBodyReplaceListener(tryBlock));\n        replaceInListIfExist(tryBlock.getCatchers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryCatchersReplaceListener(tryBlock));\n        replaceElementIfExist(tryBlock.getFinalizer(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryFinalizerReplaceListener(tryBlock));\n        replaceInListIfExist(tryBlock.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(tryBlock));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {\n        replaceInListIfExist(tryWithResource.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(tryWithResource));\n        replaceInListIfExist(tryWithResource.getResources(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryWithResourceResourcesReplaceListener(tryWithResource));\n        replaceElementIfExist(tryWithResource.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryBodyReplaceListener(tryWithResource));\n        replaceInListIfExist(tryWithResource.getCatchers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryCatchersReplaceListener(tryWithResource));\n        replaceElementIfExist(tryWithResource.getFinalizer(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryFinalizerReplaceListener(tryWithResource));\n        replaceInListIfExist(tryWithResource.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(tryWithResource));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {\n        replaceElementIfExist(ref.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(ref));\n        replaceElementIfExist(ref.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(ref));\n        replaceInListIfExist(ref.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ref));\n        replaceElementIfExist(ref.getBoundingType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeParameterReferenceBoundingTypeReplaceListener(ref));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {\n        replaceElementIfExist(wildcardReference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(wildcardReference));\n        replaceElementIfExist(wildcardReference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(wildcardReference));\n        replaceInListIfExist(wildcardReference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(wildcardReference));\n        replaceElementIfExist(wildcardReference.getBoundingType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeParameterReferenceBoundingTypeReplaceListener(wildcardReference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));\n        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n        replaceInListIfExist(reference.getBounds(), new spoon.support.visitor.replace.ReplacementVisitor.CtIntersectionTypeReferenceBoundsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));\n        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n        replaceInListIfExist(reference.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess\u003cT\u003e typeAccess) {\n        replaceInListIfExist(typeAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(typeAccess));\n        replaceInListIfExist(typeAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(typeAccess));\n        replaceElementIfExist(typeAccess.getAccessedType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeAccessAccessedTypeReplaceListener(typeAccess));\n        replaceInListIfExist(typeAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(typeAccess));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator\u003cT\u003e operator) {\n        replaceInListIfExist(operator.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(operator));\n        replaceElementIfExist(operator.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(operator));\n        replaceInListIfExist(operator.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(operator));\n        replaceElementIfExist(operator.getOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtUnaryOperatorOperandReplaceListener(operator));\n        replaceInListIfExist(operator.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(operator));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtVariableRead(final spoon.reflect.code.CtVariableRead\u003cT\u003e variableRead) {\n        replaceInListIfExist(variableRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(variableRead));\n        replaceInListIfExist(variableRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(variableRead));\n        replaceElementIfExist(variableRead.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(variableRead));\n        replaceInListIfExist(variableRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(variableRead));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite\u003cT\u003e variableWrite) {\n        replaceInListIfExist(variableWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(variableWrite));\n        replaceInListIfExist(variableWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(variableWrite));\n        replaceElementIfExist(variableWrite.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(variableWrite));\n        replaceInListIfExist(variableWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(variableWrite));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {\n        replaceInListIfExist(whileLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(whileLoop));\n        replaceElementIfExist(whileLoop.getLoopingExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtWhileLoopingExpressionReplaceListener(whileLoop));\n        replaceElementIfExist(whileLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(whileLoop));\n        replaceInListIfExist(whileLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(whileLoop));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression\u003cT\u003e expression) {\n        replaceElementIfExist(expression.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(expression));\n        replaceInListIfExist(expression.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(expression));\n        replaceInListIfExist(expression.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(expression));\n        replaceInListIfExist(expression.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(expression));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {\n        replaceInListIfExist(statement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(statement));\n        replaceInListIfExist(statement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(statement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtUnboundVariableReference(final spoon.reflect.reference.CtUnboundVariableReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtFieldRead(final spoon.reflect.code.CtFieldRead\u003cT\u003e fieldRead) {\n        replaceInListIfExist(fieldRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(fieldRead));\n        replaceInListIfExist(fieldRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(fieldRead));\n        replaceElementIfExist(fieldRead.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(fieldRead));\n        replaceElementIfExist(fieldRead.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldAccessVariableReplaceListener(fieldRead));\n        replaceInListIfExist(fieldRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(fieldRead));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtFieldWrite(final spoon.reflect.code.CtFieldWrite\u003cT\u003e fieldWrite) {\n        replaceInListIfExist(fieldWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(fieldWrite));\n        replaceInListIfExist(fieldWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(fieldWrite));\n        replaceElementIfExist(fieldWrite.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(fieldWrite));\n        replaceElementIfExist(fieldWrite.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldAccessVariableReplaceListener(fieldWrite));\n        replaceInListIfExist(fieldWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(fieldWrite));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtSuperAccess(final spoon.reflect.code.CtSuperAccess\u003cT\u003e f) {\n        replaceInListIfExist(f.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(f));\n        replaceInListIfExist(f.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(f));\n        replaceInListIfExist(f.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(f));\n        replaceElementIfExist(f.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(f));\n        replaceElementIfExist(f.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(f));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtComment(final spoon.reflect.code.CtComment comment) {\n        replaceInListIfExist(comment.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(comment));\n        replaceInListIfExist(comment.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(comment));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtJavaDoc(final spoon.reflect.code.CtJavaDoc javaDoc) {\n        replaceInListIfExist(javaDoc.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(javaDoc));\n        replaceInListIfExist(javaDoc.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(javaDoc));\n        replaceInListIfExist(javaDoc.getTags(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavaDocTagsReplaceListener(javaDoc));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtJavaDocTag(final spoon.reflect.code.CtJavaDocTag docTag) {\n        replaceInListIfExist(docTag.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(docTag));\n        replaceInListIfExist(docTag.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(docTag]));\n    }\n\n    // au...\u003e but was:\u003c...nerator\n    class Ct[JavadocDescriptionDescriptionElementsReplaceListener implements spoon.support.visitor.replace.ReplaceListListener\u003cjava.util.List\u003e {\n        private final spoon.reflect.code.CtJavadocDescription element;\n\n        CtJavadocDescriptionDescriptionElementsReplaceListener(spoon.reflect.code.CtJavadocDescription element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(java.util.List replace) {\n            this.element.setDescriptionElements(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtJavadocInlineTagTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cspoon.reflect.code.CtJavadocInlineTag.TagType\u003e {\n        private final spoon.reflect.code.CtJavadocInlineTag element;\n\n        CtJavadocInlineTagTypeReplaceListener(spoon.reflect.code.CtJavadocInlineTag element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(spoon.reflect.code.CtJavadocInlineTag.TagType replace) {\n            this.element.setType(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtJavadocInlineTagContentReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cjava.lang.String\u003e {\n        private final spoon.reflect.code.CtJavadocInlineTag element;\n\n        CtJavadocInlineTagContentReplaceListener(spoon.reflect.code.CtJavadocInlineTag element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(java.lang.String replace) {\n            this.element.setContent(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtJavadocDescriptionElementContentReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cjava.lang.String\u003e {\n        private final spoon.reflect.code.CtJavadocSnippetDescription element;\n\n        CtJavadocDescriptionElementContentReplaceListener(spoon.reflect.code.CtJavadocSnippetDescription element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(java.lang.String replace) {\n            this.element.setContent(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtImportReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cspoon.reflect.reference.CtReference\u003e {\n        private final spoon.reflect.declaration.CtImport element;\n\n        CtImportReferenceReplaceListener(spoon.reflect.declaration.CtImport element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(spoon.reflect.reference.CtReference replace) {\n            this.element.setReference(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtModuleModuleDirectivesReplaceListener implements spoon.support.visitor.replace.ReplaceListListener\u003cjava.util.List\u003e {\n        private final spoon.reflect.declaration.CtModule element;\n\n        CtModuleModuleDirectivesReplaceListener(spoon.reflect.declaration.CtModule element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(java.util.List replace) {\n            this.element.setModuleDirectives(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtModuleRootPackageReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cspoon.reflect.declaration.CtPackage\u003e {\n        private final spoon.reflect.declaration.CtModule element;\n\n        CtModuleRootPackageReplaceListener(spoon.reflect.declaration.CtModule element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(spoon.reflect.declaration.CtPackage replace) {\n            this.element.setRootPackage(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtPackageExportPackageReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cspoon.reflect.reference.CtPackageReference\u003e {\n        private final spoon.reflect.declaration.CtPackageExport element;\n\n        CtPackageExportPackageReferenceReplaceListener(spoon.reflect.declaration.CtPackageExport element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(spoon.reflect.reference.CtPackageReference replace) {\n            this.element.setPackageReference(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtPackageExportTargetExportReplaceListener implements spoon.support.visitor.replace.ReplaceListListener\u003cjava.util.List\u003e {\n        private final spoon.reflect.declaration.CtPackageExport element;\n\n        CtPackageExportTargetExportReplaceListener(spoon.reflect.declaration.CtPackageExport element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(java.util.List replace) {\n            this.element.setTargetExport(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtModuleRequirementModuleReferenceReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cspoon.reflect.reference.CtModuleReference\u003e {\n        private final spoon.reflect.declaration.CtModuleRequirement element;\n\n        CtModuleRequirementModuleReferenceReplaceListener(spoon.reflect.declaration.CtModuleRequirement element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(spoon.reflect.reference.CtModuleReference replace) {\n            this.element.setModuleReference(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtProvidedServiceServiceTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cspoon.reflect.reference.CtTypeReference\u003e {\n        private final spoon.reflect.declaration.CtProvidedService element;\n\n        CtProvidedServiceServiceTypeReplaceListener(spoon.reflect.declaration.CtProvidedService element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(spoon.reflect.reference.CtTypeReference replace) {\n            this.element.setServiceType(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtProvidedServiceImplementationTypesReplaceListener implements spoon.support.visitor.replace.ReplaceListListener\u003cjava.util.List\u003e {\n        private final spoon.reflect.declaration.CtProvidedService element;\n\n        CtProvidedServiceImplementationTypesReplaceListener(spoon.reflect.declaration.CtProvidedService element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(java.util.List replace) {\n            this.element.setImplementationTypes(replace);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    class CtUsedServiceServiceTypeReplaceListener implements spoon.support.visitor.replace.ReplaceListener\u003cspoon.reflect.reference.CtTypeReference\u003e {\n        private final spoon.reflect.declaration.CtUsedService element;\n\n        CtUsedServiceServiceTypeReplaceListener(spoon.reflect.declaration.CtUsedService element) {\n            this.element \u003d element;\n        }\n\n        @java.lang.Override\n        public void set(spoon.reflect.reference.CtTypeReference replace) {\n            this.element.setServiceType(replace);\n        }\n    }\n\n    public static void replace(spoon.reflect.declaration.CtElement original, spoon.reflect.declaration.CtElement replace) {\n        try {\n            new spoon.support.visitor.replace.ReplacementVisitor(original, (replace \u003d\u003d null ? spoon.support.visitor.replace.ReplacementVisitor.EMPTY : new spoon.reflect.declaration.CtElement[]{ replace })).scan(original.getParent());\n        } catch (spoon.support.visitor.replace.InvalidReplaceException e) {\n            throw e;\n        } catch (spoon.SpoonException ignore) {\n        }\n    }\n\n    public static \u003cE extends spoon.reflect.declaration.CtElement\u003e void replace(spoon.reflect.declaration.CtElement original, java.util.Collection\u003cE\u003e replaces) {\n        try {\n            new spoon.support.visitor.replace.ReplacementVisitor(original, replaces.toArray(new spoon.reflect.declaration.CtElement[replaces.size()])).scan(original.getParent());\n        } catch (spoon.support.visitor.replace.InvalidReplaceException e) {\n            throw e;\n        } catch (spoon.SpoonException ignore) {\n        }\n    }\n\n    private spoon.reflect.declaration.CtElement original;\n\n    private spoon.reflect.declaration.CtElement[] replace;\n\n    private static final spoon.reflect.declaration.CtElement[] EMPTY \u003d new spoon.reflect.declaration.CtElement[0];\n\n    private ReplacementVisitor(spoon.reflect.declaration.CtElement original, spoon.reflect.declaration.CtElement... replace) {\n        this.original \u003d original;\n        this.replace \u003d (replace \u003d\u003d null) ? spoon.support.visitor.replace.ReplacementVisitor.EMPTY : replace;\n    }\n\n    private \u003cK, V extends spoon.reflect.declaration.CtElement\u003e void replaceInMapIfExist(java.util.Map\u003cK, V\u003e mapProtected, spoon.support.visitor.replace.ReplaceMapListener listener) {\n        java.util.Map\u003cK, V\u003e map \u003d new java.util.HashMap\u003c\u003e(mapProtected);\n        V shouldBeDeleted \u003d null;\n        K key \u003d null;\n        for (java.util.Map.Entry\u003cK, V\u003e entry : map.entrySet()) {\n            if ((entry.getValue()) \u003d\u003d (original)) {\n                shouldBeDeleted \u003d entry.getValue();\n                key \u003d entry.getKey();\n                break;\n            }\n        }\n        if (shouldBeDeleted !\u003d null) {\n            if ((replace.length) \u003e 0) {\n                if ((replace.length) \u003e 1) {\n                    throw new spoon.support.visitor.replace.InvalidReplaceException((\"Cannot replace single value by multiple values in \" + (listener.getClass().getSimpleName())));\n                }\n                V val \u003d ((V) (replace[0]));\n                if (val !\u003d null) {\n                    map.put(key, val);\n                    val.setParent(shouldBeDeleted.getParent());\n                }else {\n                    map.remove(key);\n                }\n            }else {\n                map.remove(key);\n            }\n            listener.set(map);\n        }\n    }\n\n    private \u003cT extends spoon.reflect.declaration.CtElement\u003e void replaceInSetIfExist(java.util.Set\u003cT\u003e setProtected, spoon.support.visitor.replace.ReplaceSetListener listener) {\n        java.util.Set\u003cT\u003e set \u003d new java.util.HashSet\u003c\u003e(setProtected);\n        T shouldBeDeleted \u003d null;\n        for (T element : set) {\n            if (element \u003d\u003d (original)) {\n                shouldBeDeleted \u003d element;\n                break;\n            }\n        }\n        if (shouldBeDeleted !\u003d null) {\n            set.remove(shouldBeDeleted);\n            for (spoon.reflect.declaration.CtElement ele : replace) {\n                if (ele !\u003d null) {\n                    set.add(((T) (ele)));\n                    ele.setParent(shouldBeDeleted.getParent());\n                }\n            }\n            listener.set(set);\n        }\n    }\n\n    private \u003cT extends spoon.reflect.declaration.CtElement\u003e void replaceInListIfExist(java.util.List\u003cT\u003e listProtected, spoon.support.visitor.replace.ReplaceListListener listener) {\n        java.util.List\u003cT\u003e list \u003d new java.util.ArrayList\u003c\u003e(listProtected);\n        T shouldBeDeleted \u003d null;\n        int index \u003d 0;\n        for (int i \u003d 0; i \u003c (list.size()); i++) {\n            if ((list.get(i)) \u003d\u003d (original)) {\n                index \u003d i;\n                shouldBeDeleted \u003d list.get(i);\n                break;\n            }\n        }\n        if (shouldBeDeleted !\u003d null) {\n            list.remove(index);\n            if ((replace.length) \u003e 0) {\n                for (int i \u003d 0; i \u003c (replace.length); i++) {\n                    T ele \u003d ((T) (replace[i]));\n                    if (ele !\u003d null) {\n                        list.add(index, ele);\n                        ele.setParent(shouldBeDeleted.getParent());\n                        index \u003d index + 1;\n                    }\n                }\n            }\n            listener.set(list);\n        }\n    }\n\n    private void replaceElementIfExist(spoon.reflect.declaration.CtElement candidate, spoon.support.visitor.replace.ReplaceListener listener) {\n        if (candidate \u003d\u003d (original)) {\n            spoon.reflect.declaration.CtElement val \u003d null;\n            if ((replace.length) \u003e 0) {\n                if ((replace.length) \u003e 1) {\n                    throw new spoon.support.visitor.replace.InvalidReplaceException((\"Cannot replace single value by multiple values in \" + (listener.getClass().getSimpleName())));\n                }\n                val \u003d replace[0];\n            }\n            if (val !\u003d null) {\n                val.setParent(candidate.getParent());\n            }\n            listener.set(val);\n        }\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cA extends java.lang.annotation.Annotation\u003e void visitCtAnnotation(final spoon.reflect.declaration.CtAnnotation\u003cA\u003e annotation) {\n        replaceElementIfExist(annotation.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(annotation));\n        replaceInListIfExist(annotation.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotation));\n        replaceElementIfExist(annotation.getAnnotationType(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationAnnotationTypeReplaceListener(annotation));\n        replaceInListIfExist(annotation.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotation));\n        replaceInMapIfExist(annotation.getValues(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationValuesReplaceListener(annotation));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cA extends java.lang.annotation.Annotation\u003e void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType\u003cA\u003e annotationType) {\n        replaceInListIfExist(annotationType.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationType));\n        replaceInListIfExist(annotationType.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(annotationType));\n        replaceInListIfExist(annotationType.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationType));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {\n        replaceInListIfExist(anonymousExec.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(anonymousExec));\n        replaceElementIfExist(anonymousExec.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(anonymousExec));\n        replaceInListIfExist(anonymousExec.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(anonymousExec));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtArrayRead(final spoon.reflect.code.CtArrayRead\u003cT\u003e arrayRead) {\n        replaceInListIfExist(arrayRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(arrayRead));\n        replaceElementIfExist(arrayRead.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(arrayRead));\n        replaceInListIfExist(arrayRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(arrayRead));\n        replaceElementIfExist(arrayRead.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(arrayRead));\n        replaceElementIfExist(arrayRead.getIndexExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayAccessIndexExpressionReplaceListener(arrayRead));\n        replaceInListIfExist(arrayRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(arrayRead));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite\u003cT\u003e arrayWrite) {\n        replaceInListIfExist(arrayWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(arrayWrite));\n        replaceElementIfExist(arrayWrite.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(arrayWrite));\n        replaceInListIfExist(arrayWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(arrayWrite));\n        replaceElementIfExist(arrayWrite.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(arrayWrite));\n        replaceElementIfExist(arrayWrite.getIndexExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayAccessIndexExpressionReplaceListener(arrayWrite));\n        replaceInListIfExist(arrayWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(arrayWrite));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));\n        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));\n        replaceElementIfExist(reference.getComponentType(), new spoon.support.visitor.replace.ReplacementVisitor.CtArrayTypeReferenceComponentTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtAssert(final spoon.reflect.code.CtAssert\u003cT\u003e asserted) {\n        replaceInListIfExist(asserted.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(asserted));\n        replaceElementIfExist(asserted.getAssertExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssertAssertExpressionReplaceListener(asserted));\n        replaceElementIfExist(asserted.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssertExpressionReplaceListener(asserted));\n        replaceInListIfExist(asserted.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(asserted));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT, A extends T\u003e void visitCtAssignment(final spoon.reflect.code.CtAssignment\u003cT, A\u003e assignement) {\n        replaceInListIfExist(assignement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(assignement));\n        replaceElementIfExist(assignement.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(assignement));\n        replaceInListIfExist(assignement.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(assignement));\n        replaceElementIfExist(assignement.getAssigned(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssignmentAssignedReplaceListener(assignement));\n        replaceElementIfExist(assignement.getAssignment(), new spoon.support.visitor.replace.ReplacementVisitor.CtRHSReceiverAssignmentReplaceListener(assignement));\n        replaceInListIfExist(assignement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(assignement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator\u003cT\u003e operator) {\n        replaceInListIfExist(operator.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(operator));\n        replaceElementIfExist(operator.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(operator));\n        replaceInListIfExist(operator.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(operator));\n        replaceElementIfExist(operator.getLeftHandOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorLeftHandOperandReplaceListener(operator));\n        replaceElementIfExist(operator.getRightHandOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtBinaryOperatorRightHandOperandReplaceListener(operator));\n        replaceInListIfExist(operator.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(operator));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cR\u003e void visitCtBlock(final spoon.reflect.code.CtBlock\u003cR\u003e block) {\n        replaceInListIfExist(block.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(block));\n        replaceInListIfExist(block.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(block));\n        replaceInListIfExist(block.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(block));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {\n        replaceInListIfExist(breakStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(breakStatement));\n        replaceInListIfExist(breakStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(breakStatement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cS\u003e void visitCtCase(final spoon.reflect.code.CtCase\u003cS\u003e caseStatement) {\n        replaceInListIfExist(caseStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(caseStatement));\n        replaceElementIfExist(caseStatement.getCaseExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtCaseCaseExpressionReplaceListener(caseStatement));\n        replaceInListIfExist(caseStatement.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(caseStatement));\n        replaceInListIfExist(caseStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(caseStatement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {\n        replaceInListIfExist(catchBlock.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(catchBlock));\n        replaceElementIfExist(catchBlock.getParameter(), new spoon.support.visitor.replace.ReplacementVisitor.CtCatchParameterReplaceListener(catchBlock));\n        replaceElementIfExist(catchBlock.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtCatchBodyReplaceListener(catchBlock));\n        replaceInListIfExist(catchBlock.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(catchBlock));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtClass(final spoon.reflect.declaration.CtClass\u003cT\u003e ctClass) {\n        replaceInListIfExist(ctClass.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctClass));\n        replaceElementIfExist(ctClass.getSuperclass(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperclassReplaceListener(ctClass));\n        replaceInSetIfExist(ctClass.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(ctClass));\n        replaceInListIfExist(ctClass.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(ctClass));\n        replaceInListIfExist(ctClass.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(ctClass));\n        replaceInListIfExist(ctClass.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctClass));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {\n        replaceInListIfExist(typeParameter.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(typeParameter));\n        replaceElementIfExist(typeParameter.getSuperclass(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperclassReplaceListener(typeParameter));\n        replaceInListIfExist(typeParameter.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(typeParameter));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConditional(final spoon.reflect.code.CtConditional\u003cT\u003e conditional) {\n        replaceElementIfExist(conditional.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(conditional));\n        replaceInListIfExist(conditional.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(conditional));\n        replaceElementIfExist(conditional.getCondition(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalConditionReplaceListener(conditional));\n        replaceElementIfExist(conditional.getThenExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalThenExpressionReplaceListener(conditional));\n        replaceElementIfExist(conditional.getElseExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtConditionalElseExpressionReplaceListener(conditional));\n        replaceInListIfExist(conditional.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(conditional));\n        replaceInListIfExist(conditional.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(conditional));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConstructor(final spoon.reflect.declaration.CtConstructor\u003cT\u003e c) {\n        replaceInListIfExist(c.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(c));\n        replaceInListIfExist(c.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(c));\n        replaceInSetIfExist(c.getThrownTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableThrownTypesReplaceListener(c));\n        replaceInListIfExist(c.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(c));\n        replaceElementIfExist(c.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(c));\n        replaceInListIfExist(c.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(c));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {\n        replaceInListIfExist(continueStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(continueStatement));\n        replaceInListIfExist(continueStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(continueStatement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {\n        replaceInListIfExist(doLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(doLoop));\n        replaceElementIfExist(doLoop.getLoopingExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtDoLoopingExpressionReplaceListener(doLoop));\n        replaceElementIfExist(doLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(doLoop));\n        replaceInListIfExist(doLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(doLoop));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT extends java.lang.Enum\u003c?\u003e\u003e void visitCtEnum(final spoon.reflect.declaration.CtEnum\u003cT\u003e ctEnum) {\n        replaceInListIfExist(ctEnum.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctEnum));\n        replaceInSetIfExist(ctEnum.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(ctEnum));\n        replaceInListIfExist(ctEnum.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(ctEnum));\n        replaceInListIfExist(ctEnum.getEnumValues(), new spoon.support.visitor.replace.ReplacementVisitor.CtEnumEnumValuesReplaceListener(ctEnum));\n        replaceInListIfExist(ctEnum.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctEnum));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceDeclaringTypeReplaceListener(reference));\n        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceParametersReplaceListener(reference));\n        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n        replaceInListIfExist(reference.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtField(final spoon.reflect.declaration.CtField\u003cT\u003e f) {\n        replaceInListIfExist(f.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(f));\n        replaceElementIfExist(f.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(f));\n        replaceElementIfExist(f.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(f));\n        replaceInListIfExist(f.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(f));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue\u003cT\u003e enumValue) {\n        replaceInListIfExist(enumValue.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(enumValue));\n        replaceElementIfExist(enumValue.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(enumValue));\n        replaceElementIfExist(enumValue.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(enumValue));\n        replaceInListIfExist(enumValue.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(enumValue));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtThisAccess(final spoon.reflect.code.CtThisAccess\u003cT\u003e thisAccess) {\n        replaceInListIfExist(thisAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(thisAccess));\n        replaceInListIfExist(thisAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(thisAccess));\n        replaceElementIfExist(thisAccess.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(thisAccess));\n        replaceInListIfExist(thisAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(thisAccess));\n        replaceElementIfExist(thisAccess.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(thisAccess));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess\u003cT\u003e annotationFieldAccess) {\n        replaceInListIfExist(annotationFieldAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationFieldAccess));\n        replaceInListIfExist(annotationFieldAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationFieldAccess));\n        replaceInListIfExist(annotationFieldAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(annotationFieldAccess));\n        replaceElementIfExist(annotationFieldAccess.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(annotationFieldAccess));\n        replaceElementIfExist(annotationFieldAccess.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationFieldAccessVariableReplaceListener(annotationFieldAccess));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldReferenceDeclaringTypeReplaceListener(reference));\n        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {\n        replaceInListIfExist(forLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(forLoop));\n        replaceInListIfExist(forLoop.getForInit(), new spoon.support.visitor.replace.ReplacementVisitor.CtForForInitReplaceListener(forLoop));\n        replaceElementIfExist(forLoop.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtForExpressionReplaceListener(forLoop));\n        replaceInListIfExist(forLoop.getForUpdate(), new spoon.support.visitor.replace.ReplacementVisitor.CtForForUpdateReplaceListener(forLoop));\n        replaceElementIfExist(forLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(forLoop));\n        replaceInListIfExist(forLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(forLoop));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {\n        replaceInListIfExist(foreach.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(foreach));\n        replaceElementIfExist(foreach.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtForEachVariableReplaceListener(foreach));\n        replaceElementIfExist(foreach.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtForEachExpressionReplaceListener(foreach));\n        replaceElementIfExist(foreach.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(foreach));\n        replaceInListIfExist(foreach.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(foreach));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {\n        replaceInListIfExist(ifElement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ifElement));\n        replaceElementIfExist(ifElement.getCondition(), new spoon.support.visitor.replace.ReplacementVisitor.CtIfConditionReplaceListener(ifElement));\n        replaceElementIfExist(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement())), new spoon.support.visitor.replace.ReplacementVisitor.CtIfThenStatementReplaceListener(ifElement));\n        replaceElementIfExist(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement())), new spoon.support.visitor.replace.ReplacementVisitor.CtIfElseStatementReplaceListener(ifElement));\n        replaceInListIfExist(ifElement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ifElement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtInterface(final spoon.reflect.declaration.CtInterface\u003cT\u003e intrface) {\n        replaceInListIfExist(intrface.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(intrface));\n        replaceInSetIfExist(intrface.getSuperInterfaces(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeInformationSuperInterfacesReplaceListener(intrface));\n        replaceInListIfExist(intrface.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(intrface));\n        replaceInListIfExist(intrface.getTypeMembers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeTypeMembersReplaceListener(intrface));\n        replaceInListIfExist(intrface.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(intrface));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtInvocation(final spoon.reflect.code.CtInvocation\u003cT\u003e invocation) {\n        replaceInListIfExist(invocation.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(invocation));\n        replaceInListIfExist(invocation.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(invocation));\n        replaceElementIfExist(invocation.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(invocation));\n        replaceElementIfExist(invocation.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(invocation));\n        replaceInListIfExist(invocation.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(invocation));\n        replaceInListIfExist(invocation.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(invocation));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLiteral(final spoon.reflect.code.CtLiteral\u003cT\u003e literal) {\n        replaceInListIfExist(literal.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(literal));\n        replaceElementIfExist(literal.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(literal));\n        replaceInListIfExist(literal.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(literal));\n        replaceInListIfExist(literal.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(literal));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable\u003cT\u003e localVariable) {\n        replaceInListIfExist(localVariable.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(localVariable));\n        replaceElementIfExist(localVariable.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(localVariable));\n        replaceElementIfExist(localVariable.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableDefaultExpressionReplaceListener(localVariable));\n        replaceInListIfExist(localVariable.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(localVariable));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable\u003cT\u003e catchVariable) {\n        replaceInListIfExist(catchVariable.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(catchVariable));\n        replaceInListIfExist(catchVariable.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(catchVariable));\n        replaceInListIfExist(catchVariable.getMultiTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtMultiTypedElementMultiTypesReplaceListener(catchVariable));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtMethod(final spoon.reflect.declaration.CtMethod\u003cT\u003e m) {\n        replaceInListIfExist(m.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(m));\n        replaceInListIfExist(m.getFormalCtTypeParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener(m));\n        replaceElementIfExist(m.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(m));\n        replaceInListIfExist(m.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(m));\n        replaceInSetIfExist(m.getThrownTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableThrownTypesReplaceListener(m));\n        replaceElementIfExist(m.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(m));\n        replaceInListIfExist(m.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(m));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod\u003cT\u003e annotationMethod) {\n        replaceInListIfExist(annotationMethod.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(annotationMethod));\n        replaceElementIfExist(annotationMethod.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(annotationMethod));\n        replaceElementIfExist(annotationMethod.getDefaultExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtAnnotationMethodDefaultExpressionReplaceListener(annotationMethod));\n        replaceInListIfExist(annotationMethod.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(annotationMethod));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtNewArray(final spoon.reflect.code.CtNewArray\u003cT\u003e newArray) {\n        replaceInListIfExist(newArray.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(newArray));\n        replaceElementIfExist(newArray.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(newArray));\n        replaceInListIfExist(newArray.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(newArray));\n        replaceInListIfExist(newArray.getElements(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayElementsReplaceListener(newArray));\n        replaceInListIfExist(newArray.getDimensionExpressions(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewArrayDimensionExpressionsReplaceListener(newArray));\n        replaceInListIfExist(newArray.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(newArray));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall\u003cT\u003e ctConstructorCall) {\n        replaceInListIfExist(ctConstructorCall.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctConstructorCall));\n        replaceInListIfExist(ctConstructorCall.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(ctConstructorCall));\n        replaceElementIfExist(ctConstructorCall.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(ctConstructorCall));\n        replaceElementIfExist(ctConstructorCall.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(ctConstructorCall));\n        replaceInListIfExist(ctConstructorCall.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(ctConstructorCall));\n        replaceInListIfExist(ctConstructorCall.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctConstructorCall));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtNewClass(final spoon.reflect.code.CtNewClass\u003cT\u003e newClass) {\n        replaceInListIfExist(newClass.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(newClass));\n        replaceInListIfExist(newClass.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(newClass));\n        replaceElementIfExist(newClass.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationExecutableReplaceListener(newClass));\n        replaceElementIfExist(newClass.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(newClass));\n        replaceInListIfExist(newClass.getArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtAbstractInvocationArgumentsReplaceListener(newClass));\n        replaceElementIfExist(newClass.getAnonymousClass(), new spoon.support.visitor.replace.ReplacementVisitor.CtNewClassAnonymousClassReplaceListener(newClass));\n        replaceInListIfExist(newClass.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(newClass));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLambda(final spoon.reflect.code.CtLambda\u003cT\u003e lambda) {\n        replaceInListIfExist(lambda.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(lambda));\n        replaceElementIfExist(lambda.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(lambda));\n        replaceInListIfExist(lambda.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(lambda));\n        replaceInListIfExist(lambda.getParameters(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableParametersReplaceListener(lambda));\n        replaceElementIfExist(lambda.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableBodyReplaceListener(lambda));\n        replaceElementIfExist(lambda.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtLambdaExpressionReplaceListener(lambda));\n        replaceInListIfExist(lambda.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(lambda));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT, E extends spoon.reflect.code.CtExpression\u003c?\u003e\u003e void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression\u003cT, E\u003e expression) {\n        replaceInListIfExist(expression.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(expression));\n        replaceInListIfExist(expression.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(expression));\n        replaceElementIfExist(expression.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(expression));\n        replaceInListIfExist(expression.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(expression));\n        replaceElementIfExist(expression.getExecutable(), new spoon.support.visitor.replace.ReplacementVisitor.CtExecutableReferenceExpressionExecutableReplaceListener(expression));\n        replaceElementIfExist(expression.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(expression));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT, A extends T\u003e void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e assignment) {\n        replaceInListIfExist(assignment.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(assignment));\n        replaceElementIfExist(assignment.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(assignment));\n        replaceInListIfExist(assignment.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(assignment));\n        replaceElementIfExist(assignment.getAssigned(), new spoon.support.visitor.replace.ReplacementVisitor.CtAssignmentAssignedReplaceListener(assignment));\n        replaceElementIfExist(assignment.getAssignment(), new spoon.support.visitor.replace.ReplacementVisitor.CtRHSReceiverAssignmentReplaceListener(assignment));\n        replaceInListIfExist(assignment.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(assignment));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {\n        replaceInListIfExist(ctPackage.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ctPackage));\n        replaceInSetIfExist(ctPackage.getPackages(), new spoon.support.visitor.replace.ReplacementVisitor.CtPackagePackagesReplaceListener(ctPackage));\n        replaceInSetIfExist(ctPackage.getTypes(), new spoon.support.visitor.replace.ReplacementVisitor.CtPackageTypesReplaceListener(ctPackage));\n        replaceInListIfExist(ctPackage.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(ctPackage));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtParameter(final spoon.reflect.declaration.CtParameter\u003cT\u003e parameter) {\n        replaceInListIfExist(parameter.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(parameter));\n        replaceElementIfExist(parameter.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(parameter));\n        replaceInListIfExist(parameter.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(parameter));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cR\u003e void visitCtReturn(final spoon.reflect.code.CtReturn\u003cR\u003e returnStatement) {\n        replaceInListIfExist(returnStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(returnStatement));\n        replaceElementIfExist(returnStatement.getReturnedExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtReturnReturnedExpressionReplaceListener(returnStatement));\n        replaceInListIfExist(returnStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(returnStatement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cR\u003e void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {\n        replaceInListIfExist(statements.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(statements));\n        replaceInListIfExist(statements.getStatements(), new spoon.support.visitor.replace.ReplacementVisitor.CtStatementListStatementsReplaceListener(statements));\n        replaceInListIfExist(statements.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(statements));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cS\u003e void visitCtSwitch(final spoon.reflect.code.CtSwitch\u003cS\u003e switchStatement) {\n        replaceInListIfExist(switchStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(switchStatement));\n        replaceElementIfExist(switchStatement.getSelector(), new spoon.support.visitor.replace.ReplacementVisitor.CtSwitchSelectorReplaceListener(switchStatement));\n        replaceInListIfExist(switchStatement.getCases(), new spoon.support.visitor.replace.ReplacementVisitor.CtSwitchCasesReplaceListener(switchStatement));\n        replaceInListIfExist(switchStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(switchStatement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {\n        replaceInListIfExist(synchro.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(synchro));\n        replaceElementIfExist(synchro.getExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedExpressionReplaceListener(synchro));\n        replaceElementIfExist(synchro.getBlock(), new spoon.support.visitor.replace.ReplacementVisitor.CtSynchronizedBlockReplaceListener(synchro));\n        replaceInListIfExist(synchro.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(synchro));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {\n        replaceInListIfExist(throwStatement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(throwStatement));\n        replaceElementIfExist(throwStatement.getThrownExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtThrowThrownExpressionReplaceListener(throwStatement));\n        replaceInListIfExist(throwStatement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(throwStatement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {\n        replaceInListIfExist(tryBlock.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(tryBlock));\n        replaceElementIfExist(tryBlock.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryBodyReplaceListener(tryBlock));\n        replaceInListIfExist(tryBlock.getCatchers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryCatchersReplaceListener(tryBlock));\n        replaceElementIfExist(tryBlock.getFinalizer(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryFinalizerReplaceListener(tryBlock));\n        replaceInListIfExist(tryBlock.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(tryBlock));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {\n        replaceInListIfExist(tryWithResource.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(tryWithResource));\n        replaceInListIfExist(tryWithResource.getResources(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryWithResourceResourcesReplaceListener(tryWithResource));\n        replaceElementIfExist(tryWithResource.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryBodyReplaceListener(tryWithResource));\n        replaceInListIfExist(tryWithResource.getCatchers(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryCatchersReplaceListener(tryWithResource));\n        replaceElementIfExist(tryWithResource.getFinalizer(), new spoon.support.visitor.replace.ReplacementVisitor.CtTryFinalizerReplaceListener(tryWithResource));\n        replaceInListIfExist(tryWithResource.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(tryWithResource));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {\n        replaceElementIfExist(ref.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(ref));\n        replaceElementIfExist(ref.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(ref));\n        replaceInListIfExist(ref.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(ref));\n        replaceElementIfExist(ref.getBoundingType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeParameterReferenceBoundingTypeReplaceListener(ref));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {\n        replaceElementIfExist(wildcardReference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(wildcardReference));\n        replaceElementIfExist(wildcardReference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(wildcardReference));\n        replaceInListIfExist(wildcardReference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(wildcardReference));\n        replaceElementIfExist(wildcardReference.getBoundingType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeParameterReferenceBoundingTypeReplaceListener(wildcardReference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));\n        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n        replaceInListIfExist(reference.getBounds(), new spoon.support.visitor.replace.ReplacementVisitor.CtIntersectionTypeReferenceBoundsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getPackage(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferencePackageReplaceListener(reference));\n        replaceElementIfExist(reference.getDeclaringType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeReferenceDeclaringTypeReplaceListener(reference));\n        replaceInListIfExist(reference.getActualTypeArguments(), new spoon.support.visitor.replace.ReplacementVisitor.CtActualTypeContainerActualTypeArgumentsReplaceListener(reference));\n        replaceInListIfExist(reference.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(reference));\n        replaceInListIfExist(reference.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess\u003cT\u003e typeAccess) {\n        replaceInListIfExist(typeAccess.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(typeAccess));\n        replaceInListIfExist(typeAccess.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(typeAccess));\n        replaceElementIfExist(typeAccess.getAccessedType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypeAccessAccessedTypeReplaceListener(typeAccess));\n        replaceInListIfExist(typeAccess.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(typeAccess));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator\u003cT\u003e operator) {\n        replaceInListIfExist(operator.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(operator));\n        replaceElementIfExist(operator.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(operator));\n        replaceInListIfExist(operator.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(operator));\n        replaceElementIfExist(operator.getOperand(), new spoon.support.visitor.replace.ReplacementVisitor.CtUnaryOperatorOperandReplaceListener(operator));\n        replaceInListIfExist(operator.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(operator));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtVariableRead(final spoon.reflect.code.CtVariableRead\u003cT\u003e variableRead) {\n        replaceInListIfExist(variableRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(variableRead));\n        replaceInListIfExist(variableRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(variableRead));\n        replaceElementIfExist(variableRead.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(variableRead));\n        replaceInListIfExist(variableRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(variableRead));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite\u003cT\u003e variableWrite) {\n        replaceInListIfExist(variableWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(variableWrite));\n        replaceInListIfExist(variableWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(variableWrite));\n        replaceElementIfExist(variableWrite.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(variableWrite));\n        replaceInListIfExist(variableWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(variableWrite));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {\n        replaceInListIfExist(whileLoop.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(whileLoop));\n        replaceElementIfExist(whileLoop.getLoopingExpression(), new spoon.support.visitor.replace.ReplacementVisitor.CtWhileLoopingExpressionReplaceListener(whileLoop));\n        replaceElementIfExist(whileLoop.getBody(), new spoon.support.visitor.replace.ReplacementVisitor.CtLoopBodyReplaceListener(whileLoop));\n        replaceInListIfExist(whileLoop.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(whileLoop));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression\u003cT\u003e expression) {\n        replaceElementIfExist(expression.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtTypedElementTypeReplaceListener(expression));\n        replaceInListIfExist(expression.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(expression));\n        replaceInListIfExist(expression.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(expression));\n        replaceInListIfExist(expression.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(expression));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {\n        replaceInListIfExist(statement.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(statement));\n        replaceInListIfExist(statement.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(statement));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtUnboundVariableReference(final spoon.reflect.reference.CtUnboundVariableReference\u003cT\u003e reference) {\n        replaceElementIfExist(reference.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableReferenceTypeReplaceListener(reference));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtFieldRead(final spoon.reflect.code.CtFieldRead\u003cT\u003e fieldRead) {\n        replaceInListIfExist(fieldRead.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(fieldRead));\n        replaceInListIfExist(fieldRead.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(fieldRead));\n        replaceElementIfExist(fieldRead.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(fieldRead));\n        replaceElementIfExist(fieldRead.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldAccessVariableReplaceListener(fieldRead));\n        replaceInListIfExist(fieldRead.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(fieldRead));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtFieldWrite(final spoon.reflect.code.CtFieldWrite\u003cT\u003e fieldWrite) {\n        replaceInListIfExist(fieldWrite.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(fieldWrite));\n        replaceInListIfExist(fieldWrite.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(fieldWrite));\n        replaceElementIfExist(fieldWrite.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(fieldWrite));\n        replaceElementIfExist(fieldWrite.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtFieldAccessVariableReplaceListener(fieldWrite));\n        replaceInListIfExist(fieldWrite.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(fieldWrite));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtSuperAccess(final spoon.reflect.code.CtSuperAccess\u003cT\u003e f) {\n        replaceInListIfExist(f.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(f));\n        replaceInListIfExist(f.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(f));\n        replaceInListIfExist(f.getTypeCasts(), new spoon.support.visitor.replace.ReplacementVisitor.CtExpressionTypeCastsReplaceListener(f));\n        replaceElementIfExist(f.getTarget(), new spoon.support.visitor.replace.ReplacementVisitor.CtTargetedExpressionTargetReplaceListener(f));\n        replaceElementIfExist(f.getVariable(), new spoon.support.visitor.replace.ReplacementVisitor.CtVariableAccessVariableReplaceListener(f));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtComment(final spoon.reflect.code.CtComment comment) {\n        replaceInListIfExist(comment.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(comment));\n        replaceInListIfExist(comment.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(comment));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtJavaDoc(final spoon.reflect.code.CtJavaDoc javaDoc) {\n        replaceInListIfExist(javaDoc.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(javaDoc));\n        replaceInListIfExist(javaDoc.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(javaDoc));\n        replaceInListIfExist(javaDoc.getTags(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavaDocTagsReplaceListener(javaDoc));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtJavaDocTag(final spoon.reflect.code.CtJavaDocTag docTag) {\n        replaceInListIfExist(docTag.getComments(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementCommentsReplaceListener(docTag));\n        replaceInListIfExist(docTag.getAnnotations(), new spoon.support.visitor.replace.ReplacementVisitor.CtElementAnnotationsReplaceListener(docTag));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtJavadocDescription(spoon.reflect.code.CtJavadocDescription javadocDescription) {\n        replaceInListIfExist(javadocDescription.getDescriptionElements(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavadocDescriptionDescriptionElementsReplaceListener(javadocDescription));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtJavaDocInlineTag(spoon.reflect.code.CtJavadocInlineTag javadocInlineTag) {\n        replaceElementIfExist(javadocInlineTag.getType(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavadocInlineTagTypeReplaceListener(javadocInlineTag));\n        replaceElementIfExist(javadocInlineTag.getContent(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavadocInlineTagContentReplaceListener(javadocInlineTag));\n    }\n\n    // auto-generated, see spoon.generating.ReplacementVisitorGenerator\n    @java.lang.Override\n    public void visitCtJavaDocSnippetDescription(spoon.reflect.code.CtJavadocSnippetDescription javadocSnippetDescription) {\n        replaceElementIfExist(javadocSnippetDescription.getContent(), new spoon.support.visitor.replace.ReplacementVisitor.CtJavadocDescriptionElementContentReplaceListener(javadocSnippetDescription]));\n    }\n\n    // au...\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.support.reflect.code.CtJavadocDescriptionImpl doesn\u0027t have declaration in the source path for visitCtJavadocDescription(spoon.reflect.code.CtJavadocDescription)",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.ctClass.CtClassTest",
      "failingMethods": [],
      "erroringMethods": [
        "testNoClasspathWithSuperClassOfAClassInAnInterface",
        "testParentOfTheEnclosingClassOfStaticClass",
        "testDefaultConstructorAreOk"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:daikon\n CtPackageImpl:tools\n CtClassImpl:InvariantChecker\n CtMethodImpl:mainHelper\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/resources/noclasspath/InvariantChecker.java:88) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:ctClass\n CtPackageImpl:testclasses\n CtPackageImpl:issue1306\n CtPackageImpl:internal\n CtClassImpl:BooleanArrays\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/ctClass/testclasses/issue1306/internal/BooleanArrays.java:4) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:org\n CtPackageImpl:eclipse\n CtPackageImpl:draw2d\n CtPackageImpl:parts\n CtClassImpl:ScrollableThumbnail\n CtConstructorImpl:\u003cinit\u003e\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/resources/noclasspath/draw2d/org/eclipse/draw2d/parts/ScrollableThumbnail.java:190) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.comment.CommentTest",
      "failingMethods": [
        "testDocumentationContract"
      ],
      "erroringMethods": [
        "testInsertNewComment",
        "testCommentsInResourcesWithWindowsEOL",
        "testJavaDocCommentOnMac",
        "testJavaDocEmptyCommentAndTag",
        "testCommentsInComment1And2",
        "testCombinedPackageInfoComment",
        "testWildComments",
        "testJavaDocCommentOnUnix",
        "testRemoveComment",
        "testJavadocShortAndLongComment",
        "testCoreFactory",
        "testBlockComment",
        "testCodeFactory",
        "testInLineComment"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:comment\n CtPackageImpl:testclasses\n CtClassImpl:JavaDocComment\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:comment\n CtPackageImpl:testclasses\n CtClassImpl:JavaDocComment\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:comment\n CtPackageImpl:testclasses\n CtClassImpl:JavaDocComment\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:comment\n CtPackageImpl:testclasses\n CtClassImpl:JavaDocComment\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:comment\n CtPackageImpl:testclasses\n CtClassImpl:WindowsEOL\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/WindowsEOL.java:3) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:comment\n CtPackageImpl:testclasses\n CtClassImpl:JavaDocComment\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:comment\n CtPackageImpl:testclasses\n CtClassImpl:JavaDocComment\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:comment\n CtPackageImpl:testclasses\n CtClassImpl:JavaDocComment\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:comment\n CtPackageImpl:testclasses\n CtClassImpl:JavaDocComment\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/resources/comment/JavaDocComment.java:5) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:comment\n CtPackageImpl:testclasses\n CtClassImpl:JavaDocComment\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:comment\n CtPackageImpl:testclasses\n CtClassImpl:JavaDocComment\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:comment\n CtPackageImpl:testclasses\n CtClassImpl:JavaDocComment\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:comment\n CtPackageImpl:testclasses\n CtClassImpl:JavaDocComment\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:comment\n CtPackageImpl:testclasses\n CtClassImpl:JavaDocComment\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/comment/testclasses/JavaDocComment.java:5) failed",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "CtJavadocDescription has no documentation",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 14
    },
    {
      "className": "spoon.test.executable.ExecutableRefTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSameTypeInConstructorCallBetweenItsObjectAndItsExecutable"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:org\n CtPackageImpl:objectweb\n CtPackageImpl:carol\n CtPackageImpl:jndi\n CtPackageImpl:spi\n CtClassImpl:CmiContext\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/resources/executable/CmiContext_1.2.java:45) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.imports.ImportScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testImportOnSpoon"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtClassImpl:IncrementalLauncher\n CtConstructorImpl:\u003cinit\u003e\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/IncrementalLauncher.java:135) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.visitor.CtInheritanceScannerMethodsTest",
      "failingMethods": [],
      "erroringMethods": [
        "testMethodsInInheritanceScanner"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.ast.CloneTest",
      "failingMethods": [
        "testCloneMethodsDeclaredInAST"
      ],
      "erroringMethods": [
        "testCloneListener"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "spoon.reflect.code.CtJavadocDescription hasn\u0027t clone method.",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:reflect\n CtPackageImpl:visitor\n CtClassImpl:DefaultJavaPrettyPrinter\n CtMethodImpl:getLineSeparator\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java:234) failed",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.literal.LiteralTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCharLiteralInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:org\n CtPackageImpl:apache\n CtPackageImpl:cassandra\n CtPackageImpl:index\n CtClassImpl:SecondaryIndexManager\n CtMethodImpl:addIndex\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/resources/noclasspath/SecondaryIndexManager.java:165) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parameters.ParameterTest",
      "failingMethods": [],
      "erroringMethods": [
        "testParameterInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:org\n CtPackageImpl:eclipse\n CtPackageImpl:draw2d\n CtPackageImpl:text\n CtClassImpl:FlowUtilities\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/resources/parameter/FlowUtilities.java:25) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "cannot instantiate spoon.reflect.code.CtJavadocDescription",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [],
      "erroringMethods": [
        "testMain_ModelPrintAndCompile"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:compiler\n CtInterfaceImpl:Environment\n CtMethodImpl:report\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/main/java/spoon/compiler/Environment.java:92) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.replace.ReplaceParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "testContract[CtJavaDoc]",
        "testContract[CtJavaDocTag]"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "cannot instantiate spoon.reflect.code.CtJavadocDescription",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "cannot instantiate spoon.reflect.code.CtJavadocDescription",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.javadoc.JavaDocTest",
      "failingMethods": [],
      "erroringMethods": [
        "testJavaDocReprint"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:javadoc\n CtPackageImpl:testclasses\n CtClassImpl:Bar\n CtMethodImpl:create\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/java/spoon/test/javadoc/testclasses/Bar.java:9) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.compilation.CompilationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testPrecompile"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtJavaDocImpl on path \n CtPackageImpl:compilation\n CtClassImpl:SimpleProcessor\n CtJavaDocImpl\nat position (/root/workspace/INRIA/spoon/404936373/src/test/resources/compilation/SimpleProcessor.java:6) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ],
  "failingModule": "/root/workspace/INRIA/spoon/404936373"
}