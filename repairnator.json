{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 6,
  "repo": "INRIA/spoon",
  "metrics": {
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/378d0916530a0d5d273faf3f09303d88c2fdc218",
    "NbFailingTests": 5,
    "NbErroringTests": 6,
    "NbSkippingTests": 4,
    "NbRunningTests": 1424,
    "FailureNames": [
      "spoon.support.SpoonClassNotFoundException",
      "java.lang.AssertionError",
      "org.junit.ComparisonFailure"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 5,
      "ComputeClasspath": 4,
      "ComputeTestDir": 0,
      "BuildProject": 45,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 5,
      "CloneRepository": 7,
      "CheckoutPatchedBuild": 0,
      "TestProject": 381,
      "AssertFixer": 1800,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 7,
      "CommitPatch": 7
    },
    "ReproductionDate": "May 20, 2018 1:02:04 AM",
    "BuggyBuildId": 381197286,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/381197286",
    "BuggyBuildDate": "May 20, 2018 1:01:38 AM",
    "BugCommit": "378d0916530a0d5d273faf3f09303d88c2fdc218",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 1,
    "NbLibraries": 14,
    "NbFileApp": 1084,
    "NbFileTests": 662,
    "NbCPU": 8,
    "FreeMemory": 428550272,
    "TotalMemory": 1885339648,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 67682032,
      "ComputeClasspath": 113032456,
      "ComputeTestDir": 55451336,
      "BuildProject": 48529224,
      "ComputeSourceDir": 113032456,
      "InitRepoToPush": 60936432,
      "CloneRepository": 79589120,
      "CheckoutPatchedBuild": 428550272,
      "TestProject": 77974720,
      "AssertFixer": 1113389688,
      "GatherTestInformation": 56462024,
      "PushIncriminatedBuild": 114009856,
      "CommitPatch": 428550272
    },
    "NbSucceedingTests": 1413
  },
  "failingModule": "/root/workspace/INRIA/spoon/381197286",
  "hostname": "spirals-HP-Z400-Workstation",
  "totalNumberFailingTests": 5,
  "error-types": [
    "spoon.support.SpoonClassNotFoundException",
    "java.lang.AssertionError",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 1424,
  "failing-test-cases": [
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTest",
        "testMain_checkShadow"
      ],
      "failures": [
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.visitor.chain.CtQueryImpl",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: java.lang.Character",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c7\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGenerateRoleHandler"
      ],
      "failures": [
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.support.visitor.replace.ReplacementVisitor",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [],
      "erroringMethods": [
        "testStaticMethodWithDifferentClassSameNameJava7NoCollision",
        "testStaticMethodWithDifferentClassSameNameCollision",
        "testStaticMethodWithDifferentClassSameNameJava3NoCollision"
      ],
      "failures": [
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: junit.framework.TestSuite",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: junit.framework.TestSuite",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: junit.framework.TestSuite",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
      "failingMethods": [
        "testScannerGenericsInClass",
        "testShadowModelEqualsNormalModel",
        "testScannerClass"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...a.lang.Comparable\u003c? [super] E\u003e\u003e but was:\u003c...a.lang.Comparable\u003c? [extends] E\u003e\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Found 3 problems:\nDifference on path: #typeMember[index\u003d14]#[modifier]\nShadow: BEFORE\nNormal: BEFORE {\n    @java.lang.Override\n    void insert(spoon.reflect.code.CtBlock\u003c?\u003e block, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n        block.insertBegin(statementsToBeInserted);\n    }\n\n    @java.lang.Override\n    void insertFromFirstStatement(spoon.reflect.code.CtBlock\u003c?\u003e block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n        final java.util.List\u003cspoon.reflect.code.CtStatement\u003e copy \u003d new java.util.ArrayList\u003c\u003e(block.getStatements());\n        int indexOfTargetElement \u003d indexOfReference(block.getStatements(), target);\n        for (spoon.reflect.code.CtStatement ctStatement : statementsToBeInserted) {\n            copy.add((indexOfTargetElement++), ctStatement);\n        }\n        block.setStatements(copy);\n    }\n\n    @java.lang.Override\n    \u003cT extends spoon.reflect.declaration.CtElement\u003e java.util.List\u003cT\u003e insertFromLastStatement(java.util.List\u003cT\u003e statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n        final java.util.List\u003cT\u003e copy \u003d new java.util.ArrayList\u003c\u003e(statements);\n        int indexOfTargetElement \u003d indexOfReference(statements, target);\n        for (int j \u003d (statementsToBeInserted.getStatements().size()) - 1; j \u003e\u003d 0; j--) {\n            copy.add(indexOfTargetElement, ((T) (statementsToBeInserted.getStatements().get(j))));\n        }\n        return copy;\n    }\n}\n\nDifference on path: #typeMember[index\u003d14]#[modifier]\nShadow: AFTER\nNormal: AFTER {\n    @java.lang.Override\n    void insert(spoon.reflect.code.CtBlock\u003c?\u003e block, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n        block.insertEnd(statementsToBeInserted);\n    }\n\n    @java.lang.Override\n    void insertFromFirstStatement(spoon.reflect.code.CtBlock\u003c?\u003e block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n        final java.util.List\u003cspoon.reflect.code.CtStatement\u003e copy \u003d new java.util.ArrayList\u003c\u003e(block.getStatements());\n        int indexOfTargetElement \u003d indexOfReference(block.getStatements(), target);\n        for (spoon.reflect.code.CtStatement s : statementsToBeInserted) {\n            copy.add((++indexOfTargetElement), s);\n        }\n        block.setStatements(copy);\n    }\n\n    @java.lang.Override\n    \u003cT extends spoon.reflect.declaration.CtElement\u003e java.util.List\u003cT\u003e insertFromLastStatement(java.util.List\u003cT\u003e statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n        final java.util.List\u003cT\u003e copy \u003d new java.util.ArrayList\u003c\u003e(statements);\n        int indexOfTargetElement \u003d (indexOfReference(copy, target)) + 1;\n        for (int j \u003d (statementsToBeInserted.getStatements().size()) - 1; j \u003e\u003d 0; j--) {\n            copy.add(indexOfTargetElement, ((T) (statementsToBeInserted.getStatements().get(j))));\n        }\n        return copy;\n    }\n}\n\nDifference on path: #typeMember[index\u003d13]#body\nShadow: null\nNormal: {\n    if (element \u003d\u003d null) {\n        return null;\n    }\n    if (element instanceof spoon.reflect.declaration.CtMethod) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.METHOD;\n    }\n    if ((element instanceof spoon.reflect.declaration.CtAnnotation) || (element instanceof spoon.reflect.declaration.CtAnnotationType)) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.ANNOTATION_TYPE;\n    }\n    if (element instanceof spoon.reflect.declaration.CtType) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.TYPE;\n    }\n    if (element instanceof spoon.reflect.declaration.CtField) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.FIELD;\n    }\n    if (element instanceof spoon.reflect.declaration.CtConstructor) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.CONSTRUCTOR;\n    }\n    if (element instanceof spoon.reflect.declaration.CtParameter) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.PARAMETER;\n    }\n    if (element instanceof spoon.reflect.code.CtLocalVariable) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.LOCAL_VARIABLE;\n    }\n    if (element instanceof spoon.reflect.declaration.CtPackage) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.PACKAGE;\n    }\n    if (element instanceof spoon.reflect.reference.CtTypeParameterReference) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.TYPE_PARAMETER;\n    }\n    if (element instanceof spoon.reflect.reference.CtTypeReference) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.TYPE_USE;\n    }\n    return null;\n}\n",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    }
  ]
}