{
  "bugType": "only_fail",
  "hostname": "cyclone1",
  "repo": "INRIA/spoon",
  "metrics": {
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/3b59ac94311254f9b66eab0e57a7773f60aff492",
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 5,
      "ComputeClasspath": 5,
      "ComputeTestDir": 0,
      "BuildProject": 64,
      "InitRepoToPush": 4,
      "ComputeSourceDir": 0,
      "ComputeModules": 0,
      "CloneRepository": 10,
      "CheckoutPatchedBuild": 0,
      "TestProject": 669,
      "AssertFixer": 14,
      "GatherTestInformation": 0,
      "CommitPatch": 3
    },
    "NbFailingTests": 12,
    "NbErroringTests": 49,
    "NbSkippingTests": 4,
    "NbRunningTests": 1416,
    "FailureNames": [
      "java.lang.IndexOutOfBoundsException",
      "spoon.SpoonException",
      "spoon.support.SpoonClassNotFoundException",
      "java.lang.AssertionError",
      "java.lang.NullPointerException",
      "java.lang.Exception"
    ],
    "ReproductionDate": "Jul 18, 2018 3:09:39 PM",
    "BuggyBuildId": 405338384,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/405338384",
    "BuggyBuildDate": "Jul 18, 2018 3:01:31 PM",
    "BugCommit": "3b59ac94311254f9b66eab0e57a7773f60aff492",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 30,
    "NbFileApp": 616,
    "NbFileTests": 695,
    "NbCPU": 8,
    "FreeMemory": 251312544,
    "TotalMemory": 770179072,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 69617360,
      "ComputeClasspath": 52559904,
      "ComputeTestDir": 45973080,
      "BuildProject": 60339168,
      "InitRepoToPush": 54384024,
      "ComputeSourceDir": 248218504,
      "ComputeModules": 248218504,
      "CloneRepository": 110205560,
      "CheckoutPatchedBuild": 251312544,
      "TestProject": 51037496,
      "AssertFixer": 334001280,
      "GatherTestInformation": 85627976,
      "CommitPatch": 251312544
    },
    "NbSucceedingTests": 1355
  },
  "failing-test-cases": [
    {
      "className": "spoon.test.signature.SignatureTest",
      "failingMethods": [],
      "erroringMethods": [
        "testArgumentNotNullForExecutableReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: null",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.arrays.ArraysTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInitializeWithNewArray"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: \u003cunknown\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.testing.CtPackageAssertTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAddTypeToPackage",
        "testEqualityBetweenTwoDifferentCtPackage"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: package",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c23\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [],
      "erroringMethods": [
        "testImportWithGenerics"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.test.imports.testclasses.withgenerics",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reference.TypeReferenceTest",
      "failingMethods": [
        "testInvocationWithFieldAccessInNoClasspath"
      ],
      "erroringMethods": [
        "testConstructorCallInNoClasspath",
        "testTypeReferenceWithGenerics",
        "testUnknownSuperClassWithSameNameInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: \u003cunknown\u003e",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: it.feio.android.omninotes.commons",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.test.imports.testclasses.withgenerics",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile TestBot.java because The given identifier does not respect Java definition of an identifier: null",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.refactoring.MethodsRefactoringTest",
      "failingMethods": [
        "testSubInheritanceHierarchyFunction"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The spoon.test.refactoring.parameter.testclasses.TypeB$1Local not found",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.refactoring.RefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned",
        "testThisInConstructorAfterATransformation",
        "testTransformedInstanceofAfterATransformation"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1X",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1X",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1X",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.constructorcallnewclass.NewClassTest",
      "failingMethods": [
        "testCtNewClassInNoClasspath"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile new-class because The given identifier does not respect Java definition of an identifier: org.apache.lucene",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.api.APITest",
      "failingMethods": [],
      "erroringMethods": [
        "testSetterInNodes"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.annotation.AnnotationTest",
      "failingMethods": [],
      "erroringMethods": [
        "annotationOverrideFQNIsOK",
        "testGetAnnotationFromParameter"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Cache.Entry\u003cK",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: this",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.template.TemplateTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSimpleTemplate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Hello world",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.invocations.InvocationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIssue1753"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: HashMap\u003c\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.query_function.VariableReferencesTest",
      "failingMethods": [],
      "erroringMethods": [
        "testParameterReferenceFunction",
        "testCheckModelConsistency",
        "testVariableReferenceFunction"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.variable.AccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "testVariableAccessInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: null",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parent.ContractOnSettersParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "testContract[public interface CtPackage extends spoon.reflect.declaration.CtNamedElement , spoon.reflect.declaration.CtShadowable {\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T addType(spoon.reflect.declaration.CtType\u003c?\u003e arg0);\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtPackageReference getReference();\n\n    java.lang.String getQualifiedName();\n\n    boolean isUnnamedPackage();\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtModule getDeclaringModule();\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtPackage getDeclaringPackage();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e getTypes();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    void removeType(spoon.reflect.declaration.CtType\u003c?\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T setPackages(java.util.Set\u003cspoon.reflect.declaration.CtPackage\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T addPackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    boolean removePackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T setTypes(java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e arg0);\n\n    spoon.reflect.declaration.CtPackage clone();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    spoon.reflect.declaration.CtPackage getPackage(java.lang.String arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    java.util.Set\u003cspoon.reflect.declaration.CtPackage\u003e getPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtType\u003c?\u003e\u003e T getType(java.lang.String arg0);\n\n    static final java.lang.String PACKAGE_SEPARATOR;\n\n    static final char PACKAGE_SEPARATOR_CHAR;\n\n    static final java.lang.String TOP_LEVEL_PACKAGE_NAME;\n}]",
        "testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtModuleReference getReference();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setRootPackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    java.util.List\u003cspoon.reflect.declaration.CtModuleDirective\u003e getModuleDirectives();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtModuleRequirement\u003e getRequiredModules();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e getExportedPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e getOpenedPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtUsedService\u003e getUsedServices();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtProvidedService\u003e getProvidedServices();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    boolean isOpenModule();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    spoon.reflect.declaration.CtPackage getRootPackage();\n\n    @spoon.support.DerivedProperty\n    boolean isUnnamedModule();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setIsOpenModule(boolean arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setModuleDirectives(java.util.List\u003cspoon.reflect.declaration.CtModuleDirective\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addModuleDirective(spoon.reflect.declaration.CtModuleDirective arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addModuleDirectiveAt(int arg0, spoon.reflect.declaration.CtModuleDirective arg1);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setUsedServices(java.util.List\u003cspoon.reflect.declaration.CtUsedService\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addUsedService(spoon.reflect.declaration.CtUsedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeUsedService(spoon.reflect.declaration.CtUsedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setExportedPackages(java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addExportedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeExportedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setOpenedPackages(java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addOpenedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setRequiredModules(java.util.List\u003cspoon.reflect.declaration.CtModuleRequirement\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setProvidedServices(java.util.List\u003cspoon.reflect.declaration.CtProvidedService\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addProvidedService(spoon.reflect.declaration.CtProvidedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeProvidedService(spoon.reflect.declaration.CtProvidedService arg0);\n\n    spoon.reflect.declaration.CtModule clone();\n\n    static final java.lang.String TOP_LEVEL_MODULE_NAME;\n}]"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [
        "testStaticClasses"
      ],
      "erroringMethods": [
        "testSrcMainJava"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot load class: spoon.pattern.PatternParameterConfigurator$Result",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.targeted.TargetedExpressionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCtThisAccess",
        "testTargetsOfFieldAccessInInnerClass",
        "testClassDeclaredInALambda",
        "testTargetsOfInvInInnerClass"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 3InnerSubscriber",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.jdtimportbuilder.ImportBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInternalImportWhenNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: it.feio.android.omninotes.commons",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIssue1501",
        "testIssue2130"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: null",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: \u003cunknown\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.ctClass.CtClassTest",
      "failingMethods": [
        "testNoClasspathWithSuperClassOfAClassInAnInterface"
      ],
      "erroringMethods": [
        "testAllTypeReferencesToALocalTypeShouldNotStartWithNumber",
        "testParentOfTheEnclosingClassOfStaticClass"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: daikon.Runtime",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile draw2d because The given identifier does not respect Java definition of an identifier: org.eclipse.draw2d.MouseEvent",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.executable.ExecutableRefTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSameTypeInConstructorCallBetweenItsObjectAndItsExecutable"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: null",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.visibility.VisibilityTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInvocationVisibilityInFieldDeclaration"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: null",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.testing.CtElementAssertTest",
      "failingMethods": [],
      "erroringMethods": [
        "testEqualityBetweenTwoDifferentCtElement"
      ],
      "failures": [
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cjava.lang.NullPointerException\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.exceptions.ExceptionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testUnionCatchExceptionInsideLambdaInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: System.out",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.executable.ExecutableTest",
      "failingMethods": [
        "testShadowValueOf"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.literal.LiteralTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCharLiteralInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: IndexTransaction.Type.UPDATE",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parameters.ParameterTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetParameterReferenceInLambdaNoClasspath",
        "testMultiParameterLambdaTypeReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: System.out",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.lang.HashMap",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.compilationunit.TestCompilationUnit",
      "failingMethods": [],
      "erroringMethods": [
        "testNewlyCreatedCUWouldGetAPartialPosition",
        "testGetUnitTypeWorksWithCreatedObjects"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: new",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: package",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [
        "test",
        "testMain_checkShadow"
      ],
      "erroringMethods": [
        "testTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.module.TestModule",
      "failingMethods": [],
      "erroringMethods": [
        "testModuleInfoWithComments",
        "testCompleteModuleInfoContentNoClasspath",
        "testModuleInfoShouldBeCorrectlyPrettyPrinted",
        "testDirectiveOrders"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.logging",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.logging",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.logging",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.logging",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.replace.ReplaceParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "testContract[CtModule]",
        "testContract[CtPackage]"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.template.PatternTest",
      "failingMethods": [
        "testGenerateMethodWithSelfReferences",
        "testGenerateClassWithSelfReferences"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, boolean, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$1Bar, java.lang.Object, int, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e but was:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Bar, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, boolean, java.lang.Object, int, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$1Bar, java.lang.Object, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e but was:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Bar, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, java.lang.Object, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    }
  ],
  "failingModule": "/root/workspace/INRIA/spoon/405338384"
}