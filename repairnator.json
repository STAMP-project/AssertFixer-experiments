{
  "bugType": "only_fail",
  "hostname": "cyclone1",
  "repo": "jgrandja/spring-security-oauth",
  "metrics": {
    "ReproductionDate": "Oct 9, 2018 3:34:03 PM",
    "BuggyBuildId": 439137870,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/jgrandja/spring-security-oauth/builds/439137870",
    "BuggyBuildDate": "Oct 9, 2018 3:34:00 PM",
    "BugCommit": "462b67fce209bab6c35a7698fa33888d3ad4c5ba",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 48,
    "NbFileApp": 435,
    "NbFileTests": 290,
    "NbCPU": 8,
    "FreeMemory": 99909224,
    "TotalMemory": 197656576,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 127311176,
      "ComputeClasspath": 108592488,
      "ComputeTestDir": 131498248,
      "BuildProject": 115033024,
      "InitRepoToPush": 110478040,
      "ComputeSourceDir": 99698472,
      "ComputeModules": 93965104,
      "CloneRepository": 93608976,
      "CheckoutPatchedBuild": 99909224,
      "TestProject": 108634144,
      "AssertFixer": 93300568,
      "GatherTestInformation": 89984904,
      "CommitPatch": 99909224
    },
    "NbSucceedingTests": 700,
    "BugCommitUrl": "http://github.com/jgrandja/spring-security-oauth/commit/462b67fce209bab6c35a7698fa33888d3ad4c5ba",
    "NbFailingTests": 0,
    "NbErroringTests": 41,
    "NbSkippingTests": 0,
    "NbRunningTests": 741,
    "FailureNames": [
      "org.springframework.data.redis.RedisConnectionFailureException",
      "java.lang.NullPointerException",
      "java.lang.Exception"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 0,
      "ComputeClasspath": 7,
      "ComputeTestDir": 0,
      "BuildProject": 217,
      "InitRepoToPush": 4,
      "ComputeSourceDir": 1,
      "ComputeModules": 0,
      "CloneRepository": 6,
      "CheckoutPatchedBuild": 0,
      "TestProject": 31,
      "AssertFixer": 1,
      "GatherTestInformation": 0,
      "CommitPatch": 3
    }
  },
  "failing-test-cases": [
    {
      "className": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests",
      "failingMethods": [],
      "erroringMethods": [
        "testAuthorizationCodeWithQueryParams",
        "testAuthorizationCodeWithTrickyState",
        "testApprovalDenied",
        "testAuthorizationCodeWithTrickyEncodedQueryParams",
        "testAuthorizationCodeWithFragment",
        "testAuthorizationCodeWithTrickyQueryParams",
        "testAuthorizationCodeWithMoreTrickyEncodedQueryParams",
        "testApproveOrDeny",
        "testAuthorizationCodeWithMultipleQueryParams",
        "testApproveOrDenyWithOAuth2RequestWithoutRedirectUri"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.security.oauth2.common.exceptions.InvalidRequestException\u003e but was\u003cjava.lang.NullPointerException\u003e",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
      "failingMethods": [],
      "erroringMethods": [
        "testFindAccessTokensByClientIdAndUserName",
        "testExpiringRefreshToken",
        "testRemovedTokenCannotBeFoundByUsername",
        "testRemoveRefreshToken",
        "testStoreAccessToken",
        "testReadingAuthenticationForTokenThatDoesNotExist",
        "testFindAccessTokensByClientId",
        "testReadingRefreshTokenForTokenThatDoesNotExist",
        "testStoreRefreshToken",
        "testRetrieveAccessToken",
        "testStoreAccessTokenTwice",
        "testExpiringAccessToken",
        "testRefreshTokenIsNotStoredDuringAccessToken",
        "testReadingAccessTokenForTokenThatDoesNotExist",
        "testGetAccessTokenForDeletedUser"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 15
    },
    {
      "className": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
      "failingMethods": [],
      "erroringMethods": [
        "testFindAccessTokensByClientIdAndUserName",
        "testExpiringRefreshToken",
        "testRemovedTokenCannotBeFoundByUsername",
        "testRemoveRefreshToken",
        "testStoreAccessToken",
        "testReadingAuthenticationForTokenThatDoesNotExist",
        "testFindAccessTokensByClientId",
        "testReadingRefreshTokenForTokenThatDoesNotExist",
        "testStoreRefreshToken",
        "testRetrieveAccessToken",
        "testStoreAccessTokenTwice",
        "testExpiringAccessToken",
        "testRefreshTokenIsNotStoredDuringAccessToken",
        "testReadingAccessTokenForTokenThatDoesNotExist",
        "testGetAccessTokenForDeletedUser",
        "storeAccessTokenWithoutRefreshTokenRemoveAccessTokenVerifyTokenRemoved"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 16
    }
  ],
  "failingModule": "/root/workspace/jgrandja/spring-security-oauth/439137870/spring-security-oauth2",
  "bugCommit": "https://github.com/jgrandja/spring-security-oauth/compare/19620d47f9e5...462b67fce209"
}