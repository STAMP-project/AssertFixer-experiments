{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 23,
  "repo": "INRIA/spoon",
  "metrics": {
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/62ce8b6cdd826167f7c9673eeefefddef906e48d",
    "ReproductionDate": "Jun 3, 2018 10:47:27 PM",
    "BuggyBuildId": 387504692,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/387504692",
    "BuggyBuildDate": "Jun 3, 2018 10:46:45 PM",
    "BugCommit": "62ce8b6cdd826167f7c9673eeefefddef906e48d",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 1,
    "NbLibraries": 14,
    "NbFileApp": 1120,
    "NbFileTests": 664,
    "NbCPU": 8,
    "FreeMemory": 106586848,
    "TotalMemory": 1916796928,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 106064488,
      "ComputeClasspath": 54670896,
      "CloneRepository": 86036240,
      "ComputeTestDir": 94364528,
      "CheckoutPatchedBuild": 106586848,
      "TestProject": 80714248,
      "AssertFixer": 1388074600,
      "BuildProject": 86528840,
      "GatherTestInformation": 97811264,
      "ComputeSourceDir": 54670896,
      "InitRepoToPush": 55635784,
      "CommitPatch": 106586848
    },
    "NbSucceedingTests": 1082,
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 4,
      "ComputeClasspath": 6,
      "CloneRepository": 7,
      "ComputeTestDir": 0,
      "CheckoutPatchedBuild": 0,
      "TestProject": 436,
      "AssertFixer": 1800,
      "BuildProject": 55,
      "GatherTestInformation": 0,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 10,
      "CommitPatch": 6
    },
    "NbFailingTests": 12,
    "NbErroringTests": 23,
    "NbSkippingTests": 4,
    "NbRunningTests": 1117,
    "FailureNames": [
      "spoon.SpoonException",
      "java.lang.AssertionError",
      "java.lang.NoClassDefFoundError",
      "java.lang.ExceptionInInitializerError",
      "org.junit.ComparisonFailure"
    ]
  },
  "failingModule": "/root/workspace/INRIA/spoon/387504692",
  "hostname": "cyclone1",
  "totalNumberFailingTests": 12,
  "error-types": [
    "spoon.SpoonException",
    "java.lang.AssertionError",
    "java.lang.NoClassDefFoundError",
    "java.lang.ExceptionInInitializerError",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 1117,
  "failing-test-cases": [
    {
      "className": "spoon.test.parent.ContractOnSettersParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class spoon.test.parent.ContractOnSettersParametrizedTest",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [
        "testSrcMainJava"
      ],
      "erroringMethods": [
        "testInterfacesAreCtScannable"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "No own method exists in type CtNamedElement#name\u003cjava.lang.String\u003e",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "13 public methods should be documented with proper API documentation: \nspoon.reflect.visitor.DefaultJavaPrettyPrinter#printPackageInfo(spoon.reflect.declaration.CtPackage)\nspoon.reflect.visitor.DefaultJavaPrettyPrinter#calculate(spoon.reflect.cu.CompilationUnit,java.util.List)\nspoon.reflect.visitor.ImportScannerImpl#visitCtTypeReference(spoon.reflect.reference.CtTypeReference)\nspoon.support.reflect.code.CtCaseImpl#insertBegin(spoon.reflect.code.CtStatementList)\nspoon.support.reflect.eval.VisitorPartialEvaluator#visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)\nspoon.support.reflect.eval.VisitorPartialEvaluator#visitCtBlock(spoon.reflect.code.CtBlock)\nspoon.support.reflect.eval.VisitorPartialEvaluator#visitCtFor(spoon.reflect.code.CtFor)\nspoon.support.reflect.eval.VisitorPartialEvaluator#visitCtIf(spoon.reflect.code.CtIf)\nspoon.support.reflect.eval.VisitorPartialEvaluator#visitCtInvocation(spoon.reflect.code.CtInvocation)\nspoon.support.reflect.eval.VisitorPartialEvaluator#visitCtUnaryOperator(spoon.reflect.code.CtUnaryOperator)\nspoon.support.reflect.eval.VisitorPartialEvaluator#visitCtWhile(spoon.reflect.code.CtWhile)\nspoon.support.reflect.eval.VisitorPartialEvaluator#visitCtConditional(spoon.reflect.code.CtConditional)\nspoon.support.reflect.reference.CtReferenceImpl#accept(spoon.reflect.visitor.CtVisitor)",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.api.MetamodelTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoonMetaModelTest",
        "testMetamodelWithoutSources"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "No own method exists in type CtNamedElement#name\u003cjava.lang.String\u003e",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "No own method exists in type CtNamedElement#name\u003cjava.lang.String\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGenerateCloneVisitor",
        "testGenerateReplacementVisitor",
        "testGenerateRoleHandler"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "No own method exists in type CtNamedElement#name\u003cString\u003e",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot create MethodTypingContext for method declared in different ClassTypingContext",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot create MethodTypingContext for method declared in different ClassTypingContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c7\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [
        "testSuperInheritanceHierarchyFunctionNoClasspath"
      ],
      "erroringMethods": [
        "testStaticMethodWithDifferentClassSameNameJava7NoCollision",
        "testSortingOfImports"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Cannot create MethodTypingContext for method declared in different ClassTypingContext",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: The lambda can be based on interface, which has only one method. But java.util.function.Consumer has at least two: getClass() and wait(long,int)",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c2\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.factory.FactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "specificationCoreFactoryCreate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "No own method exists in type CtNamedElement#name\u003cjava.lang.String\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.filters.FilterTest",
      "failingMethods": [
        "testgetTopDefinitions"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "testShadowModelEqualsNormalModel"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "No own method exists in type CtNamedElement#name\u003cjava.lang.String\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reference.TypeReferenceTest",
      "failingMethods": [
        "testGetAllExecutablesForInterfaces"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c14\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.reflect.visitor.CtScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testScannerCallsAllProperties"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "No own method exists in type CtNamedElement#name\u003cjava.lang.String\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reference.ExecutableReferenceTest",
      "failingMethods": [
        "testSpecifyGetAllExecutablesMethod"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c13\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.refactoring.MethodsRefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAllMethodsSameSignatureFunction",
        "testExecutableReferenceFilter"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The lambda can be based on interface, which has only one method. But spoon.test.refactoring.parameter.testclasses.IFaceB has at least two: getClass() and wait(long,int)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The lambda can be based on interface, which has only one method. But spoon.test.refactoring.parameter.testclasses.IFaceB has at least two: getClass() and wait(long,int)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: The lambda can be based on interface, which has only one method. But spoon.test.lambda.testclasses.Bar$SingleOnSubscribe has at least two: getClass() and wait(long,int)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.interfaces.InterfaceTest",
      "failingMethods": [
        "testRedefinesDefaultMethodInSubInterface",
        "testExtendsDefaultMethodInSubInterface",
        "testExtendsStaticMethodInSubInterface",
        "testRedefinesStaticMethodInSubInterface"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Sub interface must have 6+12(from java.lang.Object) methods in its interface and its super interfaces expected:\u003c6\u003e but was:\u003c18\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Sub interface must have 6 methods in its interface and its super interfaces expected:\u003c6\u003e but was:\u003c18\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Sub interface must have 6 methods in its interface and its super interfaces expected:\u003c6\u003e but was:\u003c18\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Sub interface must have 6 methods in its interface and its super interfaces expected:\u003c6\u003e but was:\u003c18\u003e",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.parent.SetParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class spoon.test.parent.ContractOnSettersParametrizedTest",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.lambda.LambdaTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetOverriddenMethodWithFunction",
        "testLambdaMethod",
        "testCompileLambdaGeneratedBySpoon"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The lambda can be based on interface, which has only one method. But spoon.test.lambda.testclasses.LambdaRxJava$NbpOperator has at least two: getClass() and wait(long,int)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The lambda can be based on interface, which has only one method. But java.util.function.Consumer has at least two: getClass() and wait(long,int)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The lambda can be based on interface, which has only one method. But spoon.test.lambda.testclasses.Bar$SingleOnSubscribe has at least two: getClass() and wait(long,int)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.replace.ReplaceParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "No own method exists in type CtNamedElement#name\u003cjava.lang.String\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.declaration.CtTypeInformationTest",
      "failingMethods": [
        "testClassTypingContextContinueScanning"
      ],
      "erroringMethods": [
        "testGetSuperclass",
        "testGetAllMethodsWontReturnOverriddenMethod"
      ],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...tion.testclasses.Sub[class]\u003e but was:\u003c...tion.testclasses.Sub[interface]\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot create MethodTypingContext for method declared in different ClassTypingContext",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot create MethodTypingContext for method declared in different ClassTypingContext",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 2
    }
  ]
}