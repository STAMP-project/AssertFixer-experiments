{
  "bugType": "only_fail",
  "hostname": "cyclone1",
  "repo": "javalite/activejdbc",
  "metrics": {
    "ReproductionDate": "Aug 7, 2018 11:45:30 PM",
    "BuggyBuildId": 413322938,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/javalite/activejdbc/builds/413322938",
    "BuggyBuildDate": "Aug 7, 2018 11:44:45 PM",
    "BugCommit": "2a0f5df15f7b12a6b6f010f2c3d61f471c8cbf10",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 23,
    "NbFileApp": 165,
    "NbFileTests": 194,
    "NbCPU": 8,
    "FreeMemory": 380233640,
    "TotalMemory": 1558708224,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 106534544,
      "ComputeClasspath": 97131504,
      "ComputeTestDir": 88964960,
      "BuildProject": 99978840,
      "InitRepoToPush": 98841224,
      "ComputeSourceDir": 242658776,
      "ComputeModules": 242658776,
      "CloneRepository": 115300048,
      "CheckoutPatchedBuild": 380233640,
      "TestProject": 94297256,
      "AssertFixer": 809546088,
      "GatherTestInformation": 136679336,
      "CommitPatch": 380233640
    },
    "NbSucceedingTests": 196,
    "BugCommitUrl": "http://github.com/javalite/activejdbc/commit/2a0f5df15f7b12a6b6f010f2c3d61f471c8cbf10",
    "NbFailingTests": 0,
    "NbErroringTests": 306,
    "NbSkippingTests": 0,
    "NbRunningTests": 502,
    "FailureNames": [
      "java.util.concurrent.ExecutionException",
      "java.lang.IndexOutOfBoundsException",
      "org.javalite.activejdbc.InitException",
      "org.javalite.activejdbc.associations.NotAssociatedException",
      "java.lang.RuntimeException",
      "java.lang.IllegalArgumentException",
      "org.javalite.test.jspec.TestException",
      "org.javalite.activejdbc.DBException",
      "java.lang.Exception"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 0,
      "ComputeClasspath": 10,
      "ComputeTestDir": 0,
      "BuildProject": 27,
      "InitRepoToPush": 1,
      "ComputeSourceDir": 0,
      "ComputeModules": 0,
      "CloneRepository": 5,
      "CheckoutPatchedBuild": 0,
      "TestProject": 18,
      "AssertFixer": 1800,
      "GatherTestInformation": 0,
      "CommitPatch": 0
    }
  },
  "failing-test-cases": [
    {
      "className": "org.javalite.activejdbc.ShardingSpec",
      "failingMethods": [],
      "erroringMethods": [
        "should_access_shard_child_in_polymorphic",
        "should_access_shard_in_many_to_many",
        "shouldAccessDifferentTableFromSameModel",
        "shouldInsertIntoShard",
        "should_access_shard_parent_in_one_to_many",
        "shouldUpdateFromShard",
        "should_access_shard_parents_in_polymorphic",
        "should_access_shard_child_in_one_to_many",
        "shouldDeleteFromShard"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Article\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027first_name\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: temperatures",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Doctor\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: shard2_temperatures",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: shard2_temperatures",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Article\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.associations.NotAssociatedException",
          "failureDetail": "No association from model \u0027class org.javalite.activejdbc.test_models.User\u0027 to model \u0027class org.javalite.activejdbc.test_models.Address\u0027",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: shard1_temperatures",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 9
    },
    {
      "className": "org.javalite.activejdbc.BelongsToParentsTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldCheckThatComputerBelongsTo2DifferentParents"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: computers",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.Defect638Test",
      "failingMethods": [],
      "erroringMethods": [
        "shouldNotThrowIllegalArgumentException"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.ModelExistsTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInstance"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.CaseSensitiveSpec",
      "failingMethods": [],
      "erroringMethods": [
        "should_pass_with_quotes_spaces_and_CamelCase"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: \"Wild Animals\"",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.LifecycleCallbackSpec",
      "failingMethods": [],
      "erroringMethods": [
        "shouldResetListener",
        "shouldFireAfterLoadFromDB"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027first_name\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.javalite.activejdbc.TimeManagementSpec",
      "failingMethods": [],
      "erroringMethods": [
        "shouldTurnTimeManagementOffWhenCreating",
        "shouldTurnTimeManagementOffWhenUpdating"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.javalite.activejdbc.CreatedAtUpdatedAtTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldResetUpdatedAtByInstanceMethods",
        "shouldResetUpdatedAtByBatchClassMethods"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.javalite.activejdbc.CompositePkTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldGenerateValidSQL",
        "shouldReturnNullWithWrongPKs",
        "shouldBeNew",
        "shouldDeleteByPK",
        "shouldInsertAndUpdate"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: developers",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Developer\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Developer\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: developers",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: developers",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "org.javalite.activejdbc.LazyListTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldBeEqual"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.ConverterTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldSetNullString",
        "shouldSetZeroAsNull",
        "shouldSetAndGetDateAsString",
        "shouldCreateBlankStringAsNull",
        "shouldConvertToStringCaseInsensitive",
        "shouldCreateZeroAsNull",
        "shouldSetNull",
        "shouldGetConvertDateToString",
        "shouldConvertToDateCaseInsensitive",
        "shouldSetNullTimestamp",
        "shouldSetBlankStringAsNull",
        "shouldSetAndGetTimestampAsString",
        "shouldSetNullDate",
        "shouldGetZeroAsNull",
        "shouldSetNullNumber",
        "shouldSetAndGetStringAsDate",
        "shouldSetAndGetStringAsTimestamp",
        "shouldSaveAndFetchDateAndTimestamp",
        "shouldGetConvertTimestampToString"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Student\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Student\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: salaries",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: salaries",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Salary\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: salaries",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 19
    },
    {
      "className": "org.javalite.activejdbc.AttributeConverterTest",
      "failingMethods": [],
      "erroringMethods": [
        "testDateConverter",
        "testTimestampConverter"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.javalite.activejdbc.Issue217Test",
      "failingMethods": [],
      "erroringMethods": [
        "shouldReturnShort"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: readers",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.PolymorphicAssociationsOverrideTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldRemovePolymorphicChildren",
        "shouldInferPolymorphicNames",
        "shouldFindPolymorphicParent",
        "shouldAddPolymorphicChild",
        "shouldThrowExceptionIfWrongParentTypeRequested",
        "shouldFindAllPolymorphicChildren",
        "shouldFindAllPolymorphicChildrenWithCriteria"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Vehicle\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Vehicle\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Vehicle\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Vehicle\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Vehicle\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.javalite.activejdbc.InitException\u003e",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Vehicle\u0027 must provide a default constructor.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "org.javalite.activejdbc.CallbackSupportTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldCallBeforeAfterSaveAndDelete",
        "shouldCallBeforeAfterValidate",
        "shouldCallbackAllMethodsOnCallbackImplementation"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: vegetables",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: plants",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: fruits",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "org.javalite.activejdbc.IsModelValidTest",
      "failingMethods": [],
      "erroringMethods": [
        "test"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Person\u0027 must provide a default constructor.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.Defect48Test",
      "failingMethods": [],
      "erroringMethods": [
        "shouldFailIfParentRequestedAndForeignKeyNotSet"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "there is no association with model: class org.javalite.activejdbc.test_models.User",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.Defect141Test",
      "failingMethods": [],
      "erroringMethods": [
        "shouldRefreshCreatedAndUpdatedAttributes"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.ToJsonSpec",
      "failingMethods": [],
      "erroringMethods": [
        "shouldEscapeDoubleQuote",
        "shouldReturnSecondsInDateTime",
        "shouldGenerateSimpleJson",
        "shouldKeepParametersCase",
        "shouldIncludePrettyChildren",
        "shouldInjectCustomContentIntoJson",
        "shouldIncludeParent",
        "shouldGenerateFromList",
        "shouldIncludeParents",
        "shouldSanitizeJson",
        "shouldGenerateJsonForPolymorphicChildren",
        "shouldIncludeUglyChildren",
        "shouldIncludeOnlyProvidedAttributes"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: pages",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: posts",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: articles",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Model: org.javalite.activejdbc.test_models.Address is not associated with: org.javalite.activejdbc.test_models.User",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Model: org.javalite.activejdbc.test_models.Reader is not associated with: org.javalite.activejdbc.test_models.Book",
          "isError": true
        },
        {
          "failureName": "org.javalite.test.jspec.TestException",
          "failureDetail": "Test object:\njava.lang.String \u003d\u003d \u003c{\n  \"email\":null,\n  \"last_name\":null\n}\u003e\nand expected\njava.lang.String \u003d\u003d \u003c{\n  \"email\":\"mmonroe@yahoo.com\",\n  \"last_name\":\"Monroe\"\n}\u003e\nare not equal, but they should be.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Person\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Model: org.javalite.activejdbc.test_models.Address is not associated with: org.javalite.activejdbc.test_models.User",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Model: org.javalite.activejdbc.test_models.Address is not associated with: org.javalite.activejdbc.test_models.User",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: computers",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 13
    },
    {
      "className": "org.javalite.activejdbc.CustomValidatorTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldRegisterCustomValidator"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.Defect123Test",
      "failingMethods": [],
      "erroringMethods": [
        "test"
      ],
      "failures": [
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.javalite.activejdbc.StaleModelException\u003e but was\u003corg.javalite.activejdbc.InitException\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.ValidatorsTest",
      "failingMethods": [],
      "erroringMethods": [
        "testUniquenessValidator",
        "testPresenceValidator",
        "shouldConvertEmptyStringToNull",
        "testNumericValidator",
        "testMessagePassing",
        "testRegexpValidator",
        "testRangeValidator",
        "shouldNotOverwritePreviousValidation",
        "testSaveItMethod",
        "shouldGetErrorsCaseInsensitive"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: salaries",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: salaries",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027email\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: accounts",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: accounts",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: accounts",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027email\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027email\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: temperatures",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.javalite.activejdbc.PaginatorTest",
      "failingMethods": [],
      "erroringMethods": [
        "testThatPaginatorIsSerializable",
        "testCurrentPage",
        "testPageCount",
        "shouldPaginateWithRawSql",
        "should_Fix_558",
        "testPreviousAndNext",
        "testThrowExceptionIfWrongArgument",
        "testGetPage",
        "should_not_ignore_changes_in_count_after_started",
        "should_ignore_changes_in_count_after_started"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.javalite.activejdbc.ValidationWithResourceBundlesTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldPullCorrectMessageWithParametersGerman",
        "shouldPullCorrectMessageWithParameters",
        "shouldPullCorrectMessageInGermanFromResourceBundle",
        "shouldGetAttributesAndErrorsCaseInsensitive",
        "shouldPullCorrectMessageFromResourceBundle",
        "shouldReturnProvidedMessageIfNotFoundInResourceBundle"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: schools",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: schools",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: schools",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: schools",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: schools",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: schools",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "org.javalite.activejdbc.Defect329Test",
      "failingMethods": [],
      "erroringMethods": [
        "createItEmptyModelWithVersionShouldSaveRecord",
        "createItEmptyModelWithVersionAndTimeShouldSaveRecord",
        "createItEmptyModelNoVersionShouldSaveRecord"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "java.lang.reflect.InvocationTargetException",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "java.lang.reflect.InvocationTargetException",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: animals",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "org.javalite.activejdbc.ToFromXmlSpec",
      "failingMethods": [],
      "erroringMethods": [
        "shouldGenerateSimpleXml",
        "shouldKeepParametersCase",
        "shouldEscapeSpecialCharsInXMLContent",
        "shouldInjectCustomContentIntoXML",
        "shouldGenerateXmlForPolymorphicChildren",
        "shouldIncludeOnlyProvidedAttributes",
        "shouldIncludeChildren",
        "shouldParseAttributesFromXml",
        "shouldNotFailXmlNoValue",
        "shouldGenerateFromList",
        "shouldConvertClobsToString"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: articles",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Person\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: articles",
          "isError": true
        },
        {
          "failureName": "org.javalite.test.jspec.TestException",
          "failureDetail": "Test object:\njava.lang.String \u003d\u003d \u003c\u003e\nand expected\njava.lang.String \u003d\u003d \u003cmmonroe@yahoo.com\u003e\nare not equal, but they should be.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Person\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Model: org.javalite.activejdbc.test_models.Address is not associated with: org.javalite.activejdbc.test_models.User",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Address\u0027 must provide a default constructor.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 11
    },
    {
      "className": "org.javalite.activejdbc.PartitionIDSpec",
      "failingMethods": [],
      "erroringMethods": [
        "shouldIncludePartitionColumnsIntoUPDATEAndDELETE"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: passengers",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.HierarchyTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldAcceptMultipleLevelsInheritance"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Cake\u0027 must provide a default constructor.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.OrphanRecordTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldReturnNullIfForeignKeyPointsNonExistingParent",
        "shouldReturnNullIfForeignKeyIsNull"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Address\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Address\u0027 must provide a default constructor.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.javalite.activejdbc.IncludesTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldCacheIncludesMany2Many",
        "shouldIncludeParentAndChildren",
        "shouldNotCallDependentIfOriginatedModelQueryReturnsNoResultsForOneToMany",
        "shouldIncludeMultipleMany2ManyOverridesOnOneModel",
        "shouldBeAbleToIncludeParentAndChildren",
        "shouldBeAbleToIncludeOtherInManyToMany",
        "shouldFixDefect553CacheEmptyChildren",
        "shouldBeAbleToIncludeChildrenOne2Many",
        "shouldNotCallDependentIfOriginatedModelQueryReturnsNoResultsForManyToMany",
        "shouldBeAbleToIncludeParentOne2Many",
        "shouldNotIncludeParentIfParentIdIsNull",
        "shouldFixDefect553CacheIncludesMany2Many",
        "shouldIncludeMany2ManyInCaseJoinTableHasUnconventionalPKName",
        "shouldFixDefect163NeedsToIncludeChildrenAndParentsInTreeStructure"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Genre\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: nodes",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Model: org.javalite.activejdbc.test_models.Address is not associated with: org.javalite.activejdbc.test_models.User",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Model: org.javalite.activejdbc.test_models.Patient is not associated with: org.javalite.activejdbc.test_models.Doctor",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Model: org.javalite.activejdbc.test_models.Patient is not associated with: org.javalite.activejdbc.test_models.Doctor",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: nodes",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Model: org.javalite.activejdbc.test_models.Address is not associated with: org.javalite.activejdbc.test_models.User",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Ingredient\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: nodes",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Model: org.javalite.activejdbc.test_models.Patient is not associated with: org.javalite.activejdbc.test_models.Doctor",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Model: org.javalite.activejdbc.test_models.Address is not associated with: org.javalite.activejdbc.test_models.User",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Model: org.javalite.activejdbc.test_models.Reader is not associated with: org.javalite.activejdbc.test_models.Book",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Model: org.javalite.activejdbc.test_models.Patient is not associated with: org.javalite.activejdbc.test_models.Doctor",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Model: org.javalite.activejdbc.test_models.User is not associated with: org.javalite.activejdbc.test_models.Address",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 14
    },
    {
      "className": "org.javalite.activejdbc.CreateModelTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldCreateModel",
        "shouldThrowExceptionIfWrongValuePassed",
        "shouldCreateAndSaveModel"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Person\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.javalite.activejdbc.InitException\u003e",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Person\u0027 must provide a default constructor.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "org.javalite.activejdbc.RawPaginatorSpec",
      "failingMethods": [],
      "erroringMethods": [
        "shouldGetPage",
        "testThatPaginatorIsSerializable",
        "shouldLoadOnlyRequestedColumns",
        "testCurrentPage",
        "testPreviousAndNext",
        "shouldCountPages",
        "testThrowExceptionIfWrongArgument",
        "should_not_ignore_changes_in_count_after_started",
        "should_ignore_changes_in_count_after_started"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Item\u0027 must provide a default constructor.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 9
    },
    {
      "className": "org.javalite.activejdbc.DeleteCascadeTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldDeleteMany2ManyShallow",
        "shouldDeletePolymorphicChildrenDeep",
        "shouldDeleteMany2ManyDeepSkippingAssociation",
        "shouldDeletePolymorphicShallow",
        "shouldDeletePolymorphicChildren",
        "shouldDeleteMany2ManyDeep",
        "shouldDeleteOne2ManyShallow",
        "shouldDeleteOneToManyDeep"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: doctors",
          "isError": true
        },
        {
          "failureName": "org.javalite.test.jspec.TestException",
          "failureDetail": "Test object:\njava.lang.Long \u003d\u003d \u003c7\u003e\nand expected\njava.lang.Integer \u003d\u003d \u003c4\u003e\nare not equal, but they should be.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: articles",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: doctors",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Vehicle\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: doctors",
          "isError": true
        },
        {
          "failureName": "org.javalite.test.jspec.TestException",
          "failureDetail": "Test object:\njava.lang.Long \u003d\u003d \u003c7\u003e\nand expected\njava.lang.Integer \u003d\u003d \u003c4\u003e\nare not equal, but they should be.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Vehicle\u0027 must provide a default constructor.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "org.javalite.activejdbc.Defect104Test",
      "failingMethods": [],
      "erroringMethods": [
        "shouldNotReturnNullAttributesInMap"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.logging.JsonLog4jLayoutSpec",
      "failingMethods": [],
      "erroringMethods": [
        "shouldPrintJsonWithoutParams",
        "shouldPrintJsonLogValuesAndParams",
        "shouldPrintJsonWithoutParamsAndLogValues",
        "shouldClearLogValues"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: animals",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: animals",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: animals",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: animals",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.javalite.activejdbc.RemoveAssociatedChildTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldDeleteChildInOneToMany",
        "shouldClearJoinLinksWhenChildRemovedInMany2Many"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: libraries",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: doctors",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.javalite.activejdbc.Defect122Test",
      "failingMethods": [],
      "erroringMethods": [
        "shouldNotFail"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.FreemarkerSpec",
      "failingMethods": [],
      "erroringMethods": [
        "shouldRenderSingleIntance",
        "shouldRenderRowProcessor",
        "shouldRenderList"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "org.javalite.activejdbc.BaseTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldReturnProperNulls"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.Defect381_UpdateModifiedOnlyTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldNotBeModifiedAfterFind",
        "shouldBeModifiedAfterDeletaAndThaw",
        "shouldBeModifiedAfterCreated",
        "shouldBeModifiedAfterFromMap",
        "shouldBeModifiedWhenModified",
        "shouldBeModifiedAfterCopyTo",
        "shouldBeCaseInsensitive"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Programmer\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Programmer\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Programmer\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Programmer\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Programmer\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: programmers",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Programmer\u0027 must provide a default constructor.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "org.javalite.activejdbc.PolymorphicAssociationsTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldFixDefect553CacheEmptyChildren",
        "shouldRemovePolymorphicChildren",
        "shouldInferPolymorphicNames",
        "shouldBeAbleToIncludePolymorphicParent",
        "shouldFindPolymorphicParent",
        "shouldAddPolymorphicChild",
        "shouldThrowExceptionIfWrongParentTypeRequested",
        "shouldFindAllPolymorphicChildren",
        "shouldFindPolymorphicParentWithInclude",
        "shouldFindAllPolymorphicChildrenWithCriteria"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: articles",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: articles",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: articles",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: articles",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: articles",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: posts",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: articles",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: articles",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.javalite.activejdbc.InitException\u003e",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: articles",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.javalite.activejdbc.OptimisticLockingTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldAdvanceVersionWhenRecordIsUpdated",
        "should",
        "shouldThrowExceptionWhenVersionCollisionHappens",
        "shouldSetVersionToOneWhenCreatingNewRecord"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: watermelons",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: watermelons",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.javalite.activejdbc.StaleModelException\u003e but was\u003corg.javalite.activejdbc.InitException\u003e",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: watermelons",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.javalite.activejdbc.OffsetLimitTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAll"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Page\u0027 must provide a default constructor.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.AttributesAndAssociationsTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldReturnCaseInsensitiveAttributes",
        "shouldReturnCorrectAssociations",
        "shouldReturnCorrectAttributes"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "org.javalite.activejdbc.NumericValidationBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldRejectValueAboveMax",
        "shouldRejectValueBelowMin",
        "shouldRejectNonIntegerValue",
        "shouldFixDefect66",
        "shouldAcceptCorrectValueForTotal",
        "shouldAcceptNullValue"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: accounts",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: accounts",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: accounts",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: accounts",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: accounts",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "java.lang.reflect.InvocationTargetException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "org.javalite.activejdbc.OtherDbTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldFindFOtherDb"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027first_name\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.SetParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldRejectUnrelatedParent",
        "shouldAcceptTwoParents"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Motherboard\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.javalite.activejdbc.InitException\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.javalite.activejdbc.LongIdTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldReturnValidLongId"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.C3P0PoolTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldUseConnectionFromPool"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.DBException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Table \"PEOPLE\" not found; SQL statement:\nDELETE FROM people [42102-171], query: DELETE FROM people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.DeleteChildrenSpec",
      "failingMethods": [],
      "erroringMethods": [
        "shouldDeleteMany2ManyLinks",
        "shouldDeleteOne2ManyChildren",
        "shouldDeletePolymorphicChildren"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.associations.NotAssociatedException",
          "failureDetail": "No association from model \u0027class org.javalite.activejdbc.test_models.User\u0027 to model \u0027class org.javalite.activejdbc.test_models.Address\u0027",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: doctors",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: articles",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "org.javalite.activejdbc.CorrectAttributeSpec",
      "failingMethods": [],
      "erroringMethods": [
        "shouldCheckAttributeExistence"
      ],
      "failures": [
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.javalite.activejdbc.InitException\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.RaceConditionTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldNotGetRaceCondition"
      ],
      "failures": [
        {
          "failureName": "java.util.concurrent.ExecutionException",
          "failureDetail": "org.javalite.activejdbc.InitException: Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.AttributeLengthValidatorTest",
      "failingMethods": [],
      "erroringMethods": [
        "testExactLength",
        "testRangeLength",
        "testNullFailsWhenNotAllowed",
        "testAllowBlank",
        "testMaxLength",
        "testNonStringFieldValueThrowsException",
        "testAllowNull",
        "testMinLength",
        "testErrorsWithInternationalization"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027email\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027email\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027email\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027email\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027email\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027email\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027email\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027email\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027email\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 9
    },
    {
      "className": "org.javalite.activejdbc.Many2ManyOverrideConventionsTest",
      "failingMethods": [],
      "erroringMethods": [
        "test"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.CacheTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldGenerateJSONFromQueryCache",
        "shouldNotPropagateCacheEventForNonCachedModels",
        "testCount",
        "shouldNotPropagateCacheEventOnFlush",
        "shouldIndicateCachedAnnotation",
        "testCache",
        "testCachedParent",
        "shouldNotAddInfoToStatisticsIfFoundResultInCache",
        "shouldDropCacheOnRefresh",
        "testCountWithParams",
        "testFindById",
        "testFindFirst"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 12
    },
    {
      "className": "org.javalite.activejdbc.Defect149Test",
      "failingMethods": [],
      "erroringMethods": [
        "shouldNotIncludeNullValuesIntoInsertStatement"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027email\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.test.DBSpecTest",
      "failingMethods": [],
      "erroringMethods": [
        "a_clean",
        "c_shouldRollBackTransactionByDefault",
        "f_shouldFindRecordsFromPrevious_NOT_Rolledback_Transaction",
        "e_should_NOT_RollBackTransaction",
        "d_shouldNotFindRecordsFromRolledBackTransaction"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.DBException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Table \"PATIENTS\" not found; SQL statement:\ndelete from patients [42102-171], query: delete from patients",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.DBException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Table \"PATIENTS\" not found; SQL statement:\ninsert into patients (first_name, last_name) values (\u0027Billie\u0027, \u0027Holiday\u0027) [42102-171], query: insert into patients (first_name, last_name) values (\u0027Billie\u0027, \u0027Holiday\u0027)",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.DBException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Table \"PATIENTS\" not found; SQL statement:\nSELECT COUNT(*) FROM patients [42102-171], query: SELECT COUNT(*) FROM patients",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.DBException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Table \"PATIENTS\" not found; SQL statement:\ninsert into patients (first_name, last_name) values (\u0027Billie\u0027, \u0027Holiday\u0027) [42102-171], query: insert into patients (first_name, last_name) values (\u0027Billie\u0027, \u0027Holiday\u0027)",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.DBException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Table \"PATIENTS\" not found; SQL statement:\nSELECT COUNT(*) FROM patients [42102-171], query: SELECT COUNT(*) FROM patients",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "org.javalite.activejdbc.OptimisticLockingOverrideVersionColumnTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldAdvanceVersionWhenRecordIsUpdated",
        "shouldThrowExceptionWhenVersionCollisionHappens",
        "shouldSetVersionToOneWhenCreatingNewRecord"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: items",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.javalite.activejdbc.StaleModelException\u003e but was\u003corg.javalite.activejdbc.InitException\u003e",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: items",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "org.javalite.activejdbc.ScopeSpec",
      "failingMethods": [],
      "erroringMethods": [
        "shouldRejectNonExistentScope",
        "shouldCombineScopesAndConditions",
        "shouldUseBasicScope",
        "shouldUseMultipleScopes"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Employee\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Employee\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Employee\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Employee\u0027 must provide a default constructor.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.javalite.activejdbc.Many2ManyRelationshipTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldFindManyToManyViaGetter",
        "shouldAddNewChildInManyToManyAssociation",
        "shouldFindWithParamsForJoinTable",
        "shouldSelectManyToManyWithGetAll",
        "shouldRejectUnassociatedModel"
      ],
      "failures": [
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.javalite.activejdbc.associations.NotAssociatedException\u003e but was\u003corg.javalite.activejdbc.InitException\u003e",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: doctors",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Programmer\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: doctors",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: doctors",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "org.javalite.activejdbc.CustomConverterTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldConvertStringToInteger"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.DBException",
          "failureDetail": "Cannot open a new connection because existing connection is still on current thread, name: default, connection instance: com.mchange.v2.c3p0.impl.NewProxyConnection@429bd883. This might indicate a logical error in your application.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.ModelTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldCollectLastNames",
        "testDeleteCascade",
        "shouldConvertUtilDate2SqlDate",
        "testFindOrCreateIt",
        "shouldSerializeModelWithDirtyAttributes",
        "testNewFromMapCaseInsensitive",
        "testModelFinderWithListener",
        "testCopyFrom",
        "shouldSerializeModel",
        "testSaveOneToManyAssociation",
        "shouldFindManyToOneViaGetter",
        "shouldGenerateValidUpdateSQL",
        "testOneToManyOverrideConventionAssociation",
        "testBatchUpdate",
        "testOverrideTableName",
        "testCreateNewAndSave",
        "testInstanceDelete",
        "testNewFromMap",
        "testModelFinder",
        "testFindBySQL",
        "shouldAcceptUpperCaseAttributeName",
        "testModelFinderAll",
        "testGetById",
        "shouldGenerateValidInsertSQLWithTime",
        "testValidatesPresenceOf",
        "shouldFindOneToManyViaGetter",
        "testHasManyOverrideConventionAssociation",
        "testCustomIdName",
        "shouldGenerateValidUpdateSQLWithReplacements",
        "testOneToMany",
        "testModelFindOneParametrized",
        "testModelFinderWithParams",
        "shouldFindChildrenWithCriteria",
        "testLikeCondition",
        "testLookupAndSave",
        "shouldCreateModelWithSingleSetter",
        "shouldGetAttributeCaseInsensitive",
        "shouldGenerateValidInsertSQL",
        "shouldCollectDistictFirstNames",
        "testSetWrongAttribute",
        "testBatchUpdateAll",
        "shouldOverrideSomeAttributesFromMap",
        "shouldGenerateCorrectInsertSQLWithReplacements",
        "shouldGenerateCorrectInsertSQL",
        "shouldConvertTime",
        "testCopyTo",
        "testBelongsToConvention",
        "testFindOrInit",
        "testModelFinderWithListenerAndParameters",
        "testBelongsToMany",
        "testAttemptSetId",
        "testModelFindOne",
        "testCreateNewAndSaveWithSomeNULLs",
        "testFrozen",
        "shouldGenerateValidUpdateSQLWithTime"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027first_name\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.associations.NotAssociatedException",
          "failureDetail": "No association from model \u0027class org.javalite.activejdbc.test_models.User\u0027 to model \u0027class org.javalite.activejdbc.test_models.Address\u0027",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027addresses\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: patients",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: teams",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: libraries",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.associations.NotAssociatedException",
          "failureDetail": "No association from model \u0027class org.javalite.activejdbc.test_models.User\u0027 to model \u0027class org.javalite.activejdbc.test_models.Address\u0027",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: alarms",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Person\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: alarms",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.test.jspec.TestException",
          "failureDetail": "Expected exception: class java.lang.IllegalArgumentException, but instead got: org.javalite.activejdbc.InitException: Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: addresses",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027first_name\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: alarms",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: addresses",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: students",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: books",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: animals",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Attribute: \u0027first_name\u0027 is not defined in model: \u0027class org.javalite.activejdbc.test_models.User. Available attributes: [ADMIN, ID, NAME, REMARKS]",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: addresses",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Person\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: legacy_universities",
          "isError": true
        },
        {
          "failureName": "org.javalite.test.jspec.TestException",
          "failureDetail": "should be true, but it is not",
          "isError": true
        },
        {
          "failureName": "org.javalite.test.jspec.TestException",
          "failureDetail": "should be true, but it is not",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.test.jspec.TestException",
          "failureDetail": "Expected exception: class java.lang.IllegalArgumentException, but instead got: org.javalite.activejdbc.InitException: Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: people",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: addresses",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 55
    },
    {
      "className": "org.javalite.activejdbc.CacheEventListenerTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldDelegateCachePurgeEventsToListener",
        "shouldNotBreakIfListenerThrowsException"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Person\u0027 must provide a default constructor.",
          "isError": true
        },
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Model \u0027org.javalite.activejdbc.test_models.Person\u0027 must provide a default constructor.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.javalite.activejdbc.BlobTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldWriteAndReadBytesToDb"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: images",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.javalite.activejdbc.UnmaganedIdTest",
      "failingMethods": [],
      "erroringMethods": [
        "shouldInsertNewRecord"
      ],
      "failures": [
        {
          "failureName": "org.javalite.activejdbc.InitException",
          "failureDetail": "Failed to find table: apples",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ],
  "failingModule": "/root/workspace/javalite/activejdbc/413322938/activejdbc",
  "bugCommit": "https://github.com/javalite/activejdbc/compare/4f7e3f724ce3...2a0f5df15f7b"
}