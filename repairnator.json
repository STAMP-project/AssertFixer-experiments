{
  "bugType": "only_fail",
  "hostname": "cyclone1",
  "repo": "graphql-java/graphql-java-tools",
  "metrics": {
    "ReproductionDate": "Sep 23, 2018 11:39:20 AM",
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/graphql-java/graphql-java-tools/builds/432085275",
    "BuggyBuildDate": "Sep 23, 2018 11:39:48 AM",
    "BugCommit": "91b7299b2c43897cb387384353e3df3b93d5e2be",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 35,
    "NbFileApp": 8,
    "NbFileTests": 0,
    "NbCPU": 8,
    "FreeMemory": 118083496,
    "TotalMemory": 159907840,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 119306112,
      "ComputeClasspath": 97024528,
      "ComputeTestDir": 91139256,
      "BuildProject": 113797072,
      "InitRepoToPush": 98335984,
      "ComputeSourceDir": 117062744,
      "ComputeModules": 117062744,
      "CloneRepository": 122827608,
      "CheckoutPatchedBuild": 118083496,
      "TestProject": 111825504,
      "AssertFixer": 124298856,
      "GatherTestInformation": 108304072,
      "CommitPatch": 118083496
    },
    "NbSucceedingTests": 43,
    "BuggyBuildId": 432085275,
    "BugCommitUrl": "http://github.com/graphql-java/graphql-java-tools/commit/91b7299b2c43897cb387384353e3df3b93d5e2be",
    "NbFailingTests": 28,
    "NbErroringTests": 6,
    "NbSkippingTests": 0,
    "NbRunningTests": 77,
    "FailureNames": [
      "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
      "Expected exception of type \u0027com.coxautodev.graphql.tools.ResolverError\u0027, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
      "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.SchemaError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
      "Condition not satisfied",
      "Expected exception of type \u0027com.coxautodev.graphql.tools.SchemaError\u0027, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
      "com.coxautodev.graphql.tools.FieldResolverError",
      "Expected exception of type \u0027com.coxautodev.graphql.tools.TypeClassMatcher$RawClassRequiredForGraphQLMappingException\u0027, but no exception was thrown  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
      "Expected exception of type \u0027com.coxautodev.graphql.tools.TypeClassMatcher$RawClassRequiredForGraphQLMappingException\u0027, but got \u0027com.coxautodev.graphql.tools.SchemaClassScannerError\u0027  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 0,
      "ComputeClasspath": 8,
      "ComputeTestDir": 0,
      "BuildProject": 43,
      "InitRepoToPush": 0,
      "ComputeSourceDir": 0,
      "ComputeModules": 0,
      "CloneRepository": 3,
      "CheckoutPatchedBuild": 0,
      "TestProject": 25,
      "AssertFixer": 1,
      "GatherTestInformation": 0,
      "CommitPatch": 0
    }
  },
  "failing-test-cases": [
    {
      "className": "com.coxautodev.graphql.tools.SchemaParserSpec",
      "failingMethods": [
        "parser should throw descriptive exception when object is used as input type incorrectly",
        "parser handles enums with overridden toString method",
        "parser should parse correctly when multiple resolvers for the same data type are given",
        "parser should parse correctly when multiple query resolvers are given",
        "parser should allow turning off default generic wrappers",
        "support enum types if only used in input Map",
        "support enum types if only used as input type"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
          "failureDetail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
          "isError": false
        },
        {
          "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
          "failureDetail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
          "isError": false
        },
        {
          "failureName": "Expected exception of type \u0027com.coxautodev.graphql.tools.TypeClassMatcher$RawClassRequiredForGraphQLMappingException\u0027, but got \u0027com.coxautodev.graphql.tools.SchemaClassScannerError\u0027  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
          "failureDetail": "Expected exception of type \u0027com.coxautodev.graphql.tools.TypeClassMatcher$RawClassRequiredForGraphQLMappingException\u0027, but got \u0027com.coxautodev.graphql.tools.SchemaClassScannerError\u0027",
          "isError": false
        },
        {
          "failureName": "Expected exception of type \u0027com.coxautodev.graphql.tools.SchemaError\u0027, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
          "failureDetail": "Expected exception of type \u0027com.coxautodev.graphql.tools.SchemaError\u0027, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
          "isError": false
        },
        {
          "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.SchemaError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
          "failureDetail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.SchemaError\u0027",
          "isError": false
        },
        {
          "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.SchemaError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
          "failureDetail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.SchemaError\u0027",
          "isError": false
        },
        {
          "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.SchemaError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
          "failureDetail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.SchemaError\u0027",
          "isError": false
        }
      ],
      "nbFailures": 7,
      "nbErrors": 0
    },
    {
      "className": "com.coxautodev.graphql.tools.TypeClassMatcherSpec",
      "failingMethods": [
        "matcher verifies that nested return type matches graphql definition for method superListFutureType",
        "matcher verifies that nested return type matches graphql definition for method futureListListType",
        "matcher verifies that nested return type matches graphql definition for method listType",
        "matcher verifies that nested return type matches graphql definition for method superType",
        "matcher verifies that nested return type matches graphql definition for method listListFutureType",
        "matcher verifies that nested return type matches graphql definition for method genericListType",
        "matcher verifies that nested return type matches graphql definition for method type",
        "matcher verifies that nested return type matches graphql definition for method futureListType",
        "matcher verifies that nested return type matches graphql definition for method listListType",
        "matcher verifies that nested return type matches graphql definition for method nullableListType",
        "matcher does not allow unwrapped parameterized types as root types",
        "matcher verifies that nested return type matches graphql definition for method listFutureType",
        "matcher verifies that nested return type matches graphql definition for method nullableType",
        "matcher verifies that nested return type matches graphql definition for method genericCustomType",
        "matcher verifies that nested return type matches graphql definition for method futureType"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public com.coxautodev.graphql.tools.TypeClassMatcherSpec$CustomType com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.type()) ",
          "isError": false
        },
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.concurrent.Future com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.futureType()) ",
          "isError": false
        },
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.List com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.listType()) ",
          "isError": false
        },
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.List com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.listListType()) ",
          "isError": false
        },
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.concurrent.CompletableFuture com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.futureListType()) ",
          "isError": false
        },
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.List com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.listFutureType()) ",
          "isError": false
        },
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.List com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.listListFutureType()) ",
          "isError": false
        },
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.concurrent.CompletableFuture com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.futureListListType()) ",
          "isError": false
        },
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.lang.Object com.coxautodev.graphql.tools.TypeClassMatcherSpec$Super.superType()) ",
          "isError": false
        },
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.lang.Object com.coxautodev.graphql.tools.TypeClassMatcherSpec$Super.superListFutureType()) ",
          "isError": false
        },
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.Optional com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.nullableType()) ",
          "isError": false
        },
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public java.util.Optional com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.nullableListType()) ",
          "isError": false
        },
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public com.coxautodev.graphql.tools.TypeClassMatcherSpec$GenericCustomType com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.genericCustomType()) ",
          "isError": false
        },
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  match.clazz \u003d\u003d CustomType |     |     | |     |     false |     class java.lang.Class ValidMatch(type\u003dObjectTypeDefinition{name\u003d\u0027CustomType\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[]}, clazz\u003dclass java.lang.Class, reference\u003dreturn type of method public com.coxautodev.graphql.tools.TypeClassMatcherSpec$GenericCustomListType com.coxautodev.graphql.tools.TypeClassMatcherSpec$QueryMethods.genericListType()) ",
          "isError": false
        },
        {
          "failureName": "Expected exception of type \u0027com.coxautodev.graphql.tools.TypeClassMatcher$RawClassRequiredForGraphQLMappingException\u0027, but no exception was thrown  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
          "failureDetail": "Expected exception of type \u0027com.coxautodev.graphql.tools.TypeClassMatcher$RawClassRequiredForGraphQLMappingException\u0027, but no exception was thrown",
          "isError": false
        }
      ],
      "nbFailures": 15,
      "nbErrors": 0
    },
    {
      "className": "com.coxautodev.graphql.tools.ParameterizedGetterSpec",
      "failingMethods": [],
      "erroringMethods": [
        "com.coxautodev.graphql.tools.ParameterizedGetterSpec"
      ],
      "failures": [
        {
          "failureName": "com.coxautodev.graphql.tools.FieldResolverError",
          "failureDetail": "No method or field found as defined in schema \u003cunknown\u003e:6 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:    java.lang.Class.bestFriends()   java.lang.Class.getBestFriends()   java.lang.Class.bestFriends",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.coxautodev.graphql.tools.EndToEndSpec",
      "failingMethods": [],
      "erroringMethods": [
        "com.coxautodev.graphql.tools.EndToEndSpec"
      ],
      "failures": [
        {
          "failureName": "com.coxautodev.graphql.tools.FieldResolverError",
          "failureDetail": "No method or field found as defined in schema \u003cunknown\u003e:96 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:    java.lang.Class.id()   java.lang.Class.getId()   java.lang.Class.id",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.coxautodev.graphql.tools.NestedInputTypesSpec",
      "failingMethods": [
        "nested input types are parsed"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
          "failureDetail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.coxautodev.graphql.tools.RelayConnectionSpec",
      "failingMethods": [
        "relay connection types are compatible"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
          "failureDetail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.coxautodev.graphql.tools.SchemaClassScannerSpec",
      "failingMethods": [
        "scanner throws if @Batched is used on data class",
        "scanner handles input types that reference other input types"
      ],
      "erroringMethods": [
        "scanner should handle nested types in input types",
        "scanner handles multiple interfaces that are not used as field types"
      ],
      "failures": [
        {
          "failureName": "Condition not satisfied",
          "failureDetail": "Condition not satisfied:  objects.definitions.findAll { it instanceof InputObjectTypeDefinition }.size() \u003d\u003d 3 |       |           |                                                   |      | |       |           |                                                   1      false |       |           [InputObjectTypeDefinition{name\u003d\u0027FirstInput\u0027, directives\u003d[], inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027id\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, defaultValue\u003dnull, directives\u003d[]}, InputValueDefinition{name\u003d\u0027second\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027SecondInput\u0027}}, defaultValue\u003dnull, directives\u003d[]}, InputValueDefinition{name\u003d\u0027third\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027ThirdInput\u0027}}, defaultValue\u003dnull, directives\u003d[]}]}] |       [InputObjectTypeDefinition{name\u003d\u0027FirstInput\u0027, directives\u003d[], inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027id\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, defaultValue\u003dnull, directives\u003d[]}, InputValueDefinition{name\u003d\u0027second\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027SecondInput\u0027}}, defaultValue\u003dnull, directives\u003d[]}, InputValueDefinition{name\u003d\u0027third\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027ThirdInput\u0027}}, defaultValue\u003dnull, directives\u003d[]}]}, ObjectTypeDefinition{name\u003d\u0027Query\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[FieldDefinition{name\u003d\u0027test\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027input\u0027, type\u003dTypeName{name\u003d\u0027FirstInput\u0027}, defaultValue\u003dnull, directives\u003d[]}], directives\u003d[]}]}, ScalarTypeDefinition{name\u003d\u0027String\u0027, directives\u003d[]}] ScannedSchemaObjects(dictionary\u003d{}, definitions\u003d[InputObjectTypeDefinition{name\u003d\u0027FirstInput\u0027, directives\u003d[], inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027id\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, defaultValue\u003dnull, directives\u003d[]}, InputValueDefinition{name\u003d\u0027second\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027SecondInput\u0027}}, defaultValue\u003dnull, directives\u003d[]}, InputValueDefinition{name\u003d\u0027third\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027ThirdInput\u0027}}, defaultValue\u003dnull, directives\u003d[]}]}, ObjectTypeDefinition{name\u003d\u0027Query\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[FieldDefinition{name\u003d\u0027test\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027input\u0027, type\u003dTypeName{name\u003d\u0027FirstInput\u0027}, defaultValue\u003dnull, directives\u003d[]}], directives\u003d[]}]}, ScalarTypeDefinition{name\u003d\u0027String\u0027, directives\u003d[]}], customScalars\u003d{}, rootInfo\u003dcom.coxautodev.graphql.tools.RootTypeInfo@1c25b8a7, fieldResolversByType\u003d{ObjectTypeDefinition{name\u003d\u0027Query\u0027, implements\u003d[], directives\u003d[], fieldDefinitions\u003d[FieldDefinition{name\u003d\u0027test\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027input\u0027, type\u003dTypeName{name\u003d\u0027FirstInput\u0027}, defaultValue\u003dnull, directives\u003d[]}], directives\u003d[]}]}\u003d{FieldDefinition{name\u003d\u0027test\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027input\u0027, type\u003dTypeName{name\u003d\u0027FirstInput\u0027}, defaultValue\u003dnull, directives\u003d[]}], directives\u003d[]}\u003dMethodFieldResolver{method\u003dpublic java.lang.String com.coxautodev.graphql.tools.SchemaClassScannerSpec$MultipleInputTypeQuery.test(com.coxautodev.graphql.tools.SchemaClassScannerSpec$MultipleInputTypeQuery$FirstInput)}}}, unusedDefinitions\u003d[InputObjectTypeDefinition{name\u003d\u0027SecondInput\u0027, directives\u003d[], inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027id\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, defaultValue\u003dnull, directives\u003d[]}]}, InputObjectTypeDefinition{name\u003d\u0027ThirdInput\u0027, directives\u003d[], inputValueDefinitions\u003d[InputValueDefinition{name\u003d\u0027id\u0027, type\u003dNonNullType{type\u003dTypeName{name\u003d\u0027String\u0027}}, defaultValue\u003dnull, directives\u003d[]}]}]) ",
          "isError": false
        },
        {
          "failureName": "com.coxautodev.graphql.tools.FieldResolverError",
          "failureDetail": "No method or field found as defined in schema \u003cunknown\u003e:20 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:    java.lang.Class.version()   java.lang.Class.getVersion()   java.lang.Class.version",
          "isError": true
        },
        {
          "failureName": "com.coxautodev.graphql.tools.FieldResolverError",
          "failureDetail": "No method or field found as defined in schema \u003cunknown\u003e:19 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:    java.lang.Class.id()   java.lang.Class.getId()   java.lang.Class.id",
          "isError": true
        },
        {
          "failureName": "Expected exception of type \u0027com.coxautodev.graphql.tools.ResolverError\u0027, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at org.spockframework.lang.SpecInternals.checkExceptionThrown(SpecInternals.java",
          "failureDetail": "Expected exception of type \u0027com.coxautodev.graphql.tools.ResolverError\u0027, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 2
    },
    {
      "className": "com.coxautodev.graphql.tools.MultiResolverSpec",
      "failingMethods": [],
      "erroringMethods": [
        "com.coxautodev.graphql.tools.MultiResolverSpec"
      ],
      "failures": [
        {
          "failureName": "com.coxautodev.graphql.tools.FieldResolverError",
          "failureDetail": "No method found as defined in schema \u003cunknown\u003e:7 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:    java.lang.Class.friends(~friendName)   java.lang.Class.getFriends(~friendName)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.coxautodev.graphql.tools.SuperclassResolverSpec",
      "failingMethods": [
        "methods from generic resolvers are resolved"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
          "failureDetail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.coxautodev.graphql.tools.EnumListParameterSpec",
      "failingMethods": [],
      "erroringMethods": [
        "com.coxautodev.graphql.tools.EnumListParameterSpec"
      ],
      "failures": [
        {
          "failureName": "com.coxautodev.graphql.tools.FieldResolverError",
          "failureDetail": "No method or field found as defined in schema \u003cunknown\u003e:11 with any of the following signatures (with or without one of [interface graphql.schema.DataFetchingEnvironment] as the last argument), in priority order:    java.lang.Class.code()   java.lang.Class.getCode()   java.lang.Class.code",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.coxautodev.graphql.tools.GenericResolverSpec",
      "failingMethods": [
        "methods from generic resolvers are resolved"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027  at spock.lang.Specification.noExceptionThrown(Specification.java",
          "failureDetail": "Expected no exception to be thrown, but got \u0027com.coxautodev.graphql.tools.FieldResolverError\u0027",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ],
  "failingModule": "/root/workspace/graphql-java/graphql-java-tools/432085275",
  "bugCommit": "https://github.com/graphql-java/graphql-java-tools/compare/887a2598191d^...91b7299b2c43"
}