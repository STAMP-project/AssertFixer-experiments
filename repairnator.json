{
  "bugType": "only_fail",
  "hostname": "cyclone1",
  "repo": "Flipkart/foxtrot",
  "metrics": {
    "BugCommitUrl": "http://github.com/Flipkart/foxtrot/commit/cda45cf8a10ed59a63d7e683b6d5df76fc8a96cf",
    "NbFailingTests": 9,
    "NbErroringTests": 82,
    "NbSkippingTests": 4,
    "NbRunningTests": 207,
    "ReproductionDate": "Sep 26, 2018 1:12:40 PM",
    "BuggyBuildId": 433435626,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/Flipkart/foxtrot/builds/433435626",
    "BuggyBuildDate": "Sep 26, 2018 1:07:50 PM",
    "BugCommit": "cda45cf8a10ed59a63d7e683b6d5df76fc8a96cf",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 308,
    "NbFileApp": 196,
    "NbFileTests": 41,
    "NbCPU": 8,
    "FreeMemory": 253906752,
    "TotalMemory": 403177472,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 120094736,
      "ComputeClasspath": 103836600,
      "ComputeTestDir": 96943336,
      "BuildProject": 106549744,
      "InitRepoToPush": 107906352,
      "ComputeSourceDir": 251828632,
      "ComputeModules": 247347496,
      "CloneRepository": 119387456,
      "CheckoutPatchedBuild": 253906752,
      "TestProject": 96776792,
      "AssertFixer": 252103784,
      "GatherTestInformation": 136572832,
      "CommitPatch": 253906752
    },
    "NbSucceedingTests": 116,
    "FailureNames": [
      "org.mockito.exceptions.misusing.UnfinishedStubbingException",
      "com.flipkart.foxtrot.core.exception.StoreExecutionException",
      "java.lang.AssertionError",
      "java.lang.NullPointerException",
      "org.mockito.exceptions.misusing.InvalidUseOfMatchersException"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 4,
      "ComputeClasspath": 9,
      "ComputeTestDir": 0,
      "BuildProject": 481,
      "InitRepoToPush": 6,
      "ComputeSourceDir": 0,
      "ComputeModules": 0,
      "CloneRepository": 6,
      "CheckoutPatchedBuild": 0,
      "TestProject": 981,
      "AssertFixer": 5,
      "GatherTestInformation": 0,
      "CommitPatch": 5
    }
  },
  "failing-test-cases": [
    {
      "className": "com.flipkart.foxtrot.core.querystore.actions.StatsActionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testStatsActionWithNesting",
        "testStatsActionWithoutNesting",
        "testStatsActionWithMultiLevelNesting"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "com.flipkart.foxtrot.core.querystore.actions.DistinctActionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testDistinctMultipleNestingAscAsc",
        "testDistinctMultipleNestingAscDesc",
        "testDistinctAsc",
        "testDistinctDesc"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "com.flipkart.foxtrot.core.querystore.actions.GroupActionEstimationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testEstimationTemporalFilterHighCardinality",
        "testEstimationCardinalFilterHighCardinality",
        "testEstimationNoFilter",
        "testEstimationLTFilterHighCardinality"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "com.flipkart.foxtrot.core.querystore.impl.DistributedTableMetadataManagerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetFieldMappings"
      ],
      "failures": [
        {
          "failureName": "com.flipkart.foxtrot.core.exception.StoreExecutionException",
          "failureDetail": "java.util.concurrent.TimeoutException: Timeout waiting for task.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.flipkart.foxtrot.core.querystore.actions.GroupActionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGroupActionMultipleFieldsWithFilter",
        "testGroupActionSingleFieldWithFilter",
        "testGroupActionSingleFieldHavingSpecialCharactersWithFilter",
        "testGroupActionSingleFieldNoFilter",
        "testGroupActionTwoFieldsWithFilter",
        "testGroupActionTwoFieldsNoFilter"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "com.flipkart.foxtrot.core.querystore.actions.HistogramActionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testHistogramActionIntervalMinuteNoFilter",
        "testHistogramActionIntervalMinuteWithFilter",
        "testHistogramActionIntervalHourWithFilter",
        "testHistogramActionIntervalDayWithFilter",
        "testHistogramActionIntervalHourNoFilter",
        "testHistogramActionIntervalDayNoFilter"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "com.flipkart.foxtrot.core.exception.StoreExecutionException",
          "failureDetail": "java.util.concurrent.TimeoutException: Timeout waiting for task.",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "com.flipkart.foxtrot.core.querystore.actions.CountActionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCount",
        "testCountDistinct",
        "testCountWithFilter",
        "testCountDistinctWithFilter",
        "testCountDistinctWithFilterOnSameField"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "com.flipkart.foxtrot.core.datastore.impl.hbase.HBaseDataStoreTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSaveSingleNullDocument"
      ],
      "failures": [
        {
          "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
          "failureDetail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTableInvalidTtl(FoxtrotTableManagerTest.java:88)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.flipkart.foxtrot.core.querystore.actions.StatsTrendActionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testStatsTrendActionWithoutNesting",
        "testStatsTrendActionWithNoFilter",
        "testStatsTrendActionWithNesting",
        "testStatsTrendActionWithMultiLevelNesting"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "com.flipkart.foxtrot.core.exception.StoreExecutionException",
          "failureDetail": "java.util.concurrent.TimeoutException: Timeout waiting for task.",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "com.flipkart.foxtrot.core.querystore.actions.GroupActionCardinalityTest",
      "failingMethods": [],
      "erroringMethods": [
        "testEstimationWithMultipleNesting",
        "testEstimationBooleanCardinality"
      ],
      "failures": [
        {
          "failureName": "com.flipkart.foxtrot.core.exception.StoreExecutionException",
          "failureDetail": "java.util.concurrent.TimeoutException: Timeout waiting for task.",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "com.flipkart.foxtrot.core.querystore.actions.TrendActionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTrendActionWithFieldWithFilter",
        "testTrendActionFieldWithSpecialCharacters",
        "testTrendActionWithFieldWithFilterWithValues",
        "testTrendActionWithFieldWithValues",
        "testTrendActionFieldAll",
        "testTrendActionWithFieldWithFilterWithInterval",
        "testTrendActionWithField",
        "testTrendActionWithFieldZeroFrom",
        "testTrendActionWithFieldZeroTo"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 9
    },
    {
      "className": "com.flipkart.foxtrot.core.querystore.actions.FilterActionTest",
      "failingMethods": [
        "testQueryNotInFilter",
        "testQueryContainsFilter",
        "testQueryNoFilterDescending",
        "testMissingIndicesQuery",
        "testQueryPagination",
        "testQueryCaching",
        "testQueryAnyFilter",
        "testQueryGreaterThanFilter",
        "testQueryEqualsFilter"
      ],
      "erroringMethods": [
        "testQueryEmptyResult",
        "testQueryNoFilterDescending",
        "testMissingIndicesQuery",
        "testQueryNotEqualsFilter",
        "testQueryBetweenFilter",
        "testQueryNoFilterAscending",
        "testQueryNoFilterWithLimit",
        "testQueryAnyFilter",
        "testQueryNullFilters",
        "testQueryEqualsFilter",
        "testQueryMultipleFiltersAndCombiner",
        "testQueryNotInFilter",
        "testQueryContainsFilter",
        "testQueryPagination",
        "testQueryTotalHitsWithLimit",
        "testQueryCaching",
        "testQueryGreaterEqualFilter",
        "testQueryGreaterThanFilter",
        "testQueryNotInFilterMissingField",
        "testQueryMultipleFiltersEmptyResult",
        "testQueryLessEqualFilter",
        "testQueryLessThanFilter"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "3",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "4",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "1",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "2",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "1",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "1",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "2",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "1",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "4",
          "isError": false
        }
      ],
      "nbFailures": 9,
      "nbErrors": 22
    },
    {
      "className": "com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest",
      "failingMethods": [],
      "erroringMethods": [
        "saveTableDataStoreFailed",
        "updateTableEmptyName",
        "saveTableQueryStoreFailed",
        "saveTable",
        "saveNullTable",
        "saveTableEmptyName",
        "saveTableNullName",
        "updateTable",
        "saveTableInvalidTtl",
        "updateNonExistingTable",
        "saveExistingTable",
        "updateTableInvalidTtl",
        "saveTableDataStoreNoTableFound",
        "updateNullTable",
        "updateTableNullName"
      ],
      "failures": [
        {
          "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
          "failureDetail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateNullTable(FoxtrotTableManagerTest.java:210)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
          "failureDetail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateNullTable(FoxtrotTableManagerTest.java:210)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
          "failureDetail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateTableEmptyName(FoxtrotTableManagerTest.java:241)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
          "failureDetail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateTableEmptyName(FoxtrotTableManagerTest.java:241)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
          "failureDetail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTableQueryStoreFailed(FoxtrotTableManagerTest.java:132)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
          "failureDetail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTableQueryStoreFailed(FoxtrotTableManagerTest.java:132)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
          "failureDetail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateTableInvalidTtl(FoxtrotTableManagerTest.java:258)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
          "failureDetail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateTableInvalidTtl(FoxtrotTableManagerTest.java:258)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
          "failureDetail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTableDataStoreNoTableFound(FoxtrotTableManagerTest.java:165)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
          "failureDetail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTableDataStoreNoTableFound(FoxtrotTableManagerTest.java:165)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
          "failureDetail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTable(FoxtrotTableManagerTest.java:104)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
          "failureDetail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTable(FoxtrotTableManagerTest.java:104)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
          "failureDetail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateTableNullName(FoxtrotTableManagerTest.java:224)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.misusing.UnfinishedStubbingException",
          "failureDetail": " Unfinished stubbing detected here: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.updateTableNullName(FoxtrotTableManagerTest.java:224)  E.g. thenReturn() may be missing. Examples of correct stubbing:     when(mock.isOk()).thenReturn(true);     when(mock.isOk()).thenThrow(exception);     doThrow(exception).when(mock).someVoidMethod(); Hints:  1. missing thenReturn()  2. you are trying to stub a final method, you naughty developer!  3: you are stubbing the behaviour of another mock inside before \u0027thenReturn\u0027 instruction if completed ",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.misusing.InvalidUseOfMatchersException",
          "failureDetail": " Invalid use of argument matchers! 2 matchers expected, 1 recorded: -\u003e at com.flipkart.foxtrot.core.table.impl.FoxtrotTableManagerTest.saveTableInvalidTtl(FoxtrotTableManagerTest.java:88)  This exception may occur if matchers are combined with raw values:     //incorrect:     someMethod(anyObject(), \"raw String\"); When using matchers, all arguments have to be provided by matchers. For example:     //correct:     someMethod(anyObject(), eq(\"String by matcher\"));  For more info see javadoc for Matchers class. ",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 15
    }
  ],
  "failingModule": "/root/workspace/Flipkart/foxtrot/433435626/foxtrot-core"
}