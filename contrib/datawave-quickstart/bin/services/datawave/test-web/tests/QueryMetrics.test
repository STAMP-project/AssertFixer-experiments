
################################################################
# Test /Query/QueryMetricsQuery/createAndNext endpoint
#
# This test assumes that user name, 'user', has already executed
# a LUCENE-syntax, unfielded EventQuery having 'query=anarchy'
#
# Query w/JEXL syntax

setCurlData query=$( urlencode "USER == 'user' && QUERY == 'anarchy'" ) \
        queryName=QueryMetricsTest001 \
        begin=19701231 \
        end=20500101 \
        pagesize=1 \
        auths=PUBLIC \
        columnVisibility=PRIVATE \
        query.syntax=JEXL

TEST_ID="QueryMetricsQueryCreateAndNext"
TEST_DESCRIPTION="Creates a JEXL-syntax QueryMetrics query and gets the first page of results with a single REST call"
TEST_URL_OPTS="--header 'Content-Type: application/x-www-form-urlencoded' ${DW_CURL_DATA} -X POST ${URI_ROOT}/Query/QueryMetricsQuery/createAndNext"
EXPECTED_RESPONSE_TYPE="application/xml"
EXPECTED_RESPONSE_CODE=200
EXPECTED_RESPONSE_BODY_ASSERTION=false

# NOTE:
#
# At this point, because our DataWave instance *may* be running for the first time (and thus may never have
# had queries executed against it), there's a good chance that the in-memory cache for the query metrics metadata
# table (QueryMetrics_m) is empty and needs to be refreshed. If so, the cache won't reflect the table's
# current state, and it will not be possible to query the metrics shard table (QueryMetrics_e)
#
# Ordinarily, rather than perform a Wildfly restart, you'd just wait for the cache's configured TTL to expire, or
# you'd force an *asynchronous* reload of the cache on-demand with
#
#         'GET */DataWave/Common/AccumuloTableCache/reload/{tableName}'
#
# Here, we'll just bounce the web server, as it's the easiest (synchronous) way to ensure that the cache is fresh.
#
echo
info "Bouncing DataWave Web to ensure metadata cache is primed and ready for ${TEST_ID}"
echo

datawaveWebStop
datawaveWebStart

runTest

################################################################
# Test /Query/${DW_QUERY_ID}/close endpoint

setQueryIdFromResponseXml "${ACTUAL_RESPONSE_BODY}"

[ -z "${DW_QUERY_ID}" ] && warn "Failed to parse a query id from \$ACTUAL_RESPONSE_BODY"

TEST_ID="QueryMetricsQueryClose"
TEST_DESCRIPTION="Closes the QueryMetrics query as necessary"
TEST_URL_OPTS="-X PUT ${URI_ROOT}/Query/${DW_QUERY_ID}/close"
EXPECTED_RESPONSE_TYPE="application/xml"
EXPECTED_RESPONSE_CODE=200
EXPECTED_RESPONSE_BODY_ASSERTION=false

runTest

################################################################
# Test /Query/QueryMetricsQuery/createAndNext endpoint and
# generate a 204 error (ie, no content found that matches query
# criteria)
#
# Query w/JEXL syntax

setCurlData query=$( urlencode "USER == 'nobody' && QUERY == 'doesNotMatter'" ) \
        queryName=QueryMetricsTest204Error \
        begin=19701231 \
        end=20500101 \
        pagesize=1 \
        auths=PUBLIC \
        columnVisibility=PRIVATE \
        query.syntax=JEXL

TEST_ID="QueryMetricsQueryZeroResults204"
TEST_DESCRIPTION="Creates a JEXL-syntax QueryMetrics query that has zero results (ie, 204 response code)"
TEST_URL_OPTS="--header 'Content-Type: application/x-www-form-urlencoded' ${DW_CURL_DATA} -X POST ${URI_ROOT}/Query/QueryMetricsQuery/createAndNext"
EXPECTED_RESPONSE_TYPE=""
EXPECTED_RESPONSE_CODE=204
EXPECTED_RESPONSE_BODY_ASSERTION=false

# This last test is executed by run.sh, as usual