<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="36" tokens="186">
      <file line="101"
            path="/root/workspace/KostyaSha/github-integration-plugin/388416402/github-pullrequest-plugin/src/main/java/com/github/kostyasha/github/integration/generic/repoprovider/GitHubPluginRepoProvider.java"/>
      <file line="100"
            path="/root/workspace/KostyaSha/github-integration-plugin/388416402/github-pullrequest-plugin/src/main/java/com/github/kostyasha/github/integration/multibranch/repoprovider/GitHubPluginRepoProvider2.java"/>
      <codefragment><![CDATA[        Optional<GitHub> client = from(GitHubPlugin.configuration().findGithubConfig(withHost(repoFullName.getHost())))
                .firstMatch(withPermission(repoFullName, getRepoPermission()));
        if (client.isPresent()) {
            gitHub = client.get();
            return gitHub;
        }

        throw new GHPluginConfigException("GitHubPluginRepoProvider can't find appropriate client for github repo " +
                "<%s>. Probably you didn't configure 'GitHub Plugin' global 'GitHub Server Settings' or there is no tokens" +
                "with %s access to this repository.",
                repoFullName.toString(), getRepoPermission());
    }

    private NullSafePredicate<GitHub> withPermission(final GitHubRepositoryName name, GHPermission permission) {
        return new NullSafePredicate<GitHub>() {
            @Override
            protected boolean applyNullSafe(@Nonnull GitHub gh) {
                try {
                    final GHRepository repo = gh.getRepository(name.getUserName() + "/" + name.getRepositoryName());
                    if (permission == GHPermission.ADMIN) {
                        return repo.hasAdminAccess();
                    } else if (permission == GHPermission.PUSH) {
                        return repo.hasPushAccess();
                    } else {
                        return repo.hasPullAccess();
                    }
                } catch (IOException e) {
                    return false;
                }
            }
        };
    }

    @CheckForNull
    @Override
    public synchronized GHRepository getGHRepository(GitHubTrigger trigger) {]]></codefragment>
   </duplication>
   <duplication lines="22" tokens="127">
      <file line="37"
            path="/root/workspace/KostyaSha/github-integration-plugin/388416402/github-pullrequest-plugin/src/main/java/org/jenkinsci/plugins/github/pullrequest/events/impl/GitHubPRLabelExistsEvent.java"/>
      <file line="37"
            path="/root/workspace/KostyaSha/github-integration-plugin/388416402/github-pullrequest-plugin/src/main/java/org/jenkinsci/plugins/github/pullrequest/events/impl/GitHubPRLabelNotExistsEvent.java"/>
      <codefragment><![CDATA[    public GitHubPRLabelExistsEvent(GitHubPRLabel label, boolean skip) {
        this.label = label;
        this.skip = skip;
    }

    @Override
    public GitHubPRCause check(@Nonnull GitHubPRDecisionContext prDecisionContext) throws IOException {
        TaskListener listener = prDecisionContext.getListener();
        GHPullRequest remotePR = prDecisionContext.getRemotePR();

        if (remotePR.getState().equals(GHIssueState.CLOSED)) {
            return null; // already closed, skip check?
        }

        GitHubPRCause cause = null;

        Collection<GHLabel> remoteLabels = remotePR.getRepository().getIssue(remotePR.getNumber()).getLabels();
        Set<String> existingLabels = new HashSet<>();

        for (GHLabel ghLabel : remoteLabels) {
            existingLabels.add(ghLabel.getName());
        }]]></codefragment>
   </duplication>
   <duplication lines="39" tokens="120">
      <file line="36"
            path="/root/workspace/KostyaSha/github-integration-plugin/388416402/github-pullrequest-plugin/src/main/java/com/github/kostyasha/github/integration/branch/events/impl/GitHubBranchRestrictionFilter.java"/>
      <file line="35"
            path="/root/workspace/KostyaSha/github-integration-plugin/388416402/github-pullrequest-plugin/src/main/java/com/github/kostyasha/github/integration/tag/events/impl/GitHubTagRestrictionFilter.java"/>
      <codefragment><![CDATA[    public GitHubBranchRestrictionFilter() {
    }

    public String getMatchCriteriaStr() {
        return String.join(LINE_SEPARATOR, matchCriteria);
    }

    @DataBoundSetter
    public void setMatchCriteriaStr(String matchCriteria) {
        this.matchCriteria = Stream.of(matchCriteria
                .split(LINE_SEPARATOR))
                .collect(Collectors.toSet());
    }

    public boolean isExclude() {
        return exclude;
    }

    @DataBoundSetter
    public void setExclude(boolean exclude) {
        this.exclude = exclude;
    }

    public boolean isMatchAsPattern() {
        return matchAsPattern;
    }

    @DataBoundSetter
    public void setMatchAsPattern(boolean matchAsPattern) {
        this.matchAsPattern = matchAsPattern;
    }

    // visible for testing
    public Set<String> getMatchCriteria() {
        return matchCriteria;
    }

    @Override
    public GitHubBranchCause check(@Nonnull GitHubBranchDecisionContext context) throws IOException {]]></codefragment>
   </duplication>
   <duplication lines="28" tokens="112">
      <file line="30"
            path="/root/workspace/KostyaSha/github-integration-plugin/388416402/github-pullrequest-plugin/src/main/java/com/github/kostyasha/github/integration/branch/dsl/context/GitHubBranchTriggerDslContext.java"/>
      <file line="26"
            path="/root/workspace/KostyaSha/github-integration-plugin/388416402/github-pullrequest-plugin/src/main/java/org/jenkinsci/plugins/github/pullrequest/dsl/context/GitHubPRTriggerDslContext.java"/>
      <codefragment><![CDATA[    private List<GitHubBranchEvent> events = new ArrayList<>();
    private List<GitHubRepoProvider> repoProviders = new ArrayList<>(asList(new GitHubPluginRepoProvider()));


    public void cron(String cron) {
        this.cron = cron;
    }

    public void mode(Runnable closure) {
        GitHubPRTriggerModeDslContext modeContext = new GitHubPRTriggerModeDslContext();
        ContextExtensionPoint.executeInContext(closure, modeContext);

        mode = modeContext.mode();
    }

    public void setPreStatus() {
        setPreStatus = true;
    }

    public void cancelQueued() {
        cancelQueued = true;
    }

    public void abortRunning() {
        abortRunning = true;
    }

    public void events(Runnable closure) {]]></codefragment>
   </duplication>
   <duplication lines="16" tokens="106">
      <file line="115"
            path="/root/workspace/KostyaSha/github-integration-plugin/388416402/github-pullrequest-plugin/src/main/java/com/github/kostyasha/github/integration/branch/trigger/JobRunnerForBranchCause.java"/>
      <file line="251"
            path="/root/workspace/KostyaSha/github-integration-plugin/388416402/github-pullrequest-plugin/src/main/java/org/jenkinsci/plugins/github/pullrequest/trigger/JobRunnerForCause.java"/>
      <codefragment><![CDATA[    public QueueTaskFuture<?> startJob(GitHubBranchCause cause, Cause additionalCause) {
        ParametersAction parametersAction;
        List<ParameterValue> parameters = getDefaultParametersValues(job);
        cause.fillParameters(parameters);

        try {
            Constructor<ParametersAction> constructor = ParametersAction.class.getConstructor(List.class, Collection.class);
            Set<String> names = new HashSet<>();
            for (ParameterValue param : parameters) {
                names.add(param.getName());
            }
            parametersAction = constructor.newInstance(parameters, names);
        } catch (NoSuchMethodException | IllegalAccessException | InstantiationException
                | InvocationTargetException ex) {
            parametersAction = new ParametersAction(parameters);
        }]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="104">
      <file line="161"
            path="/root/workspace/KostyaSha/github-integration-plugin/388416402/github-pullrequest-plugin/src/main/java/com/github/kostyasha/github/integration/branch/GitHubBranchRepository.java"/>
      <file line="163"
            path="/root/workspace/KostyaSha/github-integration-plugin/388416402/github-pullrequest-plugin/src/main/java/org/jenkinsci/plugins/github/pullrequest/GitHubPRRepository.java"/>
      <codefragment><![CDATA[                Map<String, List<Run<?, ?>>> builds = getAllBranchBuilds();
                for (List<Run<?, ?>> buildList : builds.values()) {
                    if (!buildList.isEmpty() && Result.FAILURE.equals(buildList.get(0).getResult())) {
                        Run<?, ?> lastBuild = buildList.get(0);
                        rebuild(lastBuild);
                    }
                }
                result = FormValidation.ok("Rebuild scheduled");
            } else {
                result = FormValidation.error("Forbidden");
            }
        } catch (Exception e) {
            LOG.error("Can't start rebuild", e.getMessage());]]></codefragment>
   </duplication>
</pmd-cpd>