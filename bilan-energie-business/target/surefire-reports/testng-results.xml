<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" total="35" passed="34">
  <reporter-output>
  </reporter-output>
  <suite name="Command line suite" duration-ms="8825" started-at="2018-06-04T05:32:43Z" finished-at="2018-06-04T05:32:52Z">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="8825" started-at="2018-06-04T05:32:43Z" finished-at="2018-06-04T05:32:52Z">
      <class name="test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="2" started-at="2018-06-04T07:32:52Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistant4()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testCreateWithNumeroExistant4()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testCreateWithNumeroExistant4" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithNumeroExistant4 -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistant4()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistantWithoutOverlap4()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistantWithoutOverlap4()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testCreateWithNumeroExistantWithoutOverlap4()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testCreateWithNumeroExistantWithoutOverlap4" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithNumeroExistantWithoutOverlap4 -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistant5()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistant5()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testCreateWithNumeroExistant5()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testCreateWithNumeroExistant5" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithNumeroExistant5 -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistantWithoutOverlap3()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testInDateRange()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="testCreateWithNumeroExistantWithoutOverlap3()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testCreateWithNumeroExistantWithoutOverlap3" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithNumeroExistantWithoutOverlap3 -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistantWithoutOverlap3()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testNotInDateRange()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="testInDateRange()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testInDateRange" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInDateRange -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testInDateRange()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testNotInDateRange()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistant6()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testCreateWithNumeroExistant6()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testCreateWithNumeroExistant6" duration-ms="1" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithNumeroExistant6 -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testNotInDateRange()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testNotInDateRange" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotInDateRange -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="testCreateWithNumeroExistantWithoutOverlap2()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testCreateWithNumeroExistantWithoutOverlap2" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithNumeroExistantWithoutOverlap2 -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistantWithoutOverlap2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistant6()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistantWithoutOverlap2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="testCreateWithNumeroExistant2()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testCreateWithNumeroExistant2" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithNumeroExistant2 -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistant2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testInDateRange3()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistant2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testInDateRange3()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testInDateRange3()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testInDateRange3" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInDateRange3 -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testInDateRange2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testInDateRange2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testInDateRange2()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testInDateRange2" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInDateRange2 -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testNotInDateRange1()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testNotInDateRange1()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testNotInDateRange1" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotInDateRange1 -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testNotInDateRange1()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testNotInDateRange3()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistantWithoutOverlap()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testNotInDateRange3()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testNotInDateRange3" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotInDateRange3 -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testNotInDateRange3()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testCreateWithNumeroExistantWithoutOverlap()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testCreateWithNumeroExistantWithoutOverlap" duration-ms="1" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithNumeroExistantWithoutOverlap -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testNotInDateRange2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testNotInDateRange2()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="testNotInDateRange2" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotInDateRange2 -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testCreateWithNumeroExistantWithoutOverlap()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest@307e4c44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest.testNotInDateRange2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- test.nc.noumea.mairie.bilan.energie.business.entities.PeriodiqueTest -->
      <class name="test.nc.noumea.mairie.bilan.energie.business.entities.GetterSetterTest">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.GetterSetterTest@3e546734]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="3" started-at="2018-06-04T07:32:51Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.GetterSetterTest@3e546734]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.GetterSetterTest@3e546734]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.GetterSetterTest.testAllGetterSetter() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testAllGetterSetter()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.GetterSetterTest@3e546734]" name="testAllGetterSetter" duration-ms="20" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAllGetterSetter -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.GetterSetterTest@3e546734]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.entities.GetterSetterTest.testAllGetterSetter() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.entities.GetterSetterTest@3e546734]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- test.nc.noumea.mairie.bilan.energie.business.entities.GetterSetterTest -->
      <class name="test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="14" started-at="2018-06-04T07:32:43Z" finished-at="2018-06-04T07:32:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="5485" started-at="2018-06-04T07:32:43Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-04T07:32:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:48Z" finished-at="2018-06-04T07:32:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest.testCreate() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="init" is-config="true" duration-ms="63" started-at="2018-06-04T07:32:48Z" finished-at="2018-06-04T07:32:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testCreate()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="testCreate" duration-ms="742" started-at="2018-06-04T07:32:48Z" finished-at="2018-06-04T07:32:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="destroy" is-config="true" duration-ms="4" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest.testCreate() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest.testPrivateGetMethodGetId() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testPrivateGetMethodGetId()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="testPrivateGetMethodGetId" duration-ms="1" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrivateGetMethodGetId -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="destroy" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest.testPrivateGetMethodGetId() throws java.lang.Throwable]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest.testRead() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="init" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testRead()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="testRead" duration-ms="58" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRead -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="destroy" is-config="true" duration-ms="3" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest.testRead() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest.testDelete() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testDelete()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="testDelete" duration-ms="17" started-at="2018-06-04T07:32:52Z" depends-on-methods="test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest.testRead" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelete -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="destroy" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest.testDelete() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest.testUpdate() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testUpdate()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="testUpdate" duration-ms="18" started-at="2018-06-04T07:32:52Z" depends-on-methods="test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest.testRead" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdate -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="destroy" is-config="true" duration-ms="2" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest.testUpdate() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest@64b018f3]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- test.nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusinessTest -->
      <class name="test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="3" started-at="2018-06-04T07:32:51Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="init" is-config="true" duration-ms="14" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest.testCreate() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testCreate()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="testCreate" duration-ms="4" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="destroy" is-config="true" duration-ms="9" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest.testCreate() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest.testCreateWithBadDates() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="init" is-config="true" duration-ms="13" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testCreateWithBadDates()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="testCreateWithBadDates" duration-ms="2" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <exception class="nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException">
            <message>
              <![CDATA[La date de fin de la police ne doit pas être antérieure à la date de début.]]>
            </message>
            <full-stacktrace>
              <![CDATA[nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException: La date de fin de la police ne doit pas être antérieure à la date de début.
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness.validateDates(PoliceBusiness.java:168)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness.validate(PoliceBusiness.java:151)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness.validate(PoliceBusiness.java:29)
	at nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusiness.create(AbstractCrudBusiness.java:84)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness.create(PoliceBusiness.java:196)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness.create(PoliceBusiness.java:29)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness$$FastClassBySpringCGLIB$$ced11576.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:98)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:262)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness$$EnhancerBySpringCGLIB$$5c689f5f.create(<generated>)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness$$FastClassBySpringCGLIB$$ced11576.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness$$EnhancerBySpringCGLIB$$b8fe7217.create(<generated>)
	at test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest.createPolice(PoliceServiceTest.java:75)
	at test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest.testCreateWithBadDates(PoliceServiceTest.java:92)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:200)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:172)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:212)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:689)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithBadDates -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="destroy" is-config="true" duration-ms="3" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest.testCreateWithBadDates() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest.testCreateWithNumeroExistant2() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="init" is-config="true" duration-ms="11" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testCreateWithNumeroExistant2()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="testCreateWithNumeroExistant2" duration-ms="8" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <exception class="nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException">
            <message>
              <![CDATA[Il existe déjà une police avec le numéro 'test']]>
            </message>
            <full-stacktrace>
              <![CDATA[nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException: Il existe déjà une police avec le numéro 'test'
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness.validateNumeroDoublon(PoliceBusiness.java:160)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness.validate(PoliceBusiness.java:150)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness.validate(PoliceBusiness.java:29)
	at nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusiness.create(AbstractCrudBusiness.java:84)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness.create(PoliceBusiness.java:196)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness.create(PoliceBusiness.java:29)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness$$FastClassBySpringCGLIB$$ced11576.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:98)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:262)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness$$EnhancerBySpringCGLIB$$5c689f5f.create(<generated>)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness$$FastClassBySpringCGLIB$$ced11576.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.PoliceBusiness$$EnhancerBySpringCGLIB$$b8fe7217.create(<generated>)
	at test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest.createPolice(PoliceServiceTest.java:75)
	at test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest.testCreateWithNumeroExistant2(PoliceServiceTest.java:87)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:200)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:172)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:212)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:689)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithNumeroExistant2 -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="destroy" is-config="true" duration-ms="8" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest@1c240cf2]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:52Z" finished-at="2018-06-04T07:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest.testCreateWithNumeroExistant2() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- test.nc.noumea.mairie.bilan.energie.contract.service.PoliceServiceTest -->
      <class name="test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="5" started-at="2018-06-04T07:32:49Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-04T07:32:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.testCreateWithBadDates() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="init" is-config="true" duration-ms="44" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testCreateWithBadDates()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="testCreateWithBadDates" duration-ms="118" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <exception class="nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException">
            <message>
              <![CDATA[La date de fin du compteur ne doit pas être antérieure à la date de début.]]>
            </message>
            <full-stacktrace>
              <![CDATA[nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException: La date de fin du compteur ne doit pas être antérieure à la date de début.
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness.validateDates(CompteurBusiness.java:106)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness.validate(CompteurBusiness.java:84)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness.validate(CompteurBusiness.java:27)
	at nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusiness.create(AbstractCrudBusiness.java:84)
	at nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusiness$$FastClassBySpringCGLIB$$fbca72d8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:98)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:262)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness$$EnhancerBySpringCGLIB$$39670be.create(<generated>)
	at nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusiness$$FastClassBySpringCGLIB$$fbca72d8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness$$EnhancerBySpringCGLIB$$a2d9340.create(<generated>)
	at test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.createCompteur(CompteurServiceTest.java:97)
	at test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.testCreateWithBadDates(CompteurServiceTest.java:139)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:200)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:172)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:212)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:689)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithBadDates -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="destroy" is-config="true" duration-ms="61" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.testCreateWithBadDates() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.testCreateWithDateFinNull() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="init" is-config="true" duration-ms="39" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testCreateWithDateFinNull()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="testCreateWithDateFinNull" duration-ms="21" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <exception class="nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException">
            <message>
              <![CDATA[La date de fin du compteur doit être renseignée car la date de fin de la police est renseignée.]]>
            </message>
            <full-stacktrace>
              <![CDATA[nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException: La date de fin du compteur doit être renseignée car la date de fin de la police est renseignée.
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness.validateDatePolice(CompteurBusiness.java:97)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness.validate(CompteurBusiness.java:85)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness.validate(CompteurBusiness.java:27)
	at nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusiness.create(AbstractCrudBusiness.java:84)
	at nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusiness$$FastClassBySpringCGLIB$$fbca72d8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:98)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:262)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness$$EnhancerBySpringCGLIB$$39670be.create(<generated>)
	at nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusiness$$FastClassBySpringCGLIB$$fbca72d8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness$$EnhancerBySpringCGLIB$$a2d9340.create(<generated>)
	at test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.createCompteur(CompteurServiceTest.java:97)
	at test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.testCreateWithDateFinNull(CompteurServiceTest.java:134)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:200)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:172)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:212)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:689)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithDateFinNull -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="destroy" is-config="true" duration-ms="23" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.testCreateWithDateFinNull() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.testCreateWithNumeroExistantDansAutrePolice() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="init" is-config="true" duration-ms="32" started-at="2018-06-04T07:32:49Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testCreateWithNumeroExistantDansAutrePolice()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="testCreateWithNumeroExistantDansAutrePolice" duration-ms="56" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithNumeroExistantDansAutrePolice -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="destroy" is-config="true" duration-ms="60" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.testCreateWithNumeroExistantDansAutrePolice() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="init" is-config="true" duration-ms="25" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.testCreateWithNumeroExistantDansMemePolice() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testCreateWithNumeroExistantDansMemePolice()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="testCreateWithNumeroExistantDansMemePolice" duration-ms="29" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <exception class="nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException">
            <message>
              <![CDATA[Il existe déjà un compteur ce numéro pour cette police]]>
            </message>
            <full-stacktrace>
              <![CDATA[nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException: Il existe déjà un compteur ce numéro pour cette police
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness.validateNumeroDoublon(CompteurBusiness.java:115)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness.validate(CompteurBusiness.java:83)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness.validate(CompteurBusiness.java:27)
	at nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusiness.create(AbstractCrudBusiness.java:84)
	at nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusiness$$FastClassBySpringCGLIB$$fbca72d8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:98)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:262)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness$$EnhancerBySpringCGLIB$$39670be.create(<generated>)
	at nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusiness$$FastClassBySpringCGLIB$$fbca72d8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness$$EnhancerBySpringCGLIB$$a2d9340.create(<generated>)
	at test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.createCompteur(CompteurServiceTest.java:97)
	at test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.testCreateWithNumeroExistantDansMemePolice(CompteurServiceTest.java:122)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:200)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:172)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:212)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:689)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithNumeroExistantDansMemePolice -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="destroy" is-config="true" duration-ms="28" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.testCreateWithNumeroExistantDansMemePolice() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.testCreateWithPeriodeHorsPolicePeriode() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="init" is-config="true" duration-ms="22" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testCreateWithPeriodeHorsPolicePeriode()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="testCreateWithPeriodeHorsPolicePeriode" duration-ms="12" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <exception class="nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException">
            <message>
              <![CDATA[La période du compteur est en dehors de la période de la police.]]>
            </message>
            <full-stacktrace>
              <![CDATA[nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException: La période du compteur est en dehors de la période de la police.
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness.validateDatePolice(CompteurBusiness.java:100)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness.validate(CompteurBusiness.java:85)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness.validate(CompteurBusiness.java:27)
	at nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusiness.create(AbstractCrudBusiness.java:84)
	at nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusiness$$FastClassBySpringCGLIB$$fbca72d8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:98)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:262)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness$$EnhancerBySpringCGLIB$$39670be.create(<generated>)
	at nc.noumea.mairie.bilan.energie.business.dao.AbstractCrudBusiness$$FastClassBySpringCGLIB$$fbca72d8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.CompteurBusiness$$EnhancerBySpringCGLIB$$a2d9340.create(<generated>)
	at test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.createCompteur(CompteurServiceTest.java:97)
	at test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.testCreateWithPeriodeHorsPolicePeriode(CompteurServiceTest.java:127)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:200)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:172)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:212)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:689)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- nc.noumea.mairie.bilan.energie.contract.exceptions.BusinessValidationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateWithPeriodeHorsPolicePeriode -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="destroy" is-config="true" duration-ms="13" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest.testCreateWithPeriodeHorsPolicePeriode() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest@5809fa26]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- test.nc.noumea.mairie.bilan.energie.contract.service.CompteurServiceTest -->
      <class name="test.nc.noumea.mairie.bilan.energie.business.dao.GetAllTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.GetAllTest@e9474f]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.GetAllTest@e9474f]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="5" started-at="2018-06-04T07:32:50Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.GetAllTest@e9474f]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.dao.GetAllTest.testReferentiel() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testReferentiel()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.GetAllTest@e9474f]" name="testReferentiel" duration-ms="675" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReferentiel -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.GetAllTest@e9474f]" name="init" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.GetAllTest@e9474f]" name="destroy" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.GetAllTest@e9474f]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.business.dao.GetAllTest@e9474f]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.business.dao.GetAllTest.testReferentiel() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- test.nc.noumea.mairie.bilan.energie.business.dao.GetAllTest -->
      <class name="test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="5" started-at="2018-06-04T07:32:51Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest.testIntegrerFacture() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="init" is-config="true" duration-ms="94" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testIntegrerFacture()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="testIntegrerFacture" duration-ms="363" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIntegrerFacture -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="destroy" is-config="true" duration-ms="59" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest.testIntegrerFactureCompteurInexistant() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest.testIntegrerFacture() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="init" is-config="true" duration-ms="135" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testIntegrerFactureCompteurInexistant()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="testIntegrerFactureCompteurInexistant" duration-ms="32" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <exception class="nc.noumea.mairie.bilan.energie.contract.exceptions.IntegrationException">
            <message>
              <![CDATA[Compteur test_compteur non trouvé]]>
            </message>
            <full-stacktrace>
              <![CDATA[nc.noumea.mairie.bilan.energie.contract.exceptions.IntegrationException: Compteur test_compteur non trouvé
	at nc.noumea.mairie.bilan.energie.business.dao.IntegrationFactureBusiness.integrerFacture(IntegrationFactureBusiness.java:303)
	at nc.noumea.mairie.bilan.energie.business.dao.IntegrationFactureBusiness$$FastClassBySpringCGLIB$$b52e560.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:98)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:262)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.IntegrationFactureBusiness$$EnhancerBySpringCGLIB$$9b4c6c09.integrerFacture(<generated>)
	at nc.noumea.mairie.bilan.energie.business.dao.IntegrationFactureBusiness$$FastClassBySpringCGLIB$$b52e560.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.IntegrationFactureBusiness$$EnhancerBySpringCGLIB$$9e630dc1.integrerFacture(<generated>)
	at test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest.testIntegrerFactureCompteurInexistant(IntegrationFactureServiceTest.java:224)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:200)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:172)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:212)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:689)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- nc.noumea.mairie.bilan.energie.contract.exceptions.IntegrationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIntegrerFactureCompteurInexistant -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="destroy" is-config="true" duration-ms="30" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest.testIntegrerFactureCompteurInexistant() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="init" is-config="true" duration-ms="83" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest.testIntegrerFacturePoliceInexistante() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testIntegrerFacturePoliceInexistante()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="testIntegrerFacturePoliceInexistante" duration-ms="16" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <exception class="nc.noumea.mairie.bilan.energie.contract.exceptions.IntegrationException">
            <message>
              <![CDATA[Police (test_police) non trouvée]]>
            </message>
            <full-stacktrace>
              <![CDATA[nc.noumea.mairie.bilan.energie.contract.exceptions.IntegrationException: Police (test_police) non trouvée
	at nc.noumea.mairie.bilan.energie.business.dao.IntegrationFactureBusiness.integrerFacture(IntegrationFactureBusiness.java:204)
	at nc.noumea.mairie.bilan.energie.business.dao.IntegrationFactureBusiness$$FastClassBySpringCGLIB$$b52e560.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:98)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:262)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.IntegrationFactureBusiness$$EnhancerBySpringCGLIB$$9b4c6c09.integrerFacture(<generated>)
	at nc.noumea.mairie.bilan.energie.business.dao.IntegrationFactureBusiness$$FastClassBySpringCGLIB$$b52e560.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:708)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:644)
	at nc.noumea.mairie.bilan.energie.business.dao.IntegrationFactureBusiness$$EnhancerBySpringCGLIB$$9e630dc1.integrerFacture(<generated>)
	at test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest.testIntegrerFacturePoliceInexistante(IntegrationFactureServiceTest.java:215)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:200)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:172)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:212)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:689)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- nc.noumea.mairie.bilan.energie.contract.exceptions.IntegrationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIntegrerFacturePoliceInexistante -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="destroy" is-config="true" duration-ms="13" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest.testIntegrerFichierFacture() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException,java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest.testIntegrerFacturePoliceInexistante() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="init" is-config="true" duration-ms="63" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="FAIL" signature="testIntegrerFichierFacture()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="testIntegrerFichierFacture" duration-ms="3" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [1] but found [0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [1] but found [0]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertEquals(Assert.java:123)
	at org.testng.Assert.assertEquals(Assert.java:370)
	at org.testng.Assert.assertEquals(Assert.java:380)
	at test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest.testIntegrerFichierFacture(IntegrationFactureServiceTest.java:230)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:200)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:172)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:212)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:689)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIntegrerFichierFacture -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="destroy" is-config="true" duration-ms="8" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest@7e8279e5]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:51Z" finished-at="2018-06-04T07:32:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest.testIntegrerFichierFacture() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException,java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- test.nc.noumea.mairie.bilan.energie.contract.service.IntegrationFactureServiceTest -->
      <class name="test.nc.noumea.mairie.bilan.energie.contract.service.FichierFactureServiceTest">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.FichierFactureServiceTest@64b0d1fa]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="4" started-at="2018-06-04T07:32:50Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.FichierFactureServiceTest@64b0d1fa]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.FichierFactureServiceTest@64b0d1fa]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.FichierFactureServiceTest.testGetAllSimilaire() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="init()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.FichierFactureServiceTest@64b0d1fa]" name="init" is-config="true" duration-ms="21" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="testGetAllSimilaire()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.FichierFactureServiceTest@64b0d1fa]" name="testGetAllSimilaire" duration-ms="51" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllSimilaire -->
        <test-method status="PASS" signature="destroy()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.FichierFactureServiceTest@64b0d1fa]" name="destroy" is-config="true" duration-ms="2" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroy -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.FichierFactureServiceTest@64b0d1fa]" name="springTestContextAfterTestClass" is-config="true" duration-ms="1" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:test.nc.noumea.mairie.bilan.energie.contract.service.FichierFactureServiceTest@64b0d1fa]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-06-04T07:32:50Z" finished-at="2018-06-04T07:32:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.nc.noumea.mairie.bilan.energie.contract.service.FichierFactureServiceTest.testGetAllSimilaire() throws nc.noumea.mairie.bilan.energie.core.exception.TechnicalException,nc.noumea.mairie.bilan.energie.core.exception.BusinessException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- test.nc.noumea.mairie.bilan.energie.contract.service.FichierFactureServiceTest -->
    </test> <!-- Command line test -->
  </suite> <!-- Command line suite -->
</testng-results>
