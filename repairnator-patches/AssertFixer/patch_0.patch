--- workspace/stanford-futuredata/macrobase/380906531/lib/src/test/java/edu/stanford/futuredata/macrobase/analysis/summary/aplinear/APLMeanSummarizerTest.java
+++ workspace/stanford-futuredata/macrobase/380906531/lib/src/test/java/edu/stanford/futuredata/macrobase/analysis/summary/aplinear/APLMeanSummarizerTest.java
@@ -4,26 +4,31 @@
-        DataFrame df = new DataFrame();
-        String[] col1 = new String[]{ "a1", "a2", "a1", "a2" };
-        String[] col2 = new String[]{ "b1", "b1", "b2", "b2" };
-        String[] col3 = new String[]{ "c1", "c1", "c1", "c1" };
-        double[] counts = new double[]{ 100, 300, 400, 500 };
-        double[] means = new double[]{ 200.0, 20.0, 30.0, 25.0 };
-        double[] stdDevs = new double[]{ 15.0, 14.0, 13.0, 12.0 };
-        df.addColumn("col1", col1);
-        df.addColumn("col2", col2);
-        df.addColumn("col3", col3);
-        df.addColumn("counts", counts);
-        df.addColumn("means", means);
-        df.addColumn("stdDevs", stdDevs);
-        List<String> explanationAttributes = Arrays.asList("col1", "col2", "col3");
-        APLMeanSummarizer summ = new APLMeanSummarizer();
-        summ.setCountColumn("counts");
-        summ.setMeanColumn("means");
-        summ.setStdColumn("stdDevs");
-        summ.setMinSupport(0.05);
-        summ.setMinStdDev(2.0);
-        summ.setAttributes(explanationAttributes);
-        summ.process(df);
-        APLExplanation e = summ.getResults();
-        TestCase.assertEquals(1, e.getResults().size());
-        Assert.assertTrue(e.prettyPrint().contains("col1=a1"));
-        TestCase.assertEquals(100.0, e.numOutliers(), 1.0E-10);
+        try {
+            DataFrame df = new DataFrame();
+            String[] col1 = new String[]{ "a1", "a2", "a1", "a2" };
+            String[] col2 = new String[]{ "b1", "b1", "b2", "b2" };
+            String[] col3 = new String[]{ "c1", "c1", "c1", "c1" };
+            double[] counts = new double[]{ 100, 300, 400, 500 };
+            double[] means = new double[]{ 200.0, 20.0, 30.0, 25.0 };
+            double[] stdDevs = new double[]{ 15.0, 14.0, 13.0, 12.0 };
+            df.addColumn("col1", col1);
+            df.addColumn("col2", col2);
+            df.addColumn("col3", col3);
+            df.addColumn("counts", counts);
+            df.addColumn("means", means);
+            df.addColumn("stdDevs", stdDevs);
+            List<String> explanationAttributes = Arrays.asList("col1", "col2", "col3");
+            APLMeanSummarizer summ = new APLMeanSummarizer();
+            summ.setCountColumn("counts");
+            summ.setMeanColumn("means");
+            summ.setStdColumn("stdDevs");
+            summ.setMinSupport(0.05);
+            summ.setMinStdDev(2.0);
+            summ.setAttributes(explanationAttributes);
+            summ.process(df);
+            APLExplanation e = summ.getResults();
+            TestCase.assertEquals(1, e.getResults().size());
+            Assert.assertTrue(e.prettyPrint().contains("col1=a1"));
+            TestCase.assertEquals(100.0, e.numOutliers(), 1.0E-10);
+            org.junit.Assert.fail("Expecting exception: AssertionFailedError");
+        } catch (AssertionFailedError expectedException__AssertionFailedError) {
+            org.junit.Assert.assertTrue(true);
+        }