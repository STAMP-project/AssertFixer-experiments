--- workspace/INRIA/spoon/382375222/src/test/java/spoon/MavenLauncherTest.java
+++ workspace/INRIA/spoon/382375222/src/test/java/spoon/MavenLauncherTest.java
@@ -4,12 +4,17 @@
-        // without the tests
-        MavenLauncher launcher = new MavenLauncher("./", MavenLauncher.SOURCE_TYPE.APP_SOURCE);
-        Assert.assertEquals(7, launcher.getEnvironment().getSourceClasspath().length);
-        // 56 because of the sub folders of src/main/java
-        Assert.assertEquals(57, launcher.getModelBuilder().getInputSources().size());
-        // with the tests
-        launcher = new MavenLauncher("./", MavenLauncher.SOURCE_TYPE.ALL_SOURCE);
-        // 236 because of the sub folders of src/main/java and src/test/java
-        Assert.assertTrue(("size: " + (launcher.getModelBuilder().getInputSources().size())), ((launcher.getModelBuilder().getInputSources().size()) >= 220));
-        // specify the pom.xml
-        launcher = new MavenLauncher("./pom.xml", MavenLauncher.SOURCE_TYPE.APP_SOURCE);
-        Assert.assertEquals(8, launcher.getEnvironment().getComplianceLevel());
+        try {
+            // without the tests
+            MavenLauncher launcher = new MavenLauncher("./", MavenLauncher.SOURCE_TYPE.APP_SOURCE);
+            Assert.assertEquals(7, launcher.getEnvironment().getSourceClasspath().length);
+            // 56 because of the sub folders of src/main/java
+            Assert.assertEquals(57, launcher.getModelBuilder().getInputSources().size());
+            // with the tests
+            launcher = new MavenLauncher("./", MavenLauncher.SOURCE_TYPE.ALL_SOURCE);
+            // 236 because of the sub folders of src/main/java and src/test/java
+            Assert.assertTrue(("size: " + (launcher.getModelBuilder().getInputSources().size())), ((launcher.getModelBuilder().getInputSources().size()) >= 220));
+            // specify the pom.xml
+            launcher = new MavenLauncher("./pom.xml", MavenLauncher.SOURCE_TYPE.APP_SOURCE);
+            Assert.assertEquals(8, launcher.getEnvironment().getComplianceLevel());
+            org.junit.Assert.fail("Expecting exception: SpoonException");
+        } catch (SpoonException expectedException__SpoonException) {
+            org.junit.Assert.assertTrue(true);
+        }