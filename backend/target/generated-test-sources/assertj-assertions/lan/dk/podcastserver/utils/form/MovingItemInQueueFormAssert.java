package lan.dk.podcastserver.utils.form;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link MovingItemInQueueForm} specific assertions - Generated by CustomAssertionGenerator.
 */
public class MovingItemInQueueFormAssert extends AbstractAssert<MovingItemInQueueFormAssert, MovingItemInQueueForm> {

  /**
   * Creates a new <code>{@link MovingItemInQueueFormAssert}</code> to make assertions on actual MovingItemInQueueForm.
   * @param actual the MovingItemInQueueForm we want to make assertions on.
   */
  public MovingItemInQueueFormAssert(MovingItemInQueueForm actual) {
    super(actual, MovingItemInQueueFormAssert.class);
  }

  /**
   * An entry point for MovingItemInQueueFormAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myMovingItemInQueueForm)</code> and get specific assertion with code completion.
   * @param actual the MovingItemInQueueForm we want to make assertions on.
   * @return a new <code>{@link MovingItemInQueueFormAssert}</code>
   */
  public static MovingItemInQueueFormAssert assertThat(MovingItemInQueueForm actual) {
    return new MovingItemInQueueFormAssert(actual);
  }

  /**
   * Verifies that the actual MovingItemInQueueForm's id is equal to the given one.
   * @param id the given id to compare the actual MovingItemInQueueForm's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MovingItemInQueueForm's id is not equal to the given one.
   */
  public MovingItemInQueueFormAssert hasId(java.util.UUID id) {
    // check that actual MovingItemInQueueForm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.UUID actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual MovingItemInQueueForm's position is equal to the given one.
   * @param position the given position to compare the actual MovingItemInQueueForm's position to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MovingItemInQueueForm's position is not equal to the given one.
   */
  public MovingItemInQueueFormAssert hasPosition(Integer position) {
    // check that actual MovingItemInQueueForm we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting position of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualPosition = actual.getPosition();
    if (!Objects.areEqual(actualPosition, position)) {
      failWithMessage(assertjErrorMessage, actual, position, actualPosition);
    }

    // return the current assertion for method chaining
    return this;
  }

}
