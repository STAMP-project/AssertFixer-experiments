package lan.dk.podcastserver.business.stats;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link StatsPodcastType} specific assertions - Generated by CustomAssertionGenerator.
 */
public class StatsPodcastTypeAssert extends AbstractAssert<StatsPodcastTypeAssert, StatsPodcastType> {

  /**
   * Creates a new <code>{@link StatsPodcastTypeAssert}</code> to make assertions on actual StatsPodcastType.
   * @param actual the StatsPodcastType we want to make assertions on.
   */
  public StatsPodcastTypeAssert(StatsPodcastType actual) {
    super(actual, StatsPodcastTypeAssert.class);
  }

  /**
   * An entry point for StatsPodcastTypeAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myStatsPodcastType)</code> and get specific assertion with code completion.
   * @param actual the StatsPodcastType we want to make assertions on.
   * @return a new <code>{@link StatsPodcastTypeAssert}</code>
   */
  public static StatsPodcastTypeAssert assertThat(StatsPodcastType actual) {
    return new StatsPodcastTypeAssert(actual);
  }

  /**
   * Verifies that the actual StatsPodcastType's type is equal to the given one.
   * @param type the given type to compare the actual StatsPodcastType's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual StatsPodcastType's type is not equal to the given one.
   */
  public StatsPodcastTypeAssert hasType(String type) {
    // check that actual StatsPodcastType we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual StatsPodcastType's values is equal to the given one.
   * @param values the given values to compare the actual StatsPodcastType's values to.
   * @return this assertion object.
   * @throws AssertionError - if the actual StatsPodcastType's values is not equal to the given one.
   */
  public StatsPodcastTypeAssert hasValues(io.vavr.collection.Set values) {
    // check that actual StatsPodcastType we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting values of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    io.vavr.collection.Set actualValues = actual.getValues();
    if (!Objects.areEqual(actualValues, values)) {
      failWithMessage(assertjErrorMessage, actual, values, actualValues);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual StatsPodcastType is empty.
   * @return this assertion object.
   * @throws AssertionError - if the actual StatsPodcastType is not empty.
   */
  public StatsPodcastTypeAssert isEmpty() {
    // check that actual StatsPodcastType we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.areEqual(Boolean.FALSE, actual.isEmpty())) {
      failWithMessage("\nExpecting that actual StatsPodcastType is empty but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual StatsPodcastType is not empty.
   * @return this assertion object.
   * @throws AssertionError - if the actual StatsPodcastType is empty.
   */
  public StatsPodcastTypeAssert isNotEmpty() {
    // check that actual StatsPodcastType we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.areEqual(Boolean.TRUE, actual.isEmpty())) {
      failWithMessage("\nExpecting that actual StatsPodcastType is not empty but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
