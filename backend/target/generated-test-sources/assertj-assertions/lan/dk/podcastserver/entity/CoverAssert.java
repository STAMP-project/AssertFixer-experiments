package lan.dk.podcastserver.entity;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Cover} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CoverAssert extends AbstractAssert<CoverAssert, Cover> {

  /**
   * Creates a new <code>{@link CoverAssert}</code> to make assertions on actual Cover.
   * @param actual the Cover we want to make assertions on.
   */
  public CoverAssert(Cover actual) {
    super(actual, CoverAssert.class);
  }

  /**
   * An entry point for CoverAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myCover)</code> and get specific assertion with code completion.
   * @param actual the Cover we want to make assertions on.
   * @return a new <code>{@link CoverAssert}</code>
   */
  public static CoverAssert assertThat(Cover actual) {
    return new CoverAssert(actual);
  }

  /**
   * Verifies that the actual Cover's height is equal to the given one.
   * @param height the given height to compare the actual Cover's height to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Cover's height is not equal to the given one.
   */
  public CoverAssert hasHeight(Integer height) {
    // check that actual Cover we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting height of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualHeight = actual.getHeight();
    if (!Objects.areEqual(actualHeight, height)) {
      failWithMessage(assertjErrorMessage, actual, height, actualHeight);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Cover's id is equal to the given one.
   * @param id the given id to compare the actual Cover's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Cover's id is not equal to the given one.
   */
  public CoverAssert hasId(java.util.UUID id) {
    // check that actual Cover we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.UUID actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Cover's url is equal to the given one.
   * @param url the given url to compare the actual Cover's url to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Cover's url is not equal to the given one.
   */
  public CoverAssert hasUrl(String url) {
    // check that actual Cover we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting url of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualUrl = actual.getUrl();
    if (!Objects.areEqual(actualUrl, url)) {
      failWithMessage(assertjErrorMessage, actual, url, actualUrl);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Cover's width is equal to the given one.
   * @param width the given width to compare the actual Cover's width to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Cover's width is not equal to the given one.
   */
  public CoverAssert hasWidth(Integer width) {
    // check that actual Cover we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting width of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualWidth = actual.getWidth();
    if (!Objects.areEqual(actualWidth, width)) {
      failWithMessage(assertjErrorMessage, actual, width, actualWidth);
    }

    // return the current assertion for method chaining
    return this;
  }

}
