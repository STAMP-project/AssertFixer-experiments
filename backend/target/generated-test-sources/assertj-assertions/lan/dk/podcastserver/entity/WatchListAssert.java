package lan.dk.podcastserver.entity;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link WatchList} specific assertions - Generated by CustomAssertionGenerator.
 */
public class WatchListAssert extends AbstractAssert<WatchListAssert, WatchList> {

  /**
   * Creates a new <code>{@link WatchListAssert}</code> to make assertions on actual WatchList.
   * @param actual the WatchList we want to make assertions on.
   */
  public WatchListAssert(WatchList actual) {
    super(actual, WatchListAssert.class);
  }

  /**
   * An entry point for WatchListAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myWatchList)</code> and get specific assertion with code completion.
   * @param actual the WatchList we want to make assertions on.
   * @return a new <code>{@link WatchListAssert}</code>
   */
  public static WatchListAssert assertThat(WatchList actual) {
    return new WatchListAssert(actual);
  }

  /**
   * Verifies that the actual WatchList's id is equal to the given one.
   * @param id the given id to compare the actual WatchList's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WatchList's id is not equal to the given one.
   */
  public WatchListAssert hasId(java.util.UUID id) {
    // check that actual WatchList we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.UUID actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WatchList's items contains the given Item elements.
   * @param items the given elements that should be contained in actual WatchList's items.
   * @return this assertion object.
   * @throws AssertionError if the actual WatchList's items does not contain all given Item elements.
   */
  public WatchListAssert hasItems(Item... items) {
    // check that actual WatchList we want to make assertions on is not null.
    isNotNull();

    // check that given Item varargs is not null.
    if (items == null) failWithMessage("Expecting items parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getItems(), items);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WatchList's items contains <b>only<b> the given Item elements and nothing else in whatever order.
   * @param items the given elements that should be contained in actual WatchList's items.
   * @return this assertion object.
   * @throws AssertionError if the actual WatchList's items does not contain all given Item elements.
   */
  public WatchListAssert hasOnlyItems(Item... items) {
    // check that actual WatchList we want to make assertions on is not null.
    isNotNull();

    // check that given Item varargs is not null.
    if (items == null) failWithMessage("Expecting items parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getItems(), items);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WatchList's items does not contain the given Item elements.
   *
   * @param items the given elements that should not be in actual WatchList's items.
   * @return this assertion object.
   * @throws AssertionError if the actual WatchList's items contains any given Item elements.
   */
  public WatchListAssert doesNotHaveItems(Item... items) {
    // check that actual WatchList we want to make assertions on is not null.
    isNotNull();

    // check that given Item varargs is not null.
    if (items == null) failWithMessage("Expecting items parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getItems(), items);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WatchList has no items.
   * @return this assertion object.
   * @throws AssertionError if the actual WatchList's items is not empty.
   */
  public WatchListAssert hasNoItems() {
    // check that actual WatchList we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have items but had :\n  <%s>";
    
    // check
    if (actual.getItems().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getItems());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual WatchList's name is equal to the given one.
   * @param name the given name to compare the actual WatchList's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WatchList's name is not equal to the given one.
   */
  public WatchListAssert hasName(String name) {
    // check that actual WatchList we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

}
