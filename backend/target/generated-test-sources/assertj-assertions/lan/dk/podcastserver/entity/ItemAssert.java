package lan.dk.podcastserver.entity;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link Item} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ItemAssert extends AbstractAssert<ItemAssert, Item> {

  /**
   * Creates a new <code>{@link ItemAssert}</code> to make assertions on actual Item.
   * @param actual the Item we want to make assertions on.
   */
  public ItemAssert(Item actual) {
    super(actual, ItemAssert.class);
  }

  /**
   * An entry point for ItemAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myItem)</code> and get specific assertion with code completion.
   * @param actual the Item we want to make assertions on.
   * @return a new <code>{@link ItemAssert}</code>
   */
  public static ItemAssert assertThat(Item actual) {
    return new ItemAssert(actual);
  }

  /**
   * Verifies that the actual Item's cover is equal to the given one.
   * @param cover the given cover to compare the actual Item's cover to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's cover is not equal to the given one.
   */
  public ItemAssert hasCover(Cover cover) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cover of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Cover actualCover = actual.getCover();
    if (!Objects.areEqual(actualCover, cover)) {
      failWithMessage(assertjErrorMessage, actual, cover, actualCover);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's coverOfItemOrPodcast is equal to the given one.
   * @param coverOfItemOrPodcast the given coverOfItemOrPodcast to compare the actual Item's coverOfItemOrPodcast to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's coverOfItemOrPodcast is not equal to the given one.
   */
  public ItemAssert hasCoverOfItemOrPodcast(Cover coverOfItemOrPodcast) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting coverOfItemOrPodcast of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Cover actualCoverOfItemOrPodcast = actual.getCoverOfItemOrPodcast();
    if (!Objects.areEqual(actualCoverOfItemOrPodcast, coverOfItemOrPodcast)) {
      failWithMessage(assertjErrorMessage, actual, coverOfItemOrPodcast, actualCoverOfItemOrPodcast);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's coverPath is equal to the given one.
   * @param coverPath the given coverPath to compare the actual Item's coverPath to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's coverPath is not equal to the given one.
   */
  public ItemAssert hasCoverPath(io.vavr.control.Option coverPath) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting coverPath of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    io.vavr.control.Option actualCoverPath = actual.getCoverPath();
    if (!Objects.areEqual(actualCoverPath, coverPath)) {
      failWithMessage(assertjErrorMessage, actual, coverPath, actualCoverPath);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's creationDate is equal to the given one.
   * @param creationDate the given creationDate to compare the actual Item's creationDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's creationDate is not equal to the given one.
   */
  public ItemAssert hasCreationDate(java.time.ZonedDateTime creationDate) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting creationDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.time.ZonedDateTime actualCreationDate = actual.getCreationDate();
    if (!Objects.areEqual(actualCreationDate, creationDate)) {
      failWithMessage(assertjErrorMessage, actual, creationDate, actualCreationDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's description is equal to the given one.
   * @param description the given description to compare the actual Item's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's description is not equal to the given one.
   */
  public ItemAssert hasDescription(String description) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's downloadDate is equal to the given one.
   * @param downloadDate the given downloadDate to compare the actual Item's downloadDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's downloadDate is not equal to the given one.
   */
  public ItemAssert hasDownloadDate(java.time.ZonedDateTime downloadDate) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting downloadDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.time.ZonedDateTime actualDownloadDate = actual.getDownloadDate();
    if (!Objects.areEqual(actualDownloadDate, downloadDate)) {
      failWithMessage(assertjErrorMessage, actual, downloadDate, actualDownloadDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's fileName is equal to the given one.
   * @param fileName the given fileName to compare the actual Item's fileName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's fileName is not equal to the given one.
   */
  public ItemAssert hasFileName(String fileName) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting fileName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFileName = actual.getFileName();
    if (!Objects.areEqual(actualFileName, fileName)) {
      failWithMessage(assertjErrorMessage, actual, fileName, actualFileName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's id is equal to the given one.
   * @param id the given id to compare the actual Item's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's id is not equal to the given one.
   */
  public ItemAssert hasId(java.util.UUID id) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.UUID actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's length is equal to the given one.
   * @param length the given length to compare the actual Item's length to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's length is not equal to the given one.
   */
  public ItemAssert hasLength(Long length) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting length of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualLength = actual.getLength();
    if (!Objects.areEqual(actualLength, length)) {
      failWithMessage(assertjErrorMessage, actual, length, actualLength);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's localPath is equal to the given one.
   * @param localPath the given localPath to compare the actual Item's localPath to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's localPath is not equal to the given one.
   */
  public ItemAssert hasLocalPath(java.nio.file.Path localPath) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting localPath of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.nio.file.Path actualLocalPath = actual.getLocalPath();
    if (!Objects.areEqual(actualLocalPath, localPath)) {
      failWithMessage(assertjErrorMessage, actual, localPath, actualLocalPath);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's localUri is equal to the given one.
   * @param localUri the given localUri to compare the actual Item's localUri to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's localUri is not equal to the given one.
   */
  public ItemAssert hasLocalUri(String localUri) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting localUri of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLocalUri = actual.getLocalUri();
    if (!Objects.areEqual(actualLocalUri, localUri)) {
      failWithMessage(assertjErrorMessage, actual, localUri, actualLocalUri);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's mimeType is equal to the given one.
   * @param mimeType the given mimeType to compare the actual Item's mimeType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's mimeType is not equal to the given one.
   */
  public ItemAssert hasMimeType(String mimeType) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting mimeType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualMimeType = actual.getMimeType();
    if (!Objects.areEqual(actualMimeType, mimeType)) {
      failWithMessage(assertjErrorMessage, actual, mimeType, actualMimeType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's numberOfFail is equal to the given one.
   * @param numberOfFail the given numberOfFail to compare the actual Item's numberOfFail to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's numberOfFail is not equal to the given one.
   */
  public ItemAssert hasNumberOfFail(Integer numberOfFail) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberOfFail of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualNumberOfFail = actual.getNumberOfFail();
    if (!Objects.areEqual(actualNumberOfFail, numberOfFail)) {
      failWithMessage(assertjErrorMessage, actual, numberOfFail, actualNumberOfFail);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's podcast is equal to the given one.
   * @param podcast the given podcast to compare the actual Item's podcast to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's podcast is not equal to the given one.
   */
  public ItemAssert hasPodcast(Podcast podcast) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting podcast of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Podcast actualPodcast = actual.getPodcast();
    if (!Objects.areEqual(actualPodcast, podcast)) {
      failWithMessage(assertjErrorMessage, actual, podcast, actualPodcast);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's podcastId is equal to the given one.
   * @param podcastId the given podcastId to compare the actual Item's podcastId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's podcastId is not equal to the given one.
   */
  public ItemAssert hasPodcastId(java.util.UUID podcastId) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting podcastId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.UUID actualPodcastId = actual.getPodcastId();
    if (!Objects.areEqual(actualPodcastId, podcastId)) {
      failWithMessage(assertjErrorMessage, actual, podcastId, actualPodcastId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's progression is equal to the given one.
   * @param progression the given progression to compare the actual Item's progression to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's progression is not equal to the given one.
   */
  public ItemAssert hasProgression(Integer progression) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting progression of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualProgression = actual.getProgression();
    if (!Objects.areEqual(actualProgression, progression)) {
      failWithMessage(assertjErrorMessage, actual, progression, actualProgression);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's proxyURL is equal to the given one.
   * @param proxyURL the given proxyURL to compare the actual Item's proxyURL to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's proxyURL is not equal to the given one.
   */
  public ItemAssert hasProxyURL(String proxyURL) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting proxyURL of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualProxyURL = actual.getProxyURL();
    if (!Objects.areEqual(actualProxyURL, proxyURL)) {
      failWithMessage(assertjErrorMessage, actual, proxyURL, actualProxyURL);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's proxyURLWithoutExtention is equal to the given one.
   * @param proxyURLWithoutExtention the given proxyURLWithoutExtention to compare the actual Item's proxyURLWithoutExtention to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's proxyURLWithoutExtention is not equal to the given one.
   */
  public ItemAssert hasProxyURLWithoutExtention(String proxyURLWithoutExtention) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting proxyURLWithoutExtention of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualProxyURLWithoutExtention = actual.getProxyURLWithoutExtention();
    if (!Objects.areEqual(actualProxyURLWithoutExtention, proxyURLWithoutExtention)) {
      failWithMessage(assertjErrorMessage, actual, proxyURLWithoutExtention, actualProxyURLWithoutExtention);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's pubDate is equal to the given one.
   * @param pubDate the given pubDate to compare the actual Item's pubDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's pubDate is not equal to the given one.
   */
  public ItemAssert hasPubDate(java.time.ZonedDateTime pubDate) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pubDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.time.ZonedDateTime actualPubDate = actual.getPubDate();
    if (!Objects.areEqual(actualPubDate, pubDate)) {
      failWithMessage(assertjErrorMessage, actual, pubDate, actualPubDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's status is equal to the given one.
   * @param status the given status to compare the actual Item's status to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's status is not equal to the given one.
   */
  public ItemAssert hasStatus(Status status) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Status actualStatus = actual.getStatus();
    if (!Objects.areEqual(actualStatus, status)) {
      failWithMessage(assertjErrorMessage, actual, status, actualStatus);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's title is equal to the given one.
   * @param title the given title to compare the actual Item's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's title is not equal to the given one.
   */
  public ItemAssert hasTitle(String title) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualTitle = actual.getTitle();
    if (!Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's url is equal to the given one.
   * @param url the given url to compare the actual Item's url to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item's url is not equal to the given one.
   */
  public ItemAssert hasUrl(String url) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting url of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualUrl = actual.getUrl();
    if (!Objects.areEqual(actualUrl, url)) {
      failWithMessage(assertjErrorMessage, actual, url, actualUrl);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's watchLists contains the given WatchList elements.
   * @param watchLists the given elements that should be contained in actual Item's watchLists.
   * @return this assertion object.
   * @throws AssertionError if the actual Item's watchLists does not contain all given WatchList elements.
   */
  public ItemAssert hasWatchLists(WatchList... watchLists) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // check that given WatchList varargs is not null.
    if (watchLists == null) failWithMessage("Expecting watchLists parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getWatchLists(), watchLists);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's watchLists contains <b>only<b> the given WatchList elements and nothing else in whatever order.
   * @param watchLists the given elements that should be contained in actual Item's watchLists.
   * @return this assertion object.
   * @throws AssertionError if the actual Item's watchLists does not contain all given WatchList elements.
   */
  public ItemAssert hasOnlyWatchLists(WatchList... watchLists) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // check that given WatchList varargs is not null.
    if (watchLists == null) failWithMessage("Expecting watchLists parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getWatchLists(), watchLists);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item's watchLists does not contain the given WatchList elements.
   *
   * @param watchLists the given elements that should not be in actual Item's watchLists.
   * @return this assertion object.
   * @throws AssertionError if the actual Item's watchLists contains any given WatchList elements.
   */
  public ItemAssert doesNotHaveWatchLists(WatchList... watchLists) {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // check that given WatchList varargs is not null.
    if (watchLists == null) failWithMessage("Expecting watchLists parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getWatchLists(), watchLists);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item has no watchLists.
   * @return this assertion object.
   * @throws AssertionError if the actual Item's watchLists is not empty.
   */
  public ItemAssert hasNoWatchLists() {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have watchLists but had :\n  <%s>";
    
    // check
    if (actual.getWatchLists().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getWatchLists());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Item has valid u r l.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item does not have valid u r l.
   */
  public ItemAssert hasValidURL() {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasValidURL()) {
      failWithMessage("\nExpecting that actual Item has valid u r l but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item does not have valid u r l.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item has valid u r l.
   */
  public ItemAssert doesNotHaveValidURL() {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasValidURL()) {
      failWithMessage("\nExpecting that actual Item does not have valid u r l but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item is downloaded.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item is not downloaded.
   */
  public ItemAssert isDownloaded() {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.areEqual(Boolean.FALSE, actual.isDownloaded())) {
      failWithMessage("\nExpecting that actual Item is downloaded but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Item is not downloaded.
   * @return this assertion object.
   * @throws AssertionError - if the actual Item is downloaded.
   */
  public ItemAssert isNotDownloaded() {
    // check that actual Item we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.areEqual(Boolean.TRUE, actual.isDownloaded())) {
      failWithMessage("\nExpecting that actual Item is not downloaded but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
