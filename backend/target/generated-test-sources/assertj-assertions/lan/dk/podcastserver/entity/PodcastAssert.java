package lan.dk.podcastserver.entity;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link Podcast} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PodcastAssert extends AbstractAssert<PodcastAssert, Podcast> {

  /**
   * Creates a new <code>{@link PodcastAssert}</code> to make assertions on actual Podcast.
   * @param actual the Podcast we want to make assertions on.
   */
  public PodcastAssert(Podcast actual) {
    super(actual, PodcastAssert.class);
  }

  /**
   * An entry point for PodcastAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myPodcast)</code> and get specific assertion with code completion.
   * @param actual the Podcast we want to make assertions on.
   * @return a new <code>{@link PodcastAssert}</code>
   */
  public static PodcastAssert assertThat(Podcast actual) {
    return new PodcastAssert(actual);
  }

  /**
   * Verifies that the actual Podcast's cover is equal to the given one.
   * @param cover the given cover to compare the actual Podcast's cover to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Podcast's cover is not equal to the given one.
   */
  public PodcastAssert hasCover(Cover cover) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cover of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Cover actualCover = actual.getCover();
    if (!Objects.areEqual(actualCover, cover)) {
      failWithMessage(assertjErrorMessage, actual, cover, actualCover);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Podcast's description is equal to the given one.
   * @param description the given description to compare the actual Podcast's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Podcast's description is not equal to the given one.
   */
  public PodcastAssert hasDescription(String description) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Podcast's hasToBeDeleted is equal to the given one.
   * @param hasToBeDeleted the given hasToBeDeleted to compare the actual Podcast's hasToBeDeleted to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Podcast's hasToBeDeleted is not equal to the given one.
   */
  public PodcastAssert hasHasToBeDeleted(Boolean hasToBeDeleted) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting hasToBeDeleted of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualHasToBeDeleted = actual.getHasToBeDeleted();
    if (!Objects.areEqual(actualHasToBeDeleted, hasToBeDeleted)) {
      failWithMessage(assertjErrorMessage, actual, hasToBeDeleted, actualHasToBeDeleted);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Podcast's id is equal to the given one.
   * @param id the given id to compare the actual Podcast's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Podcast's id is not equal to the given one.
   */
  public PodcastAssert hasId(java.util.UUID id) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.UUID actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Podcast's items contains the given Item elements.
   * @param items the given elements that should be contained in actual Podcast's items.
   * @return this assertion object.
   * @throws AssertionError if the actual Podcast's items does not contain all given Item elements.
   */
  public PodcastAssert hasItems(Item... items) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // check that given Item varargs is not null.
    if (items == null) failWithMessage("Expecting items parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getItems(), items);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Podcast's items contains <b>only<b> the given Item elements and nothing else in whatever order.
   * @param items the given elements that should be contained in actual Podcast's items.
   * @return this assertion object.
   * @throws AssertionError if the actual Podcast's items does not contain all given Item elements.
   */
  public PodcastAssert hasOnlyItems(Item... items) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // check that given Item varargs is not null.
    if (items == null) failWithMessage("Expecting items parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getItems(), items);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Podcast's items does not contain the given Item elements.
   *
   * @param items the given elements that should not be in actual Podcast's items.
   * @return this assertion object.
   * @throws AssertionError if the actual Podcast's items contains any given Item elements.
   */
  public PodcastAssert doesNotHaveItems(Item... items) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // check that given Item varargs is not null.
    if (items == null) failWithMessage("Expecting items parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getItems(), items);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Podcast has no items.
   * @return this assertion object.
   * @throws AssertionError if the actual Podcast's items is not empty.
   */
  public PodcastAssert hasNoItems() {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have items but had :\n  <%s>";
    
    // check
    if (actual.getItems().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getItems());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Podcast's lastUpdate is equal to the given one.
   * @param lastUpdate the given lastUpdate to compare the actual Podcast's lastUpdate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Podcast's lastUpdate is not equal to the given one.
   */
  public PodcastAssert hasLastUpdate(java.time.ZonedDateTime lastUpdate) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lastUpdate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.time.ZonedDateTime actualLastUpdate = actual.getLastUpdate();
    if (!Objects.areEqual(actualLastUpdate, lastUpdate)) {
      failWithMessage(assertjErrorMessage, actual, lastUpdate, actualLastUpdate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Podcast's signature is equal to the given one.
   * @param signature the given signature to compare the actual Podcast's signature to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Podcast's signature is not equal to the given one.
   */
  public PodcastAssert hasSignature(String signature) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting signature of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSignature = actual.getSignature();
    if (!Objects.areEqual(actualSignature, signature)) {
      failWithMessage(assertjErrorMessage, actual, signature, actualSignature);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Podcast's tags contains the given Tag elements.
   * @param tags the given elements that should be contained in actual Podcast's tags.
   * @return this assertion object.
   * @throws AssertionError if the actual Podcast's tags does not contain all given Tag elements.
   */
  public PodcastAssert hasTags(Tag... tags) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // check that given Tag varargs is not null.
    if (tags == null) failWithMessage("Expecting tags parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTags(), tags);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Podcast's tags contains <b>only<b> the given Tag elements and nothing else in whatever order.
   * @param tags the given elements that should be contained in actual Podcast's tags.
   * @return this assertion object.
   * @throws AssertionError if the actual Podcast's tags does not contain all given Tag elements.
   */
  public PodcastAssert hasOnlyTags(Tag... tags) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // check that given Tag varargs is not null.
    if (tags == null) failWithMessage("Expecting tags parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTags(), tags);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Podcast's tags does not contain the given Tag elements.
   *
   * @param tags the given elements that should not be in actual Podcast's tags.
   * @return this assertion object.
   * @throws AssertionError if the actual Podcast's tags contains any given Tag elements.
   */
  public PodcastAssert doesNotHaveTags(Tag... tags) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // check that given Tag varargs is not null.
    if (tags == null) failWithMessage("Expecting tags parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTags(), tags);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Podcast has no tags.
   * @return this assertion object.
   * @throws AssertionError if the actual Podcast's tags is not empty.
   */
  public PodcastAssert hasNoTags() {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have tags but had :\n  <%s>";
    
    // check
    if (actual.getTags().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTags());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Podcast's title is equal to the given one.
   * @param title the given title to compare the actual Podcast's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Podcast's title is not equal to the given one.
   */
  public PodcastAssert hasTitle(String title) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualTitle = actual.getTitle();
    if (!Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Podcast's type is equal to the given one.
   * @param type the given type to compare the actual Podcast's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Podcast's type is not equal to the given one.
   */
  public PodcastAssert hasType(String type) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualType = actual.getType();
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Podcast's url is equal to the given one.
   * @param url the given url to compare the actual Podcast's url to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Podcast's url is not equal to the given one.
   */
  public PodcastAssert hasUrl(String url) {
    // check that actual Podcast we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting url of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualUrl = actual.getUrl();
    if (!Objects.areEqual(actualUrl, url)) {
      failWithMessage(assertjErrorMessage, actual, url, actualUrl);
    }

    // return the current assertion for method chaining
    return this;
  }

}
