package lan.dk.podcastserver.service.properties;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Backup} specific assertions - Generated by CustomAssertionGenerator.
 */
public class BackupAssert extends AbstractAssert<BackupAssert, Backup> {

  /**
   * Creates a new <code>{@link BackupAssert}</code> to make assertions on actual Backup.
   * @param actual the Backup we want to make assertions on.
   */
  public BackupAssert(Backup actual) {
    super(actual, BackupAssert.class);
  }

  /**
   * An entry point for BackupAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myBackup)</code> and get specific assertion with code completion.
   * @param actual the Backup we want to make assertions on.
   * @return a new <code>{@link BackupAssert}</code>
   */
  public static BackupAssert assertThat(Backup actual) {
    return new BackupAssert(actual);
  }

  /**
   * Verifies that the actual Backup's binary is equal to the given one.
   * @param binary the given binary to compare the actual Backup's binary to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Backup's binary is not equal to the given one.
   */
  public BackupAssert hasBinary(Boolean binary) {
    // check that actual Backup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting binary of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualBinary = actual.getBinary();
    if (!Objects.areEqual(actualBinary, binary)) {
      failWithMessage(assertjErrorMessage, actual, binary, actualBinary);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Backup's cron is equal to the given one.
   * @param cron the given cron to compare the actual Backup's cron to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Backup's cron is not equal to the given one.
   */
  public BackupAssert hasCron(String cron) {
    // check that actual Backup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cron of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualCron = actual.getCron();
    if (!Objects.areEqual(actualCron, cron)) {
      failWithMessage(assertjErrorMessage, actual, cron, actualCron);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Backup's location is equal to the given one.
   * @param location the given location to compare the actual Backup's location to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Backup's location is not equal to the given one.
   */
  public BackupAssert hasLocation(java.nio.file.Path location) {
    // check that actual Backup we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting location of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.nio.file.Path actualLocation = actual.getLocation();
    if (!Objects.areEqual(actualLocation, location)) {
      failWithMessage(assertjErrorMessage, actual, location, actualLocation);
    }

    // return the current assertion for method chaining
    return this;
  }

}
