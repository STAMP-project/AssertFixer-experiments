package lan.dk.podcastserver.service.properties;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link ExternalTools} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ExternalToolsAssert extends AbstractAssert<ExternalToolsAssert, ExternalTools> {

  /**
   * Creates a new <code>{@link ExternalToolsAssert}</code> to make assertions on actual ExternalTools.
   * @param actual the ExternalTools we want to make assertions on.
   */
  public ExternalToolsAssert(ExternalTools actual) {
    super(actual, ExternalToolsAssert.class);
  }

  /**
   * An entry point for ExternalToolsAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myExternalTools)</code> and get specific assertion with code completion.
   * @param actual the ExternalTools we want to make assertions on.
   * @return a new <code>{@link ExternalToolsAssert}</code>
   */
  public static ExternalToolsAssert assertThat(ExternalTools actual) {
    return new ExternalToolsAssert(actual);
  }

  /**
   * Verifies that the actual ExternalTools's ffmpeg is equal to the given one.
   * @param ffmpeg the given ffmpeg to compare the actual ExternalTools's ffmpeg to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ExternalTools's ffmpeg is not equal to the given one.
   */
  public ExternalToolsAssert hasFfmpeg(String ffmpeg) {
    // check that actual ExternalTools we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting ffmpeg of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFfmpeg = actual.getFfmpeg();
    if (!Objects.areEqual(actualFfmpeg, ffmpeg)) {
      failWithMessage(assertjErrorMessage, actual, ffmpeg, actualFfmpeg);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ExternalTools's rtmpdump is equal to the given one.
   * @param rtmpdump the given rtmpdump to compare the actual ExternalTools's rtmpdump to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ExternalTools's rtmpdump is not equal to the given one.
   */
  public ExternalToolsAssert hasRtmpdump(String rtmpdump) {
    // check that actual ExternalTools we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting rtmpdump of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualRtmpdump = actual.getRtmpdump();
    if (!Objects.areEqual(actualRtmpdump, rtmpdump)) {
      failWithMessage(assertjErrorMessage, actual, rtmpdump, actualRtmpdump);
    }

    // return the current assertion for method chaining
    return this;
  }

}
