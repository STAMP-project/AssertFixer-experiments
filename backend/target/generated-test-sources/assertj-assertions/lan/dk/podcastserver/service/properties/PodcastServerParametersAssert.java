package lan.dk.podcastserver.service.properties;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link PodcastServerParameters} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PodcastServerParametersAssert extends AbstractAssert<PodcastServerParametersAssert, PodcastServerParameters> {

  /**
   * Creates a new <code>{@link PodcastServerParametersAssert}</code> to make assertions on actual PodcastServerParameters.
   * @param actual the PodcastServerParameters we want to make assertions on.
   */
  public PodcastServerParametersAssert(PodcastServerParameters actual) {
    super(actual, PodcastServerParametersAssert.class);
  }

  /**
   * An entry point for PodcastServerParametersAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myPodcastServerParameters)</code> and get specific assertion with code completion.
   * @param actual the PodcastServerParameters we want to make assertions on.
   * @return a new <code>{@link PodcastServerParametersAssert}</code>
   */
  public static PodcastServerParametersAssert assertThat(PodcastServerParameters actual) {
    return new PodcastServerParametersAssert(actual);
  }

  /**
   * Verifies that the actual PodcastServerParameters's concurrentDownload is equal to the given one.
   * @param concurrentDownload the given concurrentDownload to compare the actual PodcastServerParameters's concurrentDownload to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PodcastServerParameters's concurrentDownload is not equal to the given one.
   */
  public PodcastServerParametersAssert hasConcurrentDownload(Integer concurrentDownload) {
    // check that actual PodcastServerParameters we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting concurrentDownload of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualConcurrentDownload = actual.getConcurrentDownload();
    if (!Objects.areEqual(actualConcurrentDownload, concurrentDownload)) {
      failWithMessage(assertjErrorMessage, actual, concurrentDownload, actualConcurrentDownload);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PodcastServerParameters's coverDefaultName is equal to the given one.
   * @param coverDefaultName the given coverDefaultName to compare the actual PodcastServerParameters's coverDefaultName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PodcastServerParameters's coverDefaultName is not equal to the given one.
   */
  public PodcastServerParametersAssert hasCoverDefaultName(String coverDefaultName) {
    // check that actual PodcastServerParameters we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting coverDefaultName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualCoverDefaultName = actual.getCoverDefaultName();
    if (!Objects.areEqual(actualCoverDefaultName, coverDefaultName)) {
      failWithMessage(assertjErrorMessage, actual, coverDefaultName, actualCoverDefaultName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PodcastServerParameters's downloadExtension is equal to the given one.
   * @param downloadExtension the given downloadExtension to compare the actual PodcastServerParameters's downloadExtension to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PodcastServerParameters's downloadExtension is not equal to the given one.
   */
  public PodcastServerParametersAssert hasDownloadExtension(String downloadExtension) {
    // check that actual PodcastServerParameters we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting downloadExtension of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDownloadExtension = actual.getDownloadExtension();
    if (!Objects.areEqual(actualDownloadExtension, downloadExtension)) {
      failWithMessage(assertjErrorMessage, actual, downloadExtension, actualDownloadExtension);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PodcastServerParameters's maxUpdateParallels is equal to the given one.
   * @param maxUpdateParallels the given maxUpdateParallels to compare the actual PodcastServerParameters's maxUpdateParallels to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PodcastServerParameters's maxUpdateParallels is not equal to the given one.
   */
  public PodcastServerParametersAssert hasMaxUpdateParallels(Integer maxUpdateParallels) {
    // check that actual PodcastServerParameters we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting maxUpdateParallels of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualMaxUpdateParallels = actual.getMaxUpdateParallels();
    if (!Objects.areEqual(actualMaxUpdateParallels, maxUpdateParallels)) {
      failWithMessage(assertjErrorMessage, actual, maxUpdateParallels, actualMaxUpdateParallels);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PodcastServerParameters's numberOfDayToDownload is equal to the given one.
   * @param numberOfDayToDownload the given numberOfDayToDownload to compare the actual PodcastServerParameters's numberOfDayToDownload to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PodcastServerParameters's numberOfDayToDownload is not equal to the given one.
   */
  public PodcastServerParametersAssert hasNumberOfDayToDownload(Long numberOfDayToDownload) {
    // check that actual PodcastServerParameters we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberOfDayToDownload of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualNumberOfDayToDownload = actual.getNumberOfDayToDownload();
    if (!Objects.areEqual(actualNumberOfDayToDownload, numberOfDayToDownload)) {
      failWithMessage(assertjErrorMessage, actual, numberOfDayToDownload, actualNumberOfDayToDownload);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PodcastServerParameters's numberOfDayToSaveCover is equal to the given one.
   * @param numberOfDayToSaveCover the given numberOfDayToSaveCover to compare the actual PodcastServerParameters's numberOfDayToSaveCover to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PodcastServerParameters's numberOfDayToSaveCover is not equal to the given one.
   */
  public PodcastServerParametersAssert hasNumberOfDayToSaveCover(Long numberOfDayToSaveCover) {
    // check that actual PodcastServerParameters we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberOfDayToSaveCover of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualNumberOfDayToSaveCover = actual.getNumberOfDayToSaveCover();
    if (!Objects.areEqual(actualNumberOfDayToSaveCover, numberOfDayToSaveCover)) {
      failWithMessage(assertjErrorMessage, actual, numberOfDayToSaveCover, actualNumberOfDayToSaveCover);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PodcastServerParameters's numberOfTry is equal to the given one.
   * @param numberOfTry the given numberOfTry to compare the actual PodcastServerParameters's numberOfTry to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PodcastServerParameters's numberOfTry is not equal to the given one.
   */
  public PodcastServerParametersAssert hasNumberOfTry(Integer numberOfTry) {
    // check that actual PodcastServerParameters we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberOfTry of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualNumberOfTry = actual.getNumberOfTry();
    if (!Objects.areEqual(actualNumberOfTry, numberOfTry)) {
      failWithMessage(assertjErrorMessage, actual, numberOfTry, actualNumberOfTry);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PodcastServerParameters's rootfolder is equal to the given one.
   * @param rootfolder the given rootfolder to compare the actual PodcastServerParameters's rootfolder to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PodcastServerParameters's rootfolder is not equal to the given one.
   */
  public PodcastServerParametersAssert hasRootfolder(java.nio.file.Path rootfolder) {
    // check that actual PodcastServerParameters we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting rootfolder of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.nio.file.Path actualRootfolder = actual.getRootfolder();
    if (!Objects.areEqual(actualRootfolder, rootfolder)) {
      failWithMessage(assertjErrorMessage, actual, rootfolder, actualRootfolder);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual PodcastServerParameters's rssDefaultNumberItem is equal to the given one.
   * @param rssDefaultNumberItem the given rssDefaultNumberItem to compare the actual PodcastServerParameters's rssDefaultNumberItem to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PodcastServerParameters's rssDefaultNumberItem is not equal to the given one.
   */
  public PodcastServerParametersAssert hasRssDefaultNumberItem(Long rssDefaultNumberItem) {
    // check that actual PodcastServerParameters we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting rssDefaultNumberItem of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualRssDefaultNumberItem = actual.getRssDefaultNumberItem();
    if (!Objects.areEqual(actualRssDefaultNumberItem, rssDefaultNumberItem)) {
      failWithMessage(assertjErrorMessage, actual, rssDefaultNumberItem, actualRssDefaultNumberItem);
    }

    // return the current assertion for method chaining
    return this;
  }

}
