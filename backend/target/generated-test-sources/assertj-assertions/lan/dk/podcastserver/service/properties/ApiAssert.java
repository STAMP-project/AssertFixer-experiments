package lan.dk.podcastserver.service.properties;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Api} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ApiAssert extends AbstractAssert<ApiAssert, Api> {

  /**
   * Creates a new <code>{@link ApiAssert}</code> to make assertions on actual Api.
   * @param actual the Api we want to make assertions on.
   */
  public ApiAssert(Api actual) {
    super(actual, ApiAssert.class);
  }

  /**
   * An entry point for ApiAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myApi)</code> and get specific assertion with code completion.
   * @param actual the Api we want to make assertions on.
   * @return a new <code>{@link ApiAssert}</code>
   */
  public static ApiAssert assertThat(Api actual) {
    return new ApiAssert(actual);
  }

  /**
   * Verifies that the actual Api's dailymotion is equal to the given one.
   * @param dailymotion the given dailymotion to compare the actual Api's dailymotion to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Api's dailymotion is not equal to the given one.
   */
  public ApiAssert hasDailymotion(String dailymotion) {
    // check that actual Api we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting dailymotion of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDailymotion = actual.getDailymotion();
    if (!Objects.areEqual(actualDailymotion, dailymotion)) {
      failWithMessage(assertjErrorMessage, actual, dailymotion, actualDailymotion);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Api's youtube is equal to the given one.
   * @param youtube the given youtube to compare the actual Api's youtube to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Api's youtube is not equal to the given one.
   */
  public ApiAssert hasYoutube(String youtube) {
    // check that actual Api we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting youtube of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualYoutube = actual.getYoutube();
    if (!Objects.areEqual(actualYoutube, youtube)) {
      failWithMessage(assertjErrorMessage, actual, youtube, actualYoutube);
    }

    // return the current assertion for method chaining
    return this;
  }

}
