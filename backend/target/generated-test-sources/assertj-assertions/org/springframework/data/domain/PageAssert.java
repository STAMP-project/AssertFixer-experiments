package org.springframework.data.domain;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link Page} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PageAssert extends AbstractAssert<PageAssert, Page> {

  /**
   * Creates a new <code>{@link PageAssert}</code> to make assertions on actual Page.
   * @param actual the Page we want to make assertions on.
   */
  public PageAssert(Page actual) {
    super(actual, PageAssert.class);
  }

  /**
   * An entry point for PageAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myPage)</code> and get specific assertion with code completion.
   * @param actual the Page we want to make assertions on.
   * @return a new <code>{@link PageAssert}</code>
   */
  public static PageAssert assertThat(Page actual) {
    return new PageAssert(actual);
  }

  /**
   * Verifies that the actual Page's content contains the given Object elements.
   * @param content the given elements that should be contained in actual Page's content.
   * @return this assertion object.
   * @throws AssertionError if the actual Page's content does not contain all given Object elements.
   */
  public PageAssert hasContent(Object... content) {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (content == null) failWithMessage("Expecting content parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getContent(), content);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page's content contains <b>only<b> the given Object elements and nothing else in whatever order.
   * @param content the given elements that should be contained in actual Page's content.
   * @return this assertion object.
   * @throws AssertionError if the actual Page's content does not contain all given Object elements.
   */
  public PageAssert hasOnlyContent(Object... content) {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (content == null) failWithMessage("Expecting content parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getContent(), content);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page's content does not contain the given Object elements.
   *
   * @param content the given elements that should not be in actual Page's content.
   * @return this assertion object.
   * @throws AssertionError if the actual Page's content contains any given Object elements.
   */
  public PageAssert doesNotHaveContent(Object... content) {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (content == null) failWithMessage("Expecting content parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getContent(), content);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page has no content.
   * @return this assertion object.
   * @throws AssertionError if the actual Page's content is not empty.
   */
  public PageAssert hasNoContent() {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have content but had :\n  <%s>";
    
    // check
    if (actual.getContent().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getContent());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Page's number is equal to the given one.
   * @param number the given number to compare the actual Page's number to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page's number is not equal to the given one.
   */
  public PageAssert hasNumber(int number) {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting number of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualNumber = actual.getNumber();
    if (actualNumber != number) {
      failWithMessage(assertjErrorMessage, actual, number, actualNumber);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page's numberOfElements is equal to the given one.
   * @param numberOfElements the given numberOfElements to compare the actual Page's numberOfElements to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page's numberOfElements is not equal to the given one.
   */
  public PageAssert hasNumberOfElements(int numberOfElements) {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberOfElements of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualNumberOfElements = actual.getNumberOfElements();
    if (actualNumberOfElements != numberOfElements) {
      failWithMessage(assertjErrorMessage, actual, numberOfElements, actualNumberOfElements);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page's pageable is equal to the given one.
   * @param pageable the given pageable to compare the actual Page's pageable to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page's pageable is not equal to the given one.
   */
  public PageAssert hasPageable(Pageable pageable) {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageable of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Pageable actualPageable = actual.getPageable();
    if (!Objects.areEqual(actualPageable, pageable)) {
      failWithMessage(assertjErrorMessage, actual, pageable, actualPageable);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page's size is equal to the given one.
   * @param size the given size to compare the actual Page's size to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page's size is not equal to the given one.
   */
  public PageAssert hasSize(int size) {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualSize = actual.getSize();
    if (actualSize != size) {
      failWithMessage(assertjErrorMessage, actual, size, actualSize);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page's sort is equal to the given one.
   * @param sort the given sort to compare the actual Page's sort to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page's sort is not equal to the given one.
   */
  public PageAssert hasSort(Sort sort) {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sort of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Sort actualSort = actual.getSort();
    if (!Objects.areEqual(actualSort, sort)) {
      failWithMessage(assertjErrorMessage, actual, sort, actualSort);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page's totalElements is equal to the given one.
   * @param totalElements the given totalElements to compare the actual Page's totalElements to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page's totalElements is not equal to the given one.
   */
  public PageAssert hasTotalElements(long totalElements) {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting totalElements of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualTotalElements = actual.getTotalElements();
    if (actualTotalElements != totalElements) {
      failWithMessage(assertjErrorMessage, actual, totalElements, actualTotalElements);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page's totalPages is equal to the given one.
   * @param totalPages the given totalPages to compare the actual Page's totalPages to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page's totalPages is not equal to the given one.
   */
  public PageAssert hasTotalPages(int totalPages) {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting totalPages of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualTotalPages = actual.getTotalPages();
    if (actualTotalPages != totalPages) {
      failWithMessage(assertjErrorMessage, actual, totalPages, actualTotalPages);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page has content.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page does not have content.
   */
  public PageAssert hasContent() {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasContent()) {
      failWithMessage("\nExpecting that actual Page has content but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page does not have content.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page has content.
   */
  public PageAssert doesNotHaveContent() {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasContent()) {
      failWithMessage("\nExpecting that actual Page does not have content but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page has next.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page does not have next.
   */
  public PageAssert hasNext() {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasNext()) {
      failWithMessage("\nExpecting that actual Page has next but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page does not have next.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page has next.
   */
  public PageAssert doesNotHaveNext() {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasNext()) {
      failWithMessage("\nExpecting that actual Page does not have next but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page has previous.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page does not have previous.
   */
  public PageAssert hasPrevious() {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.hasPrevious()) {
      failWithMessage("\nExpecting that actual Page has previous but does not have.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page does not have previous.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page has previous.
   */
  public PageAssert doesNotHavePrevious() {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.hasPrevious()) {
      failWithMessage("\nExpecting that actual Page does not have previous but has.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page is first.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page is not first.
   */
  public PageAssert isFirst() {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isFirst()) {
      failWithMessage("\nExpecting that actual Page is first but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page is not first.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page is first.
   */
  public PageAssert isNotFirst() {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isFirst()) {
      failWithMessage("\nExpecting that actual Page is not first but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page is last.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page is not last.
   */
  public PageAssert isLast() {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isLast()) {
      failWithMessage("\nExpecting that actual Page is last but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Page is not last.
   * @return this assertion object.
   * @throws AssertionError - if the actual Page is last.
   */
  public PageAssert isNotLast() {
    // check that actual Page we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isLast()) {
      failWithMessage("\nExpecting that actual Page is not last but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
