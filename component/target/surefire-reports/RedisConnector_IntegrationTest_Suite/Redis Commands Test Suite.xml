<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="cyclone1" name="Redis Commands Test Suite" tests="114" failures="0" timestamp="18 Sep 2018 09:54:38 GMT" time="8.577" errors="0">
  <testcase name="@BeforeSuite setUp" time="0.0" classname="org.ballerinalang.redis.actions.RedisConnectionTest">
    <failure type="redis.embedded.exceptions.EmbeddedRedisException" message="Failed to start Redis instance">
      <![CDATA[redis.embedded.exceptions.EmbeddedRedisException: Failed to start Redis instance
	at redis.embedded.AbstractRedisInstance.start(AbstractRedisInstance.java:42)
	at redis.embedded.RedisServer.start(RedisServer.java:9)
	at org.ballerinalang.redis.actions.RedisCommandsBaseTest.setUpServer(RedisCommandsBaseTest.java:57)
	at org.ballerinalang.redis.actions.RedisCommandsBaseTest.setUp(RedisCommandsBaseTest.java:51)
Caused by: java.io.IOException: Cannot run program "/root/workspace/wso2-ballerina/package-redis/429962223/component/src/test/resources/redis-executable/redis-server-4.0.7" (in directory "/root/workspace/wso2-ballerina/package-redis/429962223/component/src/test/resources/redis-executable"): error=13, Permission denied
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1048)
	at redis.embedded.AbstractRedisInstance.start(AbstractRedisInstance.java:37)
	... 30 more
Caused by: java.io.IOException: error=13, Permission denied
	at java.lang.UNIXProcess.forkAndExec(Native Method)
	at java.lang.UNIXProcess.<init>(UNIXProcess.java:247)
	at java.lang.ProcessImpl.start(ProcessImpl.java:134)
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)
	... 31 more
... Removed 27 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeSuite setUp -->
  <testcase name="@BeforeClass setup" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <failure type="java.lang.NullPointerException">
      <![CDATA[java.lang.NullPointerException
	at org.ballerinalang.redis.actions.RedisStringCommandTest.setUpDatabase(RedisStringCommandTest.java:57)
	at org.ballerinalang.redis.actions.RedisStringCommandTest.setup(RedisStringCommandTest.java:39)
... Removed 33 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeClass setup -->
  <testcase name="@BeforeClass setup" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <failure type="java.lang.NullPointerException">
      <![CDATA[java.lang.NullPointerException
	at org.ballerinalang.redis.actions.RedisListCommandTest.setUpDatabase(RedisListCommandTest.java:61)
	at org.ballerinalang.redis.actions.RedisListCommandTest.setup(RedisListCommandTest.java:39)
... Removed 33 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeClass setup -->
  <testcase name="@BeforeClass setup" time="0.0" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <failure type="java.lang.NullPointerException">
      <![CDATA[java.lang.NullPointerException
	at org.ballerinalang.redis.actions.RedisSetCommandTest.setUpDatabase(RedisSetCommandTest.java:59)
	at org.ballerinalang.redis.actions.RedisSetCommandTest.setup(RedisSetCommandTest.java:40)
... Removed 33 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeClass setup -->
  <testcase name="@BeforeClass setup" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <failure type="java.lang.NullPointerException">
      <![CDATA[java.lang.NullPointerException
	at org.ballerinalang.redis.actions.RedisSortedSetCommandTest.setUpDatabase(RedisSortedSetCommandTest.java:176)
	at org.ballerinalang.redis.actions.RedisSortedSetCommandTest.setup(RedisSortedSetCommandTest.java:42)
... Removed 33 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeClass setup -->
  <testcase name="@BeforeClass setup" time="0.0" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <failure type="java.lang.NullPointerException">
      <![CDATA[java.lang.NullPointerException
	at org.ballerinalang.redis.actions.RedisHashCommandsTest.setUpDatabase(RedisHashCommandsTest.java:79)
	at org.ballerinalang.redis.actions.RedisHashCommandsTest.setup(RedisHashCommandsTest.java:46)
... Removed 33 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeClass setup -->
  <testcase name="@BeforeClass setup" time="0.0" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <failure type="io.lettuce.core.RedisConnectionException" message="Unable to connect to localhost:6379">
      <![CDATA[io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:56)
	at io.lettuce.core.AbstractRedisClient.getConnection(AbstractRedisClient.java:233)
	at io.lettuce.core.RedisClient.connectStandalone(RedisClient.java:253)
	at io.lettuce.core.RedisClient.connect(RedisClient.java:202)
	at org.ballerinalang.redis.actions.RedisCommandsBaseTest.connectToDB(RedisCommandsBaseTest.java:72)
	at org.ballerinalang.redis.actions.RedisKeyCommandTest.setup(RedisKeyCommandTest.java:44)
Caused by: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:6379
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)
	at io.netty.channel.socket.nio.NioSocketChannel.doFinishConnect(NioSocketChannel.java:325)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:340)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:633)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:580)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:497)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:459)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.net.ConnectException: Connection refused
	... 11 more
... Removed 33 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeClass setup -->
  <testcase name="@AfterClass cleanup" time="0.0" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <failure type="java.lang.NullPointerException">
      <![CDATA[java.lang.NullPointerException
	at org.ballerinalang.redis.actions.RedisKeyCommandTest.cleanup(RedisKeyCommandTest.java:229)
... Removed 33 stack frames]]>
    </failure>
  </testcase> <!-- @AfterClass cleanup -->
  <testcase name="testConnectionRelease" time="0.001" classname="org.ballerinalang.redis.actions.RedisConnectionTest">
    <skipped/>
  </testcase> <!-- testConnectionRelease -->
  <testcase name="testEcho" time="0.002" classname="org.ballerinalang.redis.actions.RedisConnectionTest">
    <skipped/>
  </testcase> <!-- testEcho -->
  <testcase name="testInitWithConnectionParams" time="0.0" classname="org.ballerinalang.redis.actions.RedisConnectionTest">
    <skipped/>
  </testcase> <!-- testInitWithConnectionParams -->
  <testcase name="testPing" time="0.0" classname="org.ballerinalang.redis.actions.RedisConnectionTest">
    <skipped/>
  </testcase> <!-- testPing -->
  <testcase name="testAppendCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testAppendCommand -->
  <testcase name="testBitCountCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testBitCountCommand -->
  <testcase name="testBitOpAndCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testBitOpAndCommand -->
  <testcase name="testBitOpNotCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testBitOpNotCommand -->
  <testcase name="testBitOpOrCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testBitOpOrCommand -->
  <testcase name="testBitOpXorCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testBitOpXorCommand -->
  <testcase name="testDecrByCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testDecrByCommand -->
  <testcase name="testDecrCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testDecrCommand -->
  <testcase name="testGetBitCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testGetBitCommand -->
  <testcase name="testGetCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testGetCommand -->
  <testcase name="testGetCommandNilOutput" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testGetCommandNilOutput -->
  <testcase name="testGetRangeCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testGetRangeCommand -->
  <testcase name="testGetSetCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testGetSetCommand -->
  <testcase name="testGetSetCommandNilOutput" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testGetSetCommandNilOutput -->
  <testcase name="testIncrByCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testIncrByCommand -->
  <testcase name="testIncrByFloatCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testIncrByFloatCommand -->
  <testcase name="testIncrCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testIncrCommand -->
  <testcase name="testMGetCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testMGetCommand -->
  <testcase name="testMSetCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testMSetCommand -->
  <testcase name="testMSetNxCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testMSetNxCommand -->
  <testcase name="testPSetExCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testPSetExCommand -->
  <testcase name="testSetBitCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testSetBitCommand -->
  <testcase name="testSetCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testSetCommand -->
  <testcase name="testSetExCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testSetExCommand -->
  <testcase name="testSetNxCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testSetNxCommand -->
  <testcase name="testSetRangeCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testSetRangeCommand -->
  <testcase name="testStrlnCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisStringCommandTest">
    <skipped/>
  </testcase> <!-- testStrlnCommand -->
  <testcase name="testBLPopCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testBLPopCommand -->
  <testcase name="testBLPopCommandNilOutput" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testBLPopCommandNilOutput -->
  <testcase name="testBRPopCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testBRPopCommand -->
  <testcase name="testBRPopCommandNilOutput" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testBRPopCommandNilOutput -->
  <testcase name="testLIndexCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testLIndexCommand -->
  <testcase name="testLInsertCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testLInsertCommand -->
  <testcase name="testLLenCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testLLenCommand -->
  <testcase name="testLPopCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testLPopCommand -->
  <testcase name="testLPopCommandNilOutput" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testLPopCommandNilOutput -->
  <testcase name="testLPushCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testLPushCommand -->
  <testcase name="testLPushXCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testLPushXCommand -->
  <testcase name="testLRangeCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testLRangeCommand -->
  <testcase name="testLRemCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testLRemCommand -->
  <testcase name="testLSetCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testLSetCommand -->
  <testcase name="testLTrimCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testLTrimCommand -->
  <testcase name="testRPopCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testRPopCommand -->
  <testcase name="testRPopCommandNilOutput" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testRPopCommandNilOutput -->
  <testcase name="testRPopLPushCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testRPopLPushCommand -->
  <testcase name="testRPushCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testRPushCommand -->
  <testcase name="testRPushXCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisListCommandTest">
    <skipped/>
  </testcase> <!-- testRPushXCommand -->
  <testcase name="testRandMemberCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <skipped/>
  </testcase> <!-- testRandMemberCommand -->
  <testcase name="testRandMemberCommandNilOutput" time="0.0" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <skipped/>
  </testcase> <!-- testRandMemberCommandNilOutput -->
  <testcase name="testSAddCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <skipped/>
  </testcase> <!-- testSAddCommand -->
  <testcase name="testSDiffCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <skipped/>
  </testcase> <!-- testSDiffCommand -->
  <testcase name="testSDiffStoreCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <skipped/>
  </testcase> <!-- testSDiffStoreCommand -->
  <testcase name="testSInterCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <skipped/>
  </testcase> <!-- testSInterCommand -->
  <testcase name="testSInterStoreCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <skipped/>
  </testcase> <!-- testSInterStoreCommand -->
  <testcase name="testSIsMemberCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <skipped/>
  </testcase> <!-- testSIsMemberCommand -->
  <testcase name="testSMembersCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <skipped/>
  </testcase> <!-- testSMembersCommand -->
  <testcase name="testSPopCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <skipped/>
  </testcase> <!-- testSPopCommand -->
  <testcase name="testSPopCommandNilOutput" time="0.0" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <skipped/>
  </testcase> <!-- testSPopCommandNilOutput -->
  <testcase name="testSRemCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <skipped/>
  </testcase> <!-- testSRemCommand -->
  <testcase name="testSUnionCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <skipped/>
  </testcase> <!-- testSUnionCommand -->
  <testcase name="testSUnionStoreCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSetCommandTest">
    <skipped/>
  </testcase> <!-- testSUnionStoreCommand -->
  <testcase name="testZAddCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZAddCommand -->
  <testcase name="testZCardCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZCardCommand -->
  <testcase name="testZCountCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZCountCommand -->
  <testcase name="testZIncrByCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZIncrByCommand -->
  <testcase name="testZInterStoreCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZInterStoreCommand -->
  <testcase name="testZLexCountCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZLexCountCommand -->
  <testcase name="testZRangeByLexCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZRangeByLexCommand -->
  <testcase name="testZRangeByScoreCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZRangeByScoreCommand -->
  <testcase name="testZRangeCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZRangeCommand -->
  <testcase name="testZRankCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZRankCommand -->
  <testcase name="testZRemCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZRemCommand -->
  <testcase name="testZRemRangeByLexCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZRemRangeByLexCommand -->
  <testcase name="testZRemRangeByRankCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZRemRangeByRankCommand -->
  <testcase name="testZRemRangeByScoreCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZRemRangeByScoreCommand -->
  <testcase name="testZRevRangeByLexCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZRevRangeByLexCommand -->
  <testcase name="testZRevRangeByScoreCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZRevRangeByScoreCommand -->
  <testcase name="testZRevRangeCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZRevRangeCommand -->
  <testcase name="testZRevRankCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZRevRankCommand -->
  <testcase name="testZScoreCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZScoreCommand -->
  <testcase name="testZUnionStoreCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisSortedSetCommandTest">
    <skipped/>
  </testcase> <!-- testZUnionStoreCommand -->
  <testcase name="testHDelCommand" time="0.002" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <skipped/>
  </testcase> <!-- testHDelCommand -->
  <testcase name="testHExistsCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <skipped/>
  </testcase> <!-- testHExistsCommand -->
  <testcase name="testHGetAllCommand" time="0.003" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <skipped/>
  </testcase> <!-- testHGetAllCommand -->
  <testcase name="testHGetCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <skipped/>
  </testcase> <!-- testHGetCommand -->
  <testcase name="testHIncrByCommand" time="0.003" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <skipped/>
  </testcase> <!-- testHIncrByCommand -->
  <testcase name="testHIncrByFloatCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <skipped/>
  </testcase> <!-- testHIncrByFloatCommand -->
  <testcase name="testHKeysCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <skipped/>
  </testcase> <!-- testHKeysCommand -->
  <testcase name="testHLenCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <skipped/>
  </testcase> <!-- testHLenCommand -->
  <testcase name="testHMGetCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <skipped/>
  </testcase> <!-- testHMGetCommand -->
  <testcase name="testHMSetCommand" time="0.002" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <skipped/>
  </testcase> <!-- testHMSetCommand -->
  <testcase name="testHSetCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <skipped/>
  </testcase> <!-- testHSetCommand -->
  <testcase name="testHSetNxCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <skipped/>
  </testcase> <!-- testHSetNxCommand -->
  <testcase name="testHStrlnCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <skipped/>
  </testcase> <!-- testHStrlnCommand -->
  <testcase name="testHValsCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisHashCommandsTest">
    <skipped/>
  </testcase> <!-- testHValsCommand -->
  <testcase name="testDelCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testDelCommand -->
  <testcase name="testExistsCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testExistsCommand -->
  <testcase name="testExpireCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testExpireCommand -->
  <testcase name="testKeysCommand" time="0.003" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testKeysCommand -->
  <testcase name="testMoveCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testMoveCommand -->
  <testcase name="testPExpireCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testPExpireCommand -->
  <testcase name="testPTtlCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testPTtlCommand -->
  <testcase name="testPersistCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testPersistCommand -->
  <testcase name="testRandomKeyCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testRandomKeyCommand -->
  <testcase name="testRandomKeyCommandNilOutput" time="0.0" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testRandomKeyCommandNilOutput -->
  <testcase name="testRenameCommand" time="0.001" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testRenameCommand -->
  <testcase name="testRenameNxCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testRenameNxCommand -->
  <testcase name="testSortCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testSortCommand -->
  <testcase name="testTtlCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testTtlCommand -->
  <testcase name="testTypeCommand" time="0.0" classname="org.ballerinalang.redis.actions.RedisKeyCommandTest">
    <skipped/>
  </testcase> <!-- testTypeCommand -->
</testsuite> <!-- Redis Commands Test Suite -->
