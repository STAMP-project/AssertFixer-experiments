package edu.illinois.library.cantaloupe.operation;

import edu.illinois.library.cantaloupe.image.Dimension;
import edu.illinois.library.cantaloupe.image.ScaleConstraint;
import edu.illinois.library.cantaloupe.test.BaseTest;
import org.junit.Before;
import org.junit.Test;

import java.util.Map;

import static org.junit.Assert.*;

public class SharpenTest extends BaseTest {

    private Sharpen instance;

    @Before
    public void setUp() throws Exception {
        super.setUp();

        this.instance = new Sharpen();
    }

    @Test
    public void getResultingSize() {
        Dimension fullSize = new Dimension(200, 200);
        ScaleConstraint scaleConstraint = new ScaleConstraint(1, 1);
        assertSame(fullSize, instance.getResultingSize(fullSize, scaleConstraint));
    }

    @Test
    public void hasEffect() {
        assertFalse(instance.hasEffect());
        instance.setAmount(0.1f);
        assertTrue(instance.hasEffect());
    }

    @Test
    public void hasEffectWithArguments() {
        Dimension fullSize = new Dimension(300, 200);
        OperationList opList = new OperationList(new Crop(0, 0, 300, 200));

        assertFalse(instance.hasEffect(fullSize, opList));
        instance.setAmount(0.1f);
        assertTrue(instance.hasEffect(fullSize, opList));
    }

    @Test
    public void setAmount() {
        final float delta = 0.00000001f;
        instance.setAmount(0f);
        assertEquals(0f, instance.getAmount(), delta);
        instance.setAmount(0.1f);
        assertEquals(0.1f, instance.getAmount(), delta);
    }

    @Test(expected = IllegalArgumentException.class)
    public void setAmountToNegativeValue() {
        instance.setAmount(-0.1);
    }

    @Test(expected = IllegalStateException.class)
    public void setAmountWhenFrozenThrowsException() {
        instance.freeze();
        instance.setAmount(0.1);
    }

    @Test
    public void toMap() {
        Dimension size = new Dimension(0, 0);
        ScaleConstraint scaleConstraint = new ScaleConstraint(1, 1);
        Map<String,Object> map = instance.toMap(size, scaleConstraint);
        assertEquals(instance.getClass().getSimpleName(), map.get("class"));
        assertEquals(0.0, map.get("amount"));

        instance.setAmount(0.2);
        map = instance.toMap(size, scaleConstraint);
        assertEquals(0.2, map.get("amount"));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void toMapReturnsUnmodifiableMap() {
        Dimension fullSize = new Dimension(100, 100);
        ScaleConstraint scaleConstraint = new ScaleConstraint(1, 1);
        Map<String,Object> map = instance.toMap(fullSize, scaleConstraint);
        map.put("test", "test");
    }

    @Test
    public void testToString() {
        assertEquals("0.0", instance.toString());
        instance.setAmount(0.2);
        assertEquals("0.2", instance.toString());
    }

}
