-- -----------------------------------------------------
-- procedure lessonInfo
-- -----------------------------------------------------
DELIMITER $$
USE `core`$$
CREATE PROCEDURE `core`.`lessonInfo` (IN theUserId VARCHAR(64))
BEGIN
(SELECT moduleName, moduleCategory, moduleId, finishTime
FROM modules LEFT JOIN results USING (moduleId) WHERE userId = theUserId AND moduleType = 'lesson' AND moduleStatus = 'open') UNION (SELECT moduleName, moduleCategory, moduleId, null FROM modules WHERE moduleId NOT IN (SELECT moduleId FROM modules JOIN results USING (moduleId) WHERE userId = theUserId AND moduleType = 'lesson' AND moduleStatus = 'open') AND moduleType = 'lesson'  AND moduleStatus = 'open') ORDER BY moduleName, moduleCategory, moduleName;
END
$$
DELIMITER ;

INSERT INTO modules (`moduleId`, `moduleName`, `moduleType`, `moduleCategory`, `moduleResult`, `moduleHash`, `moduleStatus`, `incrementalRank`, `scoreValue`, `scoreBonus`, `hardcodedKey`) VALUES ('b9d82aa7b46ddaddb6acfe470452a8362136a31e', 'Poor Data Validation', 'lesson', 'Poor Data Validation', '6680b08b175c9f3d521764b41349fcbd3c0ad0a76655a10d42372ebccdfdb4bb', '4d8d50a458ca5f1f7e2506dd5557ae1f7da21282795d0ed86c55fefe41eb874f', 'open', '6', '10', '5', 0);
INSERT INTO modules (`moduleId`, `moduleName`, `moduleType`, `moduleCategory`, `moduleResult`, `moduleHash`, `moduleStatus`, `incrementalRank`, `scoreValue`, `scoreBonus`, `hardcodedKey`) VALUES ('bf847c4a8153d487d6ec36f4fca9b77749597c64', 'Security Misconfiguration', 'lesson', 'Security Misconfigurations', '55b34717d014a5a355f6eced4386878fab0b2793e1d1dbfd23e6262cd510ea96', 'fe04648f43cdf2d523ecf1675f1ade2cde04a7a2e9a7f1a80dbb6dc9f717c833', 'open', '7', '10', '5', 0);
INSERT INTO modules (`moduleId`, `moduleName`, `moduleType`, `moduleCategory`, `moduleResult`, `moduleHash`, `moduleStatus`, `incrementalRank`, `scoreValue`, `scoreBonus`, `hardcodedKey`) VALUES ('6be5de81223cc1b38b6e427cc44f8b6a28d2bc96', 'Poor Data Validation 1', 'challenge', 'Bad Data Validation', 'd30475881612685092e5ec469317dcc5ccc1f548a97bfdb041236b5bba7627bf', 'ca0e89caf3c50dbf9239a0b3c6f6c17869b2a1e2edc3aa6f029fd30925d66c7e', 'open', '67', '35', '5', 0);
INSERT INTO modules (`moduleId`, `moduleName`, `moduleType`, `moduleCategory`, `moduleResult`, `moduleHash`, `moduleStatus`, `incrementalRank`, `scoreValue`, `scoreBonus`, `hardcodedKey`) VALUES ('de626470273c01388629e5a56ac6f17e2eef957b', 'Insecure Direct Object Reference Bank', 'challenge', 'Insecure Direct Object References', '4a1df02af317270f844b56edc0c29a09f3dd39faad3e2a23393606769b2dfa35', '1f0935baec6ba69d79cfb2eba5fdfa6ac5d77fadee08585eb98b130ec524d00c', 'open', '131', '60', '5', 0);
UPDATE modules SET incrementalRank = 132 WHERE moduleId = 'f40b0cd5d45327c9426675313f581cf70c7c7c28';
UPDATE modules SET scoreValue = 70 WHERE moduleId = '1e3c02ad49fa9a9e396a3b268d7da8f0b647d8f9';
INSERT INTO modules (`moduleId`, `moduleName`, `moduleType`, `moduleCategory`, `moduleResult`, `moduleHash`, `moduleStatus`, `incrementalRank`, `scoreValue`, `scoreBonus`, `hardcodedKey`) VALUES ('fcc2558e0a23b8420e173cf8029876cb887408d3', 'CSRF JSON', 'challenge', 'CSRF', 'f57f1377bd847a370d42e1410bfe48c9a3484e78d50e83f851b634fe77d41a6e', '2e0981dcb8278a57dcfaae3b8da0c78d5a70c2d38ea9d8b3e14db3aea01afcbb', 'open', '141', '70', '5', 0);
INSERT INTO modules (`moduleId`, `moduleName`, `moduleType`, `moduleCategory`, `moduleResult`, `moduleHash`, `moduleStatus`, `incrementalRank`, `scoreValue`, `scoreBonus`, `hardcodedKey`) VALUES ('3b14ca3c8f9b90c9b2c8cd1fba9fa67add1272a3', 'Poor Data Validation 2', 'challenge', 'Bad Data Validation', '05adf1e4afeb5550faf7edbec99170b40e79168ecb3a5da19943f05a3fe08c8e', '20e8c4bb50180fed9c1c8d1bf6af5eac154e97d3ce97e43257c76e73e3bbe5d5', 'open', '157', '80', '5', 0);
UPDATE modules SET scoreBonus = 5 WHERE moduleId = '04a5bd8656fdeceac26e21ef6b04b90eaafbd7d5';
INSERT INTO modules (`moduleId`, `moduleName`, `moduleType`, `moduleCategory`, `moduleResult`, `moduleHash`, `moduleStatus`, `incrementalRank`, `scoreValue`, `scoreBonus`, `hardcodedKey`) VALUES ('dc89383763c68cba0aaa1c6f3fd4c17e9d49a805', 'SQL Injection Stored Procedure', 'challenge', 'Injection', 'd9c5757c1c086d02d491cbe46a941ecde5a65d523de36ac1bfed8dd4dd9994c8', '7edcbc1418f11347167dabb69fcb54137960405da2f7a90a0684f86c4d45a2e7', 'open', '177', '90', '5', 1);
INSERT INTO modules (`moduleId`, `moduleName`, `moduleType`, `moduleCategory`, `moduleResult`, `moduleHash`, `moduleStatus`, `incrementalRank`, `scoreValue`, `scoreBonus`, `hardcodedKey`) VALUES ('6158a695f20f9286d5f12ff3f4d42678f4a9740c', 'Security Misconfig Cookie Flag', 'challenge', 'Security Misconfigurations', '92755de2ebb012e689caf8bfec629b1e237d23438427499b6bf0d7933f1b8215', 'c4285bbc6734a10897d672c1ed3dd9417e0530a4e0186c27699f54637c7fb5d4', 'open', '208', '110', '5', 0);
UPDATE modules SET incrementalRank = 209 WHERE moduleId = '368491877a0318e9a774ba5d648c33cb0165ba1e';
UPDATE modules SET incrementalRank = 210 WHERE moduleId = '64070f5aec0593962a29a141110b9239d73cd7b3';
CALL cheatSheetCreate('453d22238401e0bf6f1ff5d45996407e98e45b07', "To complete the lesson, the attack string is the following:<br/>&quot;https://hostname:port/root/grantComplete/csrfLesson?userId=tempId&quot;");
CALL cheatSheetCreate('cd7f70faed73d2457219b951e714ebe5775515d8', "Input is being filtered. To complete this challenge, enter the following attack string: <br/>&lt;iframe src=&#39;#&#39; onload=&#39;alert(&quot;XSS&quot;)&#39;&gt;&lt;/iframe&gt;");
CALL cheatSheetCreate('2dc909fd89c2b03059b1512e7b54ce5d1aaa4bb4', "The user Ids in this challenge follow a sequence 1,3,5 etc. The Hidden Users ID is 11");
CALL cheatSheetCreate('d4e2c37d8f1298fcaf4edcea7292cb76e9eab09b', "Input is being filtered. To complete this challenge, enter the following attack string;<br/>&lt;input type=&quot;button&quot; onmouseup=&quot;alert(&#39;XSS&#39;)&quot;/&gt;");
CALL cheatSheetCreate('52c5394cdedfb2e95b3ad8b92d0d6c9d1370ea9a', "The url of the result key is hidden in a div with an ID &quot;hiddenDiv&quot; that can be found in the source HTML of the lesson. User can also right click and inspect the element.");
CALL cheatSheetCreate('6319a2e38cc4b2dc9e6d840e1b81db11ee8e5342', "Input is being filtered. What is being filtered out is being completly removed. The filter does not act in a recursive fashion so with enough nested javascript triggers, it can be defeated. To complete this challenge, enter the following attack string;<br/>&lt;input type=&quot;button&quot; oncliconcliconcliconcliconclickkkkk=&quot;alert(&#39;XSS&#39;)&quot;/&gt;");
CALL cheatSheetCreate('f771a10efb42a79a9dba262fd2be2e44bf40b66d', "To complete this challenge, the following attack string will return all rows from the table:<br/>test&#39;or&#39;&#39;!=&#39;2@test.com<br/>The input is validated as an email address before it is passed to the DB.");
CALL cheatSheetCreate('5dda8dc216bd6a46fccaa4ed45d49404cdc1c82e', "To complete this challenge, you must craft a second statment to return Mary Martin\'\'s credit card number as the current statement only returns the customerName attribute. The following string will perform this; </br> &#39; UNION ALL SELECT creditCardNumber FROM customers WHERE customerName = &#39;Mary Martin<br/> The filter in this challenge is difficult to get around. But the \'\'UNION\'\' operator is not being filtered. Using the UNION command you are able to return the results of custom statements.");
CALL cheatSheetCreate('201ae6f8c55ba3f3b5881806387fbf34b15c30c2', "The lesson is encoded in . Most proxy applicaitons include a decoder for this encoding.");
CALL cheatSheetCreate('e0ba96bb4c8d4cd2e1ff0a10a0c82b5362edf998', "The filter in this challenge is removing all single quotes. However as there are two user parameters being utilised in the challenges login query, backslashes can be used to escape the user input's intended string context. The challenge can be completed with a user name of a <b>Backslash (\\)</b>  and a password of <b>OR 1 = 1 AND idusers = 7; -- </b> so that you are signed in as the admin user.");
CALL cheatSheetCreate('b3cfd5890649e6815a1c7107cc41d17c82826cfa', "There are a number of ways to defeat the crypto and get the encryption key in this challenge. The quickest way is to submit base64 encoded spaces. The crypto XOR's the spaces with the key and returns the resultant 'cipher text', which is the encryption key.");
CALL cheatSheetCreate('145111e80400e4fd48bd3aa5aca382e9c5640793', "To complete this challenge a user must deobfusticate the javascript found in /couponCheck.js and extract the relevent cryptoinformation to manually decrypt a javascript array of encrypted coupons, or to manipulate the javascript so that it returns the decrypted coupons. The Coupon code for free trolls is <b>e!c!3etZoumo@Stu4rU176</b>");
CALL cheatSheetCreate('368491877a0318e9a774ba5d648c33cb0165ba1e', "This challenge requires a bit of thinking to complete organically. First you must find some admin email addresses. The login function will return them when valid usernames are submitted. Try using root or superuser with any password. Use the email address in the secret question function to get that user's Secret Question. The secret question for each user is 'What is your favourite flower?'. There are only so many flowers. Any of the following flowers are valid answers. Root's favourite flower is 'Franklin Tree'. <br><br> Valid answers: Jade Vine, Corpse Flower, Gibraltar Campion, Franklin Tree, Middlemist Red, Chocolate Cosmos or Ghost Orchid");
CALL cheatSheetCreate('6be5de81223cc1b38b6e427cc44f8b6a28d2bc96', "The shopping cart application does not validate the number of items you are buying. Set the troll amount to 1, rageAmount to 0, notBadAmount to 0 and the MeGusta Amount to -101. ");
CALL cheatSheetCreate('3b14ca3c8f9b90c9b2c8cd1fba9fa67add1272a3', "The shopping cart application only ensures that the amount of items bought is a positive number. By buying 999295724 trolls, the total cost integer value will overflow and enter a negative state.");
CALL cheatSheetCreate('b9d82aa7b46ddaddb6acfe470452a8362136a31e', "Enter a valid number in the submit box and click submit number. Capture the request in a HTTP proxy and modify the number to a negative value.");
CALL cheatSheetCreate('bf847c4a8153d487d6ec36f4fca9b77749597c64', "Sign into the application with the generic admin default combination of 'admin' and 'password'.");
CALL cheatSheetCreate('fcc2558e0a23b8420e173cf8029876cb887408d3', "To complete this challenge, you must force another user to submit a post request which contains a JSON payload. The easiest way to achieve this is to force the user to visit a custom web page that submits the post request. This means the web page needs to be accessible. It can be accessed via a HTTP server, a public Dropbox link, a shared file area. It is possible to use HTML forms to submit cross domain POST requets with JSON payloads by setting the <b>enctype</b> attribute to text/plain and then forming the JSON payload around the necessary equals symbol which normally deliminates the parameter name from the parameter value. The following is an example web page that would complete the challenge<br/><br/>&lt;html&gt;<br/>&lt;body&gt;<br/>&lt;form id=&quot;completeChallengeJson&quot; enctype=&quot;text/plain&quot; action=&quot;https://hostname:port/user/csrfchallengetwo/plusplus&quot; method=&quot;POST&quot; &gt;<br/>&lt;input type=&quot;hidden&quot; name=&#x27;{&quot;userId&quot;:&quot;exampleId&quot;,&quot;&#x27; value=&#x27;&quot;,&quotend&quote}&#x27;><br/>&lt;/form&gt;<br/>&lt;script&gt;<br/>document.forms[&quot;completeChallengeJson&quot;].submit();<br/>&lt;/script&gt;<br/>&lt;/body&gt;<br/>&lt;/html&gt;<br/><br/>The class form function should be used to create an iframe that forces the user to visit this attack page.");
CALL cheatSheetCreate('6158a695f20f9286d5f12ff3f4d42678f4a9740c', "To complete this challenge, you must be able to capture the traffic of another user. The simplest way to simulate this would be to create a second user account and open it in a separate browser and open this challenge. You could then just steal the cookie straight from the browser. To demo how to solve this as expected you would actually open Wireshark and record the 2nd user opening the challenge. Filter the network capture for ip.dst == ShepherdInstanceIp, and find the unencrypted HTTP packet. Right click it and select 'Follow TCP stream'. You'll see the cookie in that dialog. <br><br> Once you have the token collected, in your original browser, click the button and intercept the request with a Proxy. Replace your cookie value with the one you collected from another user.");
CALL cheatSheetCreate('de626470273c01388629e5a56ac6f17e2eef957b', "To complete this challenge you must first register an account. The account must have a unique name. The next step is to click the refresh balance button. Capture this request, and replay it with different account numbers until you find one with cash. If you are the first person to attempt this challenge, the account number 1 should have 10 million in it. Take note of the account number that has cash. Now fill out the 'Transfer Funds' form with any data. Capture that requests and change the receiver account number parameter to the value the sender account number parameter is currently equal to (This is your account number), change the sender account number to the identifier you noted earlier and set the transfer amount to as high as possible (must be some money left in account to work). Keep doing this untill your account has more than 5 million in it. Then open the level again or sign in / out of the account to get the result key");
CALL cheatSheetCreate('dc89383763c68cba0aaa1c6f3fd4c17e9d49a805', "The following attack vectors will expose the result key over two queries.<br><br>Step One: <b>test' AND (SELECT 7303 FROM(SELECT COUNT(*),CONCAT(0x716b6a7671,(SELECT MID((IFNULL(CAST(comment AS CHAR),0x20)),1,50) FROM sqlchalstoredproc.customers ORDER BY customerId LIMIT 2,1),0x71786b7a71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) AND 'hdTL'='hdTL</b><br><br>This will return an error revealing the first part of the key in the message with <b>qxkzq1</b> added to the end for padding. remove those characters and record the rest of the key revealed. <br><br>Step Two: <b>test' AND (SELECT 9441 FROM(SELECT COUNT(*),CONCAT(0x716b6a7671,(SELECT MID((IFNULL(CAST(comment AS CHAR),0x20)),51,50) FROM sqlchalstoredproc.customers ORDER BY customerId LIMIT 2,1),0x71786b7a71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) AND 'ilGf'='ilGf</b><br><br>This will reveal the second part of the key, padded with <b>qkjvq</b> at the start and <b>qxkzq1</b> at the end. Remove the padding and add the rest to the previously revealed part of the result key. That is the key to solve this challenge.");