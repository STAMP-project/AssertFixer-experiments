include 'inline'
include 'testng'
include 'extTest'
include 'kotlinTest'
include 'android'

rootProject.name = 'mockito'

rootProject.children.each { project ->
    String projectDirName = "subprojects/$project.name"
    project.projectDir = new File(settingsDir, projectDirName)
    project.buildFileName = "${project.name}.gradle"
    assert project.projectDir.isDirectory()
    assert project.buildFile.isFile()
}



import java.io.Serializable;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.regex.Pattern;

/**
 * A general purpose pattern for matching GAVs (i.e. triples consisting of {@code groupId}, {@code artifactId} and
 * {@code version}).
 * <p>
 * To create a new {@link GavPattern}, use either {@link #of(String)} or {@link #builder()}, both of which accept
 * wildcard patterns (rather than regular expression patterns). See the JavaDocs of the two respective methods for more
 * details.
 * <p>
 * {@link GavPattern} overrides {@link #hashCode()} and {@link #equals(Object)} and can thus be used as a key in a
 * {@link Map}.
 *
 * @author <a href="https://github.com/ppalaga">Peter Palaga</a>
 */
public class GavPattern implements Serializable {

    /**
     * A {@link GavPattern} builder.
     */
    public static class Builder {

        private GavSegmentPattern artifactIdPattern = GavSegmentPattern.MATCH_ALL;
        private GavSegmentPattern groupIdPattern = GavSegmentPattern.MATCH_ALL;
        private GavSegmentPattern versionPattern = GavSegmentPattern.MATCH_ALL;

        private Builder() {
        }

        /**
         * Sets the pattern for {@code artifactId}
         *
         * @param wildcardPattern
         *                            a pattern that can contain string literals and asterisk {@code *} wildcards
         * @return this {@link Builder}
         */
        public Builder artifactIdPattern(String wildcardPattern) {
            this.artifactIdPattern = new GavSegmentPattern(wildcardPattern);
            return this;
        }

        public GavPattern build() {
            return new GavPattern(groupIdPattern, artifactIdPattern, versionPattern);
        }

        /**
         * Sets the pattern for {@code groupId}
         *
         * @param wildcardPattern
         *                            a pattern that can contain string literals and asterisk {@code *} wildcards
         * @return this {@link Builder}
         */
        public Builder groupIdPattern(String wildcardPattern) {
            this.groupIdPattern = new GavSegmentPattern(wildcardPattern);
            return this;
        }

        /**
         * Sets the pattern for {@code version}
         *
         * @param wildcardPattern
         *                            a pattern that can contain string literals and asterisk {@code *} wildcards
         * @return this {@link Builder}
         */
        public Builder versionPattern(String wildcardPattern) {
            this.versionPattern = new GavSegmentPattern(wildcardPattern);
            return this;
        }

    }

    /**
     * A pair of a {@link Pattern} and its wildcard source.
     */
    static class GavSegmentPattern implements Serializable {
        private static final GavSegmentPattern MATCH_ALL = new GavSegmentPattern(GavPattern.MULTI_WILDCARD);
        private static final String MATCH_ALL_PATTERN_SOURCE = ".*";
        /**  */
        private static final long serialVersionUID = 1063634992004995585L;
        private final transient Pattern pattern;
        private final String source;

        GavSegmentPattern(String wildcardSource) {
            super();
            final StringBuilder sb = new StringBuilder(wildcardSource.length() + 2);
            final StringTokenizer st = new StringTokenizer(wildcardSource, GavPattern.MULTI_WILDCARD, true);
            while (st.hasMoreTokens()) {
                String token = st.nextToken();
                if (GavPattern.MULTI_WILDCARD.equals(token)) {
                    sb.append(MATCH_ALL_PATTERN_SOURCE);
                } else {
                    sb.append(Pattern.quote(token));
                }
            }
            this.pattern = Pattern.compile(sb.toString());
            this.source = wildcardSource;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            GavSegmentPattern other = (GavSegmentPattern) obj;
            return source.equals(other.source);
        }

        /**
         * @return the wildcard source of the {@link #pattern}
         */
        public String getSource() {
            return source;
        }

        @Override
        public int hashCode() {
            return source.hashCode();
        }

        public boolean matches(String input) {
            return pattern.matcher(input).matches();
        }

        /**
         * @return {@code true} if this {@link GavSegmentPattern} is equal to {@link #MATCH_ALL}; {@code false}
         *         otherwise
         */
        public boolean matchesAll() {
            return MATCH_ALL.equals(this);
        }

        @Override
        public String toString() {
            return source;
        }
    }

    private static final char DELIMITER = ':';
    private static final String DELIMITER_STRING;
    private static final GavPattern MATCH_ALL;
    private static final GavPattern MATCH_SNAPSHOTS;
    static final String MULTI_WILDCARD;
    static final String MULTI_WILDCARD_CHAR = "*";
    private static final long serialVersionUID = 5570763687443531797L;
    private static final String SNAPSHOT_SUFFIX = "-SNAPSHOT";

    static {
        MULTI_WILDCARD = String.valueOf(MULTI_WILDCARD_CHAR);
        DELIMITER_STRING = String.valueOf(DELIMITER);
        MATCH_ALL = new GavPattern(GavSegmentPattern.MATCH_ALL, GavSegmentPattern.MATCH_ALL,
                GavSegmentPattern.MATCH_ALL);
        MATCH_SNAPSHOTS = new GavPattern(GavSegmentPattern.MATCH_ALL, GavSegmentPattern.MATCH_ALL,
                new GavSegmentPattern(MULTI_WILDCARD + SNAPSHOT_SUFFIX));
    }

    /**
     * @return a new {@link Builder}
     */
    public static Builder builder() {
        return new Builder();
    }

    /**
     * @return a singleton that matches all possible GAVs
     */
    public static GavPattern matchAll() {
        return MATCH_ALL;
    }

    /**
     * @return a singleton that matches any GAV that has a version ending with {@value #SNAPSHOT_SUFFIX}
     */
    public static GavPattern matchSnapshots() {
        return MATCH_SNAPSHOTS;
    }

    /**
     * Creates a new {@link GavPattern} out of the given {@code wildcardPattern}. A wildcard pattern consists of string
     * literals and asterisk wildcard {@code *}. {@code *} matches zero or many arbitrary characters. Wildcard patterns
     * for groupId, artifactId and version need to be delimited by colon {@value #DELIMITER}.
     * <p>
     * GAV pattern examples:
     * <p>
     * {@code org.my-group} - an equivalent of {@code org.my-group:*:*}. It will match any version of any artifact
     * having groupId {@code org.my-group}.
     * <p>
     * {@code org.my-group*} - an equivalent of {@code org.my-group*:*:*}. It will match any version of any artifact
     * whose groupId starts with {@code org.my-group} - i.e. it will match all of {@code org.my-group},
     * {@code org.my-group.api}, {@code org.my-group.impl}, etc.
     * <p>
     * {@code org.my-group:my-artifact} - an equivalent of {@code org.my-group:my-artifact:*}. It will match any version
     * of all such artifacts that have groupId {@code org.my-group} and artifactId {@code my-artifact}
     * <p>
     * {@code org.my-group:my-artifact:1.2.3} - will match just the version 1.2.3 of artifacts
     * {@code org.my-group:my-artifact}.
     *
     * @param wildcardPattern
     *                            a string pattern to parse and create a new {@link GavPattern} from
     * @return a new {@link GavPattern}
     */
    public static GavPattern of(String wildcardPattern) {
        final GavSegmentPattern groupIdPattern;
        StringTokenizer st = new StringTokenizer(wildcardPattern, DELIMITER_STRING);
        if (st.hasMoreTokens()) {
            groupIdPattern = new GavSegmentPattern(st.nextToken());
        } else {
            groupIdPattern = GavSegmentPattern.MATCH_ALL;
        }
        final GavSegmentPattern artifactIdPattern;
        if (st.hasMoreTokens()) {
            artifactIdPattern = new GavSegmentPattern(st.nextToken());
        } else {
            artifactIdPattern = GavSegmentPattern.MATCH_ALL;
        }
        final GavSegmentPattern versionPattern;
        if (st.hasMoreTokens()) {
            versionPattern = new GavSegmentPattern(st.nextToken());
        } else {
            versionPattern = GavSegmentPattern.MATCH_ALL;
        }
        return new GavPattern(groupIdPattern, artifactIdPattern, versionPattern);
    }

    final GavSegmentPattern artifactIdPattern;
    final GavSegmentPattern groupIdPattern;
    private final transient String source;
    final GavSegmentPattern versionPattern;

    GavPattern(GavSegmentPattern groupIdPattern, GavSegmentPattern artifactIdPattern,
            GavSegmentPattern versionPattern) {
        super();
        this.groupIdPattern = groupIdPattern;
        this.artifactIdPattern = artifactIdPattern;
        this.versionPattern = versionPattern;

        StringBuilder source = new StringBuilder(groupIdPattern.getSource().length()
                + artifactIdPattern.getSource().length() + versionPattern.getSource().length() + 2);

        source.append(groupIdPattern.getSource());
        final boolean artifactMatchesAll = artifactIdPattern.matchesAll();
        final boolean versionMatchesAll = versionPattern.matchesAll();
        if (!versionMatchesAll) {
            source.append(DELIMITER).append(artifactIdPattern.getSource());
            source.append(DELIMITER).append(versionPattern.getSource());
        } else if (!artifactMatchesAll) {
            source.append(DELIMITER).append(artifactIdPattern.getSource());
        }
        this.source = source.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        GavPattern other = (GavPattern) obj;
        return this.source.equals(other.source);
    }

    @Override
    public int hashCode() {
        return this.source.hashCode();
    }

    /**
     * Matches the given {@code groupId}, {@code artifactId}, {@code version} triple against this {@link GavPattern}.
     *
     * @param groupId
     * @param artifactId
     * @param version
     * @return {@code true} if this {@link GavPattern} matches the given {@code groupId}, {@code artifactId},
     *         {@code version} triple and {@code false otherwise}
     */
    public boolean matches(String groupId, String artifactId, String version) {
        return groupIdPattern.matches(groupId) && //
                artifactIdPattern.matches(artifactId) && //
                versionPattern.matches(version);
    }

    @Override
    public String toString() {
        return source;
    }

}



import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;

/**
 * A set of {@link Gav}s defined by included and excluded {@link GavPattern}s.
 *
 * @author <a href="https://github.com/ppalaga">Peter Palaga</a>
 */
public class GavSet implements Serializable {
    /**  */
    private static final long serialVersionUID = 4495169649760950618L;

    public static class Builder {
        private List<GavPattern> excludes = new ArrayList<>();
        private List<GavPattern> includes = new ArrayList<>();

        private Builder() {
        }

        public GavSet build() {
            if (includes.isEmpty()) {
                includes.add(GavPattern.matchAll());
            }

            List<GavPattern> useIncludes = Collections.unmodifiableList(includes);
            List<GavPattern> useExcludes = Collections.unmodifiableList(excludes);

            this.includes = null;
            this.excludes = null;

            return new GavSet(useIncludes, useExcludes);
        }

        /**
         * Exclude a single GAV pattern.
         *
         * @param rawPattern
         * @return this {@link Builder}
         */
        public Builder exclude(String rawPattern) {
            this.excludes.add(GavPattern.of(rawPattern));
            return this;
        }

        /**
         * Parses the entries of the given {@link Collection} of {@code rawPatterns} and excludes those.
         *
         * @param rawPatterns
         *            {@link Collection} of GAV patterns to parse via {@link GavPattern#of(String)}
         * @return this {@link Builder}
         */
        public Builder excludes(Collection<String> rawPatterns) {
            if (rawPatterns != null) {
                for (String rawPattern : rawPatterns) {
                    this.excludes.add(GavPattern.of(rawPattern));
                }
            }
            return this;
        }

        /**
         * Parses the entries of the given array of {@code rawPatterns} and excludes those.
         *
         * @param rawPatterns
         *            a list of GAV patterns to parse via {@link GavPattern#of(String)}
         * @return this {@link Builder}
         */
        public Builder excludes(String... rawPatterns) {
            if (rawPatterns != null) {
                for (String rawPattern : rawPatterns) {
                    this.excludes.add(GavPattern.of(rawPattern));
                }
            }
            return this;
        }

        /**
         * Parses the given comma separated list of {@code rawPatterns} and excludes those.
         *
         * @param rawPatterns
         *            a comma separated list of GAV patterns
         * @return this {@link Builder}
         */
        public Builder excludes(String rawPatterns) {
            if (rawPatterns != null) {
                StringTokenizer st = new StringTokenizer(rawPatterns, ",");
                while (st.hasMoreTokens()) {
                    this.excludes.add(GavPattern.of(st.nextToken()));
                }
            }
            return this;
        }

        /**
         * Adds {@link GavPattern#matchSnapshots()} to {@link #excludes}.
         *
         * @return this {@link Builder}
         */
        public Builder excludeSnapshots() {
            this.excludes.add(GavPattern.matchSnapshots());
            return this;
        }

        /**
         * Include a single GAV pattern.
         *
         * @param rawPattern
         * @return this {@link Builder}
         */
        public Builder include(String rawPattern) {
            this.includes.add(GavPattern.of(rawPattern));
            return this;
        }

        /**
         * Parses the entries of the given {@link Collection} of {@code rawPatterns} and includes those.
         *
         * @param rawPatterns
         *            {@link Collection} of GAV patterns to parse via {@link GavPattern#of(String)}
         * @return this {@link Builder}
         */
        public Builder includes(Collection<String> rawPatterns) {
            if (rawPatterns != null) {
                for (String rawPattern : rawPatterns) {
                    this.includes.add(GavPattern.of(rawPattern));
                }
            }
            return this;
        }

        /**
         * Parses the given comma separated list of {@code rawPatterns} and includes those.
         *
         * @param rawPatterns
         *            a comma separated list of GAV patterns
         * @return this {@link Builder}
         */
        public Builder includes(String rawPatterns) {
            if (rawPatterns != null) {
                StringTokenizer st = new StringTokenizer(rawPatterns, ",");
                while (st.hasMoreTokens()) {
                    this.includes.add(GavPattern.of(st.nextToken()));
                }
            }
            return this;
        }

        /**
         * Parses the entries of the given array of {@code rawPatterns} and includes those.
         *
         * @param rawPatterns
         *            a list of GAV patterns to parse via {@link GavPattern#of(String)}
         * @return this {@link Builder}
         */
        public Builder includes(String... rawPatterns) {
            if (rawPatterns != null) {
                for (String rawPattern : rawPatterns) {
                    this.includes.add(GavPattern.of(rawPattern));
                }
            }
            return this;
        }

    }

    private static final List<GavPattern> EMPTY_LIST = Collections.emptyList();
    private static final GavSet INCLUDE_ALL = new GavSet(Collections.singletonList(GavPattern.matchAll()), EMPTY_LIST);

    private static void append(List<GavPattern> cludes, Appendable out) throws IOException {
        boolean first = true;
        for (GavPattern gavPattern : cludes) {
            if (first) {
                first = false;
            } else {
                out.append(',');
            }
            out.append(gavPattern.toString());
        }
    }

    public static Builder builder() {
        return new Builder();
    }

    public static GavSet includeAll() {
        return INCLUDE_ALL;
    }

    private static boolean matches(String groupId, String artifactId, String version, List<GavPattern> patterns) {
        for (GavPattern pattern : patterns) {
            if (pattern.matches(groupId, artifactId, version)) {
                return true;
            }
        }
        return false;
    }

    private final List<GavPattern> excludes;
    private final transient int hashcode;;

    private final List<GavPattern> includes;

    GavSet(List<GavPattern> includes, List<GavPattern> excludes) {
        super();
        this.includes = includes;
        this.excludes = excludes;
        this.hashcode = 31 * (31 * 1 + excludes.hashCode()) + includes.hashCode();
    }

    /**
     * Appends {@link #excludes} to the given {@code out} separating them by comma.
     *
     * @param out
     *            an {@link Appendable} to append to
     * @throws IOException
     */
    public void appendExcludes(Appendable out) throws IOException {
        append(excludes, out);
    }

    /**
     * Appends {@link #includes} to the given {@code out} separating them by comma.
     *
     * @param out
     *            an {@link Appendable} to append to
     * @throws IOException
     */
    public void appendIncludes(Appendable out) throws IOException {
        append(includes, out);
    }

    /**
     *
     * @param groupId
     * @param artifactId
     * @param version
     * @return {@code true} if the given GAV triple is a member of this {@link GavSet} and {@code false} otherwise
     */
    public boolean contains(String groupId, String artifactId, String version) {
        return matches(groupId, artifactId, version, includes) && !matches(groupId, artifactId, version, excludes);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        GavSet other = (GavSet) obj;
        if (excludes == null) {
            if (other.excludes != null)
                return false;
        } else if (!excludes.equals(other.excludes))
            return false;
        if (includes == null) {
            if (other.includes != null)
                return false;
        } else if (!includes.equals(other.includes))
            return false;
        return true;
    }

    /**
     * @return the list of excludes
     */
    public List<GavPattern> getExcludes() {
        return excludes;
    }

    /**
     * @return the list of includes
     */
    public List<GavPattern> getIncludes() {
        return includes;
    }

    @Override
    public int hashCode() {
        return hashcode;
    }

    @Override
    public String toString() {
        return "GavSet [excludes=" + excludes + ", includes=" + includes + "]";
    }

}



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * {@link SrcdepsInner} gathers the information passed from an outer build to its inner build.
 * <p>
 * This class and the classes it depends on is supposed to be embedded inside a {@code gradle.settings} script. We
 * maintain it as a Java file inside the main source tree to see compilation issues early.
 *
 * @author <a href="https://github.com/ppalaga">Peter Palaga</a>
 */
public class SrcdepsInner {
    private static final Logger log = LoggerFactory.getLogger(SrcdepsInner.class);

    /** The source version we are building */
    final String version;

    /** The set of artifacts we should build */
    final GavSet gavSet;

    SrcdepsInner() {
        log.debug("srcdeps: initializing " + SrcdepsInner.class.getSimpleName());
        this.version = System.getProperty("srcdeps.inner.version");
        this.gavSet = GavSet.builder() //
                .includes(System.getProperty("srcdeps.inner.includes")) //
                .excludes(System.getProperty("srcdeps.inner.excludes")) //
                .build();
    }
}

def srcdepsInner = new SrcdepsInner()
logger.error("srcdeps: executing custom model transformer")
def name2ArtifactIdMap = [
    mockito: 'mockito-core',
    android: 'mockito-android',
    extTest: 'mockito-extTest',
    inline: 'mockito-inline',
    kotlinTest: 'mockito-kotlinTest',
    testng: 'mockito-testng',
]
gradle.projectsLoaded {

    gradle.rootProject.properties['allprojects'].each {
        it.afterEvaluate { project ->
            def groupId = project.group
            def artifactId = name2ArtifactIdMap.get(project.name)
            def version = project.version

            logger.error("srcdeps: mapped project name ${project.name} to artifactId ${artifactId}")
            logger.error("srcdeps: processing ${groupId}:${artifactId}:${version}")
            def plugins = project.plugins;
            if (srcdepsInner.gavSet.contains(groupId, artifactId, version)) {
                if (!plugins.hasPlugin('maven')) {
                    logger.error("srcdeps: adding maven plugin to ${groupId}:${artifactId}")
                    plugins.apply('maven')
                }
                logger.error("srcdeps: changing version of ${groupId}:${artifactId} from "+ project.version +" to "+ srcdepsInner.version)
                project.version = srcdepsInner.version
            }
        }
    }
}
